{
  "lesson_id": "e952b009-3b5e-4df3-bf02-7c01ad17e5d0",
  "domain": "fundamentals",
  "title": "Bash Scripting for Offensive Automation",
  "subtitle": "Building repeatable helpers for recon and exploitation",
  "difficulty": 3,
  "estimated_time": 65,
  "order_index": 18,
  "prerequisites": [
    "Offensive Tooling Essentials"
  ],
  "concepts": [
    "Argument parsing and safety checks",
    "Error handling and logging",
    "Looping over targets and service lists",
    "Integrating external tools inside scripts",
    "Parallel execution patterns",
    "Templating reports directly from script output",
    "FASTER prompts embedded in script headers"
  ],
  "learning_objectives": [
    "Build robust bash scripts that automate reconnaissance pipelines",
    "Handle edge cases gracefully to avoid re-running scans",
    "Integrate third-party tools into reusable wrappers",
    "Generate lightweight reports straight from scripts",
    "Use script headers to remind yourself of FASTER checkpoints"
  ],
  "content_blocks": [
    {
      "block_id": "bbff9cbc-4f73-476e-85fc-05a0e5e40d46",
      "type": "mindset_coach",
      "title": "FASTER Focus",
      "content": {
        "text": "FASTER your bash automation practice. Forget copy-paste chaos, activate by stretching and taking three deep breaths, visualise a flowchart of your script functions, teach forward by jotting a comment about the lesson intent, enter by running the script against a safe test subnet, and review when your post-run checklist surfaces at the footer."
      },
      "simplified_explanation": "Reset your brain before writing automation that others will rely on.",
      "memory_aids": [
        "Forget → Active → State → Teach → Enter → Review"
      ],
      "real_world_connection": "Security engineers prime their state before automation sessions to avoid destructive bugs.",
      "reflection_prompt": "What small ritual keeps you calm when debugging bash loops?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "052fbbf6-c162-471c-94be-560cc51a62f2",
      "type": "explanation",
      "title": "Key Moves",
      "content": {
        "text": "## Execution Checklist\n- **Validate arguments before starting destructive actions**\n- **Log every command and output for quick review**\n- **Modularise functions for reuse across engagements**\n\nReview this before you write or refactor any script."
      },
      "simplified_explanation": "Keep these guardrails in place so scripts stay reliable.",
      "memory_aids": [
        "Validate → Log → Modularise"
      ],
      "real_world_connection": "Professional operators standardise script checklists to minimise failures mid-engagement.",
      "reflection_prompt": "Which check will save you the most time this week?",
      "is_interactive": false,
      "xp_reward": 10
    },
    {
      "block_id": "2dd15cea-1370-4f08-9ca0-2399c77953d9",
      "type": "video",
      "title": "Offensive Bash Automation Deep Dive",
      "content": {
        "resources": "Watch the walkthrough to anchor the workflow.\n\n**Video**: [Offensive Bash Automation Deep Dive](https://videos.cyberlearn.local/fundamentals/bash_scripting_offense.mp4) — 15 minutes\n\nPause at 09:15 and predict the next error-handling improvement before resuming."
      },
      "simplified_explanation": "Use the walkthrough to see how seasoned operators bulletproof their scripts.",
      "memory_aids": [
        "Pause → Predict → Play"
      ],
      "real_world_connection": "Automation runbooks often start as narrated screencasts shared across teams.",
      "reflection_prompt": "What resilience upgrade will you apply to your current scripts?",
      "is_interactive": false,
      "xp_reward": 10
    },
    {
      "block_id": "822f0107-7cc4-4d2a-a7be-f3dc4e24ba09",
      "type": "simulation",
      "title": "Scenario Lab",
      "content": {
        "text": "### Lab Goal: Automate reconnaissance with resilient bash scripts\n1. Write a script that enumerates open services across a subnet and logs results.\n2. Add error handling to retry hosts that time out and record attempts.\n3. Extend the script to call eyewitness or httpx for identified web services.\n4. Create a markdown summary from the script output and share a teach-back note.\n\nCapture artefacts as you go so the reporting section writes itself."
      },
      "simplified_explanation": "Build the script, harden it, and publish the insights.",
      "memory_aids": [
        "Plan → Execute → Capture"
      ],
      "real_world_connection": "Operators rely on reusable scripts with logging to avoid duplicate scans and wasted time.",
      "reflection_prompt": "Where did your script struggle, and what refactor will you schedule?",
      "is_interactive": true,
      "xp_reward": 25
    },
    {
      "block_id": "9112ad5d-cc32-4530-8e6a-d97ec3e16c36",
      "type": "reflection",
      "title": "Teach-Back Debrief",
      "content": {
        "text": "Teach it back: record a two-minute voice note explaining how you automated reconnaissance.\nAnswer the prompts:\n- What signal told you the automation was working reliably?\n- How will you elevate your state faster during future debugging sessions?\n- Who will you debrief using the code walk-through analogy?"
      },
      "simplified_explanation": "Narrating the automation helps you spot gaps before others do.",
      "memory_aids": [
        "Signal → State → Story"
      ],
      "real_world_connection": "Teams hold code walk-throughs to keep automation auditable and resilient.",
      "reflection_prompt": "Which collaborator should review this debrief for feedback?",
      "is_interactive": false,
      "xp_reward": 5
    }
  ],
  "pre_assessment": null,
  "post_assessment": [
    {
      "question_id": "q1",
      "type": "multiple_choice",
      "question": "Which FASTER element keeps you from copy-pasting command chaos into new scripts?",
      "options": [
        "Active",
        "Teach",
        "Forget",
        "Review"
      ],
      "correct_answer": 2,
      "explanation": "Beginning with Forget wipes stale habits, allowing you to design deliberate automation.",
      "difficulty": 3,
      "memory_aid": "Reset before you rush.",
      "points": 10
    },
    {
      "question_id": "q2",
      "type": "multiple_choice",
      "question": "What is the primary outcome of this lesson's lab?",
      "options": [
        "Copy and paste ad-hoc commands without reuse",
        "Automate reconnaissance with resilient bash scripts",
        "Skip logging to keep scripts short",
        "Documenting unrelated vulnerabilities"
      ],
      "correct_answer": 1,
      "explanation": "The lab pushes you to deliver a durable bash script ready for reuse and reporting.",
      "difficulty": 3,
      "memory_aid": "Know the win condition before you start.",
      "points": 10
    },
    {
      "question_id": "q3",
      "type": "multiple_choice",
      "question": "Which strategy best handles unreliable networks inside scripts?",
      "options": [
        "Ignoring failed hosts and hoping they respond later",
        "Implementing retries with exponential backoff and logging",
        "Running scripts only once per target",
        "Relying on manual pings before each scan"
      ],
      "correct_answer": 1,
      "explanation": "Retries with logging preserve time and capture evidence of unstable targets.",
      "difficulty": 3,
      "memory_aid": "Map each phase to a go-to tool and a backup.",
      "points": 10
    }
  ],
  "mastery_threshold": 80,
  "jim_kwik_principles": [
    "active_learning",
    "minimum_effective_dose",
    "teach_like_im_10",
    "memory_hooks",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "base_xp_reward": 155,
  "badge_unlock": null,
  "is_core_concept": false,
  "created_at": "2025-10-28T19:50:00",
  "updated_at": "2025-10-28T19:50:00",
  "author": "CyberLearn Offensive Curriculum Team",
  "version": "1.0"
}

