{
  "lesson_id": "a1b2c3d4-e5f6-4a1b-2c3d-4e5f6a7b8c9d",
  "domain": "fundamentals",
  "title": "CIA Triad and Core Security Principles",
  "difficulty": 1,
  "order_index": 5,
  "prerequisites": [],
  "concepts": [
    "Confidentiality",
    "Integrity",
    "Availability",
    "Non-repudiation",
    "Defense in Depth",
    "Least Privilege",
    "Security by Design",
    "Zero Trust"
  ],
  "content_blocks": [
    {
      "block_id": "1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d",
      "type": "mindset_coach",
      "content": {
        "text": "The CIA Triad is the foundation of all information security. Every security decision, every control, every defense - they all trace back to protecting Confidentiality, Integrity, and Availability. Master these three concepts and you'll have a mental framework for understanding any security scenario.\n\nHere's why this matters more than any specific tool or technique: Technologies change. Attack methods evolve. But the core security principles remain constant. Whether you're securing a medieval castle or a cloud infrastructure, you're still protecting CIA:\n\n**Confidentiality**: Keep secrets secret (castle: hidden passages / cloud: encryption)\n**Integrity**: Prevent unauthorized changes (castle: guard the gates / cloud: digital signatures)\n**Availability**: Ensure legitimate access (castle: drawbridge for allies / cloud: redundancy and DDoS protection)\n\nMany people memorize CIA as an acronym without truly understanding the implications. Here's the deeper truth: These aren't separate goals - they're often in tension. Maximizing availability might reduce confidentiality (more access points = more attack surface). Maximizing confidentiality might reduce availability (strict access controls = harder to access). Security is about finding the right balance for your specific context.\n\nThink of CIA like a three-legged stool:\n- Remove one leg = stool falls (security fails)\n- Strengthen one leg excessively = imbalance (unusable system)\n- Balance all three = stable security posture\n\nBeyond CIA, you'll learn the core security principles that guide every security professional: Defense in Depth (multiple layers), Least Privilege (minimal necessary access), Zero Trust (never trust, always verify). These principles aren't abstract theory - they're practical decision-making frameworks you'll use daily.\n\nLet's build your security foundation on bedrock principles that will serve you for your entire career."
      },
      "simplified_explanation": "CIA Triad = Three core security goals: Confidentiality (keep secrets), Integrity (prevent tampering), Availability (ensure access). All security controls protect one or more of these. Security principles like Defense in Depth and Least Privilege guide how we implement CIA protection.",
      "memory_aids": [
        "CIA = Confidentiality, Integrity, Availability (not the spy agency!)",
        "Confidentiality = Secrecy, Integrity = Accuracy, Availability = Accessibility",
        "Defense in Depth = Castle with moat, walls, guards, vaults (multiple layers)",
        "Least Privilege = Give only what's needed, nothing more"
      ],
      "teach_like_im_10": "Imagine you have a diary with secrets. CIA means: (C) Only you can read it - keep it locked. (I) Nobody can change what you wrote - detect if pages are torn or modified. (A) You can always access it when you need it - don't lose the key or let it get destroyed. Security is protecting your diary using all three ideas at once."
    },
    {
      "block_id": "2b3c4d5e-6f7a-8b9c-0d1e-2f3a4b5c6d7e",
      "type": "explanation",
      "content": {
        "text": "## The CIA Triad\n\n### Confidentiality: Keeping Secrets Secret\n\n**Definition**: Ensuring that information is accessible only to those authorized to have access.\n\n**Key Concepts**:\n- **Secrecy**: Information not disclosed to unauthorized parties\n- **Privacy**: Personal information protected from unauthorized access\n- **Need-to-know**: Access granted only when necessary for legitimate purpose\n\n**How Confidentiality is Breached**:\n1. **Unauthorized Access**: Attacker gains access to restricted data\n- Examples: Data breach, password theft, SQL injection\n2. **Eavesdropping**: Intercepting communications\n- Examples: Network sniffing, man-in-the-middle attacks\n3. **Social Engineering**: Tricking people into revealing information\n- Examples: Phishing, pretexting, baiting\n4. **Information Leakage**: Unintentional disclosure\n- Examples: Verbose error messages, directory listings, metadata in documents\n\n**Confidentiality Controls**:\n\n**1. Encryption**\n- **At Rest**: Encrypt stored data (disk encryption, database encryption)\n- **In Transit**: Encrypt network communications (TLS/SSL, VPN, SSH)\n- **Example**: HTTPS encrypts web traffic preventing eavesdropping\n\n**2. Access Control**\n- **Authentication**: Verify user identity (passwords, MFA, biometrics)\n- **Authorization**: Grant appropriate permissions (RBAC, ACLs)\n- **Example**: Only HR can access salary database\n\n**3. Data Classification**\n- **Public**: No confidentiality required\n- **Internal**: Company employees only\n- **Confidential**: Specific roles only\n- **Restricted**: Highest sensitivity (trade secrets, personal data)\n- **Example**: Label documents with classification, enforce different controls per level\n\n**4. Physical Security**\n- **Facility Access**: Badge systems, guards, cameras\n- **Equipment Security**: Lock servers, shred documents\n- **Example**: Data center requires biometric authentication\n\n**5. Network Segmentation**\n- Separate sensitive data onto isolated network segments\n- Firewalls control traffic between segments\n- **Example**: Payment processing systems on separate VLAN from general corporate network\n\n**Real-World Confidentiality Breach**:\n**Equifax (2017)**: Attackers exploited vulnerability in web application, accessed 147 million records including SSNs, credit card numbers. Confidentiality completely compromised. Impact: Identity theft, financial fraud, $700M settlement.\n\n### Integrity: Preventing Unauthorized Modification\n\n**Definition**: Ensuring that information is accurate, complete, and has not been tampered with.\n\n**Two Aspects**:\n1. **Data Integrity**: Information hasn't been altered\n2. **System Integrity**: Systems function correctly without unauthorized modification\n\n**How Integrity is Violated**:\n1. **Unauthorized Modification**: Attacker changes data\n- Examples: Defacing website, modifying database records, changing log files\n2. **Malware**: Malicious code alters system files or data\n- Examples: Ransomware encrypting files, rootkit modifying kernel\n3. **Insider Threats**: Authorized user makes unauthorized changes\n- Examples: Disgruntled employee sabotaging data\n4. **Transmission Errors**: Data corrupted during transfer\n- Examples: Network packet corruption, disk errors\n\n**Integrity Controls**:\n\n**1. Hashing**\n- Generate hash (fingerprint) of data\n- Verify hash to detect changes\n- **Example**: Download file, verify SHA-256 hash matches published hash\n\n```bash\n# Generate hash\nsha256sum file.iso\n# Output: 3a5b8c7d... file.iso\n\n# Verify matches published hash\n# If hashes differ = file tampered with or corrupted\n```\n\n**2. Digital Signatures**\n- Use private key to sign data\n- Others verify with public key\n- **Guarantees**: Integrity (not tampered) + Authenticity (from claimed sender)\n- **Example**: Software updates signed by vendor (verify before installing)\n\n**3. Access Controls**\n- Restrict who can modify data\n- Principle of least privilege (minimal necessary permissions)\n- **Example**: Only developers can modify source code, only DBAs can modify production database\n\n**4. Version Control**\n- Track all changes to data/code\n- Audit trail of who changed what and when\n- Ability to revert unauthorized changes\n- **Example**: Git tracks every code change with author, timestamp, description\n\n**5. Write Protection**\n- Make critical data read-only\n- **Example**: Firmware write protection prevents rootkit installation\n\n**6. Input Validation**\n- Verify all input matches expected format\n- Reject malicious input before processing\n- **Example**: Web form validates email address format, rejects SQL injection attempts\n\n**7. Checksums and Error Detection**\n- Detect accidental corruption\n- **Example**: TCP checksums detect network transmission errors\n\n**Real-World Integrity Violation**:\n**Stuxnet (2010)**: Malware modified Siemens PLCs controlling Iranian nuclear centrifuges. Changed centrifuge speeds while reporting normal operation to operators. System integrity completely compromised. Result: Physical destruction of centrifuges.\n\n### Availability: Ensuring Access When Needed\n\n**Definition**: Ensuring that authorized users can access information and resources when needed.\n\n**Key Concepts**:\n- **Uptime**: Percentage of time system is operational (99.9% = 8.7 hours downtime per year)\n- **Reliability**: System consistently performs correctly\n- **Resilience**: System recovers quickly from failures\n- **Scalability**: System handles increasing load\n\n**How Availability is Compromised**:\n1. **Denial of Service (DoS)**: Overwhelm system with requests\n- Examples: DDoS attacks, resource exhaustion\n2. **System Failures**: Hardware/software failures\n- Examples: Disk failure, power outage, software bug\n3. **Ransomware**: Encrypt data, demand payment for decryption\n- Examples: WannaCry, NotPetya encrypting critical systems\n4. **Natural Disasters**: Physical destruction\n- Examples: Fire, flood, earthquake destroying data center\n5. **Intentional Sabotage**: Insider deletes critical data/systems\n\n**Availability Controls**:\n\n**1. Redundancy**\n- Eliminate single points of failure\n- **Examples**:\n- RAID: Multiple disks, survive disk failure\n- Load Balancers: Multiple servers, survive server failure\n- Multiple Data Centers: Survive data center failure\n- Multiple ISPs: Survive network outage\n\n**2. Backups**\n- Regular backups of critical data\n- **3-2-1 Rule**: 3 copies, 2 different media types, 1 offsite\n- **Test Restores**: Verify backups actually work\n- **Example**: Daily incremental backups, weekly full backups, monthly offsite backups\n\n**3. High Availability (HA) Design**\n- Active-Passive: Backup system takes over if primary fails\n- Active-Active: Multiple systems serve requests simultaneously\n- **Example**: Database cluster with automatic failover\n\n**4. DDoS Protection**\n- **Rate Limiting**: Limit requests per IP\n- **Traffic Filtering**: Block malicious traffic patterns\n- **CDN**: Distributed content delivery absorbs attack traffic\n- **Example**: Cloudflare absorbs DDoS attack before reaching origin server\n\n**5. Monitoring and Alerting**\n- Detect failures quickly\n- Alert on-call team immediately\n- **Example**: Prometheus monitors server health, PagerDuty alerts when service down\n\n**6. Disaster Recovery Plan**\n- Documented procedures for recovering from disasters\n- **RTO (Recovery Time Objective)**: Maximum acceptable downtime\n- **RPO (Recovery Point Objective)**: Maximum acceptable data loss\n- **Example**: If data center destroyed, restore from offsite backups within 4 hours (RTO), losing at most 1 hour of data (RPO)\n\n**7. Incident Response**\n- Prepared team and procedures for handling incidents\n- Minimize downtime during attacks\n- **Example**: DDoS playbook: enable rate limiting, failover to backup provider, contact upstream ISP\n\n**8. Capacity Planning**\n- Ensure sufficient resources for peak load\n- **Example**: E-commerce site provisions extra servers for Black Friday traffic\n\n**Real-World Availability Attack**:\n**Dyn DDoS (2016)**: Massive DDoS attack on DNS provider Dyn. Took down Twitter, Netflix, Reddit, GitHub, and hundreds of other sites for hours. Mirai botnet (500,000+ IoT devices) flooded Dyn with 1.2 Tbps traffic. Availability completely destroyed for major internet services.\n\n## CIA Trade-offs\n\nThe three components of CIA are often in tension:\n\n**Confidentiality vs Availability**:\n- **More confidentiality** (strict access controls, encryption) → **Less availability** (harder/slower to access)\n- **More availability** (easy access, caching) → **Less confidentiality** (more exposure)\n- **Example**: Requiring VPN + MFA + approval for database access improves confidentiality but reduces availability\n\n**Integrity vs Availability**:\n- **More integrity** checks (validation, verification) → **Less availability** (slower processing)\n- **More availability** (faster processing) → **Less integrity** (skip validation)\n- **Example**: Requiring code review + automated testing before deployment improves integrity but slows releases\n\n**Balancing CIA**:\nSecurity professionals must balance CIA based on business requirements:\n\n**Scenario 1: Banking System**\n- **Priority**: Integrity > Confidentiality > Availability\n- **Rationale**: Wrong balance = financial loss, regulatory violation\n- **Controls**: Extensive validation, transaction verification, eventual consistency acceptable\n\n**Scenario 2: Social Media Feed**\n- **Priority**: Availability > Confidentiality > Integrity\n- **Rationale**: Users expect instant access; occasional wrong data less critical than downtime\n- **Controls**: Aggressive caching, eventual consistency, relaxed validation\n\n**Scenario 3: Military Communications**\n- **Priority**: Confidentiality > Integrity > Availability\n- **Rationale**: Leaked secrets = catastrophic; prefer system unavailable over compromised\n- **Controls**: Strong encryption, strict access controls, acceptable downtime for security\n\n**Scenario 4: Healthcare Records**\n- **Priority**: Integrity = Confidentiality > Availability\n- **Rationale**: Wrong medical data = patient harm; private data = regulatory requirement\n- **Controls**: Audit trails, access controls, encryption, redundancy for critical systems\n\n## Additional Security Principles\n\n### Non-Repudiation\n\n**Definition**: Ensuring that an action or event cannot be denied by the party responsible.\n\n**Use Cases**:\n- **Legal Contracts**: Digital signatures prevent sender from denying they signed\n- **Financial Transactions**: Audit logs prove transaction occurred\n- **Email**: Sender cannot deny sending email\n\n**Mechanisms**:\n- **Digital Signatures**: Cryptographic proof of origin\n- **Audit Logs**: Immutable record of actions\n- **Timestamps**: Third-party timestamping service proves document existed at specific time\n\n**Example**: E-commerce order signed with customer's private key. Customer cannot later claim they didn't place order (non-repudiation via digital signature).\n\n### Defense in Depth (Layered Security)\n\n**Definition**: Implementing multiple layers of security controls so that if one fails, others still provide protection.\n\n**Concept**: No single control is perfect. Defense in depth assumes breaches will occur and prepares accordingly.\n\n**Layers (Castle Analogy)**:\n1. **Perimeter Defense**: Moat, outer walls (Firewall, IPS)\n2. **Internal Defense**: Inner walls, gates (Network segmentation, internal firewalls)\n3. **Access Control**: Guard checkpoints (Authentication, authorization)\n4. **Data Protection**: Vault, locked chests (Encryption, DLP)\n5. **Monitoring**: Guards patrolling (SIEM, SOC)\n6. **Response**: Armed response team (Incident response)\n\n**Example: Web Application Defense in Depth**:\n```\nLayer 1: DDoS Protection (Cloudflare)\n↓\nLayer 2: Web Application Firewall (ModSecurity)\n↓\nLayer 3: Input Validation (Application code)\n↓\nLayer 4: Parameterized Queries (Prevent SQL injection)\n↓\nLayer 5: Database Permissions (Least privilege)\n↓\nLayer 6: Encryption at Rest (Protect stolen data)\n↓\nLayer 7: Monitoring & Alerting (Detect breaches)\n```\n\nAttacker must breach ALL layers to fully compromise system.\n\n### Principle of Least Privilege\n\n**Definition**: Users/systems should have only the minimum permissions necessary to perform their function.\n\n**Rationale**:\n- Limits damage from compromised accounts\n- Reduces insider threat risk\n- Minimizes accidental damage\n\n**Application**:\n\n**User Accounts**:\n- Don't give admin rights by default\n- Grant specific permissions as needed\n- **Bad**: All developers have production database admin access\n- **Good**: Developers have read-only access; only DBAs can modify production\n\n**Service Accounts**:\n- Web server runs as www-data (limited user), not root\n- Application database account can only access its own database\n- **Bad**: Web app connects to database as root (full access)\n- **Good**: Web app uses dedicated user with access only to necessary tables\n\n**Network Access**:\n- Default deny all, explicitly allow necessary traffic\n- **Bad**: Internal network fully accessible from everywhere\n- **Good**: Firewall rules allow only specific services from specific sources\n\n**Example Scenario**:\n```\nBad: Marketing intern account has:\n- Admin access to entire network\n- Access to all company databases\n- Ability to install software\nResult: Intern account compromised → attacker has full access\n\nGood: Marketing intern account has:\n- Access to marketing shared drive only\n- Access to marketing software only\n- No admin rights\nResult: Intern account compromised → attacker limited to marketing data\n```bash\n\n### Separation of Duties\n\n**Definition**: Critical tasks divided among multiple people so no single person can compromise security.\n\n**Example: Financial System**:\n- **Person A**: Creates purchase orders\n- **Person B**: Approves purchase orders\n- **Person C**: Processes payments\n\nNo single person can embezzle (requires collusion of multiple people).\n\n**Example: Code Deployment**:\n- **Developer**: Writes code\n- **Reviewer**: Reviews code for security issues\n- **Ops**: Deploys code to production\n\nNo developer can deploy malicious code alone (requires review).\n\n### Fail Securely (Fail Closed)\n\n**Definition**: When systems fail, they should default to a secure state.\n\n**Examples**:\n\n**Fail Closed (Secure)**:\n- Firewall loses power → Blocks all traffic (secure default)\n- Authentication service down → Deny all logins (secure default)\n- Database error → Don't return error details to user (prevent information leakage)\n\n**Fail Open (Insecure)**:\n- Firewall loses power → Allows all traffic (convenient but insecure)\n- Authentication service down → Allow all logins (convenient but insecure)\n\n**Trade-off**: Fail closed is more secure but less available. Choose based on risk tolerance.\n\n### Security by Design (Shift Left)\n\n**Definition**: Build security into systems from the beginning, not bolted on afterward.\n\n**Traditional Approach (Security Afterward)**:\n1. Develop application\n2. Launch to production\n3. Get hacked\n4. Add security patches\n5. Repeat\n\n**Security by Design Approach**:\n1. Define security requirements alongside functional requirements\n2. Threat modeling during design phase\n3. Secure coding practices during development\n4. Security testing during QA\n5. Security monitoring in production\n6. Incident response plan ready before launch\n\n**Benefits**:\n- Cheaper (fixing vulnerabilities in design is 10-100x cheaper than in production)\n- More effective (fundamental security vs bandaid fixes)\n- Better user experience (security integrated smoothly)\n\n**Example: Password Reset Feature**\n\n**Without Security by Design**:\n- Reset link emailed without expiration → Can be used indefinitely\n- No rate limiting → Can be brute forced\n- Verbose error messages → Reveals if email exists in system\n\n**With Security by Design**:\n- Reset link expires in 15 minutes\n- Rate limiting (5 attempts per hour)\n- Generic error message (doesn't reveal if email exists)\n- Email contains only token (no PII in URL)\n- Requires current password or answers security questions\n\n### Zero Trust (Never Trust, Always Verify)\n\n**Definition**: Assume breach has already occurred. Never trust, always verify every access request.\n\n**Traditional Security Model (Castle and Moat)**:\n- **Perimeter**: Hard outer shell (firewall)\n- **Inside**: Trusted (minimal security)\n- **Problem**: Once attacker breaches perimeter, free reign inside\n\n**Zero Trust Model**:\n- **No trusted zones**: Verify every access request regardless of source\n- **Micro-segmentation**: Isolate workloads, require authentication between them\n- **Least privilege**: Minimum necessary access per request\n- **Continuous verification**: Re-verify throughout session\n\n**Implementation**:\n\n**1. Identity-Centric Security**\n- Verify identity for every access (not network location)\n- **Example**: Employee at HQ → Still requires authentication to access finance system\n\n**2. Device Trust**\n- Verify device health before granting access\n- **Example**: Only updated, managed devices with AV can access corporate resources\n\n**3. Micro-Segmentation**\n- Isolate workloads, firewall between everything\n- **Example**: Marketing servers can't communicate with finance servers directly\n\n**4. Least Privilege Access**\n- Grant minimal access for specific task\n- **Example**: Access to read specific database table for 1 hour, then expires\n\n**Real-World Zero Trust Success**:\n**Google BeyondCorp**: After targeted attack (Operation Aurora, 2009), Google adopted zero trust. Employees access corporate apps from anywhere (coffee shop, home) with same security as corporate network. No VPN required. Every request authenticated and authorized regardless of network location.\n\n## Applying Security Principles\n\n### Scenario 1: Securing a Web Application\n\n**Requirements**: E-commerce site handling credit cards\n\n**CIA Analysis**:\n- **Confidentiality**: HIGH (credit card data, customer PII)\n- **Integrity**: HIGH (wrong prices, orders = financial loss)\n- **Availability**: MEDIUM-HIGH (downtime = lost revenue, but not life-threatening)\n\n**Controls Applied**:\n\n**Confidentiality**:\n- TLS encryption for all traffic (in transit)\n- Database encryption (at rest)\n- Tokenization for credit cards (don't store actual numbers)\n- Access control (only authorized admins access customer data)\n- Data classification (PII marked as confidential)\n\n**Integrity**:\n- Input validation (reject SQL injection, XSS)\n- Parameterized queries (prevent injection)\n- Digital signatures for critical transactions\n- Audit logging (track all changes)\n- Code review + automated testing (prevent bugs)\n\n**Availability**:\n- Load balancer (distribute traffic, survive server failure)\n- Database replication (survive database failure)\n- DDoS protection (Cloudflare)\n- Automated backups (daily full, hourly incremental)\n- Monitoring and alerting (detect downtime immediately)\n\n**Principles Applied**:\n- **Defense in Depth**: WAF → Input validation → Parameterized queries → DB permissions → Encryption → Logging\n- **Least Privilege**: App database account can only read/write its tables, not drop tables\n- **Fail Securely**: If payment gateway down, reject orders (don't process without payment)\n- **Security by Design**: Threat model identified credit card theft, implemented tokenization from day 1\n\n### Scenario 2: Securing Corporate Network\n\n**Requirements**: 500-person company, remote workers, BYOD\n\n**CIA Analysis**:\n- **Confidentiality**: HIGH (trade secrets, customer data)\n- **Integrity**: MEDIUM (important but not financial transactions)\n- **Availability**: MEDIUM (downtime inconvenient but not catastrophic)\n\n**Controls Applied**:\n\n**Confidentiality**:\n- VPN for remote access (encrypted tunnel)\n- Full disk encryption on all laptops (protect stolen laptops)\n- DLP (Data Loss Prevention) blocks emailing confidential docs to personal accounts\n- Network segmentation (finance network isolated from general corporate)\n- Least privilege (users access only what they need)\n\n**Integrity**:\n- Patch management (prevent malware via vulnerabilities)\n- Endpoint protection (antivirus, anti-malware)\n- Application whitelisting (only approved apps can run)\n- Git for code (track all changes, can revert)\n\n**Availability**:\n- Redundant internet connections (survive ISP outage)\n- Email hosted by provider with SLA (Microsoft 365: 99.9% uptime)\n- Local backup plus cloud backup (survive office fire)\n\n**Principles Applied**:\n- **Zero Trust**: VPN required even for office employees to access sensitive systems\n- **Defense in Depth**: Firewall → IPS → Endpoint protection → Application whitelisting → Monitoring\n- **Least Privilege**: Finance data accessible only from finance VLAN\n- **Separation of Duties**: Developers can't deploy to production without approval\n\n## Common Misconceptions\n\n**Misconception 1: \"Security = Confidentiality\"**\n- **Reality**: Security = CIA (all three). Integrity and Availability are equally important.\n- **Example**: Ransomware doesn't steal data (confidentiality intact), but encrypts it (availability destroyed, integrity violated)\n\n**Misconception 2: \"100% Security is Achievable\"**\n- **Reality**: Security is risk management, not risk elimination. Perfect security doesn't exist.\n- **Goal**: Reduce risk to acceptable level given resources and impact\n\n**Misconception 3: \"Security is Binary (Secure or Insecure)\"**\n- **Reality**: Security is a spectrum. Systems have varying levels of security.\n- **Approach**: Continuous improvement, defense in depth\n\n**Misconception 4: \"Compliance = Security\"**\n- **Reality**: Compliance is minimum bar, not comprehensive security\n- **Example**: PCI DSS compliance doesn't prevent all breaches (Target was PCI compliant when breached)\n\n**Misconception 5: \"Attackers Always Use Advanced Techniques\"**\n- **Reality**: Most breaches use basic techniques (unpatched systems, weak passwords, phishing)\n- **Focus**: Master fundamentals (patching, strong auth, awareness training) before exotic defenses\n\n## Key Takeaways\n\n1. **CIA Triad** = Confidentiality (secrecy), Integrity (accuracy), Availability (accessibility)\n2. **All security controls protect CIA** - Ask: Which component of CIA does this protect?\n3. **CIA components often conflict** - Balance based on business requirements, not absolute\n4. **Defense in Depth** = Multiple layers so single failure doesn't compromise security\n5. **Least Privilege** = Minimum necessary permissions reduces blast radius\n6. **Fail Securely** = Default to secure state when systems fail\n7. **Security by Design** = Build security in from start, not bolted on after\n8. **Zero Trust** = Never trust, always verify (assume breach already occurred)\n9. **Non-Repudiation** = Can't deny action occurred (digital signatures, audit logs)\n10. **Security is risk management** - Not elimination of all risk, but reduction to acceptable level\n\nThese principles are your mental framework for every security decision. When evaluating any control, ask:\n- Which CIA component does it protect?\n- Does it follow defense in depth?\n- Does it implement least privilege?\n- Will it fail securely?\n- Is it part of design or bolted on?\n\nMaster these fundamentals and you'll have the foundation for advanced security work."
      },
      "ascii_art": "CIA TRIAD\n\n        CONFIDENTIALITY\n              /\\\n             /  \\\n            /    \\\n           /      \\\n          /        \\\n         /  SECURITY \\\n        /    GOAL     \\\n       /______________\\\n      /                \\\n     /                  \\\n    /                    \\\nINTEGRITY ----------- AVAILABILITY\n\nDEFENSE IN DEPTH (CASTLE MODEL)\n\n    [PUBLIC INTERNET]\n          ↓\n    ═══════════════\n    ║   FIREWALL  ║  ← Layer 1: Perimeter\n    ═══════════════\n          ↓\n    ┌─────────────┐\n    │     IPS     │  ← Layer 2: Intrusion Prevention\n    └─────────────┘\n          ↓\n    ┌─────────────┐\n    │ LOAD BALANCER│ ← Layer 3: Traffic Distribution\n    └─────────────┘\n          ↓\n    ┌─────────────┐\n    │  WEB SERVER │  ← Layer 4: Application\n    │  (WAF)      │     (with WAF protection)\n    └─────────────┘\n          ↓\n    ┌─────────────┐\n    │ APP SERVER  │  ← Layer 5: Business Logic\n    │ (Validation)│     (Input validation)\n    └─────────────┘\n          ↓\n    ┌─────────────┐\n    │  DATABASE   │  ← Layer 6: Data Storage\n    │ (Encrypted) │     (Encrypted at rest)\n    └─────────────┘\n          ↓\n    ┌─────────────┐\n    │   LOGGING   │  ← Layer 7: Monitoring\n    │  & ALERTING │\n    └─────────────┘\n\nAttacker must breach ALL layers\n\nZERO TRUST MODEL\n\nTraditional (Castle & Moat):\n  ┌─────────────────────────────┐\n  │      TRUSTED ZONE           │\n  │  ┌────┐ ┌────┐ ┌────┐      │\n  │  │App1│ │App2│ │App3│      │\n  │  └────┘ └────┘ └────┘      │\n  │   (No internal checks)      │\n  └─────────────────────────────┘\n         ▲\n    ══════════\n    ║FIREWALL║ (Hard shell, soft interior)\n    ══════════\n\nZero Trust (Micro-Segmentation):\n  ┌─────┐    ┌─────┐    ┌─────┐\n  │ App1│    │ App2│    │ App3│\n  │ ║║║ │    │ ║║║ │    │ ║║║ │\n  └──║──┘    └──║──┘    └──║──┘\n     ║           ║           ║\n     ╚═══[Auth]══╬═══[Auth]═╝\n                 ║\n            [Verify Every Access]\n\nEverything authenticated, even internal",
      "examples": [
        {
          "scenario": "Target Data Breach (2013) - CIA Failure",
          "explanation": "Attackers compromised HVAC vendor's credentials, gained access to Target's network. Moved laterally to POS systems, installed malware stealing 40 million credit cards. **Confidentiality**: FAILED (massive data theft). **Integrity**: FAILED (malware installed on POS). **Availability**: Maintained (systems kept running to avoid detection). Failures: No network segmentation (HVAC vendor could access payment systems), insufficient monitoring (malware went undetected for weeks), violated least privilege (vendor had excessive access). Cost: $202M in damages, CEO resigned."
        },
        {
          "scenario": "GitLab Database Incident (2017) - Availability Focus",
          "explanation": "GitLab engineer accidentally deleted production database while troubleshooting. **Availability**: FAILED (18 hours of downtime). **Confidentiality**: Maintained (no data stolen). **Integrity**: PARTIALLY FAILED (6 hours of user data lost). Root cause: Backup failures (5 different backup methods ALL failed). Defense in depth violated (all backup layers failed simultaneously). Recovery: Restored from delayed replication, lost data between last backup and incident. Lessons: Test your backups, defense in depth requires INDEPENDENT layers."
        },
        {
          "scenario": "SolarWinds Supply Chain Attack (2020) - Integrity Compromise",
          "explanation": "Russian APT compromised SolarWinds build system, injected backdoor into Orion software updates. 18,000+ customers installed trojanized update. **Integrity**: CATASTROPHICALLY FAILED (trusted software secretly malicious). **Confidentiality**: FAILED (attackers accessed customer networks). **Availability**: Maintained (to avoid detection). Attack succeeded because: Software not properly signed/verified, customers trusted vendor implicitly (violated zero trust), no defense in depth (single layer: trust vendor). Lesson: Verify integrity even of trusted sources (zero trust), code signing and verification critical."
        }
      ]
    },
    {
      "type": "video",
      "content": {
        "title": "Video: CIA Triad and Core Security Principles Overview",
        "url": "https://www.youtube.com/embed/AJTJN4wDBM8",
        "description": "Watch this video for a visual introduction to the concepts covered in this lesson."
      }
    },
    {
      "block_id": "3c4d5e6f-7a8b-9c0d-1e2f-3a4b5c6d7e8f",
      "type": "quiz",
      "content": {
        "text": "Test your understanding of CIA Triad and security principles",
        "questions": [
          {
            "question": "A ransomware attack encrypts all company files, demanding payment for decryption. Which CIA component is PRIMARILY violated?",
            "options": [
              "Confidentiality (data stolen)",
              "Integrity (data modified)",
              "Availability (data inaccessible)",
              "Non-repudiation (can't prove who did it)"
            ],
            "correct_answer": 2,
            "explanation": "Ransomware primarily violates Availability - legitimate users cannot access their own data (encrypted and inaccessible). While encryption modifies data (integrity), the primary goal and impact is denial of access. Some ransomware variants also steal data (confidentiality), but classic ransomware is an availability attack. This is why backups (availability control) are the best defense."
          },
          {
            "question": "Your web application validates input in JavaScript on the client side. Why is this insufficient from a security perspective?",
            "options": [
              "JavaScript is too slow for validation",
              "Attackers can bypass client-side validation by manipulating requests directly, violating Defense in Depth principle",
              "JavaScript is insecure by design",
              "Clients don't trust JavaScript"
            ],
            "correct_answer": 1,
            "explanation": "Client-side validation can be completely bypassed by attackers using tools like Burp Suite to manipulate HTTP requests directly, skipping the browser entirely. Defense in Depth requires validation at BOTH client (user experience) AND server (security). Relying solely on client-side validation violates Defense in Depth - if one layer fails, no backup protection exists. Always validate on server."
          },
          {
            "question": "A junior developer is given full administrator access to production database 'just in case they need it.' Which principle is violated?",
            "options": [
              "Confidentiality",
              "Least Privilege",
              "Non-repudiation",
              "Availability"
            ],
            "correct_answer": 1,
            "explanation": "This violates Least Privilege - users should have only the minimum permissions necessary for their role. A junior developer rarely needs admin access to production. This excessive access: (1) Increases risk if account compromised, (2) Enables accidental damage, (3) Enables insider threats. Correct approach: Grant read-only access by default, temporary elevated access only when specifically needed with approval and audit logging."
          },
          {
            "question": "Which scenario best demonstrates the Zero Trust model?",
            "options": [
              "Employees inside office network have unrestricted access to all internal systems",
              "VPN users authenticate once at connection, then access everything without further verification",
              "Every access request requires authentication and authorization regardless of network location or previous access",
              "Firewall blocks external traffic but allows all internal traffic"
            ],
            "correct_answer": 2,
            "explanation": "Zero Trust means never trust, always verify - every access request requires authentication/authorization regardless of location (inside network, VPN connected, etc.). Traditional models trust users once they're 'inside' the perimeter. Zero Trust assumes breach has occurred and verifies continuously. Even an employee at HQ must authenticate for each system/resource accessed."
          },
          {
            "question": "Your authentication system fails. Following 'Fail Securely' principle, what should happen?",
            "options": [
              "Allow all logins to maintain availability",
              "Deny all logins until system recovers",
              "Use cached credentials from yesterday",
              "Switch to weak password requirements temporarily"
            ],
            "correct_answer": 1,
            "explanation": "Fail Securely (Fail Closed) means defaulting to the secure state when systems fail. Since we cannot verify identity when auth system is down, secure default is DENY all access. While this reduces availability, it maintains security (prevents unauthorized access). Fail Open (allowing access) would maintain availability but sacrifice security - acceptable only for low-risk systems. For authentication, security must take priority over availability."
          }
        ]
      }
    },
    {
      "block_id": "4d5e6f7a-8b9c-0d1e-2f3a-4b5c6d7e8f9a",
      "type": "reflection",
      "content": {
        "text": "## Reflect on Security Principles\n\n**Question 1**: You're designing a new online banking application. Analyze the CIA requirements:\n- Which CIA component is MOST critical and why?\n- Where might CIA components conflict?\n- What specific controls would you implement for each component?\n- How would you balance the trade-offs?\n\n**Question 2**: Evaluate your organization's (or a hypothetical company's) security posture:\n- Does it implement Defense in Depth? How many layers?\n- Does it follow Least Privilege? Any examples of excessive permissions?\n- Does it Fail Securely? What happens when systems fail?\n- What improvements would you recommend?\n\n**Question 3**: Consider these two approaches to securing a web application:\n\n**Approach A**: Strong perimeter firewall, no internal controls\n**Approach B**: Moderate firewall, input validation, least privilege DB access, encrypted storage, logging\n\nWhich aligns better with security principles? Why? What happens when the perimeter is breached in each scenario?\n\n**Question 4**: You discover that:\n- All employees have admin access to their laptops\n- Developers can deploy to production without review\n- Sensitive database backups stored unencrypted on shared network drive\n- No audit logging on critical systems\n\nFor EACH issue:\n- Which security principle is violated?\n- What is the risk?\n- What control would you implement?\n\n**Question 5**: Design a Zero Trust architecture for a company with:\n- 200 employees\n- 50% remote workers\n- Cloud applications (Office 365, Salesforce, AWS)\n- On-premise finance system with sensitive data\n\nConsider:\n- How do users authenticate?\n- How do you verify device health?\n- How do you segment workloads?\n- How do you enforce least privilege?\n- How do you monitor and detect anomalies?\n\nThink through the principles, don't just list tools. Understanding WHY is more important than WHAT."
      }
    }
  ],
  "estimated_time": 45,
  "learning_objectives": [
    "Define and explain the CIA Triad: Confidentiality, Integrity, Availability",
    "Identify how specific security controls protect each CIA component",
    "Analyze CIA trade-offs and balance security requirements based on business context",
    "Apply core security principles: Defense in Depth, Least Privilege, Fail Securely",
    "Understand Zero Trust architecture and its advantages over perimeter-based security",
    "Recognize real-world CIA failures and extract lessons from major breaches",
    "Design security controls that implement multiple principles simultaneously"
  ],
  "post_assessment": [
    {
      "question": "What does the CIA Triad stand for in information security?",
      "type": "multiple_choice",
      "options": [
        "Central Intelligence Agency security model",
        "Confidentiality, Integrity, Availability",
        "Cryptography, Identity, Authentication",
        "Compliance, Investigation, Audit"
      ],
      "correct_answer": "Confidentiality, Integrity, Availability",
      "explanation": "The CIA Triad represents the three core goals of information security: Confidentiality (keep secrets secret), Integrity (prevent unauthorized changes), and Availability (ensure access when needed). All security controls are designed to protect one or more of these three components. Not related to the spy agency!",
      "question_id": "d1a0b600-35a9-4cc4-abb7-c8b8f89d6175",
      "difficulty": 1
    },
    {
      "question": "What is the primary goal of Defense in Depth?",
      "type": "multiple_choice",
      "options": [
        "Make systems impenetrable",
        "Provide multiple layers of security so failure of one layer doesn't compromise the entire system",
        "Make security more complex to confuse attackers",
        "Reduce costs by consolidating security controls"
      ],
      "correct_answer": "Provide multiple layers of security so failure of one layer doesn't compromise the entire system",
      "explanation": "Defense in Depth implements multiple independent layers of security controls. If one layer is breached (firewall bypassed, for example), other layers (input validation, least privilege database access, encryption) still provide protection. No single control is perfect, so layered approach reduces risk. It's not about making systems impenetrable (impossible) or confusing attackers (security through obscurity doesn't work).",
      "question_id": "52540fba-4bcd-4d1a-a6b6-e190773dba34",
      "difficulty": 1
    },
    {
      "question": "How does Zero Trust differ from traditional perimeter-based security?",
      "type": "multiple_choice",
      "options": [
        "Zero Trust trusts no one, traditional security trusts everyone",
        "Zero Trust verifies every access request regardless of location, traditional security trusts users once inside the perimeter",
        "Zero Trust has no firewall, traditional security uses firewalls",
        "Zero Trust is cloud-only, traditional security is on-premise only"
      ],
      "correct_answer": "Zero Trust verifies every access request regardless of location, traditional security trusts users once inside the perimeter",
      "explanation": "Traditional security uses 'castle and moat' model - hard perimeter (firewall), soft interior (trust once inside). Zero Trust assumes breach has occurred and verifies every access request regardless of network location. Employee at headquarters still must authenticate to access finance system. Zero Trust still uses firewalls (as one layer), but doesn't rely solely on perimeter. Works for cloud and on-premise.",
      "question_id": "1e16444a-838c-43d9-8c2c-8bdf19da08d1",
      "difficulty": 1
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "meta_learning",
    "minimum_effective_dose",
    "teach_like_im_10",
    "memory_hooks",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ]
}