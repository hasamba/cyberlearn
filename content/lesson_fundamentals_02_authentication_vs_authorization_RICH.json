{
  "lesson_id": "7333ad37-a513-4598-a23b-9729e3114bae",
  "domain": "fundamentals",
  "title": "Authentication vs Authorization",
  "subtitle": "Understanding WHO you are vs WHAT you can do",
  "difficulty": 1,
  "estimated_time": 25,
  "order_index": 2,
  "prerequisites": [],
  "learning_objectives": [
    "Define authentication and explain its purpose",
    "Define authorization and explain its purpose",
    "Distinguish between authentication and authorization",
    "Identify authentication and authorization in real-world systems",
    "Understand the AAA model (Authentication, Authorization, Accounting)"
  ],
  "concepts": [
    "Authentication",
    "Authorization",
    "AAA Model",
    "Access Control",
    "Identity Verification",
    "Permissions"
  ],
  "content_blocks": [
    {
      "block_id": "e5b2558c-786c-4baa-852b-6711539d6230",
      "type": "mindset_coach",
      "title": "Why This Matters",
      "content": {
        "text": "Authentication and Authorization are THE most fundamental concepts in all of security. Every login, every permission check, every access control decision uses these concepts. Master this, and you'll understand how security works everywhere - from your phone to the Pentagon."
      },
      "simplified_explanation": "If security had a 'Table of Elements', Authentication and Authorization would be like Hydrogen and Oxygen - absolutely fundamental building blocks.",
      "memory_aids": [
        "This is used in EVERY system you'll ever secure",
        "Confused about auth? You're not alone - even experienced people mix these up!"
      ],
      "real_world_connection": "Every time you log into anything (email, bank, social media), authentication verifies WHO you are. Then authorization determines WHAT you can do (read emails, transfer money, post updates).",
      "reflection_prompt": "Think about logging into your bank account. What proves WHO you are? What determines WHAT you can do?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "cdf41a9b-ca6c-45fd-bcf1-e0a1f78d35f9",
      "type": "explanation",
      "title": "The Quick Answer",
      "content": {
        "text": "**Authentication = WHO are you?**\n**Authorization = WHAT can you do?**\n\nThat's it. Everything else is details.\n\n**Authentication** proves your identity:\n- Username + password\n- Fingerprint scan\n- Security token\n- Face ID\n\n**Authorization** determines your permissions:\n- Can you read this file?\n- Can you delete that database?\n- Can you access the admin panel?\n- Can you transfer $10,000?\n\nAuthentication always happens FIRST. You can't authorize someone until you know WHO they are."
      },
      "simplified_explanation": "Think of going to a concert:\n\nðŸŽ« **Authentication** = Showing your ID at the door (proving WHO you are)\nðŸšª **Authorization** = Your ticket determines WHAT areas you can access (VIP, general admission, backstage)\n\nThe bouncer authenticates you with your ID, then your ticket authorizes which sections you can enter.",
      "memory_aids": [
        "Authentication = Identity (WHO)",
        "Authorization = Permissions (WHAT)",
        "Mnemonic: 'AuthentiCATION checks iDentifiCATION'",
        "Mnemonic: 'AuthoriZATION grants permisSION'"
      ],
      "real_world_connection": "Your driver's license authenticates you (proves who you are). Your age (on that license) authorizes you to buy alcohol (permission based on identity).",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "71e836e4-b6d5-4f52-a367-602d849c4295",
      "type": "explanation",
      "title": "Authentication: Proving Identity",
      "content": {
        "text": "**Authentication** is the process of verifying that someone or something is WHO they claim to be.\n\n## Three Factors of Authentication\n\nAuthentication methods fall into three categories:\n\n### 1. Something You KNOW (Knowledge)\n- Passwords\n- PINs\n- Security questions\n- Passphrases\n\n**Weakness**: Can be forgotten, guessed, or stolen\n\n### 2. Something You HAVE (Possession)\n- Security tokens (RSA SecurID)\n- Smart cards\n- Mobile phones (for SMS codes)\n- Hardware keys (YubiKey)\n\n**Weakness**: Can be lost, stolen, or borrowed\n\n### 3. Something You ARE (Inherence)\n- Fingerprints\n- Face recognition\n- Iris scans\n- Voice recognition\n\n**Weakness**: Can't be changed if compromised, privacy concerns\n\n## Multi-Factor Authentication (MFA)\n\nUsing TWO OR MORE factors together:\n- Password (KNOW) + SMS code (HAVE) = 2FA\n- Password (KNOW) + Fingerprint (ARE) = 2FA\n- PIN (KNOW) + Smart card (HAVE) + Fingerprint (ARE) = 3FA\n\n**Why MFA is powerful**: An attacker must compromise multiple factors. Stealing your password isn't enough if they also need your phone."
      },
      "simplified_explanation": "Authentication is like proving you're really you:\n\n- **Something you KNOW**: Like your secret handshake with a friend\n- **Something you HAVE**: Like showing your student ID card\n- **Something you ARE**: Like your friend recognizing your voice\n\nUsing two or more together (MFA) is like needing BOTH the ID card AND the secret handshake - much harder to fake!",
      "memory_aids": [
        "Three factors: KNOW, HAVE, ARE",
        "MFA = Multiple Factors of Authentication = 2+ factors",
        "Remember: 'Something you know, have, or are'",
        "2FA is like a door with TWO locks - attacker needs TWO keys"
      ],
      "real_world_connection": "Your bank's mobile app uses MFA: You type your password (KNOW), then it sends a code to your phone (HAVE). Even if someone steals your password, they can't log in without physically having your phone.",
      "reflection_prompt": "What authentication factors do you use daily? How many of your accounts use MFA?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "fc563dce-9b4f-4485-a4fe-abdf9566034a",
      "type": "explanation",
      "title": "Authorization: Granting Permissions",
      "content": {
        "text": "**Authorization** is the process of determining WHAT an authenticated user is allowed to do.\n\n## Common Authorization Models\n\n### 1. Discretionary Access Control (DAC)\n- **Owner controls access**: File owner decides who can read/write\n- **Example**: Your personal files on your computer\n- **Weakness**: Users can accidentally grant too much access\n\n### 2. Mandatory Access Control (MAC)\n- **System enforces access**: Admin sets rules, users can't override\n- **Example**: Military classified systems (Top Secret, Secret, Confidential)\n- **Strength**: Very secure, but inflexible\n\n### 3. Role-Based Access Control (RBAC)\n- **Permissions tied to roles**: Users inherit permissions from their role\n- **Example**: 'Admin' role can do everything, 'User' role is limited\n- **Most common in businesses**: Easier to manage than individual permissions\n\n### 4. Attribute-Based Access Control (ABAC)\n- **Dynamic rules based on attributes**: Time, location, device, user attributes\n- **Example**: 'Allow if user is Manager AND accessing from office network AND during business hours'\n- **Most flexible but complex**\n\n## Permission Levels\n\nTypical permissions for files/resources:\n- **Read (R)**: View contents\n- **Write (W)**: Modify contents\n- **Execute (X)**: Run programs, access directories\n- **Delete (D)**: Remove files\n- **Full Control**: All permissions\n\n## Principle of Least Privilege\n\n**Critical Security Concept**: Users should have the MINIMUM permissions needed to do their job.\n\n**Bad**: Giving everyone Admin rights 'just in case'\n**Good**: Regular users have standard access; only IT has Admin rights\n\n**Why it matters**: If an attacker compromises a low-privilege account, damage is limited. Compromise an Admin account = full network control."
      },
      "simplified_explanation": "Authorization is like access levels in a video game:\n\n- **Level 1 Player** (Standard User): Can play the game, save progress\n- **Level 50 Player** (Power User): Can access special weapons, bonus levels\n- **Game Master** (Admin): Can modify game rules, teleport anywhere, access everything\n\nEveryone proves WHO they are (authentication) when logging in. Then the game checks their level to see WHAT they can do (authorization).",
      "memory_aids": [
        "Authorization = Access control",
        "RBAC = Role-Based = Permissions come from your role/job title",
        "Least Privilege = Minimum necessary permissions",
        "Think: 'Need-to-know basis' in spy movies"
      ],
      "real_world_connection": "In Google Docs, you can share a document with 'View only' (Read), 'Comment' (Read + Comment), or 'Edit' (Read + Write) permissions. You control authorization - WHAT each person can do with your document.",
      "reflection_prompt": "Think about your work or school. What would happen if everyone had Admin rights to everything? Why is least privilege important?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "7d2a55f1-cb9e-464a-b758-4c8dcd957f2a",
      "type": "explanation",
      "title": "The AAA Model",
      "content": {
        "text": "In security, we often talk about the **AAA model**:\n\n### 1. Authentication\n**WHO are you?**\nVerify identity before allowing access.\n\n### 2. Authorization\n**WHAT can you do?**\nDetermine permissions based on identity.\n\n### 3. Accounting (Auditing)\n**WHAT did you do?**\nTrack and log user activities.\n\n## Why Accounting Matters\n\nAccounting (logging) is critical for:\n- **Audit trails**: Investigating security incidents\n- **Compliance**: Meeting regulatory requirements (HIPAA, SOX, PCI DSS)\n- **Non-repudiation**: Proving who performed an action (they can't deny it)\n- **Anomaly detection**: Spotting unusual behavior patterns\n\n**Example Logs**:\n- User 'john.doe' logged in at 2:45 AM from IP 192.168.1.50 (suspicious time?)\n- User 'admin' deleted database 'customers' at 3:00 PM (authorized?)\n- Failed login attempts for 'root' - 50 attempts in 1 minute (brute force attack!)\n\n## The Complete Flow\n\n```\n1. User attempts access\n   â†“\n2. AUTHENTICATION: Verify identity (username/password)\n   â†“\n3. AUTHORIZATION: Check permissions (what can they access?)\n   â†“\n4. Grant or deny access\n   â†“\n5. ACCOUNTING: Log the action (who did what when)\n```"
      },
      "simplified_explanation": "Think of AAA like a hotel:\n\n1. **Authentication**: Check ID at front desk (WHO are you?)\n2. **Authorization**: Room key only opens YOUR room (WHAT can you access?)\n3. **Accounting**: Hotel logs when you use your key (WHAT did you do?)\n\nIf something goes wrong (theft, damage), the hotel reviews logs to see who accessed which rooms when.",
      "memory_aids": [
        "AAA = Authentication, Authorization, Accounting",
        "AAA = WHO, WHAT, WHEN",
        "Think: 'Triple-A' like AAA batteries - powers security!",
        "Accounting = Audit trail = 'Security camera footage' for digital actions"
      ],
      "real_world_connection": "When you swipe your badge at work, three things happen: 1) Badge reader authenticates you (is this a valid badge?), 2) System checks authorization (is this person allowed in this room?), 3) System logs the event (John Doe entered Server Room at 14:35). This is AAA in action.",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "ddd0c118-6492-483a-b488-9069608d732c",
      "type": "explanation",
      "title": "Common Mistakes & Attacks",
      "content": {
        "text": "## Authentication Attacks\n\n### Brute Force\n- **Attack**: Try every possible password until one works\n- **Defense**: Account lockout after X failed attempts, CAPTCHA, rate limiting\n\n### Credential Stuffing\n- **Attack**: Use stolen passwords from one site to attack other sites (people reuse passwords!)\n- **Defense**: MFA, password breach monitoring, unique passwords\n\n### Phishing\n- **Attack**: Trick users into revealing passwords (fake login pages)\n- **Defense**: User training, email filtering, MFA\n\n### Session Hijacking\n- **Attack**: Steal authentication tokens/cookies after user logs in\n- **Defense**: Encryption (HTTPS), secure cookies, session timeouts\n\n## Authorization Attacks\n\n### Privilege Escalation\n- **Attack**: Gain higher privileges than assigned (standard user â†’ admin)\n- **Defense**: Least privilege, input validation, secure coding\n\n### Insecure Direct Object Reference (IDOR)\n- **Attack**: Change URL parameters to access unauthorized resources\n- **Example**: Change `/profile?user=123` to `/profile?user=124` to view other users\n- **Defense**: Verify authorization for EVERY request, don't trust user input\n\n### Broken Access Control\n- **Attack**: Application fails to enforce authorization properly\n- **Example**: Admin panel accessible without admin check\n- **Defense**: Always verify authorization server-side, not just client-side\n\n## Confused Deputy Problem\n\nWhen a system with high privileges is tricked into performing actions on behalf of a low-privilege user:\n\n**Example**: Web application runs as 'root' and doesn't properly check user permissions. Attacker exploits this to perform admin actions through the app.\n\n**Solution**: Applications should drop privileges, validate every action, never blindly trust user input."
      },
      "simplified_explanation": "Authentication attacks try to steal your identity (like someone stealing your ID card).\n\nAuthorization attacks try to access things you shouldn't (like using a student ID to sneak into the staff lounge).\n\nBoth are dangerous, which is why we need strong defenses at both layers!",
      "memory_aids": [
        "Brute Force = Try EVERY password (like trying every key on a key ring)",
        "Phishing = Fake login page (like a fake ATM that steals your PIN)",
        "Privilege Escalation = Low privilege â†’ High privilege (like students getting into the teacher's lounge)",
        "IDOR = Changing URL numbers to access other people's stuff"
      ],
      "real_world_connection": "In 2019, Capital One was breached because of broken authorization - an attacker exploited misconfigured permissions to access 100 million customer records. The authentication worked fine (they had valid credentials), but authorization was broken (they shouldn't have had access to all that data).",
      "reflection_prompt": "Why isn't strong authentication enough? Why do we also need strong authorization?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "9f132eb3-0598-4d4b-b833-241d9dfa9299",
      "type": "memory_aid",
      "title": "Key Takeaways",
      "content": {
        "summary": [
          "Authentication = WHO are you? (Verify identity)",
          "Authorization = WHAT can you do? (Check permissions)",
          "Accounting = WHAT did you do? (Log activities)",
          "Authentication always comes BEFORE authorization",
          "Multi-Factor Authentication (MFA) = 2+ factors (KNOW, HAVE, ARE)",
          "Principle of Least Privilege = Minimum necessary permissions",
          "RBAC = Role-Based Access Control (most common in business)",
          "Both authentication AND authorization can be attacked - need defenses for both"
        ]
      },
      "simplified_explanation": "Master these concepts and you understand the foundation of ALL access control systems.",
      "memory_aids": [
        "Authentication = Identity check (WHO)",
        "Authorization = Permission check (WHAT)",
        "Accounting = Activity log (WHEN/WHAT)",
        "MFA = Multiple factors = Harder to hack",
        "Least Privilege = Only what you NEED, not what you WANT"
      ],
      "real_world_connection": "Every single security system uses these concepts. Master auth/authz and you've mastered the fundamentals.",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "type": "video",
      "title": "Video Tutorial: Authentication vs Authorization",
      "content": {
        "resources": "Watch this comprehensive video tutorial to reinforce your learning with visual demonstrations and practical examples.\n\n**Video**: [Authentication vs Authorization Explained by IBM Technology](https://www.youtube.com/watch?v=I0poT4UxFxE)\n\n**What you'll see:**\nUnderstanding the difference between authentication and authorization, with practical examples.\n\n**Duration**: ~8 minutes\n\n**Recommended viewing**: After completing the lesson to solidify understanding.\n\n**Additional Resources:**\n- [OWASP Authentication Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html)\n- [OAuth 2.0 Framework](https://oauth.net/2/)\n- [NIST Digital Identity Guidelines](https://pages.nist.gov/800-63-3/)"
      }
    }
  ],
  "pre_assessment": null,
  "post_assessment": [
    {
      "question_id": "q1",
      "type": "multiple_choice",
      "question": "What is authentication?",
      "options": [
        "Determining what a user can access",
        "Verifying who a user is",
        "Logging user activities",
        "Encrypting passwords"
      ],
      "correct_answer": 1,
      "explanation": "Authentication is the process of verifying identity - proving WHO someone is. Authorization (not authentication) determines WHAT they can access.",
      "difficulty": 1,
      "memory_aid": "Authentication = Identity verification (WHO are you?)",
      "points": 10
    },
    {
      "question_id": "q2",
      "type": "multiple_choice",
      "question": "Which is an example of authorization?",
      "options": [
        "Entering your password",
        "File permissions restricting who can edit a document",
        "Scanning your fingerprint",
        "Entering a PIN code"
      ],
      "correct_answer": 1,
      "explanation": "File permissions determine WHAT you can do (read, write, delete) - this is authorization. Password, fingerprint, and PIN are authentication methods (proving WHO you are).",
      "difficulty": 1,
      "memory_aid": "Authorization = Permissions (WHAT can you do?)",
      "points": 10
    },
    {
      "question_id": "q3",
      "type": "multiple_choice",
      "question": "What are the three factors of authentication?",
      "options": [
        "Username, password, email",
        "Something you know, something you have, something you are",
        "Read, write, execute",
        "Authentication, authorization, accounting"
      ],
      "correct_answer": 1,
      "explanation": "The three authentication factors are: Something you KNOW (password), Something you HAVE (token), Something you ARE (biometric). Using 2+ together is Multi-Factor Authentication.",
      "difficulty": 1,
      "memory_aid": "Three factors: KNOW, HAVE, ARE",
      "points": 10
    },
    {
      "question_id": "q4",
      "type": "multiple_choice",
      "question": "Which must happen first?",
      "options": [
        "Authorization, then authentication",
        "Authentication, then authorization",
        "They happen simultaneously",
        "The order doesn't matter"
      ],
      "correct_answer": 1,
      "explanation": "Authentication ALWAYS comes first. You must verify WHO someone is (authentication) before determining WHAT they can do (authorization). You can't authorize an unknown user.",
      "difficulty": 1,
      "memory_aid": "First prove WHO, then decide WHAT",
      "points": 10
    },
    {
      "question_id": "q5",
      "type": "multiple_choice",
      "question": "What is the principle of least privilege?",
      "options": [
        "Give everyone admin rights to make things easier",
        "Users should have only the minimum permissions needed for their job",
        "Only privileged users need passwords",
        "Authorization isn't necessary if authentication is strong"
      ],
      "correct_answer": 1,
      "explanation": "Least privilege means giving users the MINIMUM permissions required to do their job - no more, no less. This limits damage if an account is compromised.",
      "difficulty": 1,
      "memory_aid": "Least Privilege = Minimum necessary permissions (not maximum convenience)",
      "points": 10
    },
    {
      "question_id": "q6",
      "type": "multiple_choice",
      "question": "What does the 'Accounting' in AAA refer to?",
      "options": [
        "Financial management of security systems",
        "Logging and tracking user activities",
        "Counting failed login attempts",
        "Managing user accounts"
      ],
      "correct_answer": 1,
      "explanation": "Accounting (or Auditing) means logging user activities - WHO did WHAT and WHEN. This creates audit trails for investigations, compliance, and detecting anomalies.",
      "difficulty": 1,
      "memory_aid": "Accounting = Activity logs = Audit trail",
      "points": 10
    }
  ],
  "mastery_threshold": 80,
  "jim_kwik_principles": [
    "teach_like_im_10",
    "memory_hooks",
    "connect_to_what_i_know",
    "active_learning",
    "multiple_memory_pathways",
    "minimum_effective_dose",
    "meta_learning",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint"
  ],
  "base_xp_reward": 100,
  "badge_unlock": null,
  "is_core_concept": true,
  "created_at": "2025-01-22T11:00:00",
  "updated_at": "2025-01-22T11:00:00",
  "author": "CyberLearn Curriculum Team",
  "version": "2.0"
}