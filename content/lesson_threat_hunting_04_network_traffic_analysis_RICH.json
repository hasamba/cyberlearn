{
  "lesson_id": "f0e27b5d-03a2-4bfe-b1ef-3b0d6686a6bb",
  "domain": "threat_hunting",
  "title": "Network Traffic Analysis for Threat Hunting",
  "difficulty": 2,
  "order_index": 4,
  "prerequisites": [
    "th-001-fundamentals",
    "th-002-methodologies"
  ],
  "concepts": [
    "NetFlow and IPFIX for traffic analysis",
    "Zeek (Bro) network security monitoring",
    "PCAP analysis with Wireshark and tshark",
    "C2 beaconing detection patterns",
    "DNS tunneling and exfiltration detection",
    "Network baseline and anomaly detection"
  ],
  "estimated_time": 50,
  "learning_objectives": [
    "Analyze NetFlow data for threat hunting",
    "Deploy and use Zeek for network monitoring",
    "Hunt for C2 beaconing in network traffic",
    "Detect DNS tunneling and data exfiltration",
    "Identify lateral movement via network analysis",
    "Build network traffic baselines for anomaly detection"
  ],
  "post_assessment": [
    {
      "question": "What is the primary advantage of NetFlow over full packet capture?",
      "options": [
        "NetFlow captures full packet payloads",
        "NetFlow uses less storage by recording metadata only",
        "NetFlow is more accurate",
        "NetFlow works on all protocols"
      ],
      "correct_answer": 1,
      "difficulty": 1,
      "type": "multiple_choice",
      "question_id": "29f93efc-d0bd-4259-9b7a-f34527d38d37",
      "explanation": "Explanation not provided."
    },
    {
      "question": "Which pattern indicates C2 beaconing in network traffic?",
      "options": [
        "Random connection intervals",
        "Regular, periodic connections to the same destination",
        "High bandwidth usage",
        "Connections only during business hours"
      ],
      "correct_answer": 1,
      "difficulty": 2,
      "type": "multiple_choice",
      "question_id": "5ca78b11-7694-49e0-b5b7-8d5e9ec9c6e9",
      "explanation": "Explanation not provided."
    },
    {
      "question": "What is a common indicator of DNS tunneling?",
      "options": [
        "Short DNS queries",
        "DNS queries to well-known domains",
        "Unusually long DNS queries with random-looking subdomains",
        "Frequent queries to local DNS server"
      ],
      "correct_answer": 2,
      "difficulty": 2,
      "type": "multiple_choice",
      "question_id": "f8b88451-cf51-44a0-91f1-eec93979271e",
      "explanation": "Explanation not provided."
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "minimum_effective_dose",
    "memory_hooks",
    "connect_to_what_i_know",
    "teach_like_im_10",
    "meta_learning",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "type": "explanation",
      "content": {
        "text": "# Network Traffic Analysis: Seeing the Invisible\n\nWhile Windows Event Logs show what happens **on** endpoints, network traffic shows what travels **between** them. Adversaries must use the network to achieve their goals—and every packet tells a story.\n\n## Why Network Analysis Matters\n\n**The Reality**:\n- All modern attacks involve **network communication**\n- C2 (Command & Control) requires **outbound connections**\n- Lateral movement requires **network traversal**\n- Data exfiltration uses **network protocols**\n\n**What Network Traffic Reveals**:\n- Who is talking to whom (source ↔ destination)\n- What protocols are being used (HTTP, DNS, SMB, SSH)\n- How much data is transferred (bytes in/out)\n- When connections occur (timestamps, intervals)\n- Where traffic is going (internal vs external)\n\n## Network Data Sources: The Three Tiers\n\n### Tier 1: NetFlow (Metadata Only)\n\n**What it is**: Flow records summarizing network conversations\n\n**What it captures**:\n- Source IP, Destination IP\n- Source Port, Destination Port\n- Protocol (TCP/UDP/ICMP)\n- Bytes transferred, Packet count\n- Start/End timestamps\n\n**What it does NOT capture**:\n- ❌ Packet payloads (no DNS queries, HTTP URLs)\n- ❌ Application-layer data\n\n**Storage Requirements**: **Low** (100x-1000x smaller than full capture)\n\n**Use Cases**:\n- Long-term traffic baselines\n- Identifying unusual connections\n- Bandwidth analysis\n- Network mapping\n\n**Example NetFlow Record**:\n```\nSource: 192.168.1.50:54321\nDestination: 198.51.100.20:443\nProtocol: TCP\nBytes: 15,234\nPackets: 142\nStart: 2025-01-15 14:30:00\nEnd: 2025-01-15 14:32:15\nDuration: 135 seconds\n```bash\n\n### Tier 2: Zeek/Bro (Protocol-Level Logs)\n\n**What it is**: Open-source network security monitor that logs protocol-specific details\n\n**What it captures**:\n- HTTP: URLs, user-agents, response codes\n- DNS: Queries, answers, query types\n- SSL/TLS: Certificates, cipher suites\n- SMB: File names, shares accessed\n- SSH: Client/server versions\n- And 40+ other protocols\n\n**Storage Requirements**: **Medium** (10x-50x smaller than full capture)\n\n**Use Cases**:\n- C2 detection (HTTP beaconing, DNS tunneling)\n- Certificate analysis (malicious SSL certificates)\n- File transfer tracking\n- Protocol anomaly detection\n\n**Example Zeek HTTP Log**:\n```\nts: 2025-01-15T14:30:22\nsrc: 192.168.1.50\ndst: 198.51.100.20\nmethod: POST\nhost: malicious-c2.com\nuri: /beacon\nuser_agent: Mozilla/5.0 (compatible; MSIE 9.0)\nstatus_code: 200\nresponse_body_len: 1024\n```bash\n\n### Tier 3: Full Packet Capture (PCAP)\n\n**What it is**: Complete packet capture including payloads\n\n**What it captures**:\n- ✅ Everything (Layer 2-7)\n- ✅ Complete packet payloads\n- ✅ Unencrypted application data\n\n**Storage Requirements**: **Very High** (terabytes per day on busy networks)\n\n**Use Cases**:\n- Deep investigation of specific incidents\n- Malware analysis (extracting payloads)\n- Legal/forensic evidence\n- Protocol reverse engineering\n\n**Limitation**: **Storage constraints** make long-term retention impossible for most organizations\n\n### Choosing the Right Tier\n\n**The Hunter's Approach**:\n\n1. **Continuous Collection**: NetFlow + Zeek (affordable long-term storage)\n2. **Triggered Capture**: PCAP when hunt finds something suspicious\n3. **Layered Analysis**: Start with NetFlow, drill down to Zeek, deep-dive with PCAP\n\n**Memory Aid - NZP**: **N**etFlow (metadata), **Z**eek (protocols), **P**CAP (payloads)\n\n## NetFlow Analysis for Hunting\n\n### What is NetFlow?\n\nDeveloped by Cisco, **NetFlow** is a network protocol that exports metadata about network flows. A \"flow\" is a sequence of packets sharing:\n- Same source/destination IPs\n- Same source/destination ports\n- Same protocol\n\n**NetFlow Variants**:\n- **NetFlow v5**: Original Cisco format\n- **NetFlow v9**: Template-based, extensible\n- **IPFIX**: IETF standard (NetFlow v10)\n- **sFlow**: Sampled flow (less accurate but lower overhead)\n\n### Hunting with NetFlow\n\n**Hunt 1: Long-Duration Connections (C2 Persistence)**\n\nC2 sessions often maintain long-lived connections.\n\n**Query Concept**:\n```\nFind flows with duration > 1 hour AND external destination\n```\n\n**What you're looking for**:\n- Desktop workstations with multi-hour external connections\n- Servers communicating with unexpected external IPs\n- Connections during off-hours\n\n**Red Flags**:\n- Excel.exe → external IP for 3 hours (beacon keeping connection alive)\n- Finance workstation → unusual country (data exfiltration)\n\n**Hunt 2: High Byte Count to Single Destination (Exfiltration)**\n\nData exfiltration generates large outbound byte counts.\n\n**Query Concept**:\n```\nAggregate bytes_out by source_ip, dest_ip\nFind pairs with > 1 GB transferred in 24 hours\n```\n\n**What you're looking for**:\n- Single workstation sending GBs to external IP\n- Database server sending data to non-backup destinations\n- After-hours bulk transfers\n\n**Hunt 3: Beaconing Detection (Regular Intervals)**\n\nC2 beacons connect at regular intervals (every 60s, 5min, etc.)\n\n**Algorithm**:\n```\n1. Group flows by source_ip, dest_ip\n2. Calculate time intervals between connections\n3. Look for regular patterns (standard deviation < 5%)\n```\n\n**Example**:\n```\n192.168.1.50 → 198.51.100.20\nConnection 1: 14:00:00\nConnection 2: 14:01:00 (60s interval)\nConnection 3: 14:02:00 (60s interval)\nConnection 4: 14:03:00 (60s interval)\n...\n[100 connections, all exactly 60s apart]\n= C2 BEACONING DETECTED\n```\n\n**Tools for Beaconing Detection**:\n- **RITA** (Real Intelligence Threat Analytics): Open-source beaconing detector\n- **AC-Hunter**: Commercial NetFlow threat hunting tool\n- **Custom Python scripts**: Calculate interval variance\n\n### NetFlow Hunting Example: RITA\n\n**RITA** analyzes NetFlow/Zeek logs for beaconing, long connections, and DNS tunneling.\n\n**Installation**:\n```bash\n# Install RITA (requires MongoDB)\nsudo apt-get install mongodb\nwget https://github.com/activecm/rita/releases/latest/rita\nsudo chmod +x rita\nsudo mv rita /usr/local/bin/\n```\n\n**Import NetFlow Data**:\n```bash\n# Import Zeek logs into RITA\nrita import /path/to/zeek/logs my_dataset\n\n# Analyze for threats\nrita analyze my_dataset\n```\n\n**Hunt for Beaconing**:\n```bash\n# Show beaconing connections\nrita show-beacons my_dataset\n\n# Output:\n# Score | Source IP     | Dest IP        | Connections | Avg Interval\n# 0.95  | 192.168.1.50  | 198.51.100.20  | 1440       | 60.2s\n# 0.87  | 192.168.1.75  | 203.0.113.10   | 720        | 120.5s\n```\n\n**Interpretation**:\n- Score 0.95 = **High confidence beaconing**\n- 1440 connections in 24 hours = every 60 seconds\n- Investigate 192.168.1.50 immediately"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Zeek: The Hunter's Network Microscope\n\n**Zeek** (formerly Bro) is an open-source network security monitoring platform that logs protocol-level details. It's **essential** for threat hunting.\n\n### Why Zeek is Critical\n\n**Zeek provides what NetFlow cannot**:\n- ✅ DNS queries and responses\n- ✅ HTTP URLs and user-agents\n- ✅ SSL certificate details\n- ✅ File hashes transferred over the network\n- ✅ SMB file names and shares\n\n### Installing Zeek\n\n```bash\n# Ubuntu/Debian\nsudo apt-get install zeek\n\n# Configure network interface\nsudo vim /opt/zeek/etc/node.cfg\n# Set interface=eth0 (or your network interface)\n\n# Start Zeek\nsudo /opt/zeek/bin/zeekctl deploy\n\n# Verify logs are being created\nls /opt/zeek/logs/current/\n# You should see: conn.log, dns.log, http.log, ssl.log, etc.\n```bash\n\n### Key Zeek Log Files\n\n**conn.log** - All network connections (like NetFlow)\n```\nts, uid, src_ip, src_port, dst_ip, dst_port, proto, service, duration, bytes_in, bytes_out\n```\n\n**dns.log** - DNS queries and responses\n```\nts, uid, src_ip, dst_ip, query, qtype, rcode, answers, TTL\n```\n\n**http.log** - HTTP requests and responses\n```\nts, uid, src_ip, dst_ip, method, host, uri, user_agent, status_code, response_body_len\n```\n\n**ssl.log** - SSL/TLS connections\n```\nts, uid, src_ip, dst_ip, version, cipher, server_name, subject, issuer\n```\n\n**files.log** - Files transferred over network\n```\nts, fuid, src_ip, dst_ip, source, mime_type, filename, md5, sha1\n```bash\n\n### Hunting with Zeek\n\n**Hunt 1: DNS Tunneling Detection**\n\nDNS tunneling exfiltrates data via DNS queries.\n\n**Indicators**:\n- Very long DNS queries (> 50 characters)\n- High volume of queries to same domain\n- Random-looking subdomains\n- Unusual TXT record queries\n\n**Zeek Query (using `zeek-cut` and `awk`)**:\n```bash\n# Find long DNS queries\ncat dns.log | zeek-cut query | awk 'length($0) > 50' | sort | uniq -c | sort -rn\n\n# Output:\n#  1247 aGVsbG8gd29ybGQgZXhhbXBsZSBkYXRhIGhlcmU.malicious-c2.com\n#   892 bG9uZyBlbmNvZGVkIGRhdGEgaW4gc3ViZG9tYWlu.evil-dns.tk\n\n# Red flags:\n# - 1247 queries to random subdomain\n# - Base64-encoded looking data\n# - Suspicious TLD (.tk)\n```\n\n**Hunt 2: C2 Beaconing via HTTP**\n\n**Indicators**:\n- Regular HTTP POST requests to same URI\n- Small request/response sizes (< 1KB)\n- Suspicious user-agents\n\n**Zeek Query**:\n```bash\n# Find HTTP POSTs with small payloads (beaconing)\ncat http.log | zeek-cut ts src_ip dst_ip method uri user_agent request_body_len response_body_len | \\\nawk '$4==\"POST\" && $7<1000 && $8<1000' | \\\nawk '{print $2, $3, $5}' | sort | uniq -c | sort -rn\n\n# Output:\n#  1440 192.168.1.50 198.51.100.20 /beacon\n#   720 192.168.1.75 203.0.113.10 /update\n\n# Analysis:\n# 1440 POSTs in 24 hours = every 60 seconds (beaconing)\n```\n\n**Hunt 3: Suspicious SSL Certificates**\n\nMalware often uses self-signed or unusual SSL certificates.\n\n**Indicators**:\n- Self-signed certificates\n- Invalid issuers\n- Unusual subject names\n- Short validity periods\n\n**Zeek Query**:\n```bash\n# Find self-signed certificates\ncat ssl.log | zeek-cut server_name subject issuer | \\\nawk '$2 == $3' | sort | uniq -c | sort -rn\n\n# Output:\n#  1440 malicious-c2.com CN=malicious-c2.com CN=malicious-c2.com\n\n# Red flag: Subject == Issuer (self-signed)\n```\n\n**Hunt 4: SMB File Transfers (Lateral Movement)**\n\n**Indicators**:\n- Administrative shares (C$, ADMIN$)\n- Executables transferred\n- Unexpected file names\n\n**Zeek Query**:\n```bash\n# Find SMB file transfers to admin shares\ncat smb_files.log | zeek-cut ts src_ip dst_ip name path | \\\ngrep -E 'C\\$|ADMIN\\$' | grep -E '\\.exe$|\\.dll$|\\.ps1$'\n\n# Output:\n# 2025-01-15T14:30:22 192.168.1.50 192.168.1.100 payload.exe \\\\192.168.1.100\\C$\\Windows\\Temp\\payload.exe\n\n# Red flag: .exe transferred to C$ (lateral movement)\n```"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "## Practical Network Hunting Scenarios\n\n### Scenario 1: Hunting for Data Exfiltration\n\n**Hypothesis**: \"If an attacker is exfiltrating data, we would see large outbound transfers to external IPs.\"\n\n**Step 1: Identify Top Talkers (NetFlow)**\n```bash\n# Using nfdump (NetFlow analysis tool)\nnfdump -R /var/netflow/2025/01/15 -s dstip/bytes -n 20 -o extended\n\n# Output shows top destinations by bytes:\n# Dest IP          Bytes Out    Packets\n# 198.51.100.20    15.2 GB      1,234,567\n# 203.0.113.50     12.8 GB      987,654\n# 192.168.1.1      1.2 GB       45,000  (internal - OK)\n```\n\n**Step 2: Investigate Suspicious IP (Zeek)**\n```bash\n# What protocol was used?\ncat conn.log | zeek-cut src_ip dst_ip dst_port proto bytes_out | \\\nawk '$2==\"198.51.100.20\"' | head -20\n\n# Output:\n# 192.168.1.75 198.51.100.20 443 tcp 15234567890\n\n# Port 443 (HTTPS) - encrypted, harder to inspect\n```\n\n**Step 3: Check DNS (Zeek)**\n```bash\n# What domain did they resolve?\ncat dns.log | zeek-cut query answers | grep \"198.51.100.20\"\n\n# Output:\n# file-sharing-service.com 198.51.100.20\n\n# Legitimate file sharing service OR malicious?\n```\n\n**Step 4: Timeline Analysis**\n```bash\n# When did transfers occur?\ncat conn.log | zeek-cut ts src_ip dst_ip bytes_out | \\\nawk '$2==\"192.168.1.75\" && $3==\"198.51.100.20\"' | \\\nawk '{print $1, $4}' | head -50\n\n# Output shows transfers between 02:00-04:00 AM (off-hours)\n# Red flag: Large data transfer during off-hours\n```\n\n**Conclusion**: Investigate workstation 192.168.1.75 for:\n- What files were accessed before transfer?\n- Who was logged in at 2 AM?\n- Is this normal for this user?\n\n### Scenario 2: Detecting Cobalt Strike via DNS\n\n**Hypothesis**: \"If Cobalt Strike is using DNS C2, we would see unusual DNS patterns.\"\n\n**Step 1: Baseline Normal DNS**\n```bash\n# Top DNS queries (should be normal domains)\ncat dns.log | zeek-cut query | sort | uniq -c | sort -rn | head -20\n\n# Normal output:\n#  5432 google.com\n#  3421 microsoft.com\n#  2341 office365.com\n#  1234 github.com\n```\n\n**Step 2: Hunt for Suspicious Patterns**\n```bash\n# Find long queries with random-looking subdomains\ncat dns.log | zeek-cut query | awk 'length($0) > 30' | \\\ngrep -E '[a-z0-9]{20,}\\.' | head -20\n\n# Output:\n# aGVsbG8gZnJvbSBjMiBiZWFjb24.malicious-dns.tk\n# bXkgc2VjcmV0IGRhdGEgaGVyZQ.evil-c2.com\n\n# Red flags:\n# - Long random subdomains\n# - Suspicious TLDs (.tk, .xyz)\n# - Base64-looking strings\n```\n\n**Step 3: Check Query Volume**\n```bash\n# How many queries to suspicious domain?\ncat dns.log | zeek-cut query | grep \"malicious-dns.tk\" | wc -l\n\n# Output: 14400 queries in 24 hours\n# = 1 query every 6 seconds (beaconing)\n```\n\n**Step 4: Identify Source**\n```bash\n# Which workstation is making these queries?\ncat dns.log | zeek-cut src_ip query | grep \"malicious-dns.tk\" | \\\nawk '{print $1}' | sort | uniq -c\n\n# Output:\n# 14400 192.168.1.85\n\n# All queries from single workstation = infected\n```\n\n**Response Actions**:\n1. Isolate 192.168.1.85 from network\n2. Block malicious-dns.tk at DNS firewall\n3. Analyze workstation for Cobalt Strike artifacts\n4. Check for lateral movement from this host\n\n### Scenario 3: Lateral Movement via RDP\n\n**Hypothesis**: \"If an attacker is moving laterally, we would see RDP connections between workstations.\"\n\n**Step 1: Find RDP Connections (NetFlow)**\n```bash\n# RDP uses port 3389\nnfdump -R /var/netflow/2025/01/15 -o extended | \\\nawk '$8==3389' | awk '{print $1, $3, $5}'\n\n# Output:\n# 2025-01-15 14:30:22 192.168.1.50 -> 192.168.1.100\n# 2025-01-15 14:35:10 192.168.1.50 -> 192.168.1.101\n# 2025-01-15 14:40:33 192.168.1.50 -> 192.168.1.102\n\n# Red flag: Single source connecting to multiple destinations via RDP\n```\n\n**Step 2: Correlate with Authentication Logs**\n```bash\n# Check Windows Event Logs for RDP logons (Event 4624, Type 10)\n# From workstation 192.168.1.50 to 192.168.1.100-102\n\n# If successful RDP + network traffic match = confirmed lateral movement\n```\n\n**Step 3: Check for Data Staging**\n```bash\n# After RDP, did attacker stage files via SMB?\ncat smb_files.log | zeek-cut ts src_ip dst_ip name | \\\nawk '$2==\"192.168.1.50\"'\n\n# Output:\n# 2025-01-15 14:32:00 192.168.1.50 192.168.1.100 passwords.txt\n# 2025-01-15 14:36:22 192.168.1.50 192.168.1.101 credentials.csv\n\n# Red flag: Copying credential files after RDP access\n```"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "## Real-World Case: Detecting APT28 via Network Analysis\n\n### Background\n\nIn 2020, a financial institution's threat hunting team detected **APT28 (Fancy Bear)** using network traffic analysis. Here's the complete hunt.\n\n### The Discovery Process\n\n**Week 1: Anomaly Detection**\n\nA threat hunter noticed unusual DNS patterns in Zeek logs:\n\n```bash\n# Routine DNS analysis\ncat dns.log | zeek-cut query | awk '{print length($0), $0}' | \\\nawk '$1 > 40' | sort -rn | head -20\n\n# Output showed:\n# 67 MDEyMzQ1Njc4OWFiY2RlZmh0dHBzOi8vZ29vZ2xlLmNvbQ.cdn-service.net\n# 65 YWRtaW5pc3RyYXRvcjpwYXNzd29yZDEyM3RleHRmaWxl.cdn-service.net\n```\n\n**Red Flags Identified**:\n1. **Base64-encoded subdomains** (data exfiltration via DNS)\n2. **Suspicious domain**: cdn-service.net (typosquatting legitimate CDN)\n3. **High query volume**: 8,640 queries per day (every 10 seconds)\n\n**Week 1: Investigation**\n\n**Step 1: Identify Compromised Host**\n```bash\ncat dns.log | zeek-cut src_ip query | grep \"cdn-service.net\" | \\\nawk '{print $1}' | sort | uniq -c\n\n# Output:\n# 8640 192.168.50.15\n\n# Single workstation making all queries\n```\n\n**Step 2: Timeline Reconstruction**\n```bash\n# When did this start?\ncat dns.log | zeek-cut ts query | grep \"cdn-service.net\" | \\\nawk '{print $1}' | head -1\n\n# Output: 2020-03-01T08:15:22 (2 weeks ago!)\n# Attacker had access for 2 weeks before detection\n```\n\n**Step 3: Correlate with NetFlow**\n```bash\n# What other external IPs did this host contact?\nnfdump -R /var/netflow/2020/03/ -s dstip -n 20 | \\\ngrep \"192.168.50.15\"\n\n# Output:\n# 198.51.100.50:443 (HTTPS C2 server)\n# 203.0.113.75:8080 (Secondary C2)\n```\n\n**Week 2: Deep Dive**\n\n**HTTP C2 Analysis**\n```bash\n# Check HTTP traffic to C2 server\ncat http.log | zeek-cut ts src_ip dst_ip method uri user_agent | \\\ngrep \"198.51.100.50\"\n\n# Output:\n# POST /api/v1/update\n# User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)\n\n# Every POST returns 200 OK with ~500 bytes\n# Classic C2 beaconing pattern\n```\n\n**SSL Certificate Analysis**\n```bash\n# Check SSL certificate for C2\ncat ssl.log | zeek-cut server_name subject issuer | \\\ngrep \"198.51.100.50\"\n\n# Output:\n# server_name: cdn-service.net\n# subject: CN=cdn-service.net, O=CDN Services LLC\n# issuer: CN=cdn-service.net (SELF-SIGNED)\n\n# Red flag: Self-signed certificate pretending to be CDN\n```bash\n\n### Attack Timeline\n\n```\nMarch 1, 08:00 - Initial compromise via phishing email\nMarch 1, 08:15 - C2 beacon established (198.51.100.50:443)\nMarch 1, 08:20 - DNS tunneling starts (cdn-service.net)\nMarch 1-14     - Reconnaissance and credential harvesting\nMarch 14, 14:00 - Lateral movement to finance server\nMarch 14, 16:00 - Data staging detected (500 MB to temp folder)\nMarch 15, 02:00 - HUNT TEAM DETECTS DNS ANOMALY\nMarch 15, 03:00 - Incident response initiated\n```bash\n\n### IOCs Discovered\n\n**Network Indicators**:\n- Domain: cdn-service.net (typosquatting)\n- C2 IP: 198.51.100.50\n- Secondary C2: 203.0.113.75\n- HTTP URI: /api/v1/update\n- Beacon interval: 600 seconds (10 minutes)\n\n**TTPs Identified**:\n- T1071.001 - Application Layer Protocol: Web Protocols\n- T1071.004 - Application Layer Protocol: DNS\n- T1048.003 - Exfiltration Over Alternative Protocol: DNS\n- T1573.001 - Encrypted Channel: Symmetric Cryptography\n\n### Response Actions\n\n**Immediate**:\n1. Isolated 192.168.50.15 from network\n2. Blocked cdn-service.net at DNS firewall\n3. Blocked 198.51.100.50 and 203.0.113.75 at perimeter firewall\n4. Analyzed workstation for additional persistence\n\n**Investigation**:\n5. Imaged compromised workstation for forensics\n6. Checked all other hosts for same IOCs (found 0 - contained to one system)\n7. Reset credentials for user of compromised workstation\n8. Reviewed 2 weeks of access logs for lateral movement\n\n**Hardening**:\n9. Implemented DNS query length monitoring (alert on > 50 chars)\n10. Created Zeek signature for cdn-service.net pattern\n11. Added beaconing detection with 10-minute interval alerts\n12. Deployed additional monitoring on finance servers\n\n### Detection Rules Created\n\n**Zeek Signature for DNS Tunneling**:\n```zeek\nsignature dns-tunneling-long-queries {\nip-proto == udp\ndst-port == 53\npayload /.*[a-zA-Z0-9]{40,}\\./\nevent \"Possible DNS Tunneling - Long Query\"\n}\n```\n\n**SIEM Rule for C2 Beaconing**:\n```yaml\ntitle: HTTP POST Beaconing Pattern\ndetection:\ntimeframe: 1h\nselection:\nhttp.method: POST\nhttp.status_code: 200\nhttp.request_body_len: < 1000\nhttp.response_body_len: < 1000\ncondition:\nselection | count(by src_ip, dst_ip) > 30\nlevel: high\n```bash\n\n### Lessons Learned\n\n**What Worked**:\n- ✅ Zeek DNS logging caught exfiltration attempt\n- ✅ NetFlow correlation confirmed C2 infrastructure\n- ✅ Regular DNS anomaly hunting detected threat in 2 weeks\n\n**What Could Be Better**:\n- ⚠️ Initial compromise (phishing) went undetected\n- ⚠️ Self-signed certificate should have triggered alert immediately\n- ⚠️ Need real-time DNS query length monitoring\n\n**Outcome**: No data exfiltrated (caught during staging phase). Organization shared IOCs with FS-ISAC (Financial Services Information Sharing and Analysis Center)."
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "## Memory Aids for Network Traffic Analysis\n\n### NZP - Data Source Tiers\n\n**N** - **NetFlow**: Metadata only (who, when, how much)\n**Z** - **Zeek**: Protocol details (URLs, DNS, certificates)\n**P** - **PCAP**: Full packets (everything, but expensive)\n\n### The 3 Bs of Network Hunting\n\n**B**eaconing - Regular intervals (C2 communication)\n**B**ulk transfers - Large byte counts (exfiltration)\n**B**aseline - Know what's normal (anomaly detection)\n\n### DNS Tunneling Red Flags: BLAST\n\n**B** - **Base64** encoded subdomains\n**L** - **Long** query lengths (> 50 chars)\n**A** - **A**bnormal query volume (thousands per day)\n**S** - **S**uspicious TLDs (.tk, .xyz, .top)\n**T** - **T**XT record queries (unusual for normal apps)\n\n### C2 Beaconing Indicators: RIPS\n\n**R** - **Regular** intervals (every 60s, 5min, 10min)\n**I** - **Identical** request/response sizes\n**P** - **POST** requests with small payloads\n**S** - **Same** destination repeatedly\n\n### Zeek Log Files Memory Map\n\n**conn** = **conn**ections (all traffic)\n**dns** = **D**omain **N**ame **S**ystem queries\n**http** = **H**yper**T**ext **T**ransfer **P**rotocol\n**ssl** = **S**ecure **S**ockets **L**ayer certificates\n**files** = **Files** transferred over network\n\n### Visual: Network Hunting Workflow\n\n```\n[NetFlow Anomaly] → [Zeek Deep Dive] → [PCAP Capture] → [Incident Response]\n↓                    ↓                  ↓                ↓\nTop talkers       DNS tunneling?     Extract payload    Containment\nBeaconing?        HTTP beaconing?    Malware sample     Eradication\nLong duration     Suspicious certs   Evidence           Recovery\n```"
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "## Reflection Questions\n\n1. **If you could only deploy ONE network monitoring tool (NetFlow, Zeek, or full PCAP), which would you choose for threat hunting? Why?**\n\n*Hint: Consider storage costs, visibility, and long-term retention.*\n\n2. **How would you differentiate between legitimate cloud backup traffic and data exfiltration to cloud storage?**\n\n*Think about: timing, volume, user behavior, approved vs unapproved cloud services.*\n\n3. **In the APT28 case study, the DNS tunneling was detected after 2 weeks. What detection could have caught it sooner?**\n\n*Real-time DNS query length monitoring, baseline deviation alerts, suspicious TLD detection.*\n\n4. **If an attacker uses HTTPS for C2 (encrypted), what network indicators can you still detect?**\n\n*Beaconing intervals, connection duration, certificate analysis, byte sizes, DNS resolution.*\n\n5. **How would you build a baseline for \"normal\" network behavior in your environment?**\n\n*30 days of traffic, identify top talkers, common protocols, typical connection patterns, peak hours.*\n\n6. **What's more suspicious: 10 GB transferred in 1 hour, or 100 MB transferred every hour for 100 hours? Why?**\n\n*The second (sustained low-rate exfiltration) is often more indicative of sophisticated attackers trying to avoid detection.*"
      }
    },
    {
      "type": "mindset_coach",
      "content": {
        "text": "## Mastering Network Traffic Analysis\n\n### You've Gained Powerful Skills\n\nNetwork traffic analysis is **foundational** for threat hunting. You now understand:\n\n✅ **The 3 data tiers**: NetFlow (metadata), Zeek (protocols), PCAP (payloads)\n✅ **C2 beaconing detection**: Regular intervals, identical sizes\n✅ **DNS tunneling indicators**: Long queries, base64, suspicious TLDs\n✅ **Exfiltration detection**: Large outbound transfers, off-hours activity\n✅ **Lateral movement patterns**: RDP between workstations, SMB file transfers\n✅ **Real-world hunting**: APT28 detection case study\n\n**These skills make you a more complete threat hunter.**\n\n### The Network Hunter's Philosophy\n\n**\"All roads lead through the network.\"**\n\nNo matter what an attacker does:\n- Initial access? **Network traffic** (phishing email, exploit)\n- C2 communication? **Network traffic** (beaconing)\n- Lateral movement? **Network traffic** (RDP, SMB, SSH)\n- Data exfiltration? **Network traffic** (large uploads)\n\n**If you control the network, you see everything that moves.**\n\n### Combining Endpoint + Network\n\n**The Complete Picture**:\n\n**Endpoint Logs** (Windows Events, Sysmon):\n- Show **what** happened on the system\n- Process execution, authentication, file access\n\n**Network Traffic** (NetFlow, Zeek):\n- Show **where** data went\n- External connections, data volume, protocols\n\n**Together**: You can reconstruct the **entire attack**\n\n**Example**:\n```\nEndpoint: PowerShell executed with -EncodedCommand (Sysmon Event 1)\n↓\nNetwork: Connection to 198.51.100.20:443 (NetFlow)\n↓\nEndpoint: Scheduled task created for persistence (Event 4698)\n↓\nNetwork: Beaconing every 60 seconds (Zeek)\n↓\nEndpoint: LSASS memory accessed (Sysmon Event 10)\n↓\nNetwork: RDP to file server (NetFlow port 3389)\n↓\nNetwork: 5 GB uploaded to external IP (NetFlow bytes_out)\n```\n\n**This is the complete attack timeline**, visible only by correlating endpoint + network.\n\n### Your Action Plan\n\n**This Week**:\n\n1. **Deploy Zeek** on a network tap or span port:\n```bash\nsudo apt-get install zeek\nsudo /opt/zeek/bin/zeekctl deploy\n```\n\n2. **Run Your First Network Hunt**:\n- Choose one: DNS tunneling, C2 beaconing, or data exfiltration\n- Use the queries from this lesson\n- Document findings\n\n3. **Baseline Your Network**:\n- What are your top 20 external destinations?\n- What's normal DNS query length in your environment?\n- What protocols are most common?\n\n**This Month**:\n\n4. **Build Network Hunt Playbooks**:\n- C2 beaconing detection (using RITA or custom scripts)\n- DNS tunneling hunt\n- Data exfiltration detection\n\n5. **Integrate with SIEM**:\n- Forward Zeek logs to Splunk/ELK\n- Create dashboards for network anomalies\n- Set up alerts for beaconing patterns\n\n6. **Practice Correlation**:\n- Pick an incident (real or exercise)\n- Correlate Windows Event Logs + Network Traffic\n- Build complete attack timeline\n\n### Resources\n\n**Tools**:\n- **Zeek**: https://zeek.org/\n- **RITA**: https://github.com/activecm/rita (beaconing detection)\n- **nfdump**: NetFlow analysis\n- **Wireshark**: PCAP analysis\n- **tshark**: Command-line packet analysis\n\n**Learning**:\n- **Zeek Documentation**: https://docs.zeek.org/\n- **Malware Traffic Analysis**: https://malware-traffic-analysis.net/\n- **PacketTotal**: Free PCAP analysis sandbox\n\n**Communities**:\n- **Zeek Community**: https://community.zeek.org/\n- **r/AskNetsec**: Network security Q&A\n- **SANS NetWars**: Hands-on network forensics\n\n### Remember\n\n**Network traffic doesn't lie.**\n\nEndpoint logs can be cleared, processes can be hidden, files can be deleted. But **network packets are immutable**. Once they're captured, they're evidence.\n\n**Your job as a network hunter**:\n1. **Capture the right data** (Zeek > PCAP for long-term)\n2. **Know what's normal** (baseline is critical)\n3. **Hunt for patterns** (beaconing, tunneling, bulk transfers)\n4. **Correlate with endpoints** (complete the story)\n\n### Next Lesson Preview\n\nIn **Memory Forensics for Threat Hunting**, we'll cover:\n- Volatile memory analysis with Volatility\n- Detecting in-memory malware and fileless attacks\n- Hunting for injected code and rootkits\n- Building memory forensics into hunt workflows\n\n**Network shows where they went. Memory shows what they did.**\n\n**Keep hunting. The packets tell the truth.** 🎯"
      }
    }
  ]
}