{
  "lesson_id": "164a74e4-aff6-4430-9ef3-1ab5f5a95e91",
  "domain": "pentest",
  "title": "Penetration Testing Methodology",
  "difficulty": 1,
  "order_index": 1,
  "prerequisites": [],
  "concepts": [
    "Reconnaissance",
    "Scanning",
    "Exploitation",
    "Post-exploitation",
    "Reporting"
  ],
  "content_blocks": [
    {
      "block_id": "f3a30849-64f6-4bf3-8404-0b476bacea99",
      "type": "mindset_coach",
      "content": {
        "text": "Welcome to Penetration Testing - the art and science of ethical hacking! You're about to learn how professional security experts think like attackers to defend better. This isn't about random hacking - it's about systematic, methodical, and ethical security assessment.\n\nHere's the truth: Penetration testing is NOT just running tools and hoping for results. It's a disciplined methodology, a structured approach that ensures you find vulnerabilities comprehensively and systematically. Amateur hackers run tools randomly. Professional penetration testers follow a proven process.\n\nThink of penetration testing like being a professional burglar hired by a bank to test their security. You're not there to actually rob the bank - you're there to find every possible way someone COULD rob the bank, document your findings, and help them fix the weaknesses before real criminals find them. That's the ethical hacker's mission.\n\nThe methodology you're about to learn is battle-tested across thousands of engagements. It's how professionals at companies like Offensive Security, Rapid7, and top consulting firms conduct penetration tests. Master this methodology and you'll think like a pro, not like a script kiddie.\n\nHere's what makes this exciting: Every network is different. Every application has unique attack surfaces. The methodology stays the same, but each engagement is a puzzle to solve. You'll need creativity, technical skill, persistence, and ethical integrity.\n\nImportant mindset: You're being PAID to attack systems. This means you have legal authorization, a defined scope, and rules of engagement. NEVER conduct penetration testing without written authorization. The difference between a penetration tester and a criminal is authorization and ethics.\n\nLet's dive into the methodology that separates professionals from amateurs."
      },
      "simplified_explanation": "Penetration testing = ethical hacking with permission. You follow a step-by-step process to find security weaknesses before bad guys do. It's like being a professional lock picker hired to test a building's security - you document every way to break in, then help them fix it.",
      "memory_aids": [
        "RSEPR = Recon, Scan, Exploit, Post-exploit, Report (the 5 phases)",
        "You're a burglar with permission and a duty to report your findings",
        "No authorization = hacking, With authorization = penetration testing"
      ],
      "teach_like_im_10": "Imagine you're really good at finding hidden things. A store owner says 'I'll pay you to try to sneak into my store every way possible, then tell me how you did it so I can make it more secure.' That's penetration testing! You try to break in (with permission!), write down everything you found, then help them fix it."
    },
    {
      "block_id": "a0b5ff50-a7f9-43a8-bd2f-9528adfce51f",
      "type": "explanation",
      "content": {
        "text": "## The Penetration Testing Methodology\n\nPenetration testing follows a proven five-phase methodology. Every phase builds on the previous, creating a systematic approach to finding and exploiting vulnerabilities.\n\n### Phase 1: Reconnaissance (Information Gathering)\n\n**Goal**: Learn everything possible about the target without directly interacting with their systems (passive) and through direct interaction (active).\n\n**Why This Matters**: Reconnaissance is the foundation of successful penetration testing. The more you know about your target, the more attack vectors you can identify. Experienced penetration testers spend 40-60% of their time in reconnaissance. Amateur testers skip this and miss critical vulnerabilities.\n\n**Passive Reconnaissance** (Target doesn't know you're looking):\n- **OSINT (Open Source Intelligence)**: Google dorking, social media mining, public records\n- **DNS enumeration**: Find subdomains, mail servers, DNS records\n- **WHOIS lookups**: Organization information, IP ranges, contact details\n- **Job postings**: Technology stack details (\"Seeking Windows Server 2012 admin\" = they run Server 2012)\n- **GitHub/GitLab**: Exposed credentials, configuration files, internal documentation\n- **Shodan/Censys**: Internet-connected devices and services\n- **Archive.org**: Historical website data, deleted pages\n\n**Active Reconnaissance** (Target will see your activity in logs):\n- **DNS queries**: Zone transfers, subdomain enumeration\n- **Port scanning**: Identify open ports and services\n- **Service enumeration**: Banner grabbing, version detection\n- **Web crawling**: Map website structure, find hidden directories\n- **Email harvesting**: Find employee emails for social engineering\n\n**Key Tools**:\n- theHarvester (email/subdomain gathering)\n- Maltego (relationship mapping)\n- Recon-ng (reconnaissance framework)\n- Shodan (internet-connected device search)\n- Google dorks (advanced search queries)\n\n**Example Reconnaissance Workflow**:\n1. Client: MegaCorp Inc. (megacorp.com)\n2. WHOIS lookup → Find IP ranges (203.0.113.0/24)\n3. DNS enumeration → Discover subdomains (mail.megacorp.com, vpn.megacorp.com, dev.megacorp.com)\n4. Shodan search → Find exposed services (RDP on vpn.megacorp.com, Jenkins on dev.megacorp.com)\n5. Google dorking → Find exposed documents (site:megacorp.com filetype:pdf confidential)\n6. LinkedIn → Identify employees, technology stack from job postings\n7. GitHub → Search for \"megacorp.com\" in code, find exposed credentials\n\nResult: Complete picture of target's attack surface BEFORE ever touching their systems directly.\n\n### Phase 2: Scanning and Enumeration\n\n**Goal**: Identify live hosts, open ports, running services, and potential vulnerabilities.\n\n**Network Scanning**:\n- **Host discovery**: Which IP addresses are alive?\n- **Port scanning**: Which ports are open on each host?\n- **Service detection**: What services are running on open ports?\n- **OS fingerprinting**: What operating system is the host running?\n- **Version detection**: What version of each service?\n\n**Nmap (The King of Scanners)**:\n```bash\n# Basic host discovery\nnmap -sn 192.168.1.0/24\n\n# Comprehensive scan\nnmap -sV -sC -O -p- 192.168.1.10\n\n# Stealth scan (SYN scan)\nnmap -sS 192.168.1.10\n\n# Aggressive scan (version, OS, scripts, traceroute)\nnmap -A 192.168.1.10\n```\n\n**Vulnerability Scanning**:\n- **Nessus/OpenVAS**: Automated vulnerability scanners\n- **Nikto**: Web server vulnerability scanner\n- **Nmap NSE scripts**: Targeted vulnerability checks\n\n**Enumeration** (Deep dive into discovered services):\n\n**SMB Enumeration** (Windows file sharing):\n- List shares: smbclient -L //target -N\n- Enumerate users: enum4linux target\n- Check for null sessions: rpcclient -U \"\" target\n\n**SNMP Enumeration** (Network management):\n- snmpwalk -v2c -c public target\n- Look for system info, network config, running processes\n\n**Web Application Enumeration**:\n- Directory brute forcing: gobuster dir -u http://target -w wordlist.txt\n- Technology detection: whatweb target\n- CMS detection: wpscan (WordPress), droopescan (Drupal)\n\n**DNS Enumeration**:\n- Zone transfer attempts: dig axfr @nameserver domain.com\n- Subdomain brute force: dnsrecon -d domain.com -t brt\n\n**The Goal**: Build a complete inventory:\n- All live hosts\n- All open ports and services\n- All detected vulnerabilities\n- All potential attack vectors\n\n### Phase 3: Vulnerability Assessment\n\n**Goal**: Analyze discovered information to identify exploitable vulnerabilities.\n\nThis phase bridges reconnaissance/scanning with exploitation. You're evaluating which discovered issues are actually exploitable.\n\n**Types of Vulnerabilities**:\n- **Misconfigurations**: Default credentials, unnecessary services, weak permissions\n- **Unpatched software**: Known CVEs with public exploits\n- **Weak authentication**: Weak passwords, no MFA, password reuse\n- **Injection flaws**: SQL injection, command injection, XSS\n- **Access control issues**: Broken authorization, privilege escalation\n- **Information disclosure**: Exposed sensitive data, verbose errors\n\n**Prioritization** (Not all vulnerabilities are equal):\n- **Critical**: Remote code execution, authentication bypass, data exposure\n- **High**: Privilege escalation, sensitive data access\n- **Medium**: Information disclosure, DoS\n- **Low**: Minor configuration issues\n\n**Consider Exploitability**:\n- Does a public exploit exist?\n- Is it reliable?\n- What level of access does it provide?\n- What are the risks of exploitation?\n- Is it within scope?\n\n### Phase 4: Exploitation\n\n**Goal**: Gain unauthorized access by exploiting identified vulnerabilities.\n\n**THIS IS WHERE AUTHORIZATION MATTERS MOST**: Only exploit systems within scope, only use approved techniques, document everything, and be prepared to stop if things go wrong.\n\n**Common Exploitation Vectors**:\n\n**1. Exploitation Frameworks**:\n- **Metasploit**: search eternalblue → use exploit → set options → exploit\n- **SQLmap**: Automated SQL injection exploitation\n- **BeEF**: Browser exploitation framework\n\n**2. Password Attacks**:\n- **Brute force**: Hydra, Medusa (trying many passwords)\n- **Credential stuffing**: Using leaked credentials\n- **Hash cracking**: John the Ripper, Hashcat\n\n**3. Web Application Attacks**:\n- **SQL Injection**: Extract database contents, bypass authentication\n- **XSS**: Execute JavaScript in victim's browser\n- **File upload**: Upload malicious files\n- **SSRF**: Make server request internal resources\n\n**4. Network Attacks**:\n- **Man-in-the-Middle**: ARP spoofing, SSL stripping\n- **Pass-the-Hash**: Use password hash without cracking\n- **Kerberoasting**: Extract and crack service account passwords\n\n**Exploitation Best Practices**:\n- Start with least invasive exploits\n- Test exploits in lab first when possible\n- Have backout plan if exploit causes issues\n- Document every action with screenshots and command history\n- Never exploit production systems during business hours without approval\n- If exploit might cause outage, get explicit approval first\n\n### Phase 5: Post-Exploitation\n\n**Goal**: Maintain access, escalate privileges, move laterally, and achieve objectives (data exfiltration simulation, etc.)\n\n**You've Got a Foothold - Now What?**\n\n**Privilege Escalation**:\n- **Windows**: Exploit service misconfigurations, unquoted service paths, token impersonation\n- **Linux**: SUID binaries, kernel exploits, sudo misconfigurations\n- **Tools**: WinPEAS, LinPEAS (automated enumeration for privilege escalation)\n\n**Persistence** (Maintaining Access):\n- **Backdoors**: Create additional access methods\n- **Scheduled tasks**: Ensure you can return\n- **New user accounts**: Hidden admin accounts\n- **WARNING**: In real penetration tests, only create persistence if explicitly authorized and required\n\n**Lateral Movement**:\n- **Pass-the-Hash**: Move to other systems using captured credentials\n- **Token manipulation**: Impersonate other users\n- **Remote execution**: PsExec, WinRM, WMI\n- **Goal**: Pivot to other systems, expand access\n\n**Data Exfiltration Simulation**:\n- Locate sensitive data (PII, financial records, intellectual property)\n- Document what you could access\n- Demonstrate exfiltration capability (download sample, don't actually exfiltrate everything)\n- **CRITICAL**: Handle sensitive data ethically - your job is proving you COULD steal it, not actually stealing it\n\n**Covering Tracks** (Documenting, Not Hiding):\n- **In Real Attacks**: Attackers delete logs, hide malware\n- **In Penetration Tests**: You document what logs you generated so defenders can find you\n- The goal is showing where their detection gaps are, not hiding from them\n\n### Phase 6: Reporting\n\n**Goal**: Document findings, provide remediation guidance, communicate value to client.\n\nThis is THE MOST IMPORTANT PHASE. A penetration test without a quality report is worthless.\n\n**Report Components**:\n\n**1. Executive Summary** (For C-level executives):\n- High-level findings\n- Business risk explanation (not technical jargon)\n- Overall security posture rating\n- Critical recommendations\n\n**2. Technical Details** (For security teams):\n- Complete methodology\n- Detailed findings with:\n  - Vulnerability description\n  - Risk rating (Critical/High/Medium/Low)\n  - Affected systems\n  - Proof of concept (screenshots, command output)\n  - Remediation steps\n- Attack path diagrams\n- Complete timeline of testing\n\n**3. Remediation Guidance**:\n- Specific, actionable recommendations\n- Prioritized by risk\n- Short-term and long-term fixes\n\n**4. Appendices**:\n- Raw scan data\n- Complete command history\n- Tool output\n- Scope documentation\n\n**Writing Effective Findings**:\n\nBad: \"SQL injection on login page\"\n\nGood:\n```\nTitle: SQL Injection in Authentication Bypass\nRisk: Critical\nAffected System: webapp.megacorp.com/login.php\nDescription: The login page is vulnerable to SQL injection via the username parameter, allowing authentication bypass without valid credentials.\nProof of Concept: \n  Username: admin' OR '1'='1' --\n  Password: anything\n  Result: Successfully authenticated as admin user\nImpact: Complete authentication bypass, full administrative access to application, access to all user data in database\nRemediation: Implement parameterized queries, input validation, and prepared statements. See OWASP guidelines.\n```\n\n**Reporting Best Practices**:\n- Use clear, professional language\n- Include screenshots for every finding\n- Explain business impact, not just technical details\n- Provide realistic remediation timelines\n- Be honest about what you found and didn't find\n- Deliver report professionally (presentation + written document)\n\n## The Complete Penetration Test Workflow\n\n**Week 1: Planning and Reconnaissance**\n- Kickoff meeting with client\n- Define scope, rules of engagement, objectives\n- Passive reconnaissance\n\n**Week 2: Active Testing**\n- Scanning and enumeration\n- Vulnerability assessment\n- Exploitation attempts\n\n**Week 3: Deep Exploitation**\n- Post-exploitation activities\n- Lateral movement\n- Achieve objectives\n\n**Week 4: Reporting and Debrief**\n- Write comprehensive report\n- Present findings to client\n- Answer questions\n- Provide guidance\n\nTimelines vary based on scope, but the phases remain constant."
      },
      "ascii_art": "PENETRATION TESTING METHODOLOGY\n\n1. RECONNAISSANCE\n   |\n   +---> Passive OSINT\n   +---> Active Enumeration\n   |\n2. SCANNING\n   |\n   +---> Port Scanning\n   +---> Service Detection\n   +---> Vulnerability Scanning\n   |\n3. EXPLOITATION\n   |\n   +---> Initial Access\n   +---> Verify Exploit\n   |\n4. POST-EXPLOITATION\n   |\n   +---> Privilege Escalation\n   +---> Lateral Movement\n   +---> Maintain Access\n   +---> Achieve Objectives\n   |\n5. REPORTING\n   |\n   +---> Document Findings\n   +---> Provide Remediation\n   +---> Present to Client",
      "examples": [
        {
          "scenario": "Web Application Penetration Test",
          "explanation": "Recon: Find app at webapp.target.com, identify PHP/MySQL stack. Scan: Directory brute force finds /admin, /backup.sql. Exploit: backup.sql contains credentials, login as admin. Post-exploit: Admin panel allows file upload, upload web shell, gain server access. Report: Critical finding - exposed database backup and unrestricted file upload."
        },
        {
          "scenario": "Network Penetration Test",
          "explanation": "Recon: Identify target network 192.168.1.0/24. Scan: Find Windows domain controller with SMBv1. Exploit: Use EternalBlue exploit (MS17-010), gain SYSTEM access. Post-exploit: Dump Active Directory database, extract all password hashes, crack hashes, access entire domain. Report: Critical - unpatched DC allowed complete domain compromise."
        }
      ]
    },
    {
      "block_id": "15084ed3-21c6-420b-a80f-5a723b62efb2",
      "type": "real_world",
      "content": {
        "text": "**Real Penetration Test Case Study**:\n\nClient: Regional healthcare provider, 500 employees, wants external network penetration test.\n\n**Reconnaissance (3 days)**:\n- Discovered 15 subdomains via DNS enumeration\n- Found employee emails on LinkedIn (potential phishing targets)\n- Shodan revealed exposed RDP server (rdp.healthcorp.com)\n- GitHub search found repository with VPN configuration file (contained credentials)\n\n**Scanning (2 days)**:\n- Nmap scan revealed 8 externally accessible systems\n- Vulnerability scan found unpatched Windows Server 2008 (end of life)\n- Web application scan found outdated WordPress with known vulnerabilities\n\n**Exploitation (5 days)**:\n- Day 1: Used GitHub credentials to access VPN - SUCCESS\n- Day 2: From VPN, scanned internal network, found unpatched file server\n- Day 3: Exploited SMB vulnerability, gained access to file server\n- Day 4: Dumped credentials from file server, cracked hashes\n- Day 5: Used domain admin credentials to access domain controller\n\n**Post-Exploitation (3 days)**:\n- Accessed electronic health records database\n- Demonstrated ability to exfiltrate patient records\n- Found backup system with unencrypted backups\n- Accessed financial systems\n- Total access to entire organization from single GitHub exposure\n\n**Reporting (5 days)**:\n- Critical Finding #1: Exposed VPN credentials in public GitHub (Risk: Critical)\n- Critical Finding #2: Unpatched systems allowing lateral movement (Risk: Critical)\n- High Finding #3: Unencrypted backups containing PHI (Risk: High)\n- 12 additional medium/low findings\n- Presented to executive team and IT staff\n- Client immediately rotated credentials, patched systems, implemented 2FA on VPN\n\n**Outcome**: Healthcare provider avoided potential HIPAA violation, improved security posture significantly. Total cost of penetration test: $25,000. Potential cost of real breach: millions in fines and reputation damage."
      },
      "industry_examples": [
        "Financial institution penetration test discovers ATM network accessible from corporate network, leading to complete redesign of network segmentation",
        "E-commerce penetration test finds payment processing vulnerability, preventing potential credit card theft affecting 100,000 customers",
        "Manufacturing company test reveals industrial control systems on same network as corporate systems, leading to OT/IT network separation project"
      ]
    },
    {
      "block_id": "9fc515fb-7e3f-43fd-a130-0fe76df9dd84",
      "type": "explanation",
      "content": {
        "text": "**Pitfall 1: Skipping Reconnaissance**\nJumping straight to vulnerability scanning without proper reconnaissance. You miss 70% of attack vectors because you didn't enumerate thoroughly. Solution: Force yourself to spend adequate time in recon phase. Set minimum time requirement.\n\n**Pitfall 2: Over-Reliance on Automated Tools**\nRunning Nessus, reading report, calling it done. Automated scanners miss logic flaws, business logic issues, and complex vulnerabilities. Solution: Use automation for initial discovery, but manually investigate everything.\n\n**Pitfall 3: Exploitation Without Understanding**\nRunning Metasploit exploits without understanding what they do or how they work. When exploit fails, you have no idea why. Solution: Read exploit code, understand vulnerability, know what you're executing.\n\n**Pitfall 4: Poor Documentation During Testing**\nNot taking screenshots or notes during testing. When writing report weeks later, you can't remember details or reproduce findings. Solution: Document EVERYTHING in real-time. Screenshots, commands, timestamps, observations.\n\n**Pitfall 5: Causing Unintended Damage**\nRunning aggressive exploits or DoS attacks that crash systems. In production environment during business hours. Client loses revenue, you lose reputation. Solution: Read documentation, test in lab first, communicate before aggressive testing, avoid business hours.\n\n**Pitfall 6: Scope Creep**\nFinding interesting system outside of scope, testing it anyway. This is unauthorized access - literally hacking. Solution: If you find something interesting outside scope, notify client, get written authorization before testing.\n\n**Pitfall 7: Poor Reporting**\nTechnical report that executives can't understand, or fluff report without technical details. Report doesn't provide actionable remediation. Solution: Write for multiple audiences - executive summary for leadership, technical details for security team, clear remediation for both.\n\n**Pitfall 8: Not Validating Findings**\nFalse positives in final report. Claiming vulnerability that doesn't actually exist. Credibility destroyed. Solution: Manually verify every automated finding, provide proof of concept, test exploitability."
      }
    },
    {
      "block_id": "695264dd-b93d-4bd0-a8af-fb36f6754086",
      "type": "explanation",
      "content": {
        "text": "**Immediate Actions**:\n1. Set up penetration testing lab: HackTheBox, TryHackMe, or VulnHub VMs\n2. Practice methodology on easy boxes - follow all 5 phases strictly\n3. Document your process - create your own penetration test report template\n4. Learn one new reconnaissance technique this week\n5. Master nmap - understand every flag and option\n\n**This Week**:\n1. Complete 3 easy HackTheBox machines using full methodology\n2. Write practice penetration test report for each machine\n3. Learn theHarvester, Recon-ng, and Maltego for reconnaissance\n4. Practice manual web application enumeration (not just automated scans)\n5. Study OWASP Top 10 vulnerabilities\n\n**This Month**:\n1. Complete 10 machines across different difficulty levels\n2. Build personal methodology checklist/playbook\n3. Learn Burp Suite for web application testing\n4. Practice Active Directory exploitation (Attacking AD path on HTB/TCM)\n5. Read real penetration test reports (many available publicly)\n6. Join penetration testing communities (r/netsec, HackTheBox forums, Discord servers)\n\n**Career Certifications**:\n- **Entry**: eJPT (eLearnSecurity Junior Penetration Tester) - $200, practical\n- **Intermediate**: OSCP (Offensive Security Certified Professional) - $1,649, gold standard, 24-hour practical exam\n- **Advanced**: OSCE, OSEP (Offensive Security advanced certs)\n- **Specialized**: GPEN (GIAC Penetration Tester), CEH (Certified Ethical Hacker)\n\n**Essential Tools to Master**:\n- Nmap (network scanning)\n- Metasploit (exploitation framework)\n- Burp Suite (web application testing)\n- Gobuster/Dirbuster (directory brute forcing)\n- Hydra (password cracking)\n- John the Ripper (hash cracking)\n- Wireshark (traffic analysis)\n- BloodHound (Active Directory mapping)\n\n**Build Your Lab**:\n- Virtual machines: VirtualBox or VMware\n- Attacker system: Kali Linux or Parrot OS\n- Vulnerable targets: DVWA, Metasploitable, VulnHub VMs\n- Windows Active Directory lab: Microsoft eval licenses\n\n**Learning Resources**:\n- HackTheBox / TryHackMe (practical labs)\n- Offensive Security (OSCP training)\n- TCM Security (practical courses)\n- IppSec YouTube (HackTheBox walkthroughs)\n- The Cyber Mentor (free pentesting course)\n- OWASP (web application security)\n\n**Career Path**:\n- **Entry**: Junior Penetration Tester ($60-80k)\n- **Mid**: Penetration Tester ($80-120k)\n- **Senior**: Senior Penetration Tester / Team Lead ($120-160k)\n- **Expert**: Principal Consultant / Red Team Lead ($160k+)\n\n**Your Next Steps**:\n1. Create HackTheBox or TryHackMe account TODAY\n2. Complete your first machine using full methodology\n3. Write a practice report\n4. Join penetration testing community\n5. Start studying for eJPT or OSCP\n\nPenetration testing is a methodology, not a collection of tools. Master the methodology through practice. Every box you root, every report you write, every vulnerability you exploit builds your skills. The path from beginner to professional is clear - you just need to start walking it. Good hunting!"
      }
    },
    {
      "type": "video",
      "title": "Video Tutorial: Penetration Testing Methodology",
      "content": "Watch this comprehensive video tutorial to reinforce your learning with visual demonstrations and practical examples.\n\n**Video**: [Pentesting Methodology by The Cyber Mentor](https://www.youtube.com/watch?v=fNzpcB7ODxQ)\n\n**What you'll see:**\nComplete penetration testing methodology: reconnaissance, scanning, exploitation, post-exploitation, reporting.\n\n**Duration**: ~22 minutes\n\n**Recommended viewing**: After completing the lesson to solidify understanding.\n\n**Additional Resources:**\n- [OWASP Testing Guide](https://owasp.org/www-project-web-security-testing-guide/)\n- [PTES Technical Guidelines](http://www.pentest-standard.org/index.php/Main_Page)\n- [OSCP Certification Info](https://www.offensive-security.com/pwk-oscp/)"
    }
  ],
  "estimated_time": 30,
  "learning_objectives": [
    "Understand core concepts",
    "Apply knowledge in real-world scenarios",
    "Identify common security issues",
    "Implement best practices"
  ],
  "post_assessment": [
    {
      "question_id": "q1",
      "type": "multiple_choice",
      "question": "What is the main concept covered in this lesson?",
      "options": [
        "Option A",
        "Option B",
        "Option C",
        "Option D"
      ],
      "correct_answer": 0,
      "explanation": "Review the lesson content for details.",
      "difficulty": 2,
      "points": 10
    },
    {
      "question_id": "q2",
      "type": "multiple_choice",
      "question": "Which best practice should you implement?",
      "options": [
        "Best Practice A",
        "Best Practice B",
        "Best Practice C",
        "Best Practice D"
      ],
      "correct_answer": 0,
      "explanation": "Review the lesson content for details.",
      "difficulty": 2,
      "points": 10
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "connect_to_what_i_know"
  ]
}