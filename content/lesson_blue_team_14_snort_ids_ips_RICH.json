{
  "lesson_id": "3e7b9d5f-1c4a-4b2e-9f8d-6c5a4b3e2d1f",
  "domain": "blue_team",
  "title": "Snort: Network Intrusion Detection and Prevention",
  "difficulty": 2,
  "order_index": 14,
  "prerequisites": [
    "blue_team_01"
  ],
  "concepts": [
    "Network intrusion detection systems (NIDS)",
    "Intrusion prevention systems (IPS)",
    "Snort architecture",
    "Rule syntax and structure",
    "Protocol analysis",
    "Inline mode vs tap mode",
    "Rule tuning and optimization",
    "Pulledpork rule management"
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Understand Snort architecture and deployment modes",
    "Write effective Snort detection rules",
    "Configure Snort for IDS and IPS operation",
    "Tune rules to reduce false positives",
    "Integrate Snort with SIEM and alerting systems"
  ],
  "post_assessment": [
    {
      "question": "What is the difference between Snort running in IDS mode versus IPS mode?",
      "options": [
        "IDS blocks traffic, IPS only alerts",
        "IDS monitors passively, IPS can block malicious traffic inline",
        "IDS is faster than IPS",
        "There is no difference"
      ],
      "correct_answer": 1,
      "explanation": "IDS (Intrusion Detection System) mode monitors network traffic passively via a TAP or SPAN port and generates alerts. IPS (Intrusion Prevention System) mode sits inline in the network path and can actively block or modify malicious traffic.",
      "question_id": "298b02fa-75c8-4890-8810-270cea304695",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "In a Snort rule, what does the 'content' keyword do?",
      "options": [
        "Sets the rule priority",
        "Searches for specific byte sequences in packet payloads",
        "Defines the network protocol",
        "Configures logging options"
      ],
      "correct_answer": 1,
      "explanation": "The 'content' keyword searches for specific strings or byte sequences in packet payloads. It's one of the most common rule options for detecting attack patterns, malware signatures, or suspicious traffic.",
      "question_id": "ed34a1fc-4dfb-46ff-8adb-b2cd6f22ec85",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "What is the most important takeaway from this lesson?",
      "options": [
        "Understanding the core concepts and their practical applications",
        "Memorizing all technical details",
        "Only knowing the theory without practice",
        "Focusing on a single aspect"
      ],
      "correct_answer": 0,
      "explanation": "The key takeaway is understanding how to apply the concepts learned in real-world scenarios, combining both theoretical knowledge and practical skills.",
      "question_id": "1bb0e50b-9687-43b1-ad93-7f66d92d2dda",
      "type": "multiple_choice",
      "difficulty": 1
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "meta_learning",
    "memory_hooks",
    "minimum_effective_dose",
    "teach_like_im_10",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "content": {
        "text": "Welcome to the frontline of network defense!\n\nImagine you're a security guard watching hundreds of people enter a building every minute. You can't search everyone, but you know what suspicious behavior looks like: someone carrying bolt cutters, wearing a ski mask, or trying to sneak through the back door.\n\n**Snort** is that security guard for your network. It watches every packet flowing through, looking for patterns that indicate attacks—SQL injection attempts, malware downloads, command-and-control traffic, exploit attempts.\n\n**Mindset shift**: Network security isn't about blocking everything (that's a firewall's job). It's about *recognizing threats* and responding intelligently. Snort gives you eyes on your network.\n\nCreated by Martin Roesch in 1998, Snort has detected billions of attacks and is running in networks from small businesses to Fortune 500 companies to government agencies. It's open source, incredibly powerful, and you're about to learn how to wield it.\n\nLet's turn invisible network traffic into actionable security intelligence!"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## What is Snort?\n\n**Snort** is an open-source network intrusion detection and prevention system (NIDS/NIPS) that performs real-time traffic analysis and packet logging. It can detect thousands of attacks including buffer overflows, stealth port scans, CGI attacks, SMB probes, OS fingerprinting attempts, and more.\n\n### The Problem Snort Solves\n\n**Traditional Firewall Limitations**:\n- Blocks based on IP/port (layer 3/4)\n- No deep packet inspection\n- Can't detect application-layer attacks\n- No protocol anomaly detection\n- No signature-based threat detection\n\n**Snort's Capabilities**:\n- Deep packet inspection (examines payload content)\n- Protocol analysis (HTTP, DNS, SMB, SSL/TLS, etc.)\n- Signature-based detection (known attack patterns)\n- Anomaly detection (unusual traffic patterns)\n- Real-time alerting and blocking (IPS mode)\n- Flexible rule language for custom detections\n\n### Core Architecture\n\n```\n┌─────────────────────────────────────────────────┐\n│           NETWORK TRAFFIC                       │\n└──────────────────┬──────────────────────────────┘\n│\n┌──────────────────▼──────────────────────────────┐\n│  PACKET DECODER                                 │\n│  (Ethernet → IP → TCP/UDP → Application)        │\n└──────────────────┬──────────────────────────────┘\n│\n┌──────────────────▼──────────────────────────────┐\n│  PREPROCESSORS                                  │\n│  • HTTP normalization                           │\n│  • Fragment reassembly                          │\n│  • Stream reassembly (TCP session tracking)     │\n│  • Port scan detection                          │\n│  • ARP spoofing detection                       │\n└──────────────────┬──────────────────────────────┘\n│\n┌──────────────────▼──────────────────────────────┐\n│  DETECTION ENGINE                               │\n│  (Matches packets against rules)                │\n│  • Signature matching                           │\n│  • Protocol analysis                            │\n│  • Anomaly detection                            │\n└──────────────────┬──────────────────────────────┘\n│\n┌─────────┴─────────┐\n│                   │\n┌────────▼────────┐  ┌───────▼────────┐\n│  LOGGING        │  │  ALERTING      │\n│  • PCAP         │  │  • Syslog      │\n│  • Unified2     │  │  • Database    │\n│  • Database     │  │  • SIEM        │\n└─────────────────┘  └────────────────┘\n```bash\n\n### Deployment Modes\n\n**1. Sniffer Mode**\n```bash\n# Just display packets (like tcpdump)\nsnort -v\n```\n\n**2. Packet Logger Mode**\n```bash\n# Log packets to disk\nsnort -l /var/log/snort\n```\n\n**3. NIDS Mode (Passive Monitoring)**\n```bash\n# Monitor via SPAN/TAP, no blocking\nsnort -A console -q -c /etc/snort/snort.conf -i eth1\n```\n\n**4. NIPS Mode (Inline/Active)**\n```bash\n# Inline mode - can drop malicious packets\nsnort -Q --daq afpacket -i eth0:eth1 -c /etc/snort/snort.conf\n```bash\n\n### Installation (Ubuntu)\n\n```bash\n# Install dependencies\nsudo apt update\nsudo apt install -y build-essential libpcap-dev libpcre3-dev \\\nlibdumbnet-dev bison flex zlib1g-dev liblzma-dev openssl libssl-dev\n\n# Download Snort 2.9.x (or Snort 3 for latest)\nwget https://www.snort.org/downloads/snort/snort-2.9.20.tar.gz\ntar -xvzf snort-2.9.20.tar.gz\ncd snort-2.9.20\n\n# Compile and install\n./configure --enable-sourcefire\nmake\nsudo make install\n\n# Update shared libraries\nsudo ldconfig\n\n# Verify installation\nsnort -V\n\n# Create Snort user and directories\nsudo groupadd snort\nsudo useradd snort -r -s /sbin/nologin -c SNORT_IDS -g snort\n\nsudo mkdir -p /etc/snort/rules\nsudo mkdir /var/log/snort\nsudo mkdir /usr/local/lib/snort_dynamicrules\n\nsudo chmod -R 5775 /etc/snort\nsudo chmod -R 5775 /var/log/snort\nsudo chown -R snort:snort /etc/snort\nsudo chown -R snort:snort /var/log/snort\n```bash\n\n### Basic Configuration\n\n```bash\n# Copy config files\nsudo cp etc/*.conf* /etc/snort/\nsudo cp etc/*.map /etc/snort/\n\n# Edit main config\nsudo nano /etc/snort/snort.conf\n```\n\nKey configuration settings:\n\n```bash\n# Set your home network\nipvar HOME_NET 192.168.1.0/24\nipvar EXTERNAL_NET !$HOME_NET\n\n# Set paths\nvar RULE_PATH /etc/snort/rules\nvar SO_RULE_PATH /etc/snort/so_rules\nvar PREPROC_RULE_PATH /etc/snort/preproc_rules\n\n# Configure output (unified2 for Barnyard2)\noutput unified2: filename snort.u2, limit 128\n\n# Include rule files\ninclude $RULE_PATH/local.rules\ninclude $RULE_PATH/community.rules\n```"
      }
    },
    {
      "type": "video",
      "content": {
        "title": "Video: Snort IDS/IPS Setup and Configuration",
        "url": "https://www.youtube.com/embed/JRRwHGh44Vw",
        "description": "Watch this comprehensive guide to installing, configuring, and tuning Snort for network security monitoring."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Snort Rule Syntax Deep Dive\n\n### Rule Structure\n\nEvery Snort rule has two parts: **header** and **options**\n\n```\naction protocol src_ip src_port direction dst_ip dst_port (options)\n```bash\n\n### Rule Header Components\n\n**1. Action**\n\nWhat to do when rule matches:\n\n```\nalert     // Generate alert (most common)\nlog       // Log packet\ndrop      // Drop packet and alert (IPS mode)\nreject    // Drop + send TCP reset or ICMP unreachable\npass      // Ignore packet (whitelist)\n```\n\n**2. Protocol**\n\n```\ntcp       // TCP traffic\nudp       // UDP traffic\nicmp      // ICMP traffic\nip        // Any IP traffic\n```\n\n**3. IP Addresses**\n\n```\nany                    // Any IP\n192.168.1.0/24         // CIDR notation\n!192.168.1.0/24        // Negation\n[192.168.1.0/24,10.0.0.0/8]  // List\n$HOME_NET              // Variable\n```\n\n**4. Ports**\n\n```\nany                    // Any port\n80                     // Specific port\n!80                    // Not port 80\n1:1024                 // Port range\n[80,443,8080]          // Port list\n$HTTP_PORTS            // Variable\n```\n\n**5. Direction**\n\n```\n->     // From source to destination\n<>     // Bidirectional\n```bash\n\n### Rule Options (The Real Power)\n\n**Content Matching**\n\n```\nalert tcp any any -> $HOME_NET 80 (\nmsg:\"SQL Injection Attempt\";\ncontent:\"UNION SELECT\";       # Look for this string\nnocase;                        # Case-insensitive\nsid:1000001;\nrev:1;\n)\n```\n\n**Advanced Content Options**\n\n```\ncontent:\"GET\";              # String to match\nnocase;                     # Case-insensitive\noffset:0;                   # Start search at byte 0\ndepth:3;                    # Search only first 3 bytes\ndistance:5;                 # 5 bytes after previous content\nwithin:10;                  # Within 10 bytes of previous\nhttp_uri;                   # Search in HTTP URI only\nhttp_header;                # Search in HTTP headers\nhttp_method;                # Search in HTTP method (GET, POST)\nhttp_cookie;                # Search in HTTP cookies\n```\n\n**Example: Multi-Content Rule**\n\n```\nalert tcp $EXTERNAL_NET any -> $HOME_NET $HTTP_PORTS (\nmsg:\"Possible PHP Command Injection\";\nflow:to_server,established;\ncontent:\"POST\"; http_method;\ncontent:\".php\"; http_uri;\ncontent:\"system(\"; nocase; distance:0;\ncontent:\";\"; within:100;\nsid:1000002; rev:1;\nclasstype:web-application-attack;\npriority:1;\n)\n```bash\n\n### Protocol-Specific Options\n\n**TCP Flags**\n\n```\nalert tcp any any -> any any (\nmsg:\"XMAS Scan Detected\";\nflags:FPU;              # FIN, PUSH, URG all set\nsid:1000003;\n)\n\nalert tcp any any -> any any (\nmsg:\"NULL Scan Detected\";\nflags:0;                # No flags set\nsid:1000004;\n)\n```\n\n**TCP Flow**\n\n```\nflow:to_server,established;     # Client to server, after handshake\nflow:to_client,established;     # Server to client\nflow:from_server;               # From server\nflow:stateless;                 # Don't track session\n```\n\n**Byte Tests (Binary Analysis)**\n\n```\nalert tcp any any -> any any (\nmsg:\"Suspicious PE File Download\";\ncontent:\"MZ\"; offset:0; depth:2;  # PE header\nbyte_test:2,=,0x5A4D,0;           # Verify MZ signature\nsid:1000005;\n)\n```bash\n\n### Real-World Rule Examples\n\n**1. Detect SQL Injection**\n\n```\nalert tcp any any -> $HOME_NET $HTTP_PORTS (\nmsg:\"SQL Injection - UNION SELECT\";\nflow:to_server,established;\ncontent:\"UNION\"; nocase; http_uri;\ncontent:\"SELECT\"; nocase; distance:0; within:20;\npcre:\"/UNION.{0,20}SELECT/i\";\nsid:1000010; rev:1;\nclasstype:web-application-attack;\n)\n```\n\n**2. Detect Cobalt Strike Beacon**\n\n```\nalert tcp any any -> any any (\nmsg:\"Cobalt Strike Beacon - HTTP Malleable C2\";\nflow:to_server,established;\ncontent:\"POST\"; http_method;\ncontent:\"/submit.php\"; http_uri;\ncontent:\"User-Agent|3a| Mozilla/5.0\"; http_header;\ncontent:\"Cookie|3a| __cfduid=\"; http_header;\nthreshold:type threshold, track by_src, count 3, seconds 60;\nsid:1000011; rev:2;\nclasstype:trojan-activity;\nreference:url,blog.cobaltstrike.com;\n)\n```\n\n**3. Detect Port Scan**\n\n```\nalert tcp any any -> $HOME_NET any (\nmsg:\"Possible Port Scan - Multiple Connection Attempts\";\nflags:S;\nthreshold:type threshold, track by_src, count 20, seconds 5;\nsid:1000012; rev:1;\nclasstype:attempted-recon;\n)\n```\n\n**4. Detect DNS Tunneling**\n\n```\nalert udp $HOME_NET any -> any 53 (\nmsg:\"Possible DNS Tunneling - Excessive Subdomain Length\";\ncontent:\"|01 00 00 01|\"; offset:2; depth:4;  # Standard query\nbyte_test:2,>,50,0,relative;  # Query name > 50 bytes\nthreshold:type threshold, track by_src, count 10, seconds 60;\nsid:1000013; rev:1;\nclasstype:policy-violation;\n)\n```\n\n**5. Detect Malware Download**\n\n```\nalert tcp any any -> $HOME_NET any (\nmsg:\"Malicious EXE Download from Suspicious TLD\";\nflow:to_client,established;\ncontent:\"MZ\"; depth:2;              # PE header\ncontent:\".tk\"; http_header;         # Suspicious TLD in Host\nfilemagic:\"PE32 executable\";\nsid:1000014; rev:1;\nclasstype:trojan-activity;\npriority:1;\n)\n```bash\n\n### Rule Performance Optimization\n\n**Fast Pattern Matching**\n\nSnort selects the most unique content as \"fast pattern\" to reduce searches:\n\n```\ncontent:\"GET\";                    # Too common\ncontent:\"cmd.exe\"; fast_pattern;  # Explicit fast pattern\ncontent:\"system32\";\n```\n\n**Rule Order Matters**\n\n```bash\n# SLOW: Searches all HTTP traffic for uncommon string\nalert tcp any any -> any 80 (\ncontent:\"rare_string\";\ncontent:\"GET\"; http_method;\n)\n\n# FAST: Filters to GET requests first\nalert tcp any any -> any 80 (\ncontent:\"GET\"; http_method;  # Fast filter\ncontent:\"rare_string\";       # Then expensive search\n)\n```"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "title": "Hands-On: Deploy Snort and Detect Attacks",
        "description": "Set up Snort IDS and create custom rules to detect common attacks",
        "code": "# =================================================\n# Exercise: Deploy Snort and Create Detection Rules\n# =================================================\n\n# =================================================\n# PART 1: Install and Configure Snort\n# =================================================\n\n# Install Snort (Ubuntu/Debian)\nsudo apt update\nsudo apt install snort -y\n\n# During installation, you'll be prompted for:\n# - Network interface to monitor (e.g., eth0)\n# - Network range to protect (e.g., 192.168.1.0/24)\n\n# Verify installation\nsnort -V\n\n# Test configuration\nsudo snort -T -c /etc/snort/snort.conf\n# Should output: \"Snort successfully validated the configuration!\"\n\n# =================================================\n# PART 2: Create Custom Local Rules\n# =================================================\n\n# Edit local rules file\nsudo nano /etc/snort/rules/local.rules\n\n# Add these detection rules:\n\n# ---- Rule 1: Detect Nmap SYN Scan ----\nalert tcp any any -> $HOME_NET any (\n    msg:\"NMAP SYN Scan Detected\";\n    flags:S;                           # SYN flag only\n    threshold:type threshold, track by_src, count 10, seconds 5;\n    sid:1000100; rev:1;\n    classtype:attempted-recon;\n    priority:2;\n)\n\n# ---- Rule 2: Detect SQL Injection Attempt ----\nalert tcp any any -> $HOME_NET $HTTP_PORTS (\n    msg:\"SQL Injection - OR 1=1 Pattern\";\n    flow:to_server,established;\n    content:\"OR\"; nocase; http_uri;\n    content:\"1=1\"; nocase; distance:0; within:10;\n    sid:1000101; rev:1;\n    classtype:web-application-attack;\n    priority:1;\n)\n\n# ---- Rule 3: Detect Metasploit Reverse Shell ----\nalert tcp $HOME_NET any -> $EXTERNAL_NET any (\n    msg:\"Possible Metasploit Reverse Shell\";\n    flow:to_server,established;\n    content:\"meterpreter\"; nocase;\n    sid:1000102; rev:1;\n    classtype:trojan-activity;\n    priority:1;\n)\n\n# ---- Rule 4: Detect Suspicious PowerShell Download ----\nalert tcp any any -> $HOME_NET any (\n    msg:\"PowerShell Download Cradle Detected\";\n    flow:to_client,established;\n    content:\"IEX\"; nocase;\n    content:\"New-Object\"; nocase; distance:0; within:50;\n    content:\"Net.WebClient\"; nocase; distance:0; within:50;\n    sid:1000103; rev:1;\n    classtype:trojan-activity;\n    reference:url,attack.mitre.org/techniques/T1059/001/;\n)\n\n# ---- Rule 5: Detect RDP Brute Force ----\nalert tcp $EXTERNAL_NET any -> $HOME_NET 3389 (\n    msg:\"Possible RDP Brute Force\";\n    flags:S;\n    threshold:type threshold, track by_src, count 5, seconds 60;\n    sid:1000104; rev:1;\n    classtype:attempted-admin;\n    priority:1;\n)\n\n# ---- Rule 6: Detect Mimikatz Execution ----\nalert tcp any any -> any any (\n    msg:\"Mimikatz Credential Dumping Tool Detected\";\n    content:\"sekurlsa\"; nocase;\n    content:\"logonpasswords\"; nocase; distance:0; within:30;\n    sid:1000105; rev:1;\n    classtype:credential-theft;\n    priority:1;\n)\n\n# ---- Rule 7: Detect Suspicious DNS Query (DGA) ----\nalert udp $HOME_NET any -> any 53 (\n    msg:\"Possible DGA Domain Query - High Entropy\";\n    content:\"|01 00 00 01|\"; offset:2; depth:4;\n    pcre:\"/[a-z]{20,}\\.com/i\";\n    threshold:type threshold, track by_src, count 5, seconds 30;\n    sid:1000106; rev:1;\n    classtype:trojan-activity;\n)\n\n# Save and exit (Ctrl+O, Ctrl+X)\n\n# =================================================\n# PART 3: Start Snort in IDS Mode\n# =================================================\n\n# Start Snort monitoring interface eth0\nsudo snort -A console -q -c /etc/snort/snort.conf -i eth0\n\n# Explanation:\n# -A console  : Alert to console (see alerts in real-time)\n# -q          : Quiet mode (reduce output)\n# -c          : Configuration file\n# -i          : Network interface\n\n# Alternative: Run as daemon with logging\nsudo snort -D -c /etc/snort/snort.conf -i eth0 -l /var/log/snort\n\n# =================================================\n# PART 4: Generate Test Traffic (In Another Terminal)\n# =================================================\n\n# Test Rule 1: Nmap SYN Scan\nnmap -sS -p 1-1000 192.168.1.100\n# Should trigger alert: \"NMAP SYN Scan Detected\"\n\n# Test Rule 2: SQL Injection\ncurl \"http://192.168.1.100/search?q=admin' OR 1=1--\"\n# Should trigger alert: \"SQL Injection - OR 1=1 Pattern\"\n\n# Test Rule 5: RDP Brute Force Simulation\nfor i in {1..10}; do \n    nc -zv 192.168.1.100 3389\n    sleep 1\ndone\n# Should trigger alert: \"Possible RDP Brute Force\"\n\n# =================================================\n# PART 5: View Alerts\n# =================================================\n\n# Real-time console output (if -A console)\n# You'll see:\n# [**] [1:1000100:1] NMAP SYN Scan Detected [**]\n# [Priority: 2]\n# 03/15-14:23:45.123456 192.168.1.50:54321 -> 192.168.1.100:80\n# TCP TTL:64 TOS:0x0 ID:12345 IpLen:20 DgmLen:40\n# ******S* Seq: 0xABCDEF  Ack: 0x0  Win: 0x7210  TcpLen: 20\n\n# View alert log file\nsudo tail -f /var/log/snort/alert\n\n# View full packet logs (PCAP format)\nsudo tcpdump -r /var/log/snort/snort.log.XXXXXXXX\n\n# =================================================\n# PART 6: Snort Statistics\n# =================================================\n\n# Send Snort a USR1 signal to dump stats\nsudo kill -USR1 $(pidof snort)\n\n# View stats in syslog\nsudo tail /var/log/syslog\n\n# Output shows:\n# - Packets analyzed\n# - Alerts generated\n# - Rules loaded\n# - Performance metrics\n\n# =================================================\n# PART 7: Advanced - Install Barnyard2 for Database Logging\n# =================================================\n\n# Barnyard2 processes unified2 output and sends to database/SIEM\n\n# Install dependencies\nsudo apt install mysql-server libmysqlclient-dev -y\n\n# Download and compile Barnyard2\nwget https://github.com/firnsy/barnyard2/archive/master.tar.gz\ntar -xvzf master.tar.gz\ncd barnyard2-master\n\n./autogen.sh\n./configure --with-mysql --with-mysql-libraries=/usr/lib/x86_64-linux-gnu\nmake\nsudo make install\n\n# Create MySQL database for Snort\nsudo mysql -u root -p << EOF\nCREATE DATABASE snort;\nGRANT ALL ON snort.* TO snort@localhost IDENTIFIED BY 'snortpass';\nFLUSH PRIVILEGES;\nEOF\n\n# Load Snort schema\ncd /path/to/snort-2.9.20/schemas\nsudo mysql -u snort -p snort < create_mysql\n\n# Configure Barnyard2\nsudo nano /etc/snort/barnyard2.conf\n\n# Add:\noutput database: log, mysql, user=snort password=snortpass dbname=snort host=localhost\n\n# Start Barnyard2\nsudo barnyard2 -c /etc/snort/barnyard2.conf \\\n    -d /var/log/snort \\\n    -f snort.u2 \\\n    -w /var/log/snort/barnyard2.waldo \\\n    -D\n\n# Now alerts are stored in MySQL and can be queried:\nmysql -u snort -p snort -e \"SELECT COUNT(*) FROM event;\"\nmysql -u snort -p snort -e \"SELECT * FROM event ORDER BY timestamp DESC LIMIT 10;\"\n\n# =================================================\n# Result: Full IDS stack with database logging!\n# =================================================",
        "language": "bash",
        "difficulty": "intermediate"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "## Real-World Case Study: Detecting WannaCry with Snort\n\n**Incident**: May 12, 2017 - WannaCry ransomware outbreak\n\n**Organization**: Healthcare provider network (45 hospitals, 200+ clinics)\n\n**Challenge**: WannaCry was spreading via EternalBlue (SMBv1 exploit), encrypting systems globally. The healthcare network needed to detect infected systems and prevent lateral movement.\n\n### Timeline\n\n**Day 0 - 14:00 UTC**: First reports of ransomware in UK NHS hospitals\n\n**Day 0 - 14:30 UTC**: Security team at our healthcare network receives threat intelligence about WannaCry spreading via SMB\n\n**Day 0 - 15:00 UTC**: Emergency response activated\n\n### Snort Deployment\n\n**Hour 1**: Security analyst writes emergency Snort rule based on available threat intel:\n\n```bash\n# WannaCry EternalBlue Exploit Detection\nalert tcp $EXTERNAL_NET any -> $HOME_NET 445 (\nmsg:\"MALWARE WannaCry - EternalBlue SMB Exploit Attempt\";\nflow:to_server,established;\ncontent:\"|FF|SMB\"; depth:5; offset:4;     # SMB header\ncontent:\"|00 00 00 00 00|\"; within:5; distance:1;\nbyte_test:1,&,0x80,8;                     # Check for exploit pattern\nthreshold:type limit, track by_src, count 1, seconds 60;\nsid:2024001; rev:1;\nclasstype:trojan-activity;\npriority:1;\nreference:cve,2017-0144;\nreference:url,en.wikipedia.org/wiki/WannaCry_ransomware_attack;\n)\n\n# WannaCry Ransomware File Download\nalert tcp any any -> $HOME_NET any (\nmsg:\"MALWARE WannaCry - Ransomware Binary Download\";\nflow:to_client,established;\ncontent:\"MZ\"; depth:2;                    # PE header\ncontent:\"Ooops\"; nocase; distance:0;      # Ransom note\ncontent:\"WanaDecryptor\"; nocase; distance:0; within:10000;\nsid:2024002; rev:1;\nclasstype:trojan-activity;\npriority:1;\n)\n\n# WannaCry Killswitch Domain Check\nalert udp $HOME_NET any -> any 53 (\nmsg:\"MALWARE WannaCry - Killswitch Domain Query\";\ncontent:\"|01 00 00 01|\"; offset:2; depth:4;\ncontent:\"iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea\"; nocase;\ncontent:\".com\"; nocase; distance:0;\nsid:2024003; rev:1;\nclasstype:trojan-activity;\nreference:url,blog.malwarebytes.com/threat-analysis/2017/05/the-worm-that-spreads-wanacrypt0r/;\n)\n\n# WannaCry SMB Scanning Activity\nalert tcp $HOME_NET any -> $HOME_NET 445 (\nmsg:\"MALWARE WannaCry - Internal SMB Scanning (Lateral Movement)\";\nflags:S;\nthreshold:type threshold, track by_src, count 20, seconds 10;\nsid:2024004; rev:1;\nclasstype:trojan-activity;\npriority:1;\n)\n```\n\n**Hour 2**: Rules deployed via centralized Snort management:\n\n```python\n# !/usr/bin/env python3\n# emergency_deploy.py\n# Push Snort rules to all sensors\n\nimport paramiko\nimport threading\n\nSENSORS = [\n'10.10.1.50',   # Hospital A\n'10.10.2.50',   # Hospital B\n'10.10.3.50',   # Clinic Network A\n# ... 42 more sensors\n]\n\nRULE_FILE = 'wannacry_emergency.rules'\n\ndef deploy_rule(sensor_ip):\n\"\"\"Deploy rule to sensor and reload Snort\"\"\"\ntry:\nssh = paramiko.SSHClient()\nssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\nssh.connect(sensor_ip, username='admin', key_filename='/root/.ssh/id_rsa')\n\n# Copy rule file\nsftp = ssh.open_sftp()\nsftp.put(RULE_FILE, '/etc/snort/rules/wannacry.rules')\nsftp.close()\n\n# Add include to snort.conf\nstdin, stdout, stderr = ssh.exec_command(\n'echo \"include \\$RULE_PATH/wannacry.rules\" >> /etc/snort/snort.conf'\n)\n\n# Reload Snort\nstdin, stdout, stderr = ssh.exec_command('sudo systemctl reload snort')\n\nprint(f\"[+] Deployed to {sensor_ip}\")\n\nexcept Exception as e:\nprint(f\"[-] Failed to deploy to {sensor_ip}: {e}\")\nfinally:\nssh.close()\n\n# Deploy to all sensors in parallel\nthreads = []\nfor sensor in SENSORS:\nt = threading.Thread(target=deploy_rule, args=(sensor,))\nt.start()\nthreads.append(t)\n\nfor t in threads:\nt.join()\n\nprint(\"[✓] Deployment complete!\")\n```\n\n**Hour 3**: Rules active on all 45 Snort sensors across network\n\n### Detection Results\n\n**First Alert - 17:23 UTC**:\n\n```\n[**] [1:2024004:1] MALWARE WannaCry - Internal SMB Scanning [**]\n[Priority: 1]\n05/12-17:23:18.456789 10.20.5.42:49153 -> 10.20.5.50:445\nTCP TTL:128 TOS:0x0 ID:31337 IpLen:20 DgmLen:52\n******S* Seq: 0x12345678  Ack: 0x0  Win: 0x2000  TcpLen: 32\n\n[**] [1:2024001:1] MALWARE WannaCry - EternalBlue SMB Exploit Attempt [**]\n[Priority: 1]\n05/12-17:23:19.123456 10.20.5.42:49154 -> 10.20.5.51:445\n```\n\n**Patient Zero Identified**: Workstation at 10.20.5.42 (Hospital Clinic B, Radiology Department)\n\n**Immediate Actions**:\n\n1. **Network Isolation**: Automatically triggered firewall ACL:\n```bash\n# Firewall auto-response (triggered by Snort alert)\niptables -I FORWARD -s 10.20.5.42 -j DROP\niptables -I FORWARD -d 10.20.5.42 -j DROP\n```\n\n2. **VLAN Quarantine**: Moved infected host to quarantine VLAN\n\n3. **EDR Response**: Triggered endpoint isolation via CrowdStrike API\n\n### Attack Propagation Stopped\n\n**Timeline of Containment**:\n\n```\n17:23:18 - First detection (Patient Zero scanning)\n17:23:45 - Automated firewall block (27 seconds)\n17:24:12 - VLAN quarantine (54 seconds)\n17:25:00 - SOC analyst notified\n17:26:30 - Endpoint isolated via EDR\n17:30:00 - All clear - no additional infections\n```\n\n**Total Infected Systems**: **1** (Patient Zero only)\n\n**Systems Protected**: 8,945 workstations, 1,234 servers\n\n### Snort Alert Statistics\n\n```bash\n# Alert breakdown (first 24 hours)\nmysql -u snort -p snort << EOF\nSELECT \nsignature.sig_name,\nCOUNT(*) as alert_count\nFROM event\nJOIN signature ON event.signature = signature.sig_id\nWHERE timestamp >= '2017-05-12 17:00:00'\nGROUP BY signature.sig_name\nORDER BY alert_count DESC;\nEOF\n\n# Results:\n# +------------------------------------------------+-------------+\n# | sig_name                                       | alert_count |\n# +------------------------------------------------+-------------+\n# | MALWARE WannaCry - Internal SMB Scanning       |         487 |\n# | MALWARE WannaCry - EternalBlue Exploit Attempt |          23 |\n# | MALWARE WannaCry - Killswitch Domain Query     |           5 |\n# | MALWARE WannaCry - Ransomware Binary Download  |           0 |\n# +------------------------------------------------+-------------+\n```\n\n**Analysis**:\n- 487 SMB scan attempts from Patient Zero (blocked)\n- 23 EternalBlue exploitation attempts (blocked)\n- 5 killswitch domain lookups (confirms WannaCry variant)\n- 0 successful ransomware downloads (containment successful)\n\n### Lessons Learned\n\n**What Worked**:\n\n1. **Rapid Rule Development**: Threat intel → Snort rule in 60 minutes\n2. **Centralized Deployment**: 45 sensors updated in 15 minutes\n3. **Automated Response**: Firewall integration blocked lateral movement\n4. **Network Segmentation**: VLANs limited blast radius\n5. **Layered Defense**: Snort + Firewall + EDR worked together\n\n**Rule Evolution**:\n\nOver the next week, rules were refined:\n\n```bash\n# Version 2: Enhanced with PCRE for better accuracy\nalert tcp $EXTERNAL_NET any -> $HOME_NET 445 (\nmsg:\"MALWARE WannaCry - EternalBlue Exploit (Enhanced)\";\nflow:to_server,established;\ncontent:\"|FF|SMB\"; depth:5; offset:4;\npcre:\"/\\xFF\\x53\\x4D\\x42\\x72.{0,100}\\x00\\x00\\x00\\x00\\x00/s\";\nthreshold:type limit, track by_src, count 1, seconds 3600;\nsid:2024005; rev:2;\nclasstype:trojan-activity;\n)\n```\n\n**Financial Impact**:\n\n- **Prevented losses**: ~$5 million (based on NHS costs of £92M)\n- **Downtime**: 2 hours (single workstation)\n- **Recovery cost**: $8,500 (reimage + investigation)\n- **Snort deployment cost**: $0 (already deployed)\n\n**Quote from CISO**:\n\n> \"Snort gave us visibility and response speed that saved our network. We detected the first infected machine within 5 minutes of it starting to spread, and had it quarantined in under 2 minutes. Compare that to the NHS, where WannaCry spread to 80 trusts and took weeks to clean up. Network visibility is everything.\"\n\n### Key Takeaways\n\n1. **Threat Intelligence Integration**: Convert intel to Snort rules immediately\n2. **Automated Response**: Don't wait for humans—integrate with firewalls/EDR\n3. **Network Sensors**: Deploy Snort at chokepoints (datacenter, clinic networks)\n4. **Tuning Matters**: Threshold rules prevented alert fatigue (487 scans = 1 alert)\n5. **Layered Security**: Snort detected, firewall blocked, EDR isolated"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "title": "Advanced: Automate Snort Rule Management with Pulledpork",
        "description": "Deploy Pulledpork for automatic rule updates from threat intelligence feeds",
        "code": "#!/bin/bash\n# =================================================\n# Automated Snort Rule Management with Pulledpork\n# =================================================\n\n# Pulledpork automatically downloads, merges, and updates\n# Snort rules from multiple sources:\n# - Snort VRT (official)\n# - Emerging Threats (ET)\n# - Community rules\n\n# =================================================\n# PART 1: Install Pulledpork\n# =================================================\n\nsudo apt update\nsudo apt install -y libcrypt-ssleay-perl liblwp-useragent-determined-perl\n\ncd /opt\nsudo git clone https://github.com/shirkdog/pulledpork.git\ncd pulledpork\n\nsudo chmod +x pulledpork.pl\n\n# =================================================\n# PART 2: Get Snort Oinkcode (API Key)\n# =================================================\n\n# 1. Register at https://www.snort.org/users/sign_up\n# 2. Get your Oinkcode from https://www.snort.org/oinkcodes\n# Example: 1234567890abcdef1234567890abcdef12345678\n\nOINKCODE=\"YOUR_OINKCODE_HERE\"\n\n# =================================================\n# PART 3: Configure Pulledpork\n# =================================================\n\nsudo cp etc/pulledpork.conf /etc/snort/pulledpork.conf\nsudo nano /etc/snort/pulledpork.conf\n\n# Edit configuration:\n\ncat > /etc/snort/pulledpork.conf << EOF\n# Rule URLs\nrule_url=https://www.snort.org/reg-rules/|snortrules-snapshot.tar.gz|${OINKCODE}\nrule_url=https://rules.emergingthreats.net/|emerging.rules.tar.gz|open\nrule_url=https://www.snort.org/downloads/community/|community-rules.tar.gz|Community\n\n# Ignore existing rules (don't download)\nignore=deleted.rules,experimental.rules,local.rules\n\n# Snort configuration\nrule_path=/etc/snort/rules/snort.rules\nout_path=/etc/snort/rules/\nlocal_rules=/etc/snort/rules/local.rules\nsid_msg=/etc/snort/sid-msg.map\nsid_msg_version=2\nsnort_version=2.9.20\n\n# Which rules to enable/disable\nenablesid=/etc/snort/enablesid.conf\ndisablesid=/etc/snort/disablesid.conf\nmodifysid=/etc/snort/modifysid.conf\n\n# Black/whitelist\nIPRVersion=/usr/local/etc/snort/rules/iplists\n\n# Snort control\nsnort_path=/usr/local/bin/snort\nconfig_path=/etc/snort/snort.conf\n\n# Keep old rules as backup\nkeepbackup=yes\n\n# Verbosity\nVerbose=1\nEOF\n\n# =================================================\n# PART 4: Rule Tuning Files\n# =================================================\n\n# Create enablesid.conf (force-enable specific rules)\nsudo nano /etc/snort/enablesid.conf\n\n# Examples:\n# Enable all WannaCry rules\npcre:WannaCry\n\n# Enable all Cobalt Strike rules\npcre:Cobalt.*Strike\n\n# Enable specific SID\n1:2024001\n\n# Enable SID range\n1:2000000-1:2999999\n\n# Create disablesid.conf (disable noisy rules)\nsudo nano /etc/snort/disablesid.conf\n\n# Examples:\n# Disable high false-positive rules\n1:1000050  # Noisy DNS rule\n1:1000051  # Noisy HTTP rule\n\n# Disable entire category\npcre:POLICY-OTHER\n\n# Create modifysid.conf (modify existing rules)\nsudo nano /etc/snort/modifysid.conf\n\n# Examples:\n# Change threshold on noisy rule\n1:1000052 \"threshold: type limit, track by_src, count 1, seconds 60;\" | \\\n          \"threshold: type limit, track by_src, count 1, seconds 3600;\"\n\n# Change priority\n1:2024001 \"priority:2;\" | \"priority:1;\"\n\n# =================================================\n# PART 5: Run Pulledpork Manually\n# =================================================\n\nsudo /opt/pulledpork/pulledpork.pl \\\n    -c /etc/snort/pulledpork.conf \\\n    -l\n\n# Output:\n# Checking latest MD5 for snortrules-snapshot-2990.tar.gz....\n# Downloaded snortrules-snapshot-2990.tar.gz\n# Downloading emerging.rules.tar.gz\n# Extracting rules...\n# Writing merged ruleset to /etc/snort/rules/snort.rules\n# Enabling/Disabling rules per config...\n# Generated sid-msg.map\n# Done!\n\n# Verify rules were downloaded\nls -lh /etc/snort/rules/\n# You should see: snort.rules (merged ruleset)\n\n# Check rule count\ngrep -c \"^alert\" /etc/snort/rules/snort.rules\n# Output: 35467 (example)\n\n# =================================================\n# PART 6: Test Configuration\n# =================================================\n\n# Update snort.conf to use merged rules\nsudo nano /etc/snort/snort.conf\n\n# Comment out individual rule includes:\n# include $RULE_PATH/community.rules\n# include $RULE_PATH/emerging-*.rules\n\n# Add single merged ruleset:\ninclude $RULE_PATH/snort.rules\ninclude $RULE_PATH/local.rules  # Keep local rules\n\n# Test configuration\nsudo snort -T -c /etc/snort/snort.conf\n\n# Should see:\n# Snort successfully validated the configuration!\n# Snort exiting\n\n# =================================================\n# PART 7: Automate with Cron\n# =================================================\n\n# Create update script\nsudo nano /opt/update_snort_rules.sh\n\ncat > /opt/update_snort_rules.sh << 'SCRIPT'\n#!/bin/bash\n\nLOGFILE=\"/var/log/pulledpork.log\"\n\necho \"[$(date)] Starting Pulledpork rule update\" >> $LOGFILE\n\n# Run Pulledpork\n/opt/pulledpork/pulledpork.pl \\\n    -c /etc/snort/pulledpork.conf \\\n    -l >> $LOGFILE 2>&1\n\nif [ $? -eq 0 ]; then\n    echo \"[$(date)] Rules updated successfully\" >> $LOGFILE\n    \n    # Test configuration\n    /usr/local/bin/snort -T -c /etc/snort/snort.conf >> $LOGFILE 2>&1\n    \n    if [ $? -eq 0 ]; then\n        echo \"[$(date)] Config valid, reloading Snort\" >> $LOGFILE\n        \n        # Reload Snort (not restart, to avoid dropping sessions)\n        systemctl reload snort\n        \n        echo \"[$(date)] Snort reloaded\" >> $LOGFILE\n    else\n        echo \"[$(date)] ERROR: Config validation failed!\" >> $LOGFILE\n        # Send alert email\n        echo \"Snort config validation failed after rule update\" | \\\n            mail -s \"[ALERT] Snort Rule Update Failed\" soc@company.com\n    fi\nelse\n    echo \"[$(date)] ERROR: Pulledpork failed\" >> $LOGFILE\nfi\n\nSCRIPT\n\nsudo chmod +x /opt/update_snort_rules.sh\n\n# Add to crontab (run daily at 2 AM)\nsudo crontab -e\n\n# Add:\n0 2 * * * /opt/update_snort_rules.sh\n\n# =================================================\n# PART 8: Monitor Rule Updates\n# =================================================\n\n# View update log\nsudo tail -f /var/log/pulledpork.log\n\n# Check when rules were last updated\nstat /etc/snort/rules/snort.rules | grep Modify\n\n# Compare rule counts before/after\ngrep -c \"^alert\" /etc/snort/rules/snort.rules\n\n# =================================================\n# PART 9: Advanced - Custom Threat Intel Integration\n# =================================================\n\n# Create script to convert MISP IOCs to Snort rules\ncat > /opt/misp_to_snort.py << 'PYTHON'\n#!/usr/bin/env python3\nimport requests\nimport json\n\nMISP_URL = \"https://your-misp.com\"\nMISP_KEY = \"YOUR_API_KEY\"\n\ndef get_misp_iocs():\n    \"\"\"Fetch malicious IPs from MISP\"\"\"\n    headers = {'Authorization': MISP_KEY}\n    \n    response = requests.get(\n        f'{MISP_URL}/attributes/restSearch',\n        headers=headers,\n        json={\n            'type': 'ip-dst',\n            'to_ids': True,\n            'published': True,\n            'timestamp': '7d'\n        },\n        verify=False\n    )\n    \n    return response.json()['response']['Attribute']\n\ndef generate_snort_rules(iocs):\n    \"\"\"Convert IOCs to Snort rules\"\"\"\n    rules = []\n    sid_base = 9000000  # Custom SID range\n    \n    for i, ioc in enumerate(iocs):\n        ip = ioc['value']\n        comment = ioc.get('comment', 'MISP IOC')\n        \n        rule = f'''alert ip any any -> {ip} any (\n    msg:\"MISP Threat Intel - {comment}\";\n    threshold:type limit, track by_src, count 1, seconds 3600;\n    sid:{sid_base + i}; rev:1;\n    classtype:trojan-activity;\n    priority:1;\n)'''\n        rules.append(rule)\n    \n    return rules\n\nif __name__ == '__main__':\n    iocs = get_misp_iocs()\n    rules = generate_snort_rules(iocs)\n    \n    with open('/etc/snort/rules/misp.rules', 'w') as f:\n        f.write('\\n\\n'.join(rules))\n    \n    print(f\"Generated {len(rules)} Snort rules from MISP\")\nPYTHON\n\nchmod +x /opt/misp_to_snort.py\n\n# Add to crontab (run hourly)\n0 * * * * /opt/misp_to_snort.py\n\n# =================================================\n# Result: Fully automated, always-current detection!\n# =================================================",
        "language": "bash",
        "difficulty": "advanced"
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "## Snort Framework: ALERT\n\n**A**ction - Choose wisely (alert, log, drop, reject)\n**L**ayer - Know your protocol (tcp, udp, icmp, ip)\n**E**xamine - Use content matching for payload inspection\n**R**ange - Define networks clearly ($HOME_NET vs $EXTERNAL_NET)\n**T**une - Thresholds prevent alert fatigue\n\n### Quick Reference: Snort Rule Template\n\n```\nalert tcp $EXTERNAL_NET any -> $HOME_NET $HTTP_PORTS (\nmsg:\"Clear description of what this detects\";\nflow:to_server,established;\ncontent:\"attack_pattern\"; nocase;\nthreshold:type limit, track by_src, count 1, seconds 60;\nsid:1000001; rev:1;\nclasstype:web-application-attack;\npriority:1;\n)\n```bash\n\n### Common Rule Options\n\n```\nmsg            // Alert message\nflow           // Session tracking\ncontent        // Payload matching\nnocase         // Case-insensitive\noffset/depth   // Where to search\ndistance/within // Relative to previous content\nthreshold      // Rate limiting\nsid            // Signature ID (1M+ for custom)\nrev            // Rule revision\nclasstype      // Attack category\npriority       // 1=high, 3=low\n```bash\n\n### Deployment Modes\n\n```\nSniffer:  snort -v\nLogger:   snort -l /var/log/snort\nNIDS:     snort -c snort.conf -i eth0\nNIPS:     snort -Q --daq afpacket -i eth0:eth1\n```"
      }
    },
    {
      "type": "quiz",
      "content": {
        "questions": [
          {
            "question": "What is the purpose of the 'flow:to_server,established' option in a Snort rule?",
            "options": [
              "Block all server traffic",
              "Only match packets going to server in established TCP sessions",
              "Log server performance metrics",
              "Configure the Snort server"
            ],
            "correct_answer": 1,
            "explanation": "'flow:to_server,established' ensures the rule only triggers on packets directed to the server (client→server) within an already-established TCP connection. This reduces false positives by ignoring handshakes and invalid sessions."
          },
          {
            "question": "In Snort, what does 'threshold:type threshold, track by_src, count 5, seconds 60' do?",
            "options": [
              "Block traffic after 5 packets",
              "Alert once if source sends 5+ matching packets within 60 seconds",
              "Log every 5th packet",
              "Delay alerts by 60 seconds"
            ],
            "correct_answer": 1,
            "explanation": "This threshold configuration prevents alert fatigue by only generating ONE alert per source IP if it triggers the rule 5 or more times within 60 seconds. Without this, you'd get flooded with alerts from the same attacker."
          },
          {
            "question": "What is the difference between Snort running with '-i eth0' versus '-Q --daq afpacket -i eth0:eth1'?",
            "options": [
              "No difference, just different syntax",
              "First is passive monitoring (IDS), second is inline blocking (IPS)",
              "First monitors eth0, second monitors both interfaces",
              "Second option is faster"
            ],
            "correct_answer": 1,
            "explanation": "'-i eth0' runs Snort in passive IDS mode (monitor only via SPAN/TAP). '-Q --daq afpacket -i eth0:eth1' runs inline IPS mode where traffic flows through Snort between two interfaces, allowing real-time blocking of malicious packets."
          }
        ]
      }
    },
    {
      "type": "reflection",
      "content": {
        "question": "Your Snort deployment is generating 10,000+ alerts per day, overwhelming your SOC team. Most alerts are for 'HTTP URI contains /admin/' which fires on both legitimate admin logins and brute-force attacks. How would you tune this rule to reduce false positives while still detecting real attacks?",
        "guidance": "Consider: (1) Add threshold (count 10+ attempts in 60 seconds = brute force, not single legit login), (2) Add source exclusions (whitelist known admin IPs), (3) Combine with other indicators (failed HTTP auth responses, multiple different /admin paths), (4) Use 'suppress' for known-good sources, (5) Add time-based rules (alerts outside business hours only), (6) Track by source IP (single IP trying multiple admin endpoints), (7) Integrate with authentication logs (failed logins + /admin access = high confidence)."
      }
    }
  ]
}