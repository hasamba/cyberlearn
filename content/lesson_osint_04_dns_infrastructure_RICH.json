{
  "lesson_id": "07f8cd2b-a604-4c27-8036-b33556da5b9e",
  "domain": "osint",
  "title": "DNS & Infrastructure OSINT",
  "difficulty": 2,
  "order_index": 4,
  "prerequisites": [
    "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
  ],
  "concepts": [
    "WHOIS and Domain Registration Intelligence",
    "DNS Enumeration and Record Analysis",
    "Certificate Transparency Logs",
    "Passive DNS and Historical Records",
    "BGP and ASN Intelligence",
    "Subdomain Discovery Techniques",
    "DNS Zone Transfers",
    "Infrastructure Mapping"
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Master WHOIS queries and interpret domain registration data for intelligence gathering",
    "Perform comprehensive DNS enumeration to map target infrastructure",
    "Leverage Certificate Transparency logs to discover hidden subdomains and services",
    "Use passive DNS databases to track infrastructure changes over time",
    "Analyze BGP routing and ASN data to identify organizational networks",
    "Map complete infrastructure footprints using multiple OSINT sources"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "content": {
        "text": "Welcome to the technical foundation of infrastructure OSINT! If OSINT were a building, DNS and infrastructure reconnaissance would be the blueprint. Every website, every server, every cloud service leaves technical fingerprints in the global DNS system—and you're about to learn how to read them.\n\nHere's what makes DNS OSINT powerful: while companies carefully protect their internal networks, they must expose their infrastructure to the internet to function. Domain registrations, DNS records, SSL certificates—these are all publicly accessible by design. The intelligence is hiding in plain sight.\n\nJim Kwik teaches that 'Knowledge becomes power when you apply it.' In this lesson, you'll move beyond surface-level reconnaissance to deep infrastructure intelligence. You'll learn to map entire corporate networks, track infrastructure changes over time, identify acquisition targets, and discover forgotten assets that security teams don't even know exist.\n\nThink like an infrastructure archaeologist: every DNS record tells a story. A subdomain called 'dev.company.com' might be a development environment with weaker security. Certificate Transparency logs reveal services that were decommissioned but never properly secured. Passive DNS shows you what the infrastructure looked like last month, last year—revealing patterns and changes that indicate strategic shifts.\n\nThis isn't just about finding subdomains. It's about building a complete picture of an organization's digital infrastructure—every entry point, every third-party relationship, every technical decision. For red teamers, this is reconnaissance gold. For defenders, it's a mirror showing your true exposure. For threat hunters, it's the map of where attacks will come from.\n\nLet's dive deep into the DNS layer. By the end of this lesson, you'll see infrastructure intelligence everywhere."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## WHOIS: Domain Registration Intelligence\n\nWHOIS is the phone book of the internet—a distributed database containing information about domain registrations, IP allocations, and autonomous system numbers. While GDPR has reduced the personal information available, WHOIS remains a critical OSINT source.\n\n### What WHOIS Reveals\n\n**Domain Registration Data**:\n- **Registrar**: Which company manages the domain (GoDaddy, Namecheap, Cloudflare)\n- **Registration Date**: When the domain was first registered (older = more legitimate?)\n- **Expiration Date**: When the domain will expire if not renewed\n- **Last Updated**: Recent changes might indicate ownership transfer or configuration updates\n- **Name Servers**: Where DNS queries are directed (reveals hosting providers)\n- **Registrant Information**: Often redacted now, but sometimes reveals organization name\n- **Domain Status**: Active, locked, pending transfer, or expired\n\n**Why This Matters**:\n\n**Age Analysis**: A domain registered yesterday claiming to be a major bank? Likely phishing. Domains registered years ago are more trustworthy (but can be compromised).\n\n**Infrastructure Clues**: Name servers reveal hosting providers:\n- `ns1.digitalocean.com` → Hosted on DigitalOcean\n- `ns1.cloudflare.com` → Using Cloudflare (likely for CDN/DDoS protection)\n- `ns1.awsdns.com` → Using AWS Route 53\n- Custom name servers like `ns1.company.com` → Self-hosted DNS (indicates sophisticated infrastructure)\n\n**Organizational Connections**: Multiple domains registered on the same date with the same registrar might indicate a coordinated campaign (legitimate or malicious).\n\n### Performing WHOIS Lookups\n\n**Command-Line WHOIS**:\n```bash\n# Linux/Mac (built-in)\nwhois example.com\n\n# Windows (requires installation or use web tools)\nwhois example.com\n\n# Query specific WHOIS server\nwhois -h whois.verisign-grs.com example.com\n```\n\n**Interpreting Results**:\n```\nDomain Name: example.com\nRegistry Domain ID: 2336799_DOMAIN_COM-VRSN\nRegistrar WHOIS Server: whois.iana.org\nRegistrar URL: http://res-dom.iana.org\nUpdated Date: 2023-08-14T07:01:38Z\nCreation Date: 1995-08-14T04:00:00Z  ← OLD domain = established\nRegistry Expiry Date: 2024-08-13T04:00:00Z\nRegistrar: RESERVED-Internet Assigned Numbers Authority\nRegistrar IANA ID: 376\nDomain Status: clientDeleteProhibited  ← Protected from deletion\nDomain Status: clientTransferProhibited ← Protected from transfer\nDomain Status: clientUpdateProhibited  ← Protected from updates\nName Server: a.iana-servers.net       ← DNS provider\nName Server: b.iana-servers.net\nDNSSEC: signedDelegation              ← DNSSEC enabled (good security)\n```\n\n**Red Flags in WHOIS**:\n- Domain registered very recently (potential phishing)\n- Privacy protection service (not necessarily bad, but hides identity)\n- Expiring soon (might indicate abandoned infrastructure)\n- Frequent updates (might indicate compromise or ownership disputes)\n- Inconsistent registrar history (domain has moved between many registrars)\n\n### IP WHOIS (Network Intelligence)\n\nWHOIS isn't just for domains—you can query IP addresses to find network ownership:\n\n```bash\n# Find who owns an IP address\nwhois 8.8.8.8\n\n# Result shows:\nNetRange: 8.0.0.0 - 8.255.255.255\nCIDR: 8.0.0.0/8\nNetName: LVLT-ORG-8-8\nNetHandle: NET-8-0-0-0-1\nOrganization: Google LLC  ← Owner\nCity: Mountain View\nState/Province: CA\nCountry: US\n```\n\n**Intelligence Value**:\n- Identify hosting providers and cloud platforms\n- Map IP ranges owned by target organizations\n- Discover geographic locations of infrastructure\n- Find related networks via the same organization\n- Track infrastructure ownership changes\n\n### ASN Intelligence (Autonomous System Numbers)\n\nASNs identify networks on the internet. Large organizations have their own ASNs:\n\n```bash\n# Find ASN for an IP\nwhois -h whois.cymru.com \" -v 8.8.8.8\"\n\n# Result:\nAS      | IP               | BGP Prefix          | CC | Registry | Allocated  | AS Name\n15169   | 8.8.8.8          | 8.8.8.0/24          | US | arin     | 1992-12-01 | GOOGLE\n```\n\n**ASN 15169 = Google's network**. All IPs in Google's ASN are Google-owned infrastructure.\n\n**Why This Matters**:\n- Find ALL IP ranges owned by an organization (not just one domain)\n- Track infrastructure expansion (new IP ranges allocated)\n- Identify cloud migrations (ASN changes from self-hosted to AWS/Azure)\n- Discover subsidiaries and acquisitions (related ASNs)\n\n### WHOIS Privacy and GDPR Impact\n\nSince GDPR (2018), personal information in WHOIS is often redacted:\n\n**Before GDPR**:\n```\nRegistrant Name: John Smith\nRegistrant Organization: Example Corp\nRegistrant Street: 123 Main St\nRegistrant City: San Francisco\nRegistrant Email: john.smith@example.com\nRegistrant Phone: +1.4155551234\n```\n\n**After GDPR**:\n```\nRegistrant Name: REDACTED FOR PRIVACY\nRegistrant Organization: Example Corp  ← Usually still visible for companies\nRegistrant Email: contact@privacyprotect.org\n```\n\n**Work-Arounds**:\n1. **Historical WHOIS**: Use services that captured WHOIS data before GDPR\n2. **Organizational registrations**: Companies often still show organization names\n3. **Cross-reference**: Correlate with other OSINT sources (LinkedIn, job postings)\n4. **Legal requests**: Law enforcement can request unredacted WHOIS data\n\n### Reverse WHOIS (Finding Related Domains)\n\nReverse WHOIS searches find all domains registered by the same person/email/organization:\n\n**Use Cases**:\n- Find all domains owned by a target organization\n- Identify phishing infrastructure (multiple domains registered by same actor)\n- Discover acquisitions and subsidiaries\n- Track threat actor infrastructure\n\n**Tools**:\n- **WhoisXMLAPI** (commercial, very comprehensive)\n- **DomainTools Reverse WHOIS** (commercial)\n- **ViewDNS.info Reverse Whois** (free, limited)\n\n**Example**:\nIf you find one phishing domain registered to `badguy@gmail.com`, reverse WHOIS might reveal 50 other domains registered by the same email—an entire phishing campaign."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## DNS Enumeration and Analysis\n\nThe Domain Name System (DNS) translates human-readable domain names into IP addresses. DNS records contain a wealth of intelligence beyond just IP addresses.\n\n### DNS Record Types (Intelligence Value)\n\n**A Record** (IPv4 Address):\n```bash\nnslookup example.com\n# Returns: 93.184.216.34\n```\n**Intelligence**: Where the web server is hosted. Multiple A records = load balancing or redundancy.\n\n**AAAA Record** (IPv6 Address):\n```bash\nnslookup -type=AAAA example.com\n# Returns: 2606:2800:220:1:248:1893:25c8:1946\n```\n**Intelligence**: IPv6 adoption (many organizations haven't secured IPv6 properly).\n\n**MX Record** (Mail Servers):\n```bash\nnslookup -type=MX example.com\n# Returns:\n# mail.example.com priority 10\n# mail2.example.com priority 20\n```\n**Intelligence**: Email infrastructure. Priority values show failover order. Records might reveal:\n- Google Workspace: `aspmx.l.google.com`\n- Microsoft 365: `example-com.mail.protection.outlook.com`\n- Self-hosted mail: Custom server names\n\n**NS Record** (Name Servers):\n```bash\nnslookup -type=NS example.com\n# Returns:\n# ns1.example.com\n# ns2.example.com\n```\n**Intelligence**: Who manages DNS (Cloudflare, AWS Route 53, self-hosted). Reveals infrastructure sophistication.\n\n**TXT Record** (Text/Configuration Data):\n```bash\nnslookup -type=TXT example.com\n# Returns:\n# \"v=spf1 include:_spf.google.com ~all\"\n# \"google-site-verification=abc123...\"\n```\n**Intelligence**: \n- **SPF records** show authorized mail senders\n- **DMARC records** reveal email security policies\n- **Domain verification** tokens show what services they use (Google, Microsoft)\n- Sometimes developers leave sensitive info in TXT records (API keys, notes)\n\n**CNAME Record** (Canonical Name / Alias):\n```bash\nnslookup blog.example.com\n# Returns: blog.example.com is an alias for example.github.io\n```\n**Intelligence**: Third-party services in use. Common patterns:\n- `something.herokuapp.com` → Heroku app\n- `something.azurewebsites.net` → Azure\n- `something.cloudfront.net` → AWS CloudFront CDN\n- `something.github.io` → GitHub Pages\n\n**SRV Record** (Service Records):\n```bash\nnslookup -type=SRV _sip._tcp.example.com\n```\n**Intelligence**: Reveals specific services (SIP for VoIP, XMPP for messaging, etc.)\n\n**SOA Record** (Start of Authority):\n```bash\nnslookup -type=SOA example.com\n# Returns:\n# Primary nameserver: ns1.example.com\n# Responsible party: admin.example.com\n# Serial number: 2023101501\n```\n**Intelligence**: Administrative contact, zone serial number (increments with each update), and timing data.\n\n### Comprehensive DNS Interrogation\n\n**Query All Records**:\n```bash\nnslookup -type=ANY example.com\n\n# OR use dig (more detailed)\ndig example.com ANY\n\n# OR use host command\nhost -a example.com\n```\n\n**Systematic Enumeration**:\n```bash\n# Get each record type individually for thorough analysis\nfor type in A AAAA MX NS TXT CNAME SOA; do\necho \"=== $type Records ===\"\nnslookup -type=$type example.com\necho \"\"\ndone\n```bash\n\n### DNS Zone Transfers (AXFR)\n\nA zone transfer is when a DNS server sends a copy of all its records to another server. Misconfigured servers might allow unauthorized zone transfers—revealing the entire DNS zone.\n\n**Attempt Zone Transfer**:\n```bash\n# Find the name servers first\nnslookup -type=NS example.com\n# Returns: ns1.example.com\n\n# Try zone transfer from each name server\ndig @ns1.example.com example.com AXFR\n\n# OR with nslookup\nnslookup\nserver ns1.example.com\nset type=any\nls -d example.com\n```\n\n**If Successful** (rare now, but happens):\n```\nexample.com.    86400   IN  SOA ns1.example.com. ...\nexample.com.    300     IN  A   93.184.216.34\nwww.example.com. 300    IN  A   93.184.216.34\nmail.example.com. 300   IN  A   198.51.100.10\nftp.example.com. 300    IN  A   198.51.100.11\ndev.example.com. 300    IN  A   192.168.1.10  ← Internal IP exposed!\nvpn.example.com. 300    IN  A   203.0.113.5\ntest-api.example.com. 300 IN A   10.0.0.5    ← Another internal IP!\n```\n\n**Intelligence Value**: You've just obtained the complete DNS zone—every subdomain, every server, including internal/development systems that weren't meant to be public knowledge.\n\n**Why This Works (when it does)**:\n- Legacy DNS servers with default allow-transfer settings\n- Misconfiguration during DNS migration\n- Internal DNS servers accidentally exposed to the internet\n\n**Modern Reality**: Zone transfers are now rarely allowed due to better default configurations and security awareness. But always try—you'll be surprised occasionally.\n\n### DNS Reconnaissance Tools\n\n**DNSRecon** (comprehensive DNS enumeration):\n```bash\n# Install\npip install dnsrecon\n\n# Standard enumeration\ndnsrecon -d example.com\n\n# Zone transfer attempt\ndnsrecon -d example.com -t axfr\n\n# Bruteforce subdomains\ndnsrecon -d example.com -t brt -D /usr/share/wordlists/subdomains.txt\n```\n\n**Fierce** (DNS scanner):\n```bash\n# Install\nsudo apt install fierce\n\n# Scan\nfierce --domain example.com\n```\n\n**DNSDumpster** (online tool with visualization):\n- Visit: https://dnsdumpster.com/\n- Enter domain\n- Get DNS records + visual network map\n- Shows relationships between domains and IPs\n\n### DNS Intelligence Patterns\n\n**Identifying Cloud Providers**:\n\n```\nCNAME points to:\n- *.amazonaws.com → AWS\n- *.cloudfront.net → AWS CloudFront\n- *.azurewebsites.net → Microsoft Azure\n- *.cloudapp.net → Azure\n- *.appspot.com → Google Cloud Platform\n- *.cloudfunctions.net → GCP Cloud Functions\n- *.herokuapp.com → Heroku\n- *.digitaloceanspaces.com → DigitalOcean\n```\n\n**Identifying Email Security**:\n\n```\nMX records show:\n- *.google.com → Google Workspace\n- *.outlook.com → Microsoft 365\n- *.pphosted.com → Proofpoint (email security)\n- *.mimecast.com → Mimecast (email security)\n```\n\n**Identifying CDNs**:\n\n```\nCNAME or NS records show:\n- *.cloudflare.com → Cloudflare\n- *.akamai.net → Akamai\n- *.fastly.net → Fastly\n- *.cloudfront.net → AWS CloudFront\n```\n\n**Why This Matters**: Knowing the technology stack helps attackers find vulnerabilities specific to those platforms—and helps defenders understand their architecture and exposure."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Certificate Transparency and Passive DNS\n\n### Certificate Transparency Logs\n\nCertificate Transparency (CT) is a security mechanism requiring SSL/TLS certificates to be logged in public, append-only logs. This was designed to prevent fraudulent certificates—but it's also a goldmine for subdomain discovery.\n\n**Why CT Logs Matter**:\nEvery time a website gets an SSL certificate (including internal dev servers, staging environments, VPNs), it's logged publicly. Even if the subdomain isn't advertised or linked anywhere, the certificate reveals its existence.\n\n**Searching Certificate Transparency Logs**:\n\n**crt.sh** (most popular CT search engine):\n```bash\n# Web interface\nhttps://crt.sh/?q=%.example.com\n\n# Command-line query (JSON output)\ncurl -s \"https://crt.sh/?q=%.example.com&output=json\" | jq -r '.[].name_value' | sort -u\n\n# Shows:\nwww.example.com\nmail.example.com\napi.example.com\ndev.example.com          ← Development environment!\nstaging.example.com      ← Staging environment!\ntest-api.example.com     ← Test environment!\nvpn.example.com          ← VPN portal!\nold-site.example.com     ← Legacy site (might be vulnerable)\n*.admin.example.com      ← Wildcard cert for admin subdomains\n```\n\n**Intelligence Goldmine**:\n\n1. **Development/Staging Environments**: Often have weaker security\n- `dev.company.com`\n- `staging.company.com`\n- `test.company.com`\n- `uat.company.com` (User Acceptance Testing)\n\n2. **Internal Services**: Exposed to internet when they shouldn't be\n- `vpn.company.com`\n- `admin.company.com`\n- `internal.company.com`\n- `intranet.company.com`\n\n3. **Legacy Systems**: Old infrastructure, likely unpatched\n- `old.company.com`\n- `legacy.company.com`\n- `archive.company.com`\n- Certificate issued 5+ years ago\n\n4. **Geographic/Organizational Structure**:\n- `us.company.com`, `eu.company.com`, `asia.company.com`\n- `hr.company.com`, `finance.company.com`, `legal.company.com`\n- Reveals organizational structure\n\n5. **Third-Party Relationships**:\n- `partner.company.com`\n- `vendor.company.com`\n- `client-name.company.com`\n- Reveals business relationships\n\n**Other CT Log Search Tools**:\n- **Censys.io**: Search certificates with advanced queries\n- **Facebook CT Monitoring**: https://developers.facebook.com/tools/ct/\n- **SSLMate Cert Spotter**: Alerts for new certificates\n\n**Automated Subdomain Discovery from CT Logs**:\n\n```bash\n# Using subfinder (install: go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest)\nsubfinder -d example.com -all -silent\n\n# Using amass (comprehensive OSINT tool)\namass enum -passive -d example.com\n\n# Using assetfinder\necho example.com | assetfinder --subs-only\n```bash\n\n### Passive DNS Intelligence\n\nPassive DNS captures and stores historical DNS query/response data from recursive DNS servers worldwide. This reveals:\n- **What the infrastructure looked like in the past**\n- **Infrastructure changes over time**\n- **Decommissioned services that might still be running**\n- **IP address associations over time**\n\n**Why Passive DNS Matters**:\n\nActive DNS (querying right now) shows current state. Passive DNS shows history:\n- Company moved from AWS to Azure 6 months ago, but old AWS infrastructure might still be running\n- Subdomain was removed from DNS but server is still accessible by IP\n- Domain was associated with a different IP range during a data breach\n- Threat actor rotated infrastructure through multiple IPs\n\n**Passive DNS Sources**:\n\n**SecurityTrails** (comprehensive passive DNS):\n```bash\n# Web interface: https://securitytrails.com/\n# Search: example.com\n# Shows:\n- Historical IP addresses\n- Historical subdomains\n- Historical DNS records\n- Timeline of changes\n```\n\n**VirusTotal Passive DNS**:\n```bash\n# Web interface: https://www.virustotal.com/\n# Search domain or IP\n# Click \"Relations\" tab\n# Shows:\n- Domains hosted on this IP\n- IPs this domain has resolved to\n- Historical data\n```\n\n**Farsight DNSDB** (commercial, very comprehensive):\n```bash\n# API access (requires subscription)\ncurl -X GET \"https://api.dnsdb.info/lookup/rrset/name/*.example.com\" \\\n-H \"X-API-Key: YOUR_API_KEY\"\n```\n\n**OTX AlienVault (free passive DNS)**:\n- https://otx.alienvault.com/\n- Search domain or IP\n- Shows passive DNS records and threat intelligence\n\n**RiskIQ PassiveTotal** (commercial):\n- Extensive passive DNS database\n- Historical WHOIS\n- Tracking threat actor infrastructure\n\n**Example: Tracking Infrastructure Changes**\n\n```\nPassive DNS Query: example.com\n\nCurrent (2025-10-28):\nexample.com → 203.0.113.50 (AWS)\n\nHistorical Records:\n2025-01-15: example.com → 198.51.100.25 (AWS)\n2024-06-10: example.com → 192.0.2.10 (On-premise / Different ASN)\n2023-11-03: example.com → 192.0.2.10 (Same on-premise)\n2023-03-20: example.com → 192.0.2.10 (Same on-premise)\n\nAnalysis:\n- Company migrated from on-premise to AWS in June 2024\n- Changed AWS IPs in January 2025 (possible infrastructure refresh)\n- Old on-premise server at 192.0.2.10 might still be accessible\n```\n\n**Intelligence Applications**:\n\n1. **Find forgotten infrastructure**: Old IPs that still have services running\n2. **Track infrastructure migrations**: On-premise → Cloud, AWS → Azure\n3. **Identify infrastructure during breaches**: Where were they hosted when the breach occurred?\n4. **Threat actor tracking**: Map threat actor infrastructure across IP changes\n5. **Acquisition intelligence**: Company acquired another company, infrastructure merged\n\n### Combining CT Logs + Passive DNS\n\n**Workflow**:\n```\n1. Use CT Logs to discover ALL subdomains (even historical)\n→ Result: 100 subdomains found\n\n2. For each subdomain, query Passive DNS\n→ Result: Historical IP addresses for each subdomain\n\n3. For each IP, query reverse DNS and IP WHOIS\n→ Result: Hosting providers, ASNs, geographic locations\n\n4. Build timeline of infrastructure changes\n→ Result: Complete infrastructure map (current + historical)\n```\n\n**Example Output**:\n```\ndev.example.com:\n- 2025-10-28: 203.0.113.50 (AWS US-East)\n- 2024-12-01: 198.51.100.30 (AWS US-West)\n- 2024-03-15: NXDOMAIN (subdomain didn't exist)\n\nstaging.example.com:\n- 2025-10-28: 192.0.2.100 (DigitalOcean NYC)\n- 2024-01-20: 192.0.2.100 (Same IP since creation)\n\nAnalysis:\n- dev.example.com is actively maintained (IP changes)\n- staging.example.com hasn't changed in over a year (potential neglect)\n- staging might be running outdated software (security risk)\n```\n\nThis combination gives you not just a snapshot, but a movie of infrastructure evolution."
      }
    },
    {
      "type": "video",
      "content": {
        "text": "Watch this practical demonstration of DNS and infrastructure OSINT techniques:\n\nhttps://www.youtube.com/watch?v=xjpcKDNhZBg\n\n**Video: \"DNS Reconnaissance for Penetration Testing\" by HackerSploit**\n\nThis video demonstrates real-world DNS enumeration techniques including WHOIS lookups, DNS record analysis, subdomain discovery, and zone transfer attempts. Pay attention to how the instructor chains multiple techniques together to build a complete infrastructure map.\n\n**Key Techniques Demonstrated**:\n- WHOIS analysis and interpretation\n- DNS record enumeration (A, MX, NS, TXT)\n- Zone transfer attempts (AXFR)\n- Subdomain bruteforcing with common wordlists\n- Using tools like DNSRecon and Fierce\n- Correlating DNS data to identify hosting providers\n\n**Watch for**:\n- How seemingly unrelated DNS records connect to reveal infrastructure\n- The methodical approach: gather all data first, analyze patterns second\n- How attackers use this information to plan penetration test strategies\n- The ethical boundaries discussed (authorized testing vs unauthorized reconnaissance)\n\nAfter watching, try the techniques shown against your own domain (with proper authorization) or public domains like example.com for practice."
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "## Hands-On Exercise 1: Complete Infrastructure Mapping\n\nLet's perform comprehensive DNS and infrastructure OSINT on a target domain using multiple techniques. You'll combine WHOIS, DNS enumeration, Certificate Transparency, and passive DNS to build a complete picture.\n\n### Scenario: External Attack Surface Assessment\n\nYour red team has been authorized to assess the external attack surface of `example.com`. Your goal is to identify all publicly accessible infrastructure, including forgotten or misconfigured assets.\n\n**Important**: Use `example.com` for practice, or your own authorized domain. NEVER perform these techniques on targets without explicit written authorization.\n\n### Phase 1: WHOIS Intelligence\n\n**Step 1: Domain WHOIS**\n```bash\n# Basic WHOIS query\nwhois example.com\n\n# Online alternative\n# Visit: https://who.is/whois/example.com\n\n# Document:\n# - Registration date (when was domain created?)\n# - Expiration date (is it maintained?)\n# - Registrar (where is it managed?)\n# - Name servers (where is DNS hosted?)\n# - Domain status (locked/unlocked?)\n```\n\n**Analysis Questions**:\n1. How old is the domain? (Older = more established, newer = potentially suspicious)\n2. When does it expire? (Soon = might be abandoned)\n3. Who manages DNS? (ns1.cloudflare.com = Cloudflare, ns1.awsdns.com = AWS Route 53)\n4. Any recent changes? (Updated date shows modifications)\n\n**Step 2: Resolve Primary IP**\n```bash\n# Get the main IP address\nnslookup example.com\n\n# Or with dig (more detailed)\ndig example.com +short\n\n# Document the IP: 93.184.216.34\n```\n\n**Step 3: IP WHOIS (Network Ownership)**\n```bash\n# Who owns this IP?\nwhois 93.184.216.34\n\n# Look for:\n# - Organization name (hosting provider or owner)\n# - NetRange (IP range allocated to this organization)\n# - Country (geographic location)\n# - ASN (Autonomous System Number)\n\n# Example output:\nNetRange: 93.184.216.0 - 93.184.216.255\nCIDR: 93.184.216.0/24\nNetName: EDGECAST-NETBLK-03\nOrganization: Edgecast Inc. (EDGEC)\nCountry: US\n```\n\n**Analysis**: This IP is owned by Edgecast (Verizon's CDN), meaning example.com uses a content delivery network. The actual origin server is hidden behind the CDN.\n\n**Step 4: ASN Intelligence**\n```bash\n# Find ASN for this IP\nwhois -h whois.cymru.com \" -v 93.184.216.34\"\n\n# Or use online tool:\n# https://bgp.he.net/\n# Enter IP address\n\n# Result shows ASN number: AS15133 (Edgecast)\n```\n\n**Intelligence Value**: \n- All IPs in ASN 15133 belong to Edgecast/Verizon\n- You can search for all IPs in this ASN to find related infrastructure\n- Changes in ASN over time (via passive DNS) indicate hosting migrations\n\n### Phase 2: DNS Enumeration\n\n**Step 5: Enumerate All DNS Record Types**\n```bash\n# Create a script to query all record types\n# !/bin/bash\n\nDOMAIN=\"example.com\"\n\necho \"=== DNS ENUMERATION: $DOMAIN ===\"\necho \"\"\n\nfor TYPE in A AAAA MX NS TXT CNAME SOA SRV; do\necho \"--- $TYPE Records ---\"\nnslookup -type=$TYPE $DOMAIN 2>/dev/null | grep -v \"^\\*\\*\" | tail -n +3\necho \"\"\ndone\n\n# Save this as dns_enum.sh and run:\n# chmod +x dns_enum.sh\n# ./dns_enum.sh > dns_results.txt\n```\n\n**Step 6: Analyze MX Records (Email Infrastructure)**\n```bash\nnslookup -type=MX example.com\n\n# Example output:\nexample.com mail exchanger = 0 .\n\n# This means example.com doesn't receive email (unusual)\n# Normal output looks like:\n# mail exchanger = 10 aspmx.l.google.com  ← Google Workspace\n# mail exchanger = 20 alt1.aspmx.l.google.com\n```\n\n**Intelligence**: \n- `aspmx.l.google.com` = Google Workspace\n- `*.outlook.com` = Microsoft 365\n- `*.pphosted.com` = Proofpoint (security gateway)\n- Custom server = Self-hosted email\n\n**Step 7: Analyze TXT Records (Configuration Data)**\n```bash\nnslookup -type=TXT example.com\n\n# Look for:\n# - SPF records: \"v=spf1 include:_spf.google.com ~all\"\n#   (Shows authorized email senders)\n# - DMARC records: \"v=DMARC1; p=reject; ...\"\n#   (Shows email authentication policy)\n# - Domain verification tokens\n# - Sometimes: API keys, notes, or debug info (misconfiguration)\n```\n\n**Step 8: Check for Zone Transfer (AXFR)**\n```bash\n# First, find name servers\nnslookup -type=NS example.com\n\n# Try zone transfer on each name server\ndig @a.iana-servers.net example.com AXFR\ndig @b.iana-servers.net example.com AXFR\n\n# Most will refuse:\n# ; Transfer failed.\n# ; Communications error: connection refused\n\n# But always try—misconfigurations happen\n```\n\n**If successful**: You'd get the entire DNS zone with all subdomains and IPs. This is rare but devastating for the target.\n\n### Phase 3: Certificate Transparency Discovery\n\n**Step 9: Search Certificate Transparency Logs**\n```bash\n# Visit crt.sh\nhttps://crt.sh/?q=%.example.com\n\n# OR use command-line:\ncurl -s \"https://crt.sh/?q=%.example.com&output=json\" | \\\njq -r '.[].name_value' | \\\nsed 's/\\*\\.//g' | \\\nsort -u > subdomains_ct.txt\n\n# Review subdomains_ct.txt for interesting targets:\ncat subdomains_ct.txt\n\n# Look for:\n# - dev.example.com (development)\n# - staging.example.com (staging)\n# - test.example.com (testing)\n# - admin.example.com (admin panel)\n# - vpn.example.com (VPN portal)\n# - api.example.com (API endpoints)\n# - old.example.com (legacy systems)\n```\n\n**Example Findings**:\n```\nwww.example.com          ← Main site\nmail.example.com         ← Email server\ndev.example.com          ← DEV ENVIRONMENT (high-value target!)\nstaging-api.example.com  ← Staging API (might have debug mode enabled)\nlegacy.example.com       ← Old system (possibly unpatched)\n*.admin.example.com      ← Wildcard cert for admin subdomains\n```\n\n**Intelligence Priority**:\n- **Critical**: admin, vpn, dev, staging, test, internal\n- **High**: api, legacy, old, backup\n- **Medium**: mail, www, cdn, static\n- **Low**: www, blog, marketing\n\n**Step 10: Resolve Each Subdomain**\n```bash\n# For each subdomain found, check if it's currently active:\nwhile read subdomain; do\necho -n \"$subdomain: \"\nnslookup $subdomain 2>/dev/null | grep \"Address: \" | tail -1 | awk '{print $2}'\ndone < subdomains_ct.txt > subdomain_ips.txt\n\n# Review results:\ncat subdomain_ips.txt\n\n# Shows:\nwww.example.com: 93.184.216.34\ndev.example.com: 198.51.100.50  ← Different IP! Separate infrastructure\nstaging.example.com: NXDOMAIN    ← No longer resolves (but cert existed)\n```\n\n**Analysis**:\n- Subdomains on different IPs might be on different hosting (weaker security?)\n- NXDOMAIN subdomains with certificates might still be accessible by IP\n- Patterns in IP ranges reveal infrastructure organization\n\n### Phase 4: Passive DNS Analysis\n\n**Step 11: Query Passive DNS for Historical Data**\n```bash\n# Use SecurityTrails (requires free account)\n# Visit: https://securitytrails.com/domain/example.com/history/a\n\n# OR use VirusTotal\n# Visit: https://www.virustotal.com/gui/domain/example.com/relations\n\n# Look for:\n# - Historical IP addresses\n# - When did IPs change? (infrastructure migrations)\n# - What IPs did subdomains resolve to in the past?\n# - Are old IPs still accessible?\n```\n\n**Example Historical Data**:\n```\nexample.com IP History:\n2025-10-28: 93.184.216.34 (Edgecast CDN) ← Current\n2024-05-15: 192.0.2.10 (On-premise) ← Migrated to CDN\n2023-01-10: 192.0.2.10 (Same on-premise)\n\nAnalysis:\n- Migrated to Edgecast CDN in May 2024\n- Old on-premise server at 192.0.2.10 might still be running\n- Check if 192.0.2.10 is still accessible (potential security gap)\n```\n\n**Step 12: Test Historical IPs for Accessibility**\n```bash\n# Try accessing old IPs directly\ncurl -I http://192.0.2.10\n\n# If accessible:\nHTTP/1.1 200 OK\nServer: Apache/2.4.41 (Ubuntu)\n\n# Intelligence:\n# - Old infrastructure still running!\n# - Might be forgotten by security team\n# - Potential backdoor or outdated software\n# - Add to target list for vulnerability assessment\n```bash\n\n### Phase 5: Document and Analyze\n\n**Create Infrastructure Map**:\n```\n=== INFRASTRUCTURE MAP: example.com ===\nDate: 2025-10-28\n\nPRIMARY DOMAIN:\nexample.com → 93.184.216.34 (Edgecast CDN, ASN 15133)\n\nSUBDOMAINS DISCOVERED (from CT logs):\n1. www.example.com → 93.184.216.34 (Same as primary)\n2. dev.example.com → 198.51.100.50 (AWS us-east-1, ASN 16509)\n3. legacy.example.com → 192.0.2.10 (On-premise?, ASN unknown)\n4. staging.example.com → NXDOMAIN (decommissioned but cert exists)\n\nEMAIL INFRASTRUCTURE:\nNo MX records (doesn't receive email)\n\nHOSTING PROVIDERS IDENTIFIED:\n- Primary: Edgecast (Verizon CDN)\n- Development: AWS (US East)\n- Legacy: On-premise or colocation\n\nHISTORICAL DATA:\n- Migrated from on-premise to CDN in May 2024\n- Old server at 192.0.2.10 might still be accessible\n\nHIGH-VALUE TARGETS:\n1. dev.example.com (development environment, 198.51.100.50)\n2. legacy.example.com (old infrastructure, 192.0.2.10)\n3. 192.0.2.10 (historical primary IP, test accessibility)\n\nRECOMMENDATIONS:\n1. Assess dev.example.com for weak security (common in dev environments)\n2. Test legacy.example.com for outdated software\n3. Verify historical IP 192.0.2.10 is properly decommissioned\n4. Investigate why staging.example.com had a certificate but no longer resolves\n```\n\nYou've now built a complete infrastructure map using only OSINT techniques—no active scanning or exploitation required. This intelligence is exactly what red teamers use to plan attacks and defenders use to understand their exposure."
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "## Hands-On Exercise 2: BGP and ASN Intelligence\n\nNow let's explore Border Gateway Protocol (BGP) and Autonomous System Numbers (ASNs) to understand how organizations' networks are structured at the internet routing level.\n\n### Scenario: Mapping Corporate Network Infrastructure\n\nYou want to identify ALL IP ranges owned by a target organization, not just the IPs associated with specific domains. ASN intelligence reveals the entire network footprint.\n\n### Understanding ASNs\n\nAn Autonomous System (AS) is a collection of IP networks and routers under the control of one organization. Each AS has a unique ASN (Autonomous System Number).\n\n**Examples**:\n- ASN 15169 = Google\n- ASN 16509 = Amazon AWS\n- ASN 8075 = Microsoft\n- ASN 13335 = Cloudflare\n- ASN 20940 = Akamai\n\nLarge organizations have their own ASNs. Smaller organizations use their hosting provider's ASN.\n\n### Step 1: Find ASN for a Domain\n\n```bash\n# Method 1: Resolve domain to IP, then query ASN\nnslookup google.com\n# Returns: 142.250.185.46\n\nwhois -h whois.cymru.com \" -v 142.250.185.46\"\n\n# Output:\nAS      | IP               | BGP Prefix       | CC | Registry | Allocated  | AS Name\n15169   | 142.250.185.46   | 142.250.0.0/15   | US | arin     | 2012-05-24 | GOOGLE\n\n# Google's ASN is 15169\n```\n\n**Method 2: Use Hurricane Electric BGP Toolkit**\n```bash\n# Visit: https://bgp.he.net/\n# Search for: google.com or 142.250.185.46\n# Shows:\n# - ASN: 15169\n# - Organization: Google LLC\n# - All IP prefixes announced by this ASN\n```bash\n\n### Step 2: Enumerate All IP Ranges for an ASN\n\n```bash\n# Once you know the ASN (e.g., AS15169 for Google), find all IP ranges:\n\n# Visit Hurricane Electric:\nhttps://bgp.he.net/AS15169\n\n# Shows all IP prefixes:\n8.8.4.0/24\n8.8.8.0/24\n8.34.208.0/20\n8.35.192.0/20\n23.236.48.0/20\n23.251.128.0/19\n... (hundreds more)\n\n# These are ALL Google-owned IP ranges\n```\n\n**Why This Matters**:\n- You've identified EVERY IP address owned by Google\n- Thousands of IPs, many not associated with any domain\n- Potential for discovering internal infrastructure\n- Map the complete network footprint\n\n### Step 3: Analyze ASN Relationships\n\n```bash\n# BGP shows peering relationships between ASNs:\n\n# Visit: https://bgp.he.net/AS15169#_peers\n# Shows:\n# - Upstream providers (who Google buys bandwidth from)\n# - Downstream customers (who buys bandwidth from Google)\n# - Peers (who exchanges traffic with Google)\n\n# Intelligence:\n# - How is the organization connected to the internet?\n# - Who are their ISP providers?\n# - Do they have redundant connections?\n# - What other organizations do they connect with directly?\n```bash\n\n### Step 4: Reverse IP Lookup (Find Domains on an IP)\n\n```bash\n# You have an IP (203.0.113.50) from ASN enumeration\n# What domains are hosted on this IP?\n\n# Method 1: Reverse DNS lookup\nhost 203.0.113.50\n# Returns: 50.113.0.203.in-addr.arpa domain name pointer example.com\n\n# Method 2: Use DNSlytics or similar\n# Visit: https://dnslytics.com/reverse-ip\n# Enter IP: 203.0.113.50\n# Shows all domains hosted on this IP\n\n# Method 3: Use SecurityTrails\n# API or web interface shows all domains resolved to this IP\n```\n\n**Intelligence Value**:\n- Find all websites hosted on the same server\n- Identify shared hosting (multiple organizations on same IP)\n- Discover related domains (same owner, different domain names)\n- Potential for \"virtual host\" enumeration\n\n### Step 5: Track ASN Changes Over Time (Passive BGP)\n\n```bash\n# Use passive DNS + ASN data to track infrastructure migrations:\n\n# Example:\nexample.com ASN History:\n\n2025-10-28: 93.184.216.34 → AS15133 (Edgecast/Verizon)\n2024-05-20: 192.0.2.10 → AS64512 (Company's own ASN)\n2023-01-10: 192.0.2.10 → AS64512 (Same)\n\nAnalysis:\n- Company had their own ASN (AS64512) until May 2024\n- Migrated to Edgecast CDN (AS15133)\n- Might have sold or decommissioned their ASN\n- Old infrastructure at AS64512 might still exist\n```\n\n**Check if Old ASN Still Exists**:\n```bash\n# Visit: https://bgp.he.net/AS64512\n# If ASN still announces routes:\n# - Infrastructure is still operational\n# - Company might have retained some self-hosted services\n# - Potential security gap (forgotten infrastructure)\n\n# If ASN is no longer active:\n# - Fully migrated to new provider\n# - Old infrastructure properly decommissioned\n```bash\n\n### Step 6: Identify Cloud Migrations\n\n**Common Cloud Provider ASNs**:\n```\nAWS:\n- AS16509 (Amazon)\n- AS14618 (Amazon AES)\n\nMicrosoft Azure:\n- AS8075 (Microsoft)\n- AS8068 (Microsoft)\n\nGoogle Cloud:\n- AS15169 (Google)\n- AS36040 (Google Cloud)\n\nCloudflare:\n- AS13335 (Cloudflare)\n\nAkamai:\n- AS20940 (Akamai)\n\nDigitalOcean:\n- AS14061 (DigitalOcean)\n```\n\n**Track Migration Pattern**:\n```\nexample.com ASN Timeline:\n\n2023: AS64512 (On-premise datacenter)\n2024: AS16509 (AWS) ← Cloud migration\n2025: AS16509 (Still on AWS)\n\nIntelligence:\n- Company migrated to AWS in 2024\n- Likely using EC2 or similar AWS services\n- Search for misconfigured AWS resources (S3 buckets, etc.)\n- Old on-premise infrastructure (AS64512) may still exist\n```bash\n\n### Step 7: Complete ASN Reconnaissance Workflow\n\n```bash\n# !/bin/bash\n# ASN Reconnaissance Script\n\nDOMAIN=\"example.com\"\n\necho \"=== ASN RECONNAISSANCE: $DOMAIN ===\"\necho \"\"\n\n# Step 1: Resolve domain to IP\necho \"[1] Resolving domain to IP...\"\nIP=$(dig +short $DOMAIN | head -1)\necho \"IP: $IP\"\necho \"\"\n\n# Step 2: Find ASN for IP\necho \"[2] Finding ASN for IP...\"\nwhois -h whois.cymru.com \" -v $IP\" | tail -1\necho \"\"\n\n# Step 3: Extract ASN number\nASN=$(whois -h whois.cymru.com \" -v $IP\" | tail -1 | awk '{print $1}')\necho \"ASN: $ASN\"\necho \"\"\n\n# Step 4: Get organization name\necho \"[3] Organization information...\"\nwhois -h whois.cymru.com \" -v $IP\" | tail -1 | awk '{print $NF}'\necho \"\"\n\necho \"[4] For complete IP ranges, visit:\"\necho \"https://bgp.he.net/AS${ASN}\"\necho \"\"\n\necho \"[5] For ASN relationships, visit:\"\necho \"https://bgp.he.net/AS${ASN}#_peers\"\necho \"\"\n\necho \"=== RECONNAISSANCE COMPLETE ===\"\n```\n\n**Save as asn_recon.sh and run**:\n```bash\nchmod +x asn_recon.sh\n./asn_recon.sh\n```bash\n\n### Step 8: Document Findings\n\n```\nASN INTELLIGENCE REPORT: example.com\nDate: 2025-10-28\n\nPRIMARY DOMAIN:\nexample.com → 93.184.216.34\n\nASN INFORMATION:\nAS15133 - Edgecast Inc. (Verizon)\n\nIP PREFIXES OWNED BY AS15133:\n93.184.208.0/20 (4,096 IPs)\n93.184.224.0/20 (4,096 IPs)\n... (additional ranges)\n\nTOTAL IP SPACE: ~500,000 IPs\n\nUPSTREAM PROVIDERS (who AS15133 buys bandwidth from):\n- AS3356 (Level 3 / Lumen)\n- AS1299 (Telia)\n- AS174 (Cogent)\n\nDOWNSTREAM CUSTOMERS: None visible (Edgecast is a CDN provider)\n\nPEERS (direct connections):\n- AS15169 (Google)\n- AS8075 (Microsoft)\n- AS20940 (Akamai)\n\nINTELLIGENCE ASSESSMENT:\n- example.com uses Edgecast CDN for content delivery\n- Edgecast has robust connectivity (multiple upstream providers)\n- Well-connected to major internet players (Google, Microsoft)\n- True origin servers hidden behind CDN (need other techniques to find)\n\nNEXT STEPS:\n1. Enumerate all domains on AS15133 IP space (find other Edgecast customers)\n2. Identify example.com's origin IP (behind CDN) using:\n- Historical DNS records (before CDN migration)\n- DNS records for non-CDN services (mail, ftp, etc.)\n- Direct server IP leakage (misconfigured headers, DNS records)\n```bash\n\n### BGP/ASN Intelligence Summary\n\n**What You Can Discover**:\n- ✅ All IP ranges owned by an organization\n- ✅ Hosting providers and cloud platforms in use\n- ✅ Network architecture and connectivity\n- ✅ Infrastructure migrations and changes\n- ✅ Related organizations (via shared ASNs or peering)\n- ✅ Geographic distribution of infrastructure\n\n**Why This Matters**:\n- **Red Team**: Identify the entire attack surface, not just advertised domains\n- **Blue Team**: Understand your organization's complete IP footprint\n- **Threat Intel**: Track threat actor infrastructure across IP changes\n- **OSINT Investigations**: Map corporate relationships and infrastructure\n\nASN intelligence reveals the \"plumbing\" of the internet—how organizations are connected and where their infrastructure lives. Combined with DNS and passive DNS data, you can build a comprehensive map of any organization's digital presence."
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "## Real-World Case Study: Capital One Data Breach (2019)\n\n### The Incident\n\nOn July 19, 2019, Capital One discovered that a hacker had accessed personal information of over 100 million credit card customers. The breach was one of the largest in banking history—but it started with DNS and infrastructure OSINT.\n\n### The Attacker: Paige Thompson (aka \"erratic\")\n\nPaige Thompson was a former AWS software engineer with deep knowledge of cloud infrastructure. She used her insider knowledge combined with OSINT reconnaissance to identify and exploit misconfigured cloud resources.\n\n### How Infrastructure OSINT Enabled the Attack\n\n**Phase 1: Target Identification via ASN and IP Intelligence**\n\nThompson didn't randomly scan the internet. She used systematic OSINT to identify high-value targets:\n\n```\n1. Identified AWS IP ranges (ASN 16509 - Amazon)\n2. Enumerated all IPs in AWS us-east-1 region\n3. Used IP WHOIS to identify which companies hosted in AWS\n4. Cross-referenced with DNS records to map company infrastructure\n5. Prioritized targets: financial institutions with large AWS footprints\n```\n\n**Capital One's Infrastructure Exposure**:\n```\nDNS Reconnaissance Results:\ncapitalone.com → Multiple A records\nwww.capitalone.com → CNAME → dxxx.cloudfront.net (AWS CloudFront)\napi.capitalone.com → A record → 52.x.x.x (AWS us-east-1)\n\nASN Analysis:\nAS16509 (Amazon AWS)\nNetRange: 52.0.0.0/8 (AWS IP space)\n\nIntelligence:\n- Capital One hosts on AWS\n- Uses CloudFront CDN for web delivery\n- API servers in us-east-1 region\n- Potential for AWS-specific attacks\n```\n\n**Phase 2: Subdomain Discovery via Certificate Transparency**\n\nThompson used Certificate Transparency logs to find Capital One's internal infrastructure:\n\n```\nCT Log Search: %.capitalone.com\n\nResults:\nwww.capitalone.com\napi.capitalone.com\ndev-api.capitalone.com        ← Development API\ninternal-gateway.capitalone.com ← Internal service!\nadmin-portal.capitalone.com    ← Admin access\nfirewall-logs.capitalone.com   ← Logging infrastructure\n```\n\n**Critical Finding**: `firewall-logs.capitalone.com` and `internal-gateway.capitalone.com` revealed internal infrastructure that wasn't meant to be public—but the SSL certificates exposed their existence.\n\n**Phase 3: Passive DNS Analysis**\n\nThompson used passive DNS to track Capital One's infrastructure changes:\n\n```\ninternal-gateway.capitalone.com History:\n\n2019-06-15: 52.x.x.200 (AWS us-east-1) ← Current\n2019-03-10: 10.0.1.50 (Internal IP leaked!) ← Misconfiguration\n2018-12-01: 52.x.x.150 (Different AWS IP)\n\nAnalysis:\n- Internal IP (10.0.1.50) briefly leaked in passive DNS\n- Indicates misconfiguration in DNS management\n- Gateway has moved IPs multiple times (infrastructure changes)\n- Potential for finding similar misconfigurations\n```\n\n**Phase 4: Cloud Infrastructure Enumeration**\n\nUsing the infrastructure intelligence gathered, Thompson:\n\n1. **Identified AWS S3 Buckets**: \n```bash\n# Common S3 bucket naming patterns\ncapitalone-backups\ncapitalone-logs\ncapitalone-data\ncapitalone-prod\ncap1-customer-data\n```\n\n2. **Tested for Public Access**:\n```bash\naws s3 ls s3://capitalone-prod --no-sign-request\n# If misconfigured, this lists bucket contents\n```\n\n3. **Found Misconfigured Web Application Firewall (WAF)**:\n- Capital One used a WAF in front of their services\n- WAF had SSRF (Server-Side Request Forgery) vulnerability\n- Thompson could send requests from the WAF to internal AWS metadata service\n\n**Phase 5: The Attack**\n\nWith infrastructure knowledge from OSINT, Thompson:\n\n```\n1. Identified Capital One's WAF IP via DNS reconnaissance\n2. Exploited SSRF in WAF to access AWS metadata service:\ncurl http://169.254.169.254/latest/meta-data/iam/security-credentials/\n\n3. Retrieved temporary AWS credentials from metadata service\n4. Used credentials to access S3 buckets:\naws s3 sync s3://capitalone-prod ./stolen-data --profile temp-creds\n\n5. Exfiltrated 100M+ customer records\n```\n\n**Timeline**:\n- **March 2019**: Thompson begins reconnaissance using OSINT\n- **March 22-23, 2019**: Successful breach, data exfiltration\n- **July 17, 2019**: Capital One discovers breach via anonymous tip\n- **July 19, 2019**: Capital One announces breach publicly\n- **July 29, 2019**: Thompson arrested by FBI\n\n### How OSINT Intelligence Enabled the Breach\n\n**DNS and Infrastructure OSINT Revealed**:\n1. ✅ AWS hosting (targeted AWS-specific attacks)\n2. ✅ Internal subdomain names (internal-gateway, firewall-logs)\n3. ✅ IP addresses and ranges (identified WAF infrastructure)\n4. ✅ Historical DNS misconfigurations (internal IPs leaked)\n5. ✅ S3 bucket naming patterns (brute-forced bucket names)\n6. ✅ Infrastructure architecture (CloudFront → WAF → S3)\n\n**Thompson's OPSEC Failures** (how she was caught):\nDespite sophisticated technical skills, Thompson made critical mistakes:\n\n```\n1. Posted about the breach on GitHub:\n- Used GitHub username \"erratic\"\n- Posted lists of breached companies and data folders\n- Included Capital One in the list\n\n2. Discussed breach on Slack:\n- Joined Slack channels for cloud security\n- Bragged about access to \"millions of records\"\n- Used her real name on Slack profile\n\n3. Used VPN with logs:\n- VPN provider kept logs\n- FBI subpoenaed VPN logs\n- Logs traced back to her home IP address\n\n4. Kept stolen data on her personal AWS account:\n- Stored stolen data in her own S3 buckets\n- AWS cooperated with FBI investigation\n- Clear evidence of data possession\n```bash\n\n### The Aftermath\n\n**Consequences for Thompson**:\n- Arrested July 29, 2019\n- Charged with computer fraud and abuse\n- Faced up to 25 years in prison\n- June 2022: Sentenced to time served + 5 years supervised release\n\n**Consequences for Capital One**:\n- $80 million fine from OCC (Office of the Comptroller of the Currency)\n- $100 million settlement with consumers\n- Reputation damage\n- Mandatory security improvements\n\n**Impact**: 106 million people affected (100M in US, 6M in Canada)\n\n**Data Exposed**:\n- Names, addresses, phone numbers\n- Credit scores, credit limits, balances\n- Social Security numbers (for ~140,000 people)\n- Bank account numbers (for ~80,000 people)\n\n### Lessons for OSINT Practitioners and Defenders\n\n**For Red Teamers and Pentesters**:\n1. **Infrastructure OSINT works**: DNS, CT logs, and passive DNS reveal massive attack surface\n2. **Cloud enumeration is critical**: S3 buckets, metadata services, IAM misconfigurations\n3. **Certificate Transparency exposes internal services**: Even if domains aren't advertised\n4. **Historical data matters**: Passive DNS reveals past misconfigurations\n\n**For Blue Teamers and Defenders**:\n1. **Audit your DNS exposure**: What subdomains exist in CT logs? Should they be public?\n2. **Monitor passive DNS**: Are internal IPs leaking?\n3. **Review S3 bucket permissions**: Public access should be rare and intentional\n4. **Implement least privilege**: WAF credentials shouldn't have S3 access\n5. **SSRF protection**: Web applications shouldn't reach AWS metadata service\n6. **Monitor for reconnaissance**: DNS queries, CT log searches, S3 enumeration attempts\n\n**For OSINT Ethics**:\n1. **Thompson had the skills but not the ethics**: Crossed from reconnaissance to exploitation\n2. **Legal boundaries are clear**: OSINT is legal, unauthorized access is not\n3. **Authorization matters**: Thompson's former employment didn't authorize access\n4. **Bragging gets you caught**: Public disclosure of illegal activity is foolish\n\n### Defensive Recommendations\n\n**DNS and Certificate Management**:\n```\n✅ Audit subdomains in Certificate Transparency logs monthly\n✅ Use internal CAs for truly internal services (won't appear in CT logs)\n✅ Implement DNS firewall (block resolution of internal names from external)\n✅ Monitor passive DNS for leaked internal IPs\n✅ Use private hosted zones for internal services (AWS Route 53 private zones)\n```\n\n**Cloud Security**:\n```\n✅ Block access to AWS metadata service from applications (IMDSv2 required)\n✅ Implement least privilege IAM policies (WAF shouldn't access S3)\n✅ Enable S3 Block Public Access at account level\n✅ Use AWS GuardDuty to detect unusual API activity\n✅ Require MFA for sensitive operations\n✅ Monitor CloudTrail logs for reconnaissance activity\n```\n\n**OSINT Monitoring**:\n```\n✅ Perform regular OSINT reconnaissance on your own organization\n✅ Search for your company in GitHub, Pastebin, dark web\n✅ Monitor for new subdomains appearing in CT logs\n✅ Alert on S3 bucket enumeration attempts (CloudTrail: ListBuckets)\n✅ Track ASN changes and IP allocations\n```bash\n\n### Try This Exercise\n\nPerform the same OSINT reconnaissance on your organization (with authorization):\n\n1. Search Certificate Transparency logs for your domain\n2. Identify all subdomains (especially internal-sounding ones)\n3. Check passive DNS for historical IP leaks\n4. Enumerate potential S3 buckets (test read-only with `--no-sign-request`)\n5. Review findings with security team\n6. Remediate overexposed infrastructure\n\nThe same techniques Thompson used for malicious purposes, you'll use for defensive security. Find your exposure before attackers do."
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "## DNS & Infrastructure OSINT Quick Reference\n\n### WHOIS Intelligence Mnemonic: **\"READ\"**\n\n- **R**egistration date (how old is the domain?)\n- **E**xpiration date (is it maintained?)\n- **A**SN / IP ownership (who hosts it?)\n- **D**NS name servers (where is DNS managed?)\n\n---\n\n### DNS Record Types (Priority Order)\n\nMnemonic: **\"All Mail Needs Careful Thought Sometimes\"**\n\n1. **A** - IPv4 Address (where is the server?)\n2. **M**X - Mail eXchange (who handles email?)\n3. **N**S - Name Servers (who manages DNS?)\n4. **C**NAME - Canonical Name (what aliases exist?)\n5. **T**XT - Text records (configuration data, SPF, DMARC)\n6. **S**OA - Start of Authority (zone metadata)\n\n**Additional**: AAAA (IPv6), SRV (services), PTR (reverse DNS)\n\n---\n\n### Certificate Transparency Search Pattern\n\n**URL**: `https://crt.sh/?q=%.targetdomain.com`\n\n**Command-line**:\n```bash\ncurl -s \"https://crt.sh/?q=%.example.com&output=json\" | jq -r '.[].name_value' | sort -u\n```\n\n**Look for**:\n- `dev.*` (development)\n- `staging.*` (staging)\n- `test.*` (testing)\n- `admin.*` (admin panels)\n- `internal.*` (internal services)\n- `vpn.*` (VPN portals)\n- `old.*`, `legacy.*` (outdated systems)\n\n---\n\n### High-Value Subdomain Patterns (AVAST)\n\nMnemonic: **\"AVAST - Always Verify All Suspicious Targets\"**\n\n- **A**dmin - Admin panels (`admin.`, `administrator.`)\n- **V**PN - Remote access (`vpn.`, `remote.`, `citrix.`)\n- **A**PI - API endpoints (`api.`, `api-v2.`, `rest.`)\n- **S**taging - Non-prod environments (`staging.`, `test.`, `dev.`, `uat.`)\n- **T**est - Testing infrastructure (`test.`, `demo.`, `sandbox.`)\n\n---\n\n### DNS Enumeration Commands Cheat Sheet\n\n```bash\n# WHOIS (domain and IP)\nwhois example.com                    # Domain registration\nwhois 93.184.216.34                  # IP ownership\n\n# DNS Records\nnslookup example.com                 # Basic A record\nnslookup -type=MX example.com        # Mail servers\nnslookup -type=NS example.com        # Name servers\nnslookup -type=TXT example.com       # Text records (SPF, DMARC)\nnslookup -type=ANY example.com       # All records\n\n# Zone Transfer Attempt\ndig @ns1.example.com example.com AXFR\n\n# ASN Lookup\nwhois -h whois.cymru.com \" -v [IP]\"\n\n# Certificate Transparency\ncurl -s \"https://crt.sh/?q=%.example.com&output=json\" | jq -r '.[].name_value' | sort -u\n```\n\n---\n\n### Passive DNS Resources\n\n**Free/Freemium**:\n- SecurityTrails: https://securitytrails.com/\n- VirusTotal: https://www.virustotal.com/ (Relations tab)\n- OTX AlienVault: https://otx.alienvault.com/\n\n**Commercial**:\n- Farsight DNSDB: https://www.farsightsecurity.com/solutions/dnsdb/\n- RiskIQ PassiveTotal: https://www.riskiq.com/\n- DomainTools: https://www.domaintools.com/\n\n---\n\n### ASN Intelligence Workflow\n\n```\n1. Domain → IP (nslookup example.com)\n2. IP → ASN (whois -h whois.cymru.com \" -v [IP]\")\n3. ASN → All IPs (https://bgp.he.net/AS[NUMBER])\n4. IPs → Domains (reverse DNS, passive DNS)\n5. Map complete infrastructure\n```\n\n---\n\n### Common Cloud Provider Identification\n\n**From DNS/CNAME Records**:\n\n```\nAWS:\n- *.amazonaws.com\n- *.cloudfront.net\n- *.awsdns.com (Route 53)\n- *.elb.amazonaws.com\n- ASN: 16509, 14618\n\nAzure:\n- *.azurewebsites.net\n- *.cloudapp.net\n- *.azure.com\n- ASN: 8075, 8068\n\nGoogle Cloud:\n- *.appspot.com\n- *.cloudfunctions.net\n- *.run.app\n- ASN: 15169, 36040\n\nCloudflare:\n- *.cloudflare.com\n- NS: *.ns.cloudflare.com\n- ASN: 13335\n\nDigitalOcean:\n- *.digitaloceanspaces.com\n- ASN: 14061\n```\n\n---\n\n### Email Infrastructure Intelligence (MX Records)\n\n```\nGoogle Workspace:\n- aspmx.l.google.com\n- alt*.aspmx.l.google.com\n\nMicrosoft 365:\n- *.mail.protection.outlook.com\n\nProofpoint (Security Gateway):\n- *.pphosted.com\n\nMimecast (Security Gateway):\n- *.mimecast.com\n\nSelf-Hosted:\n- mail.company.com or custom names\n```\n\n---\n\n### Red Flags in DNS/WHOIS Data\n\nMnemonic: **\"FRESH DNS\"**\n\n- **F**requent changes (multiple updates in short time)\n- **R**ecent registration (domain registered days/weeks ago)\n- **E**xpiring soon (domain about to expire = abandoned?)\n- **S**uspicious registrar (known for abuse)\n- **H**idden registrant (privacy protection on corporate domain?)\n- **D**isconnected name servers (NS records point to inactive servers)\n- **N**o DNSSEC (missing security features)\n- **S**trange TXT records (API keys, sensitive info in TXT)\n\n---\n\n### Infrastructure Mapping Checklist\n\nBefore concluding reconnaissance:\n\n- [ ] WHOIS (domain registration data)\n- [ ] DNS records (A, AAAA, MX, NS, TXT, CNAME, SOA)\n- [ ] Zone transfer attempt (AXFR)\n- [ ] Certificate Transparency logs (subdomains)\n- [ ] Passive DNS (historical data)\n- [ ] ASN intelligence (all IP ranges)\n- [ ] Reverse DNS (IPs → domains)\n- [ ] Cloud provider identification\n- [ ] Email infrastructure (MX records)\n- [ ] Historical IP addresses (infrastructure changes)\n\n---\n\n### Tools Quick Reference\n\n**DNS Enumeration**:\n- `nslookup`, `dig`, `host` (built-in)\n- `dnsrecon` (comprehensive enumeration)\n- `fierce` (DNS scanner)\n- `dnsdumpster.com` (online with visualization)\n\n**Subdomain Discovery**:\n- `crt.sh` (Certificate Transparency)\n- `subfinder` (multi-source)\n- `amass` (comprehensive OSINT)\n- `assetfinder` (fast enumeration)\n\n**Passive DNS**:\n- SecurityTrails\n- VirusTotal\n- OTX AlienVault\n\n**ASN Intelligence**:\n- `whois -h whois.cymru.com`\n- Hurricane Electric BGP Toolkit (bgp.he.net)\n\n---\n\n### Infrastructure Timeline Analysis\n\nWhen reviewing passive DNS data:\n\n```\n1. Current State (today)\n- What IPs/infrastructure are active now?\n\n2. Recent Changes (last 3-6 months)\n- Did infrastructure migrate?\n- New cloud providers?\n\n3. Historical State (1+ years ago)\n- What was the old infrastructure?\n- Are old systems still accessible?\n\n4. Future Prediction\n- Based on patterns, what changes are coming?\n- Cloud consolidation? Multi-cloud?\n```\n\n---\n\n### Legal Reminder\n\n✅ **Legal OSINT Activities**:\n- WHOIS lookups\n- DNS queries\n- Certificate Transparency searches\n- Passive DNS queries\n- ASN lookups\n- Reverse DNS\n\n⚠️ **Requires Authorization**:\n- Zone transfers (even if allowed, may violate policy)\n- Automated scanning\n- Accessing discovered infrastructure\n- Subdomain bruteforcing (large-scale)\n\n❌ **Illegal**:\n- Exploiting discovered vulnerabilities (without authorization)\n- Accessing systems without permission\n- DDoS attacks\n- Data exfiltration"
      }
    },
    {
      "type": "quiz",
      "content": {
        "text": "## Knowledge Check: DNS & Infrastructure OSINT\n\n**Question 1: Certificate Transparency Reconnaissance**\n\nYou're conducting OSINT on a financial services company and discover these subdomains via Certificate Transparency logs:\n\n- www.bank.com\n- api.bank.com\n- mobile-api.bank.com\n- dev-api.bank.com\n- test-payroll.bank.com\n- internal-vpn.bank.com\n\nWhich subdomain should you prioritize for further investigation during a red team engagement, and why?\n\nA) www.bank.com - It's the main website with the most traffic and likely has the most security attention\nB) mobile-api.bank.com - Mobile applications often have security vulnerabilities\nC) test-payroll.bank.com - Test/dev environments often have weaker security controls and sensitive functionality\nD) internal-vpn.bank.com - VPN portals are high-value targets but usually well-secured\n\n**Correct Answer: C) test-payroll.bank.com - Test/dev environments often have weaker security controls and sensitive functionality**\n\n**Explanation**: \n\n**Why C is correct**:\n\n1. **\"Test\" indicates non-production**: Test and development environments typically have:\n- Weaker security controls (no WAF, limited monitoring)\n- Debug features enabled (verbose error messages, test accounts)\n- Less stringent access controls (developers need easy access)\n- Older, unpatched software (not prioritized for updates)\n- Same codebase as production (vulnerabilities apply to both)\n\n2. **\"Payroll\" indicates sensitive functionality**: \n- Access to employee financial data\n- PII (personally identifiable information)\n- Potential for financial fraud\n- Regulatory compliance issues if breached\n\n3. **Combination is critical**: A test environment for sensitive financial functionality is a high-priority target. If compromised, you could:\n- Learn the application architecture (applies to production too)\n- Find vulnerabilities in a low-security environment\n- Access test data (which often mirrors production structure)\n- Potentially pivot to production if networks are connected\n\n**Why other answers are less ideal**:\n\n- **A (www.bank.com)**: Main websites receive the most security attention:\n- Regular security assessments\n- Web Application Firewalls (WAF)\n- Security monitoring and alerting\n- Incident response plans\n- While still worth investigating, it's the \"front door\" everyone watches\n\n- **B (mobile-api.bank.com)**: While mobile APIs can have vulnerabilities, this appears to be a production API:\n- Likely secured similarly to main website\n- Subject to mobile security testing\n- Probably has API rate limiting and monitoring\n- Good secondary target, but test-payroll is higher priority\n\n- **D (internal-vpn.bank.com)**: VPN portals are attractive targets but:\n- Organizations know VPNs are targeted (usually well-secured)\n- Multi-factor authentication (MFA) commonly enforced\n- Account lockouts after failed attempts\n- Aggressive monitoring for brute-force attacks\n- Harder to exploit than misconfigured test environments\n\n**Real-World Example**: \n\nIn the Capital One breach (2019), the attacker targeted AWS infrastructure that included development and test environments. These environments had weaker security controls than production, enabling the initial compromise. Test and staging environments are consistently found to be the weakest link in enterprise security.\n\n**Red Team Strategy**:\n1. Start with test-payroll.bank.com (highest probability of success)\n2. Move to mobile-api.bank.com (production but potentially less hardened)\n3. Investigate internal-vpn.bank.com (requires authentication, harder)\n4. Finally www.bank.com (most secure, highest visibility)\n\n**Blue Team Lesson**: \n\nIf test/dev environments appear in public Certificate Transparency logs:\n- They shouldn't be internet-accessible (use internal CAs or VPNs)\n- If they must be public, secure them as rigorously as production\n- Monitor CT logs for your organization to catch these exposures\n- Implement network segmentation (test networks ≠ production networks)"
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "## Reflection: Infrastructure Intelligence and Security\n\nCongratulations on completing DNS & Infrastructure OSINT! You've learned how to map an organization's entire digital infrastructure using publicly available DNS and routing information. Before moving forward, reflect on what you've learned and how it changes your perspective.\n\n### Reflection Questions\n\n**1. Your Organization's Infrastructure Exposure**\n\nPerform a quick infrastructure assessment on your organization (with proper authorization):\n\n- Search Certificate Transparency logs: `https://crt.sh/?q=%.yourcompany.com`\n- How many subdomains were revealed?\n- Were you surprised by any of them?\n- Do any subdomains suggest internal services (dev, test, admin, vpn)?\n- Should all these subdomains be publicly discoverable?\n\n**Action**: Document 3-5 subdomains that concerned you and why. Consider sharing with your security team.\n\n**2. Historical Infrastructure Intelligence**\n\nQuery passive DNS for your organization (or a public domain):\n- Visit SecurityTrails or VirusTotal and search your domain\n- Look at historical IP addresses\n- Have you migrated hosting providers?\n- Have you moved to the cloud?\n- Are old IPs still accessible?\n\n**Reflect**:\n- What does your infrastructure history reveal about your organization's technology evolution?\n- If you were a red teamer targeting your organization, what would you learn from this timeline?\n- Are there forgotten assets that should be decommissioned?\n\n**3. The ASN Perspective**\n\nFind your organization's ASN (if you have one):\n- Resolve your domain to an IP\n- Query `whois -h whois.cymru.com \" -v [IP]\"`\n- Visit `https://bgp.he.net/AS[NUMBER]`\n\n**Questions**:\n- How many IP ranges does your organization own?\n- Are you on-premise, cloud, or hybrid?\n- Who are your upstream internet providers?\n- How has your ASN footprint changed over time?\n\n**Consider**: \n- If you've migrated to the cloud, do you still own an ASN with unused IP ranges?\n- Are those ranges properly secured or decommissioned?\n\n**4. Ethical Boundaries in Infrastructure Reconnaissance**\n\nDNS OSINT is generally legal—but the line can blur:\n\n**Scenario 1**: You discover a subdomain `dev.company.com` in CT logs. You visit it in a browser and find a development environment with no authentication. Do you:\n- A) Explore the site to document the exposure\n- B) Take a screenshot of the homepage only and report it\n- C) Stop immediately and report the finding\n\n**Reflect on your answer**:\n- What's the ethical difference between these options?\n- Does your authorization matter?\n- If you're a pentester with a signed contract, does that change your answer?\n- Where do you personally draw the line?\n\n**Scenario 2**: You attempt a DNS zone transfer and it succeeds, revealing all internal subdomains. This is technically publicly accessible data (the DNS server allowed the transfer). Is this:\n- Legal and ethical?\n- Legal but ethically questionable?\n- Potentially illegal (unauthorized access)?\n\n**Consider**: \n- The server allowed the transfer, so no \"bypass\" occurred\n- But the organization clearly didn't intend for this data to be public\n- Does \"technically accessible\" equal \"authorized access\"?\n- How would you proceed in this situation?\n\n**5. Red Team vs. Blue Team Perspective**\n\nReflect on this lesson from both perspectives:\n\n**As a Red Teamer**:\n- What infrastructure intelligence would you prioritize during reconnaissance?\n- How would you identify the weakest entry points?\n- What patterns indicate misconfiguration or neglect?\n- How do you balance thorough reconnaissance with operational security?\n\n**As a Blue Teamer**:\n- What infrastructure exposure is unavoidable (necessary for business operations)?\n- What exposure is unnecessary and should be remediated?\n- How would you monitor for reconnaissance activity against your infrastructure?\n- What defensive strategies would you prioritize based on this lesson?\n\n**Synthesis Question**: \n- How do the red team and blue team perspectives complement each other?\n- If you could give one piece of advice to defenders based on this lesson, what would it be?\n\n**6. The Capital One Case Study**\n\nReflect on the Capital One breach case study:\n\n- What surprised you most about how OSINT enabled the breach?\n- What would you have done differently as a defender?\n- What OPSEC mistakes did the attacker make?\n- How does this change your understanding of cloud security?\n\n**Broader Question**: \n- The attacker (Paige Thompson) was a former AWS engineer with insider knowledge. How much did insider knowledge contribute vs. OSINT techniques that anyone could use?\n- Could a less knowledgeable attacker have achieved the same result with just OSINT?\n- What's your takeaway about cloud misconfigurations?\n\n---\n\n### Practical Next Steps\n\n**Before moving to Lesson 5 (Shodan & IoT Search)**:\n\n1. **Perform reconnaissance on an authorized target**:\n- Your own domain (personal website, blog)\n- Your organization's domain (with written authorization)\n- A public domain like example.com for practice\n\n2. **Document your findings**:\n- Create an infrastructure map (domains, subdomains, IPs, ASNs)\n- Note high-priority targets for further investigation\n- Identify unnecessary exposure\n\n3. **Set up monitoring**:\n- Create alerts for new subdomains in CT logs (use tools like CertStream or Cert Spotter)\n- Bookmark passive DNS resources for your domain\n- Monitor ASN changes\n\n4. **Share knowledge**:\n- If you found exposure in your organization, report it responsibly\n- Educate your team about infrastructure OSINT\n- Recommend regular reconnaissance against your own infrastructure\n\n5. **Build your toolkit**:\n- Install: `dnsrecon`, `subfinder`, `amass`\n- Bookmark: crt.sh, SecurityTrails, VirusTotal, bgp.he.net\n- Create scripts for repeatable reconnaissance workflows\n\n---\n\n### Key Takeaways\n\nAs you move forward in your OSINT journey:\n\n1. **Infrastructure OSINT is non-invasive but powerful**: You can map entire networks without ever touching the target.\n\n2. **Historical data reveals secrets**: Passive DNS shows past misconfigurations, migrations, and forgotten infrastructure.\n\n3. **Certificate Transparency is a goldmine**: Every SSL certificate is logged publicly—including internal services that shouldn't be.\n\n4. **ASN intelligence reveals the big picture**: Don't just focus on one domain—understand the entire network footprint.\n\n5. **Defenders must think like attackers**: Perform OSINT on yourself regularly. Find your exposure before attackers do.\n\n6. **Ethics matter even when data is public**: Just because you can access something doesn't mean you should. Always operate within authorization.\n\nYou now understand the technical foundation of the internet's infrastructure. In the next lessons, you'll learn to find specific types of exposed devices (Shodan), map relationships (Maltego), and automate your reconnaissance. This infrastructure knowledge is the foundation for everything that follows.\n\n**Remember**: Every organization has DNS records. Every organization has infrastructure. Your job is to understand what's exposed, what's hidden, and what story the infrastructure tells about the organization's security posture and history."
      }
    }
  ],
  "post_assessment": [
    {
      "question": "You discover via passive DNS that a company's production API (api.company.com) resolved to IP 192.0.2.50 for 2 years, then suddenly changed to 203.0.113.100 (AWS IP range) 3 months ago. The old IP (192.0.2.50) still responds to HTTP requests with a 200 OK status. What is the MOST likely security concern?",
      "options": [
        "The new AWS infrastructure is misconfigured and should be using the old IP",
        "The old on-premise server was not decommissioned and may still contain production data or code with outdated security",
        "The company is running a redundant backup system at the old IP for disaster recovery",
        "DNS poisoning attack is redirecting traffic to a malicious AWS instance"
      ],
      "correct_answer": 1,
      "explanation": "Option B is correct. This scenario is extremely common and represents a significant security risk. When organizations migrate from on-premise to cloud infrastructure, they often forget to properly decommission old servers. The old server at 192.0.2.50 likely still contains the production codebase, database connections, or even production data. Attackers specifically look for these forgotten assets because they often have: (1) Outdated, unpatched software, (2) Weaker security controls (no longer monitored), (3) Same vulnerabilities as the current production system, (4) Potential for data leakage or lateral movement. This is NOT a backup system (Option C) because a proper backup wouldn't be publicly accessible with no change in DNS for months. It's NOT likely DNS poisoning (Option D) because passive DNS shows this is a legitimate migration, not an attack. Option A makes no sense—AWS infrastructure is correctly using a new IP. This pattern is a classic indicator of incomplete migration and forgotten infrastructure. Red teamers actively search passive DNS for exactly this scenario because it's a low-hanging fruit with high impact.",
      "difficulty": 3,
      "question_id": "00897114-7c16-4f43-95cc-86baf3a92593",
      "type": "multiple_choice"
    },
    {
      "question": "You're conducting a DNS zone transfer attempt against target.com and it succeeds, revealing 150 subdomains including internal.target.com and employee-vpn.target.com. You have a signed penetration testing agreement that authorizes 'network reconnaissance and vulnerability assessment' but does not explicitly mention DNS enumeration or zone transfers. What should you do?",
      "options": [
        "Proceed with testing the discovered subdomains—zone transfers are passive reconnaissance and you have authorization for network reconnaissance",
        "Document the successful zone transfer and all discovered subdomains, then immediately contact the client to clarify scope before proceeding further",
        "Stop immediately and do not document the findings—zone transfers might be considered unauthorized access even if the server allowed it",
        "Only investigate subdomains that are also discoverable through Certificate Transparency logs, as those are definitely public information"
      ],
      "correct_answer": 1,
      "explanation": "Option B is correct and represents professional penetration testing practices. Here's why this is the right approach: (1) Successful zone transfers are UNUSUAL in modern infrastructure—this indicates a serious misconfiguration that the client needs to know about immediately. (2) Your authorization says 'network reconnaissance' which could reasonably include DNS queries, BUT discovering internal subdomains like 'internal.target.com' and 'employee-vpn.target.com' suggests you've found infrastructure that may be out of scope. (3) Professional pentesters clarify scope when they discover unexpected access or information—this protects both you and the client. (4) The client needs to make an informed decision: should you test internal infrastructure? Are these subdomains in scope? Option A is WRONG because 'technically allowed' doesn't equal 'within scope.' Just because the DNS server allowed the transfer doesn't mean your contract covers testing internal infrastructure. You could be crossing into unauthorized access. Option C is too conservative—you should document what you found (it's a critical vulnerability), but you should pause before proceeding. Option D is an arbitrary distinction with no legal or contractual basis. The key principle: When in doubt during authorized testing, STOP and clarify with the client. Document what you found, explain the security implications, and get explicit authorization before proceeding. This scenario is based on real pentesting situations where unclear scope led to legal issues. Better to over-communicate than to face claims of unauthorized access.",
      "difficulty": 3,
      "question_id": "cdfb089c-2a6d-400f-9be2-c5fc1b9e2c94",
      "type": "multiple_choice"
    },
    {
      "question": "What is the most important takeaway from this lesson?",
      "options": [
        "Understanding the core concepts and their practical applications",
        "Memorizing all technical details",
        "Only knowing the theory without practice",
        "Focusing on a single aspect"
      ],
      "correct_answer": 0,
      "explanation": "The key takeaway is understanding how to apply the concepts learned in real-world scenarios, combining both theoretical knowledge and practical skills.",
      "question_id": "98525e3d-40bb-4c21-bb8c-304daf2d7c52",
      "type": "multiple_choice",
      "difficulty": 1
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "learning_sprint",
    "memory_hooks",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "minimum_effective_dose",
    "teach_like_im_10",
    "meta_learning",
    "gamify_it",
    "multiple_memory_pathways"
  ],
  "mitre_attack_tags": [
    "T1590.002 - Gather Victim Network Information: DNS",
    "T1596 - Search Open Technical Databases",
    "T1596.001 - Search Open Technical Databases: DNS/Passive DNS",
    "T1590.004 - Gather Victim Network Information: Network Topology",
    "T1590.005 - Gather Victim Network Information: IP Addresses"
  ]
}