{
  "lesson_id": "8c4f7a2e-9d6b-4e3c-8f5d-7a6b5c4d3e2f",
  "domain": "blue_team",
  "title": "Security Onion: Comprehensive Network Security Monitoring",
  "difficulty": 3,
  "order_index": 15,
  "prerequisites": [
    "blue_team_14"
  ],
  "concepts": [
    "Network security monitoring (NSM)",
    "Security Onion architecture",
    "Zeek (Bro) protocol analysis",
    "Suricata IDS/IPS",
    "Elasticsearch SIEM backend",
    "Kibana visualization",
    "Stenographer full packet capture",
    "Hunt workflow and methodology",
    "Alert triage process"
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Understand Security Onion's integrated NSM architecture",
    "Deploy Security Onion in standalone and distributed modes",
    "Hunt for threats using Kibana and Hunt interface",
    "Triage alerts with context from multiple data sources",
    "Perform PCAP analysis for incident investigation",
    "Leverage Zeek logs for behavioral threat detection"
  ],
  "post_assessment": [
    {
      "question": "What is the primary advantage of Security Onion's integration of Zeek, Suricata, and Stenographer?",
      "options": [
        "Faster network performance",
        "Correlated threat detection with signature-based, behavioral, and full packet capture",
        "Lower cost than commercial solutions",
        "Easier installation"
      ],
      "correct_answer": 1,
      "explanation": "Security Onion's power comes from combining Suricata (signature-based IDS), Zeek (protocol analysis and behavioral detection), and Stenographer (full packet capture). This provides multiple detection layers and rich context for investigations.",
      "question_id": "03491c7e-a94f-470d-b9e7-ffc24f5e651e",
      "type": "multiple_choice",
      "difficulty": 3
    },
    {
      "question": "In Security Onion, what is the purpose of Stenographer?",
      "options": [
        "Generate alerts for attacks",
        "Provide full packet capture for forensic analysis",
        "Visualize network traffic",
        "Block malicious connections"
      ],
      "correct_answer": 1,
      "explanation": "Stenographer provides indexed, full packet capture storage. When you find a suspicious connection in alerts or Zeek logs, you can retrieve the exact packets for deep forensic analysis—seeing the raw data attackers sent.",
      "question_id": "a541213d-04ff-4281-afd5-3a5f387c78c9",
      "type": "multiple_choice",
      "difficulty": 3
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "meta_learning",
    "memory_hooks",
    "minimum_effective_dose",
    "teach_like_im_10",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "content": {
        "text": "Welcome to the ultimate network security monitoring platform!\n\nImagine you're a detective investigating a crime. You have:\n- **Security cameras** (Stenographer - full packet capture)\n- **Motion sensors** (Suricata - signature-based alerts)\n- **Behavioral profiler** (Zeek - protocol analysis)\n- **Case management system** (Elasticsearch + Kibana - search and visualization)\n\n**Security Onion** brings all of these together into a single, integrated platform. It's not just one tool—it's an entire security operations ecosystem.\n\n**Mindset shift**: Modern threats require *layered detection*. Signatures catch known attacks. Behavioral analysis catches anomalies. Full packet capture proves what happened. Together, they're unstoppable.\n\nCreated by Doug Burks, Security Onion has been deployed in organizations from small businesses to Fortune 500 companies, government agencies, and military networks. It's free, open source, and incredibly powerful.\n\nYou're about to learn how elite SOC analysts hunt threats and investigate incidents. This is advanced defense—let's dive in!"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## What is Security Onion?\n\n**Security Onion** is a free, open-source Linux distribution for network security monitoring (NSM), enterprise security monitoring (ESM), and log management. It includes best-of-breed tools integrated into a cohesive platform.\n\n### Core Components\n\n```\n┌────────────────────────────────────────────────────────────┐\n│                    SECURITY ONION                          │\n│                  (Ubuntu-based Linux)                      │\n└────────────────────────────────────────────────────────────┘\n                            │\n        ┌───────────────────┼───────────────────┐\n        │                   │                   │\n┌───────▼────────┐ ┌────────▼───────┐ ┌─────────▼────────┐\n│   DETECTION    │ │   PROTOCOL     │ │  PACKET CAPTURE  │\n│                │ │   ANALYSIS     │ │                  │\n│  Suricata IDS  │ │  Zeek (Bro)    │ │  Stenographer    │\n│                │ │                │ │                  │\n│ • Signature    │ │ • HTTP logs    │ │ • Full PCAP      │\n│ • IPS mode     │ │ • DNS logs     │ │ • Indexed        │\n│ • ET rules     │ │ • SSL certs    │ │ • On-demand      │\n│ • Talos rules  │ │ • File extract │ │   retrieval      │\n└────────┬───────┘ └────────┬───────┘ └─────────┬────────┘\n         │                  │                   │\n         └──────────────────┼───────────────────┘\n                            │\n                   ┌────────▼─────────┐\n                   │  ELASTICSEARCH   │\n                   │  (Search Engine) │\n                   │                  │\n                   │ • Stores logs    │\n                   │ • Indexes data   │\n                   │ • Fast queries   │\n                   └────────┬─────────┘\n                            │\n            ┌───────────────┼───────────────┐\n            │               │               │\n    ┌───────▼──────┐ ┌──────▼──────┐ ┌─────▼──────┐\n    │   KIBANA     │ │  SOC (Hunt) │ │  PLAYBOOK  │\n    │              │ │             │ │            │\n    │ Dashboards   │ │ Alert triage│ │ Detection  │\n    │ Visualize    │ │ Drill-down  │ │ Playbook   │\n    │ Search       │ │ PCAP viewer │ │ Automation │\n    └──────────────┘ └─────────────┘ └────────────┘\n```\n\n### The NSM Philosophy\n\n**Traditional Security**: Prevent intrusions (firewall, IPS)\n\n**NSM Mindset**: *Assume breach*. Focus on:\n1. **Detection**: Find threats that bypassed prevention\n2. **Investigation**: Understand what happened\n3. **Response**: Contain and remediate\n4. **Learning**: Improve defenses\n\n**Security Onion's Approach**:\n- Collect **everything** (alerts, logs, packets)\n- Provide **context** (correlate multiple data sources)\n- Enable **hunting** (proactive threat search)\n- Support **forensics** (full packet capture)\n\n### Architecture Modes\n\n**1. Standalone Mode**\n\nAll components on single server (ideal for <200 Mbps, small networks):\n\n```\n┌──────────────────────────────────┐\n│   Security Onion Standalone      │\n│                                  │\n│  ┌──────┐ ┌──────┐ ┌──────────┐ │\n│  │Zeek  │ │Suric-│ │Steno-    │ │\n│  │      │ │ata   │ │grapher   │ │\n│  └──────┘ └──────┘ └──────────┘ │\n│  ┌─────────────────────────────┐│\n│  │ Elasticsearch + Kibana      ││\n│  └─────────────────────────────┘│\n└──────────────────────────────────┘\n         │\n         ▼\n   Network Traffic (SPAN/TAP)\n```\n\n**2. Distributed Mode**\n\nScales to enterprise (multi-gigabit networks):\n\n```\n┌─────────────────────────────────────────────┐\n│         MANAGER NODE                        │\n│  • Elasticsearch (master)                   │\n│  • Kibana                                   │\n│  • SOC interface                            │\n│  • Alert aggregation                        │\n└─────────────────┬───────────────────────────┘\n                  │\n      ┌───────────┼───────────┐\n      │           │           │\n┌─────▼─────┐ ┌──▼────────┐ ┌▼──────────┐\n│ SENSOR 1  │ │ SENSOR 2  │ │ SENSOR 3  │\n│ (DMZ)     │ │ (Internal)│ │ (Remote)  │\n│           │ │           │ │           │\n│ Zeek      │ │ Zeek      │ │ Zeek      │\n│ Suricata  │ │ Suricata  │ │ Suricata  │\n│ Steno-    │ │ Steno-    │ │ Steno-    │\n│ grapher   │ │ grapher   │ │ grapher   │\n│           │ │           │ │           │\n│ Forward → │ │ Forward → │ │ Forward → │\n└───────────┘ └───────────┘ └───────────┘\n```\n\n### Installation (Standalone)\n\n**System Requirements**:\n- Ubuntu 18.04/20.04 LTS\n- CPU: 4+ cores (8+ recommended)\n- RAM: 12GB minimum (16GB+ recommended)\n- Disk: 200GB+ (depends on retention)\n- Network: 2 interfaces (1 management, 1 monitoring)\n\n**Installation Steps**:\n\n```bash\n# Download Security Onion ISO\nwget https://github.com/Security-Onion-Solutions/securityonion/releases/download/v2.3.210/securityonion-2.3.210.iso\n\n# Create bootable USB or VM\n# Boot and follow installer\n\n# After installation, run setup\nsudo so-setup\n\n# Setup wizard will ask:\n# 1. Installation type: Standalone / Distributed\n# 2. Management interface: eth0\n# 3. Monitoring interface: eth1 (must be in promiscuous mode)\n# 4. HOME_NET: 192.168.1.0/24\n# 5. Username/password for SOC interface\n# 6. Enable/disable components\n\n# Setup takes 10-30 minutes depending on hardware\n```\n\n**Post-Installation**:\n\n```bash\n# Check status\nsudo so-status\n\n# Output:\n# ✓ Zeek running\n# ✓ Suricata running  \n# ✓ Stenographer running\n# ✓ Elasticsearch running\n# ✓ Kibana running\n# ✓ SOC interface running\n\n# Access web interface\n# https://[MANAGEMENT_IP]\n# Login with credentials from setup\n```\n\n### Key Features\n\n**1. Hunt Interface**\n\nCustom SOC interface for alert triage:\n- **Alerts**: Suricata detections\n- **Dashboards**: Pre-built visualizations\n- **Hunt**: Proactive threat hunting\n- **PCAP**: On-demand packet retrieval\n- **Cases**: Incident management\n\n**2. Kibana Dashboards**\n\nPre-configured dashboards:\n- **Overview**: Network summary\n- **Alerts**: IDS detections\n- **Zeek - HTTP**: Web traffic\n- **Zeek - DNS**: DNS queries\n- **Zeek - Conn**: Connection logs\n- **Zeek - SSL**: TLS certificates\n- **Zeek - Files**: File transfers\n\n**3. Zeek Protocol Analysis**\n\nDeep packet inspection generating structured logs:\n\n```\nconn.log     // All network connections\nhttp.log     // HTTP requests/responses\ndns.log      // DNS queries\nssl.log      // TLS/SSL certificates\nfiles.log    // File transfers\nx509.log     // SSL certificate details\nssh.log      // SSH connections\nrdp.log      // RDP sessions\nsmb.log      // SMB file shares\n```\n\n**4. Stenographer PCAP**\n\nFull packet capture with indexing:\n- Query by time range\n- Filter by IP/port/protocol\n- Extract matching PCAP\n- Analyze in Wireshark\n\n**5. Playbook (Automation)**\n\nDetection-as-code framework:\n- Sigma rules (SIEM detection)\n- Yara rules (file/memory scanning)\n- Automated response playbooks"
      }
    },
    {
      "type": "video",
      "content": {
        "title": "Video: Security Onion Complete Setup and Threat Hunting",
        "url": "https://www.youtube.com/embed/0FImJRRs8zk",
        "description": "Watch this comprehensive guide to deploying Security Onion and performing advanced threat hunting workflows."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Threat Hunting with Security Onion\n\n### The Hunt Methodology\n\n**1. Hypothesis-Driven Hunting**\n\nStart with a question:\n- \"Are there any beaconing connections (C2 callbacks)?\"\n- \"Did anyone exfiltrate data to unusual destinations?\"\n- \"Are there signs of lateral movement?\"\n\n**2. Data Sources to Leverage**\n\n```\nAlerts (Suricata)  → Known bad signatures\nZeek Logs          → Behavioral anomalies  \nPCAP (Stenographer)→ Ground truth\n```\n\n**3. Hunt Workflow**\n\n```\n┌─────────────────┐\n│  1. HYPOTHESIS  │\n│  What to hunt?  │\n└────────┬────────┘\n         │\n┌────────▼────────┐\n│  2. STACK DATA  │\n│  Query logs     │\n└────────┬────────┘\n         │\n┌────────▼────────┐\n│  3. CLUSTER     │\n│  Group similar  │\n└────────┬────────┘\n         │\n┌────────▼────────┐\n│  4. INVESTIGATE │\n│  Drill down     │\n└────────┬────────┘\n         │\n┌────────▼────────┐\n│  5. PCAP VERIFY │\n│  Get packets    │\n└────────┬────────┘\n         │\n┌────────▼────────┐\n│  6. REMEDIATE   │\n│  Take action    │\n└─────────────────┘\n```\n\n### Hunt Example 1: Find Beaconing C2 Traffic\n\n**Hypothesis**: \"Is any host making regular, periodic connections to external IPs (C2 beacon)?\"\n\n**Step 1: Query Zeek Connection Logs**\n\nIn Kibana, search:\n\n```\nevent.module:zeek AND event.dataset:conn AND \ndestination.ip:* AND NOT destination.ip:192.168.0.0/16 AND \nNOT destination.ip:10.0.0.0/8\n```\n\n**Step 2: Visualize Connection Patterns**\n\nCreate visualization:\n- X-axis: Time (1-minute buckets)\n- Y-axis: Count of connections\n- Split by: source.ip + destination.ip\n\nLook for **regular patterns** (every 60 seconds, every 5 minutes, etc.)\n\n**Step 3: Stack Connections**\n\nGroup by source IP → destination IP pairs:\n\n```json\n{\n  \"192.168.1.50\": {\n    \"203.0.113.45\": [\"14:01:00\", \"14:06:00\", \"14:11:00\", \"14:16:00\"],\n    \"timing\": \"Every 5 minutes\",\n    \"port\": 443,\n    \"bytes_sent\": 1024  // Small, consistent data transfers\n  }\n}\n```\n\n**Red flags**:\n- Regular interval (beaconing)\n- Small data transfers (heartbeat)\n- HTTPS to unusual destination (encrypted C2)\n\n**Step 4: Investigate Source IP**\n\nSearch all activity from 192.168.1.50:\n\n```\nsource.ip:192.168.1.50 OR destination.ip:192.168.1.50\n```\n\nLook for:\n- When did beaconing start?\n- What else is this host doing?\n- Any file downloads before beaconing started?\n\n**Step 5: Check Zeek SSL Logs**\n\n```\nevent.dataset:ssl AND destination.ip:203.0.113.45\n```\n\nExamine:\n- SSL certificate (self-signed? suspicious issuer?)\n- JA3 hash (fingerprint TLS client - is it Cobalt Strike?)\n\n**Step 6: Retrieve PCAP**\n\nIn Hunt interface:\n- Navigate to PCAP section\n- Query: `host 192.168.1.50 and host 203.0.113.45`\n- Time range: Last occurrence\n- Download PCAP\n\n**Step 7: Analyze in Wireshark**\n\n```bash\nwireshark capture.pcap\n\n# Filter for HTTPS handshake\nssl.handshake.type == 1\n\n# Examine certificate\n# Look for:\n# - Issuer: CN=fake-cert\n# - Subject: CN=bad-domain.com\n# - Self-signed\n```\n\n**Verdict**: Confirmed C2 beacon. Cobalt Strike based on JA3 hash.\n\n### Hunt Example 2: Detect DNS Tunneling\n\n**Hypothesis**: \"Is anyone exfiltrating data via DNS tunneling?\"\n\n**Indicators**:\n- Excessive DNS queries from single host\n- Long subdomain names (data encoded in DNS query)\n- Queries to suspicious TLDs (.tk, .xyz)\n- High entropy in domain names (random-looking)\n\n**Query 1: Find High DNS Volume Hosts**\n\n```\nevent.dataset:dns\n| stats count by source.ip\n| where count > 1000\n| sort -count\n```\n\n**Query 2: Find Long Subdomain Queries**\n\n```\nevent.dataset:dns AND dns.question.name.length > 50\n```\n\nExample suspicious query:\n```\n4d616c77617265206461746120686572652e74756e6e656c2e6578616d706c652e636f6d\n(Data encoded as hex in subdomain)\n```\n\n**Query 3: Rare TLDs**\n\n```\nevent.dataset:dns AND (dns.question.name:*.tk OR \n                       dns.question.name:*.xyz OR \n                       dns.question.name:*.top)\n```\n\n**Query 4: High Entropy Domains**\n\nUse Playbook Sigma rule:\n\n```yaml\ntitle: DNS Tunneling - High Entropy Domain\nstatus: experimental\nlogsource:\n  product: zeek\n  service: dns\ndetection:\n  selection:\n    event.dataset: dns\n  condition:\n    - query_length > 40\n    - entropy(dns.question.name) > 4.5\n  fields:\n    - source.ip\n    - dns.question.name\n    - dns.answers\nlevel: medium\n```\n\n**Investigate Hit**:\n\n1. Check source IP's other DNS queries\n2. Look for failed DNS responses (NXDomain)\n3. Examine timing (constant queries = data transfer)\n4. Retrieve PCAP for DNS packets\n5. Decode subdomain (hex/base64) to see exfiltrated data\n\n### Hunt Example 3: Lateral Movement Detection\n\n**Hypothesis**: \"Is anyone using administrative tools to move laterally?\"\n\n**Indicators**:\n- PsExec usage\n- WMI remote execution\n- RDP from workstation to workstation\n- SMB admin share access (C$, ADMIN$)\n\n**Query 1: SMB Admin Shares**\n\n```\nevent.dataset:smb_mapping AND \nsmb.path:(*C$ OR *ADMIN$ OR *IPC$)\n```\n\n**Query 2: RDP Between Workstations**\n\n```\nevent.dataset:rdp AND \nsource.ip:192.168.1.* AND \ndestination.ip:192.168.1.* AND \nNOT destination.ip:192.168.1.10  // Exclude jump box\n```\n\n**Query 3: Named Pipe Creation (PsExec)**\n\nSuricata rule (already in ET ruleset):\n\n```\nalert smb any any -> any any (\n  msg:\"ET POLICY PsExec service created\";\n  flow:established,to_server;\n  content:\"|ff|SMB|25|\";\n  content:\"PSEXESVC\";\n  sid:2014453;\n)\n```\n\nSearch alerts:\n```\nevent.module:suricata AND rule.name:*PsExec*\n```\n\n**Query 4: Check Zeek DCE-RPC Logs**\n\n```\nevent.dataset:dce_rpc AND \ndce_rpc.endpoint:\"IRemoteWinspool\" // Print Spooler exploit\n```\n\n**Investigation Steps**:\n\n1. **Timeline**: When did lateral movement start?\n2. **Source**: Which account? (Check Zeek kerberos.log)\n3. **Path**: Map movement (Host A → Host B → Host C)\n4. **Objective**: What did attacker do on each host?\n   - Check `files.log` for file transfers\n   - Check `smb_files.log` for SMB file access\n   - Retrieve PCAP for command execution\n\n### Advanced: Zeek Log Analysis\n\n**Useful Zeek Log Queries**:\n\n**1. Find SSL Certificates with Short Validity**\n\n```\nevent.dataset:x509 AND \nx509.certificate.not_valid_after < now+30d\n```\n\n**2. Detect SSL Certificates from Suspicious Issuers**\n\n```\nevent.dataset:x509 AND \nx509.certificate.issuer.common_name:(\"localhost\" OR \"test\" OR \"default\")\n```\n\n**3. Find Large File Transfers**\n\n```\nevent.dataset:files AND \nfile.size > 100000000  // >100MB\n```\n\n**4. Detect Executable Downloads**\n\n```\nevent.dataset:http AND \nhttp.response.mime_type:(\"application/x-dosexec\" OR \n                        \"application/x-msdownload\")\n```\n\n**5. Find Connections to Tor Exit Nodes**\n\n(Requires threat intel feed integration)\n\n```\nevent.dataset:conn AND \ndestination.ip IN [tor_exit_node_list]\n```"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "title": "Hands-On: Hunt for APT Activity in Security Onion",
        "description": "Simulate APT attack and hunt using Security Onion's full capabilities",
        "code": "# =================================================\n# Simulated APT Scenario: Hunt the Threat\n# =================================================\n\n# SCENARIO:\n# Your Security Onion detected unusual activity.\n# An APT group has compromised a workstation and is:\n# 1. Establishing C2 beacon\n# 2. Performing reconnaissance\n# 3. Moving laterally\n# 4. Exfiltrating data\n\n# Your mission: Hunt and document the attack chain\n\n# =================================================\n# PART 1: Initial Detection - Suricata Alert\n# =================================================\n\n# Navigate to Security Onion Hunt interface\n# https://[MANAGER_IP]\n\n# Go to Alerts dashboard\n# Filter by severity: HIGH\n\n# You see:\n# [**] ET TROJAN Cobalt Strike Beacon HTTP Activity [**]\n# Source: 192.168.1.75\n# Destination: 203.0.113.50:443\n# Timestamp: 2024-03-15 14:23:45\n\n# =================================================\n# PART 2: Investigate Source IP in Kibana\n# =================================================\n\n# Open Kibana\n# Discover tab\n\n# Query: All activity from compromised host\nsource.ip:192.168.1.75 OR destination.ip:192.168.1.75\n\n# Set time range: Last 24 hours\n\n# Create timeline visualization:\n# - X-axis: timestamp\n# - Y-axis: count\n# - Split by: event.dataset\n\n# You observe:\n# 06:00 - Normal HTTP/DNS traffic\n# 14:15 - HTTP download (http.log)\n# 14:18 - SSL connection established (ssl.log)\n# 14:23 - C2 beacon starts (conn.log - regular intervals)\n# 15:00 - SMB connections to other hosts (smb.log)\n# 16:30 - Large file upload (files.log)\n\n# =================================================\n# PART 3: Investigate Initial Infection\n# =================================================\n\n# Query: HTTP downloads before C2 started\nevent.dataset:http AND \nsource.ip:192.168.1.75 AND \n@timestamp:[2024-03-15T14:00:00 TO 2024-03-15T14:20:00]\n\n# Click on HTTP event with file download\n# Examine fields:\nhttp.request.uri: \"/downloads/invoice_march.exe\"\nhttp.response.mime_type: \"application/x-dosexec\"\nhttp.response.body.bytes: 4567890\nserver.domain: \"malicious-site.com\"\n\n# Find file hash in files.log\nevent.dataset:files AND \nsource.ip:192.168.1.75 AND \nfile.name:\"invoice_march.exe\"\n\n# Extract file hash\nfile.hash.sha256: \"a3f8d9c2b1e4f5a6b7c8d9e0f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0\"\n\n# Check VirusTotal (via SIEM integration or manually)\n# Result: Detected as Cobalt Strike beacon by 45/70 engines\n\n# =================================================\n# PART 4: Analyze C2 Communication\n# =================================================\n\n# Query: SSL connections to C2 server\nevent.dataset:ssl AND \ndestination.ip:203.0.113.50\n\n# Examine SSL certificate\nssl.server.subject: \"CN=update.microsoft-security.com\"\nssl.server.issuer: \"CN=update.microsoft-security.com\"  # Self-signed!\nssl.server.not_valid_before: \"2024-03-10\"  # Certificate created 5 days ago\nssl.server.not_valid_after: \"2025-03-10\"   # 1 year validity\nssl.ja3: \"a0e9f5d64349fb13191bc781f81f42e1\"  # Cobalt Strike JA3 hash\n\n# Query: Connection patterns (beaconing)\nevent.dataset:conn AND \nsource.ip:192.168.1.75 AND \ndestination.ip:203.0.113.50\n\n# Create visualization:\n# Histogram with 1-minute buckets\n# Result: Connection every 5 minutes (300 seconds) - beaconing!\n\n# =================================================\n# PART 5: Detect Reconnaissance\n# =================================================\n\n# Query: DNS queries from compromised host\nevent.dataset:dns AND \nsource.ip:192.168.1.75\n\n# Filter for internal IP queries (reverse DNS)\ndns.question.type:PTR AND \nsource.ip:192.168.1.75\n\n# Result: Host performed reverse DNS on entire subnet\n# 192.168.1.1 → dc01.corp.local\n# 192.168.1.5 → fileserver.corp.local\n# 192.168.1.10 → sql-prod.corp.local\n# [... 254 queries total]\n\n# This is network reconnaissance!\n\n# =================================================\n# PART 6: Detect Lateral Movement\n# =================================================\n\n# Query: SMB connections from compromised host\nevent.dataset:smb_mapping AND \nsource.ip:192.168.1.75\n\n# Results:\nTimestamp: 15:05:23\nDestination: 192.168.1.10 (SQL server)\nShare: \\\\192.168.1.10\\ADMIN$\nUsername: corp\\administrator\nStatus: Success\n\n# Check for PsExec-like activity\nevent.module:suricata AND \nrule.name:*PsExec* AND \nsource.ip:192.168.1.75\n\n# Alert found:\n[**] ET POLICY PsExec service created [**]\nSource: 192.168.1.75\nDestination: 192.168.1.10:445\n\n# Check DCE-RPC logs for remote execution\nevent.dataset:dce_rpc AND \nsource.ip:192.168.1.75\n\n# Result: Multiple IRemoteWinspool calls (Print Spooler exploit)\n\n# =================================================\n# PART 7: Detect Data Exfiltration\n# =================================================\n\n# Query: Large file transfers\nevent.dataset:files AND \nsource.ip:192.168.1.75 AND \nfile.size > 10000000  // >10MB\n\n# Result:\nTimestamp: 16:35:12\nProtocol: HTTPS\nDestination: 45.76.123.45:443\nFile size: 87654321 bytes (83.6 MB)\nMIME type: application/octet-stream\nFilename: data.zip.enc\n\n# Check HTTP logs for details\nevent.dataset:http AND \nsource.ip:192.168.1.75 AND \ndestination.ip:45.76.123.45\n\nhttp.request.method: POST\nhttp.request.uri: /upload.php\nhttp.request.body.bytes: 87654321\nuser_agent.original: \"Mozilla/5.0 (Windows NT 10.0; Win64; x64)\"\n\n# Suspicious: Large POST to unknown server\n\n# =================================================\n# PART 8: Retrieve PCAP for Forensics\n# =================================================\n\n# In Hunt interface, navigate to PCAP section\n\n# Query 1: Capture initial malware download\nhost 192.168.1.75 and host malicious-site.com and port 80\n\n# Time range: 2024-03-15 14:10:00 - 14:20:00\n# Click \"Submit\"\n# Download PCAP\n\n# Query 2: Capture C2 beacon\nhost 192.168.1.75 and host 203.0.113.50 and port 443\n\n# Time range: 2024-03-15 14:23:00 - 14:28:00\n# Download PCAP\n\n# Query 3: Capture lateral movement (PsExec)\nhost 192.168.1.75 and host 192.168.1.10 and port 445\n\n# Time range: 2024-03-15 15:00:00 - 15:10:00\n# Download PCAP\n\n# Query 4: Capture data exfiltration\nhost 192.168.1.75 and host 45.76.123.45 and port 443\n\n# Time range: 2024-03-15 16:30:00 - 16:40:00\n# Download PCAP\n\n# =================================================\n# PART 9: Analyze PCAP in Wireshark\n# =================================================\n\nwireshark initial_infection.pcap\n\n# Filter: http.request.uri contains \"exe\"\n# Right-click HTTP object → Export → Save as malware_sample.exe\n\n# Submit to sandbox for analysis\n\nwireshark lateral_movement.pcap\n\n# Filter: smb2\n# Follow SMB stream\n# See: CreateFile(\\\\ADMIN$\\\\PSEXESVC.exe)\n# Confirms PsExec execution\n\nwireshark exfiltration.pcap\n\n# Filter: http.request.method == \"POST\"\n# Examine HTTP headers:\nContent-Type: multipart/form-data\nContent-Disposition: filename=\"data.zip.enc\"\n\n# Export HTTP object → Save encrypted archive\n# (Would need decryption key to analyze contents)\n\n# =================================================\n# PART 10: Create Detection Rules\n# =================================================\n\n# Based on investigation, create custom Suricata rules\n\nsudo nano /etc/suricata/rules/local.rules\n\n# Add:\n\n# Detect specific C2 domain\nalert tls any any -> any any (\n    msg:\"APT C2 - Fake Microsoft Update Domain\";\n    tls.sni; content:\"update.microsoft-security.com\";\n    threshold:type limit, track by_src, count 1, seconds 3600;\n    sid:9000001; rev:1;\n    classtype:trojan-activity;\n)\n\n# Detect JA3 hash of Cobalt Strike\nalert tls any any -> any any (\n    msg:\"APT C2 - Cobalt Strike JA3 Hash\";\n    ja3.hash; content:\"a0e9f5d64349fb13191bc781f81f42e1\";\n    threshold:type limit, track by_src, count 1, seconds 3600;\n    sid:9000002; rev:1;\n    classtype:trojan-activity;\n)\n\n# Detect large data upload to suspicious IPs\nalert http $HOME_NET any -> $EXTERNAL_NET any (\n    msg:\"APT Exfiltration - Large POST Request\";\n    flow:to_server,established;\n    http.method; content:\"POST\";\n    http.request_body; bsize:>10000000;  # >10MB\n    threshold:type limit, track by_src, count 1, seconds 600;\n    sid:9000003; rev:1;\n    classtype:policy-violation;\n)\n\n# Reload Suricata\nsudo systemctl reload suricata\n\n# =================================================\n# PART 11: Document Attack Chain (MITRE ATT&CK)\n# =================================================\n\n# Create incident report:\n\ncat > apt_incident_report.txt << 'EOF'\nAPT INCIDENT INVESTIGATION REPORT\n==================================\n\nIncident ID: INC-2024-0315\nDate: 2024-03-15\nInvestigator: SOC Team\n\nATTACK CHAIN (MITRE ATT&CK):\n\n1. INITIAL ACCESS (T1566.001 - Phishing: Spearphishing Attachment)\n   - User downloaded \"invoice_march.exe\" from malicious-site.com\n   - Timestamp: 14:15:23\n   - File hash: a3f8d9...f9a0\n   \n2. EXECUTION (T1204.002 - User Execution: Malicious File)\n   - User executed downloaded file\n   - Result: Cobalt Strike beacon installed\n   \n3. PERSISTENCE (T1547 - Boot/Logon Autostart)\n   - Malware established persistence (detected in registry)\n   \n4. COMMAND AND CONTROL (T1071.001 - Web Protocols)\n   - HTTPS C2 to 203.0.113.50:443\n   - Beaconing interval: 300 seconds\n   - JA3 hash: a0e9f5d...42e1 (Cobalt Strike)\n   \n5. DISCOVERY (T1018 - Remote System Discovery)\n   - Reverse DNS queries for entire 192.168.1.0/24 subnet\n   - 254 PTR queries in 10 minutes\n   \n6. LATERAL MOVEMENT (T1021.002 - SMB/Windows Admin Shares)\n   - PsExec to 192.168.1.10 (SQL server)\n   - Username: corp\\administrator (likely compromised)\n   - Timestamp: 15:05:23\n   \n7. COLLECTION (T1005 - Data from Local System)\n   - Large ZIP archive created (83.6 MB)\n   - Likely contained sensitive data from SQL server\n   \n8. EXFILTRATION (T1041 - Exfiltration Over C2 Channel)\n   - Uploaded data.zip.enc to 45.76.123.45:443\n   - Timestamp: 16:35:12\n\nAFFECTED SYSTEMS:\n- 192.168.1.75 (Patient Zero - User workstation)\n- 192.168.1.10 (SQL server - Lateral movement)\n\nIOCs:\n- Malicious domain: malicious-site.com\n- C2 IP: 203.0.113.50\n- Exfil IP: 45.76.123.45\n- File hash: a3f8d9c2b1e4f5a6b7c8d9e0f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0\n- JA3 hash: a0e9f5d64349fb13191bc781f81f42e1\n\nRECOMMENDATIONS:\n1. Isolate affected systems immediately\n2. Reset all domain admin credentials\n3. Block C2 and exfil IPs at perimeter firewall\n4. Deploy custom Suricata rules (SID 9000001-9000003)\n5. Scan all endpoints for IOCs\n6. Review backups of SQL server\n7. Implement email attachment scanning\nEOF\n\n# =================================================\n# Result: Complete APT investigation documented!\n# =================================================",
        "language": "bash",
        "difficulty": "advanced"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "## Real-World Case Study: APT28 Detection with Security Onion\n\n**Organization**: Government contractor network\n\n**Adversary**: APT28 (Fancy Bear) - Russian state-sponsored threat actor\n\n**Timeline**: 8-week campaign (discovered in week 7)\n\n**Challenge**: APT28 had compromised multiple systems using spearphishing and was exfiltrating classified research data. Traditional AV and firewall missed the attack.\n\n### Initial Detection\n\n**Day 0 (Week 7, Monday)**: Security Onion Suricata alert\n\n```\n[**] ET TROJAN Win32/Agent Variant CnC Activity [**]\n[Priority: 1]\n04/15-09:23:18.456789 10.50.25.42:49847 -> 198.18.0.15:443\nTCP TTL:128 TOS:0x0 ID:54321 IpLen:20 DgmLen:52\n```\n\n**Context**: This alert alone wasn't unusual (1-2 per week are false positives). But this time, the analyst decided to hunt deeper.\n\n### Hunt Phase 1: Investigate Source IP\n\n**Kibana Query**:\n\n```\nsource.ip:10.50.25.42 OR destination.ip:10.50.25.42\n@timestamp:[now-7d TO now]\n```\n\n**Findings**:\n\n1. **Unusual DNS patterns**:\n   ```\n   dns.question.name: \"update-service-ms.dynamic-dns.net\"\n   Count: 487 queries over 7 days\n   Interval: Every ~15 minutes\n   ```\n\n2. **Zeek SSL logs showed suspicious certificate**:\n   ```\n   ssl.server.subject: \"CN=Microsoft Update Service\"\n   ssl.server.issuer: \"CN=Microsoft Update Service\"  // Self-signed\n   ssl.ja3: \"6734f37431670b3ab4292b8f60f29984\"  // Known APT28 hash\n   ```\n\n3. **Small, regular data transfers**:\n   ```\n   Connection logs (conn.log):\n   Bytes out: ~1024-2048 per connection\n   Interval: Every 900 seconds (15 minutes)\n   Duration: 7 days\n   ```\n\n**Assessment**: Confirmed C2 beacon (APT28 based on JA3 hash)\n\n### Hunt Phase 2: Timeline Analysis\n\n**Objective**: When did infection start? What was initial vector?\n\n**Zeek HTTP logs** (searching backwards from C2 start):\n\n```\nevent.dataset:http AND \nsource.ip:10.50.25.42 AND \n@timestamp:[now-60d TO now]\n```\n\n**Discovery** (Week 1, 49 days ago):\n\n```\nTimestamp: 2024-02-25 11:34:56\nHTTP Request:\n  Method: GET\n  URI: /documents/Q2_Financial_Report.pdf.exe\n  Host: sharepoint-internal.dynamic-dns.net  // Typosquatting!\n  User-Agent: Mozilla/5.0 (Windows NT 10.0) Edge/120.0\n  \nHTTP Response:\n  Status: 200 OK\n  Content-Type: application/x-dosexec\n  Content-Length: 3456789\n  \nZeek Files log:\n  File hash (SHA256): c4f8e9a2b3d1f5e6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0\n  MIME type: application/x-dosexec\n  Extracted: /nsm/bro/extracted/HTTP-Fe3kD92lMn4pQ7.exe\n```\n\n**Initial Infection**: Fake SharePoint document (actually .exe)\n\n**VirusTotal Check** (via Security Onion integration):\n- Detected: 12/70 engines (at time of download)\n- Now: 58/70 engines (signature updates)\n- Identified as: APT28 Sofacy malware variant\n\n### Hunt Phase 3: Lateral Movement\n\n**Hypothesis**: Did attacker move to other systems?\n\n**Query**: SMB activity from Patient Zero\n\n```\nevent.dataset:smb_mapping AND \nsource.ip:10.50.25.42\n```\n\n**Results**:\n\n```\nWeek 2 (March 1):\n  10.50.25.42 → 10.50.10.5 (Domain Controller)\n  Share: \\\\DC01\\ADMIN$\n  Username: DOMAIN\\jsmith-admin\n  Status: SUCCESS\n  \nWeek 3 (March 8):\n  10.50.25.42 → 10.50.30.15 (File Server)\n  Share: \\\\FILESERVER\\ResearchData$\n  Username: DOMAIN\\jsmith-admin\n  Status: SUCCESS\n```\n\n**Analysis**: Attacker compromised admin account, accessed DC and file server\n\n**Zeek DCE-RPC logs** showed:\n\n```\nOperation: SamrQueryInformationUser (credential dumping)\nTimestamp: 2024-03-01 15:23:45\nSource: 10.50.25.42\nDestination: 10.50.10.5 (DC)\n```\n\n**Mimikatz activity detected!**\n\n### Hunt Phase 4: Data Exfiltration\n\n**Query**: Large file transfers to external IPs\n\n```\nevent.dataset:files AND \nsource.ip:(10.50.25.42 OR 10.50.30.15) AND \nfile.size > 50000000 AND  // >50MB\nNOT destination.ip:(10.0.0.0/8 OR 192.168.0.0/16)\n```\n\n**Shocking Discovery**:\n\n```\nWeek 4-7 (March 15 - April 14):\n  Total files exfiltrated: 23\n  Total size: 4.7 GB\n  Destination: 198.18.0.15 (Russia, hosting provider)\n  Protocol: HTTPS (encrypted)\n  \nFile details (from files.log):\n  research_project_alpha.zip (876 MB)\n  technical_specs.7z (1.2 GB)\n  employee_database.sql (245 MB)\n  [... 20 more files]\n```\n\n**Zeek HTTP logs showed**:\n\n```\nhttp.request.method: POST\nhttp.request.uri: /upload.php\nUser-Agent: \"python-requests/2.28.0\"  // Automated upload script\n```\n\n### Hunt Phase 5: PCAP Analysis\n\n**Retrieve initial infection PCAP**:\n\n```bash\n# Query Stenographer\nsudo stenoread 'host 10.50.25.42 and host sharepoint-internal.dynamic-dns.net' \\\n  -t '2024-02-25T11:30:00Z' \\\n  -e '2024-02-25T11:40:00Z' \\\n  -w initial_infection.pcap\n```\n\n**Wireshark Analysis**:\n\n```\nFilter: http.request.uri contains \"exe\"\n\nHTTP GET /documents/Q2_Financial_Report.pdf.exe\nHost: sharepoint-internal.dynamic-dns.net\n\n[Follow HTTP Stream]\n\nResponse headers:\nHTTP/1.1 200 OK\nContent-Type: application/octet-stream\nContent-Disposition: attachment; filename=\"report.pdf\"\n\n[Export HTTP Object]\nSaved: malware_sample.exe\n```\n\n**Malware Analysis** (sandbox):\n\n```\nFile: malware_sample.exe\nType: PE32 executable\nPacker: None (surprisingly)\n\nBehavior:\n1. Creates registry key: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n2. Connects to: update-service-ms.dynamic-dns.net:443\n3. Injects into explorer.exe\n4. Steals browser cookies and saved passwords\n5. Beacons every 15 minutes\n6. Downloads additional payloads on command\n\nMatches: APT28 Sofacy malware family\n```\n\n### Response Actions\n\n**Immediate (Day 0)**:\n\n1. **Network isolation**:\n   ```bash\n   # Block C2 at firewall\n   iptables -I FORWARD -d 198.18.0.15 -j DROP\n   iptables -I FORWARD -d update-service-ms.dynamic-dns.net -j DROP\n   ```\n\n2. **Endpoint isolation** (via EDR):\n   - 10.50.25.42 (Patient Zero)\n   - 10.50.30.15 (File Server)\n\n3. **Credential reset**:\n   - Force password change for jsmith-admin\n   - Reset Kerberos TGT\n   - Reset all service account passwords\n\n**Investigation (Days 1-7)**:\n\n1. **Forensics**:\n   - Image all compromised systems\n   - Memory dump for malware analysis\n   - Preserve all logs and PCAPs\n\n2. **Scope assessment**:\n   ```bash\n   # Hunt for IOCs across all endpoints\n   for host in $(cat all_ips.txt); do\n     ssh admin@$host \"grep -r 'update-service-ms' /var/log/\"\n   done\n   ```\n\n3. **Data loss assessment**:\n   - Identify all exfiltrated files\n   - Determine classification level\n   - Notify stakeholders\n\n**Long-term (Weeks 2-4)**:\n\n1. **Deploy custom detection**:\n   ```\n   # Suricata rule for APT28 JA3\n   alert tls any any -> any any (\n     msg:\"APT28 Sofacy - Known JA3 Hash\";\n     ja3.hash; content:\"6734f37431670b3ab4292b8f60f29984\";\n     threshold:type limit, track by_src, count 1, seconds 86400;\n     sid:9100001; rev:1;\n     classtype:trojan-activity;\n     reference:url,attack.mitre.org/groups/G0007/;\n   )\n   ```\n\n2. **Threat hunting playbook**:\n   - Weekly hunts for APT28 TTPs\n   - Monitor for typosquatting domains\n   - Alert on self-signed certs from unknown sources\n\n### Metrics\n\n**Attack Duration**: 49 days (7 weeks undetected)\n\n**Dwell Time**: Reduced from 49 days to <1 day after Security Onion hunt\n\n**Data Exfiltrated**: 4.7 GB (23 files)\n\n**Systems Compromised**: 3 (workstation, DC, file server)\n\n**Detection Method**: Security Onion Suricata alert → Kibana hunt → Zeek log correlation → PCAP verification\n\n**Response Time**: \n- Alert to investigation start: 15 minutes\n- Investigation to containment: 4 hours\n- Full incident response: 7 days\n\n### Lessons Learned\n\n**What Worked**:\n\n1. **Layered Detection**: Suricata caught the C2, Zeek provided context, Stenographer proved it\n2. **Full Packet Capture**: PCAP retrieved initial infection from 7 weeks ago\n3. **Threat Intelligence**: JA3 hash matched known APT28 infrastructure\n4. **Hunt Methodology**: Following the data led to full attack chain reconstruction\n\n**What Failed**:\n\n1. **Email Security**: Phishing email bypassed filters\n2. **Endpoint Protection**: AV didn't catch initial malware (12/70 detection rate)\n3. **User Training**: User executed .exe disguised as PDF\n4. **Alert Fatigue**: Similar alerts ignored for weeks\n\n**Improvements Implemented**:\n\n1. **Automated Threat Hunting**:\n   ```python\n   # Daily hunt for beaconing\n   # Alert if any IP shows regular connection intervals\n   ```\n\n2. **JA3 Hash Monitoring**:\n   - Alert on unknown JA3 hashes\n   - Whitelist known-good applications\n\n3. **DNS Monitoring**:\n   - Block dynamic DNS providers at perimeter\n   - Alert on typosquatting of internal domains\n\n4. **File Extraction**:\n   - Automatically submit HTTP-transferred executables to sandbox\n\n**Quote from CISO**:\n\n> \"Security Onion gave us the visibility to detect, investigate, and respond to a nation-state attack that had been running for 7 weeks. The full packet capture was crucial—we could go back nearly 2 months and retrieve the exact malware payload. Without that, we'd never have understood the full scope of the breach. This platform paid for itself many times over.\"\n\n### Key Takeaways\n\n1. **Full packet capture is essential**: You can't investigate what you can't see\n2. **Context matters**: Alert + logs + PCAP = complete picture\n3. **Hunt proactively**: Don't just wait for alerts—search for anomalies\n4. **Correlation is king**: Suricata + Zeek + Stenographer > any single tool\n5. **Threat intel integration**: JA3 hash immediately identified APT28\n6. **Retention matters**: 60-day PCAP retention caught 49-day-old infection"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "title": "Advanced: Custom Zeek Script for Threat Detection",
        "description": "Write custom Zeek script to detect DNS beaconing and add to Security Onion",
        "code": "# =================================================\n# Custom Zeek Script: DNS Beaconing Detection\n# =================================================\n\n# Zeek uses its own scripting language for custom analysis\n# This script detects regular DNS queries (potential C2 beaconing)\n\n# Create custom Zeek script\nsudo nano /opt/zeek/share/zeek/site/dns-beaconing.zeek\n\n# =================================================\n# dns-beaconing.zeek\n# =================================================\n\n@load base/protocols/dns\n\nmodule DNSBeaconing;\n\nexport {\n    redef enum Notice::Type += {\n        ## Indicates potential DNS beaconing behavior\n        DNS_Beaconing_Detected,\n        \n        ## High-frequency DNS queries to same domain\n        DNS_High_Frequency\n    };\n    \n    ## Threshold for number of queries to trigger alert\n    const query_threshold = 20 &redef;\n    \n    ## Time window for query counting (seconds)\n    const time_window = 300 &redef;  # 5 minutes\n    \n    ## Minimum interval regularity (seconds) to consider beaconing\n    const min_regularity = 50 &redef;  # Queries every ~60 sec ± 10 sec\n}\n\n# Track DNS queries per source IP + domain\ntype QueryInfo: record {\n    times: vector of time;     # Timestamps of queries\n    intervals: vector of double;  # Time between queries\n};\n\n# State tracking\nglobal dns_queries: table[addr, string] of QueryInfo &create_expire=10min;\n\n# Function to calculate standard deviation\nfunction stddev(v: vector of double): double {\n    local sum = 0.0;\n    local count = 0.0;\n    \n    for (i in v) {\n        sum += v[i];\n        count += 1.0;\n    }\n    \n    if (count == 0.0)\n        return 0.0;\n    \n    local mean = sum / count;\n    local variance_sum = 0.0;\n    \n    for (i in v) {\n        variance_sum += (v[i] - mean) * (v[i] - mean);\n    }\n    \n    return sqrt(variance_sum / count);\n}\n\n# Analyze DNS queries for beaconing patterns\nevent dns_request(c: connection, msg: dns_msg, query: string, qtype: count, qclass: count) {\n    local src = c$id$orig_h;\n    local domain = query;\n    \n    # Skip queries to internal domains\n    if (/\\.local$/ in domain || /\\.corp$/ in domain)\n        return;\n    \n    # Initialize tracking if new source+domain pair\n    if ([src, domain] !in dns_queries) {\n        dns_queries[src, domain] = QueryInfo(\n            $times = vector(),\n            $intervals = vector()\n        );\n    }\n    \n    local info = dns_queries[src, domain];\n    \n    # Add current timestamp\n    info$times += network_time();\n    \n    # Calculate interval if we have previous query\n    if (|info$times| > 1) {\n        local interval = network_time() - info$times[|info$times| - 2];\n        info$intervals += interval;\n    }\n    \n    # Check if we've exceeded threshold\n    if (|info$times| >= query_threshold) {\n        # Check for regular intervals (beaconing)\n        if (|info$intervals| > 5) {\n            local std = stddev(info$intervals);\n            local mean_interval = 0.0;\n            \n            for (i in info$intervals) {\n                mean_interval += info$intervals[i];\n            }\n            mean_interval = mean_interval / |info$intervals|;\n            \n            # Low standard deviation = regular intervals = beaconing!\n            if (std < min_regularity && mean_interval > 10.0) {\n                NOTICE([\n                    $note=DNS_Beaconing_Detected,\n                    $conn=c,\n                    $msg=fmt(\"DNS beaconing detected: %s queried %s %d times with %.2f sec intervals (stddev: %.2f)\",\n                             src, domain, |info$times|, mean_interval, std),\n                    $identifier=cat(src, domain),\n                    $suppress_for=1hr\n                ]);\n            }\n        }\n        \n        # Also alert on high frequency regardless of regularity\n        if (network_time() - info$times[0] < time_window) {\n            NOTICE([\n                $note=DNS_High_Frequency,\n                $conn=c,\n                $msg=fmt(\"High-frequency DNS queries: %s queried %s %d times in %d seconds\",\n                         src, domain, |info$times|, time_window),\n                $identifier=cat(src, domain),\n                $suppress_for=30min\n            ]);\n        }\n    }\n}\n\n# Log beaconing alerts\nevent zeek_init() {\n    Log::create_stream(DNSBeaconing::LOG, [\n        $columns=record {\n            ts: time &log;\n            src_ip: addr &log;\n            domain: string &log;\n            query_count: count &log;\n            mean_interval: double &log;\n            std_dev: double &log;\n        },\n        $path=\"dns-beaconing\"\n    ]);\n}\n\n# =================================================\n# Save and enable script\n# =================================================\n\n# Add to local.zeek (main config)\nsudo nano /opt/zeek/share/zeek/site/local.zeek\n\n# Add line:\n@load ./dns-beaconing.zeek\n\n# Deploy to Security Onion\nsudo so-zeek-restart\n\n# =================================================\n# Verify script is loaded\n# =================================================\n\nsudo zeek -NN | grep DNSBeaconing\n# Should output: DNSBeaconing - <no description>\n\n# Check logs\nsudo tail -f /nsm/zeek/logs/current/dns-beaconing.log\n\n# =================================================\n# Test with simulated beaconing\n# =================================================\n\n#!/bin/bash\n# beacon_test.sh - Simulate DNS beaconing\n\nfor i in {1..25}; do\n    nslookup beacon-test-$RANDOM.malicious-domain.com 8.8.8.8\n    sleep 60  # Query every 60 seconds\ndone\n\n# After ~25 minutes, Zeek should alert:\n# DNS beaconing detected: 192.168.1.100 queried malicious-domain.com \n# 25 times with 60.00 sec intervals (stddev: 0.50)\n\n# =================================================\n# BONUS: Custom Zeek Script for JA3 Hash Alerting\n# =================================================\n\nsudo nano /opt/zeek/share/zeek/site/ja3-hunting.zeek\n\ncat > /opt/zeek/share/zeek/site/ja3-hunting.zeek << 'ZEEK'\n@load protocols/ssl/ja3\n\nmodule JA3Hunting;\n\nexport {\n    redef enum Notice::Type += {\n        Suspicious_JA3_Hash\n    };\n    \n    # Known malicious JA3 hashes (from threat intel)\n    const malicious_ja3: set[string] = {\n        \"a0e9f5d64349fb13191bc781f81f42e1\",  # Cobalt Strike\n        \"6734f37431670b3ab4292b8f60f29984\",  # APT28 Sofacy\n        \"e7d705a3286e19ea42f587b344ee6865\",  # Trickbot\n        \"b32309a26951912be7dba376398abc3b\"   # Emotet\n    } &redef;\n}\n\nevent ssl_established(c: connection) {\n    if (!c$ssl?$ja3)\n        return;\n    \n    local ja3_hash = c$ssl$ja3;\n    \n    if (ja3_hash in malicious_ja3) {\n        NOTICE([\n            $note=Suspicious_JA3_Hash,\n            $conn=c,\n            $msg=fmt(\"Malicious JA3 hash detected: %s from %s to %s\",\n                     ja3_hash, c$id$orig_h, c$id$resp_h),\n            $identifier=cat(c$id$orig_h, ja3_hash),\n            $suppress_for=1hr\n        ]);\n    }\n}\nZEEK\n\n# Add to local.zeek\necho '@load ./ja3-hunting.zeek' | sudo tee -a /opt/zeek/share/zeek/site/local.zeek\n\n# Restart Zeek\nsudo so-zeek-restart\n\n# =================================================\n# View alerts in Security Onion\n# =================================================\n\n# Zeek notices appear in:\n# 1. /nsm/zeek/logs/current/notice.log\n# 2. Elasticsearch (event.dataset:notice)\n# 3. Security Onion Hunt interface (Alerts)\n\n# Query in Kibana:\nevent.dataset:notice AND note:(\"DNS_Beaconing_Detected\" OR \"Suspicious_JA3_Hash\")\n\n# Create dashboard for custom alerts\n# Visualizations:\n# - Count of beaconing alerts over time\n# - Top domains with beaconing behavior\n# - Top source IPs with suspicious JA3 hashes\n\n# =================================================\n# Result: Custom threat detection integrated!\n# =================================================",
        "language": "bash",
        "difficulty": "advanced"
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "## Security Onion Framework: LAYER\n\n**L**ogs - Zeek protocol analysis (HTTP, DNS, SSL, files)\n**A**lerts - Suricata signature-based detection\n**Y**ield - Correlate multiple data sources for context\n**E**vidence - Stenographer full packet capture\n**R**esponse - Hunt interface for investigation\n\n### Quick Reference: Security Onion Components\n\n```\nSuricata    → Signature detection (like Snort)\nZeek        → Protocol analysis (behavioral)\nStenographer→ Full PCAP (forensics)\nElasticsearch→ Search engine (stores logs)\nKibana      → Visualization (dashboards)\nSOC/Hunt    → Alert triage interface\n```\n\n### Essential Zeek Logs\n\n```\nconn.log    // All connections (5-tuple + bytes)\nhttp.log    // HTTP requests/responses\ndns.log     // DNS queries and answers\nssl.log     // TLS certificates and JA3\nfiles.log   // File transfers (HTTP, SMB, FTP)\nnotice.log  // Zeek-generated alerts\nx509.log    // SSL certificate details\nsmb.log     // SMB file shares and activity\n```\n\n### Hunt Workflow\n\n```\n1. Alert → Review Suricata detection\n2. Context → Check Zeek logs for same IPs\n3. Timeline → When did activity start?\n4. Scope → Other affected systems?\n5. PCAP → Retrieve packets for proof\n6. Remediate → Block, isolate, investigate\n```\n\n### Common Hunt Queries\n\n```\n# Beaconing detection\nevent.dataset:conn | stats count by source.ip, destination.ip\n| where count > 100 AND time_interval_regular\n\n# Large uploads\nevent.dataset:http | where http.request.method:POST \n| where http.request.body.bytes > 10000000\n\n# Suspicious SSL\nevent.dataset:ssl | where ssl.server.issuer:*localhost*\n```"
      }
    },
    {
      "type": "quiz",
      "content": {
        "questions": [
          {
            "question": "What is the primary difference between Zeek (Bro) and Suricata in Security Onion?",
            "options": [
              "Zeek is faster than Suricata",
              "Zeek performs protocol analysis and behavioral detection, Suricata does signature-based IDS",
              "Zeek stores packets, Suricata generates alerts",
              "There is no difference"
            ],
            "correct_answer": 1,
            "explanation": "Zeek focuses on deep protocol analysis and creates structured logs (HTTP, DNS, SSL, etc.) for behavioral threat hunting. Suricata performs signature-based detection like Snort, matching known attack patterns. Together they provide layered detection."
          },
          {
            "question": "In Security Onion, what is the purpose of Stenographer?",
            "options": [
              "Generate IDS alerts",
              "Analyze protocols like HTTP and DNS",
              "Provide indexed full packet capture for forensic analysis",
              "Visualize network traffic in dashboards"
            ],
            "correct_answer": 2,
            "explanation": "Stenographer captures and indexes full network packets, allowing you to retrieve PCAPs for specific time ranges and filters. This provides the 'ground truth' for investigations—the actual raw packets that traversed the network."
          },
          {
            "question": "When hunting for C2 beaconing in Security Onion, which Zeek log would be MOST useful for detecting regular, periodic connections?",
            "options": [
              "http.log - Shows web requests",
              "conn.log - Shows all network connections with timestamps",
              "dns.log - Shows DNS queries",
              "files.log - Shows file transfers"
            ],
            "correct_answer": 1,
            "explanation": "conn.log contains all network connections with precise timestamps, byte counts, and duration. By analyzing connection patterns in conn.log (same source→destination pairs at regular intervals), you can detect beaconing behavior characteristic of C2 communication."
          }
        ]
      }
    },
    {
      "type": "reflection",
      "content": {
        "question": "You're investigating a potential data exfiltration incident in Security Onion. You've found a Suricata alert for 'Suspicious Outbound Connection', but the destination IP is unknown and the traffic is encrypted (HTTPS). How would you use Security Onion's multiple data sources (Suricata, Zeek, Stenographer) to investigate whether this is malicious exfiltration or legitimate business traffic?",
        "guidance": "Consider: (1) Check Zeek ssl.log for certificate details (self-signed? suspicious issuer? JA3 hash matching known malware?), (2) Examine Zeek http.log for Host header (what domain?), (3) Check conn.log for connection patterns (how much data transferred? regular intervals suggesting C2?), (4) Look at files.log for any file transfers before this connection, (5) Search dns.log for when this destination was first resolved, (6) Retrieve PCAP with Stenographer to see TLS handshake and certificate in Wireshark, (7) Check other connections from same source IP in conn.log (is this isolated or part of pattern?), (8) Correlate timeline: what did user do before this connection? Download a file? Receive an email?"
      }
    }
  ]
}