{
  "lesson_id": "408cc68e-49d9-4368-937b-fd91301a5acb",
  "domain": "fundamentals",
  "title": "Network Security Basics",
  "difficulty": 2,
  "order_index": 4,
  "prerequisites": [],
  "concepts": [
    "Firewalls",
    "VPNs",
    "SSL/TLS",
    "Network segmentation",
    "DMZ"
  ],
  "content_blocks": [
    {
      "block_id": "5e60a3d9-d576-4502-884d-00a4b432dfd4",
      "type": "mindset_coach",
      "content": {
        "text": "Network security is the art of controlling who can talk to what. Every breach starts with network access - attackers must communicate with their targets, move between systems, and exfiltrate data. Your job is building barriers and monitoring traffic.\n\nHere's the core truth: Networks are designed for connectivity, but security requires controlled connectivity. Default networks trust everything. Secure networks verify everything. You're learning to transform trusting networks into zero-trust environments.\n\nMany people think network security is just 'install a firewall.' That's like thinking home security is just 'lock the front door.' Real network security is layered defense: perimeter firewalls, network segmentation, access controls, encryption, monitoring, and intrusion detection working together.\n\nThink of network security like medieval castle design. You don't just build one wall - you build outer walls, inner walls, moats, drawbridges, guard towers, and keep the most valuable assets in the most protected inner chamber. That's defense in depth applied to networks.\n\nHere's what makes this critical: Network security is foundational to everything else. The best application security means nothing if attackers can bypass it via network access. The strongest encryption doesn't help if they can intercept your unencrypted management interface. Network security is the chessboard on which all other security plays out.\n\nThe beautiful part: Network security is concrete and measurable. Firewall rules either allow or block traffic. VPNs either encrypt or don't. Network segments either isolate systems or don't. You can test and verify everything.\n\nLet's build your network security foundation."
      },
      "simplified_explanation": "Network security = controlling what can talk to what on networks. Firewalls block bad traffic. VPNs create encrypted tunnels. Network segmentation divides networks into zones. DMZ is a special zone for public-facing servers. All working together to protect your network.",
      "memory_aids": [
        "Firewall = Bouncer at the door (checks who gets in)",
        "VPN = Encrypted tunnel through hostile territory",
        "DMZ = Buffer zone between internet and internal network",
        "Segmentation = Don't put all eggs in one basket"
      ],
      "teach_like_im_10": "Imagine your house has different rooms. Network segmentation is like having locks on bedroom doors, not just the front door. Firewall is the security guard checking everyone who tries to enter. VPN is like a secret tunnel that only you know about. DMZ is the front porch - visitors can be there, but not inside your house."
    },
    {
      "block_id": "d03b01e4-701f-410b-a499-f64e5a12c0e5",
      "type": "explanation",
      "content": {
        "text": "## Firewalls: The Network Gatekeepers\n\nA firewall controls network traffic based on rules - allowing or blocking traffic based on source, destination, port, protocol, and content.\n\n### Types of Firewalls\n\n**Packet Filtering Firewalls** (Layer 3-4):\n- Oldest and simplest type\n- Examines IP addresses, ports, protocols\n- Makes decisions based on packet headers only\n- Fast but limited (can't inspect content)\n- Example rules: 'Block all traffic from 192.168.1.100' or 'Allow port 443 to web server'\n\n**Stateful Inspection Firewalls**:\n- Tracks connection state (NEW, ESTABLISHED, RELATED)\n- Understands which packets belong to which connections\n- Can block unsolicited responses\n- Most common firewall type today\n- Example: Allow outbound connections, block inbound except responses to established connections\n\n**Application Layer Firewalls** (Layer 7):\n- Inspects application protocol content (HTTP, FTP, etc.)\n- Can filter based on URLs, HTTP methods, headers\n- Understands application behavior\n- Example: Block HTTP POST to /admin but allow GET requests\n\n**Next-Generation Firewalls (NGFW)**:\n- All of the above PLUS:\n- Deep packet inspection (DPI)\n- Intrusion Prevention System (IPS)\n- Application awareness\n- User identity awareness\n- SSL/TLS inspection\n- Threat intelligence integration\n- Vendors: Palo Alto Networks, Fortinet, Cisco Firepower\n\n**Web Application Firewalls (WAF)**:\n- Specialized for protecting web applications\n- Filters HTTP/HTTPS traffic\n- Protects against: SQL injection, XSS, CSRF, etc.\n- Can be hardware, software, or cloud service\n- Examples: ModSecurity, Cloudflare WAF, AWS WAF\n\n### Firewall Rule Best Practices\n\n**Default Deny**:\n```\nBad approach:\n- Allow everything\n- Block known bad IPs\n(Problem: You can't know all bad IPs)\n\nGood approach:\n- Block everything by default\n- Allow only necessary traffic\n(Problem: Requires careful planning, but much more secure)\n```\n\n**Least Privilege**:\n```\nBad rule: Allow 0.0.0.0/0 to 192.168.1.10 on ANY port\n(Allows everything from anywhere to server on all ports)\n\nGood rule: Allow 10.0.1.0/24 to 192.168.1.10 on port 443\n(Allows only internal network to web server on HTTPS)\n```\n\n**Rule Order Matters**:\n```\nRule 1: DENY 192.168.1.100 to ANY\nRule 2: ALLOW 192.168.1.0/24 to 10.0.0.10\n\nResult: 192.168.1.100 is blocked (Rule 1 matches first)\n\nReverse the order:\nRule 1: ALLOW 192.168.1.0/24 to 10.0.0.10\nRule 2: DENY 192.168.1.100 to ANY\n\nResult: 192.168.1.100 is allowed (Rule 1 matches, Rule 2 never evaluated)\n```\n\n**Common Firewall Deployment**:\n\n**Perimeter Firewall**:\n- Between internet and internal network\n- Blocks inbound attacks\n- Controls outbound traffic\n- Often includes NAT (Network Address Translation)\n\n**Internal Firewalls**:\n- Between network segments\n- East-west traffic filtering (lateral movement prevention)\n- Micro-segmentation\n\n**Host-Based Firewalls**:\n- Software firewall on each system\n- Windows Firewall, iptables (Linux)\n- Last line of defense\n\n## VPN: Encrypted Network Tunnels\n\nVirtual Private Network creates secure encrypted tunnel over untrusted networks (like the internet).\n\n### VPN Types\n\n**Site-to-Site VPN**:\n- Connects entire networks together\n- Branch office to headquarters\n- Always-on connection\n- Transparent to users\n- Example: AWS VPN connecting on-prem datacenter to AWS VPC\n\n**Remote Access VPN**:\n- Individual users connecting to corporate network\n- On-demand connection\n- Requires VPN client software\n- Example: Employee working from home, connecting to office network\n\n### VPN Protocols\n\n**IPsec (Internet Protocol Security)**:\n- Industry standard for site-to-site VPNs\n- Operates at network layer (Layer 3)\n- Two modes: Transport (encrypts payload) and Tunnel (encrypts entire packet)\n- Very secure but complex to configure\n- Built into most routers and firewalls\n\n**SSL/TLS VPN**:\n- Uses SSL/TLS (same as HTTPS)\n- Works through web browser or client app\n- Easier to deploy through firewalls (uses port 443)\n- More user-friendly\n- Example: Cisco AnyConnect, OpenVPN\n\n**WireGuard**:\n- Modern, lightweight VPN protocol\n- Extremely fast and simple\n- Built into Linux kernel\n- Gaining popularity rapidly\n\n### VPN Security Considerations\n\n**Split Tunneling vs Full Tunneling**:\n```\nSplit Tunneling:\n- Corporate traffic → VPN tunnel → Corporate network\n- Internet traffic → Direct connection → Internet\n- Faster but less secure (can bypass corporate security controls)\n\nFull Tunneling:\n- ALL traffic → VPN tunnel → Corporate network → Internet\n- Slower but more secure (all traffic monitored)\n```\n\n**VPN Authentication**:\n- Username/password (weak)\n- Multi-factor authentication (better)\n- Certificate-based (best)\n- Combination recommended\n\n**VPN Vulnerabilities**:\n- Unpatched VPN appliances (major attack vector)\n- Weak authentication\n- No MFA\n- Split tunnel allowing lateral movement\n- VPN as single point of failure\n\n## SSL/TLS: Securing Web Traffic\n\nSSL/TLS encrypts traffic between clients and servers, primarily for HTTPS.\n\n### How HTTPS Works\n\n**TLS Handshake**:\n```\n1. Client: \"Hello, I support TLS 1.3, here are my cipher suites\"\n2. Server: \"Hello, let's use TLS 1.3 with AES-256-GCM, here's my certificate\"\n3. Client: Verifies certificate (is this really google.com?)\n   - Checks certificate authority signature\n   - Checks certificate hasn't expired\n   - Checks domain name matches\n4. Client: Generates session key, encrypts with server's public key\n5. Server: Decrypts session key with private key\n6. Both: Now have shared session key, use symmetric encryption (AES)\n7. Encrypted communication begins\n```\n\n**Certificate Verification**:\n- Certificate Authority (CA) signs certificates\n- Browser trusts CAs (root certificates pre-installed)\n- Certificate chain: Server cert → Intermediate CA → Root CA\n- If any link broken → Browser shows warning\n\n**Common TLS Issues**:\n- Self-signed certificates (no CA signature → browser warning)\n- Expired certificates\n- Wrong domain name (certificate for wrong site)\n- Weak cipher suites (TLS 1.0, DES, RC4 - all deprecated)\n- Missing certificates (HTTP instead of HTTPS)\n\n**Best Practices**:\n- Use TLS 1.2 minimum (1.3 preferred)\n- Strong cipher suites only\n- Perfect forward secrecy (PFS)\n- HTTP Strict Transport Security (HSTS) header\n- Certificate pinning for critical applications\n\n## Network Segmentation\n\nDividing network into smaller, isolated segments to limit attack blast radius.\n\n### Why Segment?\n\n**Flat Network Problem**:\n```\nAll systems on same network (192.168.1.0/24):\n- Workstations: 192.168.1.10-100\n- Servers: 192.168.1.101-150\n- Database: 192.168.1.200\n- IoT devices: 192.168.1.201-250\n\nProblem: Compromise any device → Access entire network\nCompromise IoT camera → Can access database\n```\n\n**Segmented Network**:\n```\nUser VLAN: 10.0.1.0/24 (workstations)\nServer VLAN: 10.0.2.0/24 (application servers)\nDatabase VLAN: 10.0.3.0/24 (databases)\nIoT VLAN: 10.0.4.0/24 (cameras, printers)\nManagement VLAN: 10.0.5.0/24 (admin access)\n\nFirewall rules:\n- Users can access Servers (port 443)\n- Servers can access Database (port 3306)\n- Users CANNOT access Database directly\n- IoT devices CANNOT access anything except internet\n- Management VLAN is most restricted\n```\n\n### Segmentation Technologies\n\n**VLANs (Virtual LANs)**:\n- Logical network separation on same physical switches\n- Layer 2 segmentation\n- Requires VLAN-aware switches\n- Traffic between VLANs must go through router/firewall\n\n**Physical Segmentation**:\n- Completely separate network hardware\n- Air gap between networks\n- Most secure but expensive\n- Used for classified/critical systems\n\n**Software-Defined Networking (SDN)**:\n- Programmable network segmentation\n- Dynamic policy enforcement\n- Micro-segmentation capability\n- Examples: VMware NSX, Cisco ACI\n\n**Micro-Segmentation**:\n- Segment down to individual workload level\n- Every application in its own segment\n- Requires automation (too complex manually)\n- Zero-trust network architecture\n\n### DMZ (Demilitarized Zone)\n\nA network segment that sits between internet and internal network, hosting public-facing services.\n\n**DMZ Architecture**:\n```\n[INTERNET]\n    |\n[Firewall 1 - External]\n    |\n[DMZ - Web servers, Mail servers, DNS]\n    |\n[Firewall 2 - Internal]\n    |\n[INTERNAL NETWORK - Databases, File servers, Workstations]\n```\n\n**DMZ Purpose**:\n- Public services accessible from internet\n- If DMZ server compromised, internal network still protected\n- Two firewalls provide defense in depth\n- External firewall blocks attacks from internet\n- Internal firewall blocks attacks from compromised DMZ\n\n**What Goes in DMZ**:\n- Web servers\n- Email servers (SMTP gateway)\n- DNS servers (external)\n- FTP servers\n- VPN gateways\n- Anything accessible from internet\n\n**What Stays Internal**:\n- Databases\n- File servers\n- Active Directory domain controllers\n- Internal applications\n- Workstations\n\n**DMZ Rules**:\n```\nInternet → DMZ: Allow 80, 443 to web servers\nDMZ → Internet: Allow outbound (for updates, etc.)\nDMZ → Internal: Very restricted (only specific ports to specific servers)\nInternal → DMZ: Allowed (internal users can access DMZ services)\n```\n\n## Network Security Monitoring\n\n**IDS (Intrusion Detection System)**:\n- Monitors network traffic for suspicious activity\n- Alerts on potential attacks\n- Passive (doesn't block, only detects)\n- Example: Snort, Suricata, Zeek\n\n**IPS (Intrusion Prevention System)**:\n- IDS that can also BLOCK attacks\n- Inline device (traffic flows through it)\n- Can stop attacks in real-time\n- Risk: False positives can block legitimate traffic\n\n**Network Tap vs SPAN Port**:\n- **TAP**: Hardware device that copies all traffic (no packet loss)\n- **SPAN**: Switch port mirroring (can drop packets under load)\n- TAP is better but more expensive\n\n**Traffic Analysis**:\n- Baseline normal traffic patterns\n- Detect anomalies (unusual protocols, ports, volumes)\n- Identify C2 communications\n- Spot data exfiltration\n\n## Zero Trust Network Architecture\n\nModern approach: \"Never trust, always verify\"\n\n**Traditional Model**:\n- Trust everything inside network\n- Distrust everything outside\n- Problem: Assumes breach never happens\n\n**Zero Trust Model**:\n- Trust nothing, verify everything\n- Authenticate and authorize every connection\n- Micro-segmentation\n- Least privilege access\n- Continuous monitoring\n\n**Zero Trust Principles**:\n1. Verify explicitly (authenticate/authorize every access)\n2. Use least privilege access\n3. Assume breach (design for containment)\n4. Inspect and log all traffic\n5. Micro-segmentation\n6. Use encryption everywhere"
      },
      "ascii_art": "NETWORK SEGMENTATION\n\n[INTERNET]\n     |\n[FIREWALL]\n     |\n  [DMZ]\n   |\n [FIREWALL]\n   |\n[INTERNAL]\n   |\n   +--[User VLAN]\n   +--[Server VLAN]\n   +--[Database VLAN]\n   +--[Management VLAN]",
      "examples": [
        {
          "scenario": "Preventing Lateral Movement with Segmentation",
          "explanation": "Attacker compromises workstation via phishing. Workstation is in User VLAN (10.0.1.0/24). Attacker tries to access database server in Database VLAN (10.0.3.0/24). Firewall between VLANs blocks connection (users can't directly access database). Attack contained to single workstation instead of spreading to critical systems."
        },
        {
          "scenario": "DMZ Protecting Internal Network",
          "explanation": "Web server in DMZ is compromised via SQL injection. Attacker has control of web server. Tries to access internal file server. Internal firewall blocks connection (DMZ → Internal traffic restricted). Even with compromised web server, internal network remains protected. Incident contained to DMZ."
        }
      ]
    },
    {
      "block_id": "7a49dcee-476c-45ae-aade-6e0f265b9bf8",
      "type": "real_world",
      "content": {
        "text": "**Real-World Case: Target Breach (2013)**\n\nWhat happened:\n- HVAC vendor had VPN access to Target network\n- HVAC vendor was compromised\n- Attackers used VPN credentials to access Target network\n- Target had FLAT NETWORK (no segmentation)\n- From HVAC access → moved to POS systems → stole 40 million credit cards\n\nWhat failed:\n- No network segmentation (HVAC vendor could reach POS systems)\n- No separation of vendor access\n- Weak VPN authentication (no MFA)\n- No monitoring of lateral movement\n\nHow segmentation would have prevented:\n- Vendor VLAN isolated from corporate network\n- POS network completely separate\n- Even with VPN access, couldn't reach payment systems\n- Firewall rules blocking lateral movement\n\nCost: $18.5 million settlement, reputation damage, CIO and CEO resigned\n\n**Real-World Case: Proper DMZ Saves the Day**\n\nCompany: Financial services firm\nIncident: Web application SQL injection attack\n\nArchitecture:\n- Web server in DMZ\n- Database in internal network\n- Firewall between DMZ and internal\n- Web server connects to database via application-specific port only\n\nAttack:\n- SQL injection on web app\n- Attacker gains shell on web server\n- Attempts to access internal file servers\n- Firewall blocks connection (DMZ can only talk to database, not file servers)\n- Attempts to pivot to other systems\n- All blocked by firewall rules\n\nOutcome:\n- Attack contained to single compromised web server in DMZ\n- No access to internal network\n- No data exfiltration\n- Quick remediation: rebuild web server, patch vulnerability\n- Total damage: $10,000 (incident response time)\n- Without DMZ: Could have been millions\n\n**Real-World Case: VPN Vulnerability**\n\nCompany: Citrix, Pulse Secure, Fortinet VPNs\nVulnerability: Multiple critical VPN vulnerabilities (2019-2020)\n\nWhat happened:\n- Critical vulnerabilities in enterprise VPN products\n- Allowed unauthenticated remote code execution\n- Many companies didn't patch quickly\n- Attackers exploited to gain network access\n- No MFA on VPNs = full network access\n\nLesson: VPN is single point of failure, must be:\n- Patched immediately\n- Protected with MFA\n- Monitored for suspicious access\n- Not trusted implicitly (zero trust approach)"
      },
      "industry_examples": [
        "Google BeyondCorp: Pioneered zero-trust architecture, eliminated VPN, every request authenticated/authorized regardless of source network",
        "PCI-DSS Requirement 1: Firewall must protect cardholder data environment, payment systems must be segmented from other networks",
        "Healthcare: HIPAA requires network segmentation to protect patient data, separate guest WiFi from medical device networks"
      ]
    },
    {
      "block_id": "f9c3f3e9-4614-458b-9499-0c6e5f6af1a5",
      "type": "explanation",
      "content": {
        "text": "**Pitfall 1: Trusting the Internal Network**\nAssuming internal network is safe. No segmentation, flat network. When one system compromised, entire network is compromised. Solution: Segment network, implement zero trust.\n\n**Pitfall 2: Overly Permissive Firewall Rules**\nRules like 'Allow ANY to ANY' or 'Allow 0.0.0.0/0 to server on all ports'. Firewall becomes useless. Solution: Least privilege, specific rules only.\n\n**Pitfall 3: No VPN MFA**\nVPN with only username/password. Stolen credentials = full network access. Solution: Mandatory MFA on all VPN access.\n\n**Pitfall 4: Firewall Rule Sprawl**\nHundreds of rules, nobody knows what they do, afraid to remove any. Solution: Regular firewall rule audits, remove unused rules, document everything.\n\n**Pitfall 5: DMZ Misconfiguration**\nDMZ servers able to initiate connections to internal network freely. DMZ compromise = internal network compromise. Solution: Strict firewall rules, DMZ can only connect to specific internal services on specific ports.\n\n**Pitfall 6: Not Monitoring Firewall Logs**\nFirewall configured but logs never reviewed. Attacks going unnoticed. Solution: Send logs to SIEM, alert on suspicious patterns.\n\n**Pitfall 7: Split Tunnel VPN Without Controls**\nUsers on VPN with split tunnel, browsing malicious sites, malware infection while connected to corporate network. Solution: Full tunnel or strong endpoint security for split tunnel.\n\n**Pitfall 8: Unpatched Network Devices**\nFirewalls and VPNs running old software with known vulnerabilities. Attackers exploit to bypass security. Solution: Regular patching, vulnerability scanning of network infrastructure."
      }
    },
    {
      "block_id": "216d0e36-b174-4662-8144-4cded4e1f2d9",
      "type": "explanation",
      "content": {
        "text": "**Immediate Actions**:\n1. Check if your computer's firewall is enabled (Windows Firewall / macOS Firewall)\n2. Verify VPN uses MFA if you use one for work\n3. Check website certificates in browser (click lock icon on HTTPS sites)\n4. Review your home router firewall settings\n5. Enable firewall on all devices (computers, smartphones)\n\n**This Week - Network Security Skills**:\n1. Practice with iptables (Linux) or pfSense (open source firewall)\n2. Set up VPN using WireGuard or OpenVPN\n3. Understand how to read firewall logs\n4. Map your home network, identify segmentation opportunities\n5. Practice with Wireshark to see network traffic\n\n**This Month - Advanced Skills**:\n1. Set up pfSense firewall in home lab\n2. Create DMZ for home lab web server\n3. Configure VLANs on managed switch\n4. Practice firewall rule creation and testing\n5. Deploy IDS (Suricata or Snort) to monitor traffic\n6. Complete TryHackMe Network Security room\n\n**Essential Network Security Tools**:\n- pfSense / OPNsense (open source firewalls)\n- WireGuard / OpenVPN (VPN)\n- Wireshark (packet analysis)\n- Nmap (network scanning to test firewall rules)\n- Suricata / Snort (IDS/IPS)\n- Zeek (network security monitoring)\n\n**Network Security Architecture Checklist**:\n- ✅ Perimeter firewall deployed and configured\n- ✅ Default deny firewall policy\n- ✅ Network segmentation implemented (VLANs minimum)\n- ✅ DMZ for public-facing services\n- ✅ Internal firewalls between segments\n- ✅ VPN with MFA for remote access\n- ✅ IDS/IPS monitoring network traffic\n- ✅ All traffic logged and monitored\n- ✅ TLS 1.2+ for all web traffic\n- ✅ Regular firewall rule audits\n- ✅ Network device patching program\n- ✅ Principle of least privilege for all network access\n\n**Design a Secure Network**:\n```\nInternet\n  |\n[External Firewall + IPS]\n  |\nDMZ (Web servers, Email gateway)\n  |\n[Internal Firewall]\n  |\nCore Network\n  |\n  +-- User VLAN (workstations)\n  +-- Server VLAN (application servers)\n  +-- Database VLAN (databases)\n  +-- Management VLAN (admin access)\n  +-- Guest VLAN (guest WiFi - isolated)\n  +-- IoT VLAN (printers, cameras - isolated)\n```\n\n**Career Applications**:\n- Network Security Engineer: Design and implement network security architecture\n- Firewall Administrator: Manage firewall rules and policies\n- Network Architect: Design segmented, secure networks\n- Security Engineer: Implement zero trust network architecture\n\n**Learning Resources**:\n- TryHackMe Network Security path\n- pfSense documentation and tutorials\n- Cisco CCNA Security\n- \"Network Security Essentials\" by William Stallings\n- YouTube: NetworkChuck (network security tutorials)\n\n**Quick Reference - Common Ports**:\n```\nPort 22: SSH\nPort 25: SMTP (email)\nPort 53: DNS\nPort 80: HTTP\nPort 443: HTTPS\nPort 3389: RDP (Windows Remote Desktop)\nPort 445: SMB (Windows file sharing)\nPort 1194: OpenVPN\nPort 3306: MySQL\nPort 5432: PostgreSQL\n```\n\n**Zero Trust Implementation Steps**:\n1. Identify sensitive assets and data\n2. Map all traffic flows\n3. Implement micro-segmentation\n4. Deploy MFA everywhere\n5. Implement least privilege access\n6. Monitor and log everything\n7. Verify explicitly for every connection\n\n**Remember**:\n- Firewalls are only effective with proper rules (default deny!)\n- VPN is not a security panacea - still need MFA and monitoring\n- Network segmentation limits blast radius of breaches\n- DMZ protects internal network from internet-facing compromises\n- Zero trust is the future - trust nothing, verify everything\n- Encryption protects data in transit (TLS everywhere)\n- Defense in depth: Multiple layers working together\n\nMaster network security fundamentals and you'll understand the foundation of perimeter and internal security. Build secure networks, not trusting networks."
      }
    },
    {
      "type": "video",
      "title": "Video Tutorial: Network Security Fundamentals",
      "content": {
        "resources": "Watch this comprehensive video tutorial to reinforce your learning with visual demonstrations and practical examples.\n\n**Video**: [Network Security Basics by Professor Messer](https://www.youtube.com/watch?v=5vScHV18oNw)\n\n**What you'll see:**\nNetwork security concepts, firewalls, IDS/IPS, VPNs, network segmentation, and defense in depth.\n\n**Duration**: ~20 minutes\n\n**Recommended viewing**: After completing the lesson to solidify understanding.\n\n**Additional Resources:**\n- [SANS Network Security Resources](https://www.sans.org/network-security/)\n- [NIST Network Security Guide](https://csrc.nist.gov/publications/detail/sp/800-41/rev-1/final)\n- [Network+ Study Guide](https://www.comptia.org/certifications/network)"
      }
    }
  ],
  "estimated_time": 30,
  "learning_objectives": [
    "Understand core concepts",
    "Apply knowledge in real-world scenarios",
    "Identify common security issues",
    "Implement best practices"
  ],
  "post_assessment": [
    {
      "question_id": "q1",
      "type": "multiple_choice",
      "question": "What is the main concept covered in this lesson?",
      "options": [
        "Option A",
        "Option B",
        "Option C",
        "Option D"
      ],
      "correct_answer": 0,
      "explanation": "Review the lesson content for details.",
      "difficulty": 2,
      "points": 10
    },
    {
      "question_id": "q2",
      "type": "multiple_choice",
      "question": "Which best practice should you implement?",
      "options": [
        "Best Practice A",
        "Best Practice B",
        "Best Practice C",
        "Best Practice D"
      ],
      "correct_answer": 0,
      "explanation": "Review the lesson content for details.",
      "difficulty": 2,
      "points": 10
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "connect_to_what_i_know",
    "minimum_effective_dose",
    "meta_learning",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ]
}