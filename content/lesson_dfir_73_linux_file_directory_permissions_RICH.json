{
  "lesson_id": "c3d4e5f6-a7b8-4c9d-0e1f-2a3b4c5d6e7f",
  "domain": "dfir",
  "title": "Linux File and Directory Permissions",
  "difficulty": 2,
  "order_index": 73,
  "prerequisites": ["b2c3d4e5-f6a7-4b8c-9d0e-1f2a3b4c5d6e"],
  "concepts": [
    "Linux permission model (rwx)",
    "User, group, and other permissions",
    "Numeric permission notation (755, 644)",
    "Special permissions (SUID, SGID, sticky bit)",
    "Permission forensics and security implications",
    "ACLs (Access Control Lists)",
    "Finding dangerous permissions",
    "Privilege escalation via permissions"
  ],
  "estimated_time": 50,
  "learning_objectives": [
    "Master the Linux permission model and rwx notation",
    "Convert between symbolic and numeric permission formats",
    "Understand special permissions and their security implications",
    "Detect dangerous permissions that enable privilege escalation",
    "Analyze file permissions forensically during investigations",
    "Use ACLs for fine-grained access control"
  ],
  "post_assessment": [
    {
      "question_id": "perm-001",
      "question": "What does the permission string 'rwxr-xr--' translate to in numeric notation?",
      "options": ["755", "754", "644", "744"],
      "correct_answer": 1,
      "explanation": "rwx (4+2+1=7) r-x (4+0+1=5) r-- (4+0+0=4) = 754",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question_id": "perm-002",
      "question": "What does the SUID bit do when set on an executable file?",
      "options": [
        "Makes the file immutable",
        "Allows the file to run with the permissions of its owner",
        "Prevents the file from being deleted",
        "Encrypts the file contents"
      ],
      "correct_answer": 1,
      "explanation": "SUID (Set User ID) causes the executable to run with the permissions of the file owner, not the user executing it. This is used by programs like /usr/bin/passwd which need root privileges.",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question_id": "perm-003",
      "question": "Which command finds all files with SUID bit set?",
      "options": [
        "find / -perm -4000",
        "find / -perm 4755",
        "ls -l | grep s",
        "chmod -R +s /"
      ],
      "correct_answer": 0,
      "explanation": "find / -perm -4000 searches for all files where the SUID bit (4) is set. The minus sign means 'at least these permissions'. This is critical for finding potential privilege escalation vectors.",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question_id": "perm-004",
      "question": "What is the security risk of a file with permissions 777?",
      "options": [
        "No risk, it's the most secure",
        "Anyone can read, write, and execute it",
        "Only root can access it",
        "The file will be automatically deleted"
      ],
      "correct_answer": 1,
      "explanation": "777 (rwxrwxrwx) means everyone (user, group, others) has full permissions. This is extremely dangerous as any user can read, modify, or execute the file. It's almost never the correct permission setting.",
      "type": "multiple_choice",
      "difficulty": 1
    },
    {
      "question_id": "perm-005",
      "question": "What does the sticky bit do on a directory like /tmp?",
      "options": [
        "Makes files stick to the directory",
        "Only the file owner can delete their own files in that directory",
        "Prevents new files from being created",
        "Automatically backs up all files"
      ],
      "correct_answer": 1,
      "explanation": "The sticky bit (permission 1000 or +t) on a directory means only the file owner (or root) can delete or rename files in that directory, even if the directory is world-writable. This prevents users from deleting each other's files in shared directories like /tmp.",
      "type": "multiple_choice",
      "difficulty": 2
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "minimum_effective_dose",
    "teach_like_im_10",
    "memory_hooks",
    "meta_learning"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "content": {
        "text": "Welcome to Linux File and Directory Permissions! This is one of the most critical topics in Linux security and forensics. Master this, and you'll understand how attackers escalate privileges and how to detect their tracks. Permissions are the gatekeepers of Linux security - learn to read them like a native speaker!"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "# Linux Permission Model\n\n## Basic Permission Structure\n\nEvery file and directory has three permission sets:\n- **User (u)**: The file owner\n- **Group (g)**: Users in the file's group  \n- **Others (o)**: Everyone else\n\nEach set has three permission types:\n- **Read (r)**: View file contents or list directory\n- **Write (w)**: Modify file or create/delete files in directory\n- **Execute (x)**: Run file or enter directory\n\n## Permission String Format\n\n```\n-rwxr-xr--\n│││││││││\n│└────────── User permissions (rwx)\n│ └──────── Group permissions (r-x)\n│  └────── Other permissions (r--)\n└────────── File type (- = file, d = directory, l = link)\n```\n\n## Numeric Notation\n\nPermissions can be expressed as numbers:\n- Read = 4\n- Write = 2  \n- Execute = 1\n\nAdd them up:\n- rwx = 4+2+1 = 7\n- rw- = 4+2+0 = 6\n- r-x = 4+0+1 = 5\n- r-- = 4+0+0 = 4\n\nExample: **755** = rwxr-xr-x (owner: all, group: read+execute, others: read+execute)\n\n## Special Permissions\n\n### SUID (Set User ID) - 4000\nFile executes with owner's permissions, not executor's.\n```bash\n-rwsr-xr-x  /usr/bin/passwd  # Runs as root\n```\nForensic importance: SUID binaries owned by root can be exploited for privilege escalation.\n\n### SGID (Set Group ID) - 2000  \nFiles inherit directory's group.\n```bash\ndrwxrwsr-x  /shared/project  # New files inherit project group\n```\n\n### Sticky Bit - 1000\nOnly owner can delete files in directory.\n```bash\ndrwxrwxrwt  /tmp  # Users can't delete each other's files\n```\n\n## Forensic Analysis\n\nFind dangerous permissions:\n```bash\n# World-writable files\nfind / -perm -002 -type f\n\n# SUID binaries  \nfind / -perm -4000 -type f\n\n# Files with no owner\nfind / -nouser -o -nogroup\n```"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "# Hands-On Permission Exercises\n\n## Exercise 1: Read Permissions\n```bash\n# View permissions\nls -l /etc/passwd\n# Output: -rw-r--r-- 1 root root 2847 Oct 15 10:23 /etc/passwd\n\n# Break it down:\n# - = regular file\n# rw- = owner (root) can read and write\n# r-- = group (root) can only read  \n# r-- = others can only read\n# Numeric: 644\n```\n\n## Exercise 2: Set Permissions\n```bash\n# Create test file\ntouch testfile\n\n# Set permissions numerically\nchmod 755 testfile\nls -l testfile  # -rwxr-xr-x\n\n# Set permissions symbolically\nchmod u+x,g-w,o-r testfile\n```\n\n## Exercise 3: Find SUID Files\n```bash\n# Find all SUID binaries (potential privilege escalation)\nfind /usr/bin -perm -4000 -ls\n\n# Common legitimate SUID files:\n# /usr/bin/passwd - changes passwords (needs root)\n# /usr/bin/sudo - executes as other user\n# /usr/bin/su - switches user\n```\n\n## Exercise 4: Detect Dangerous Permissions  \n```bash\n# World-writable files (anyone can modify)\nfind /etc -perm -002 -type f 2>/dev/null\n\n# World-writable directories without sticky bit\nfind / -type d -perm -002 ! -perm -1000 2>/dev/null\n\n# Files owned by users that don't exist\nfind / -nouser 2>/dev/null\n```"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "# Real-World Case: SUID Privilege Escalation\n\n## Scenario\nDuring a breach investigation, we found an attacker gained root access on a web server. Initial access was through a vulnerable web application running as www-data user.\n\n## Investigation\n\nChecking for suspicious SUID binaries:\n```bash\nfind / -perm -4000 -type f -ls 2>/dev/null\n```\n\nDiscovered:\n```\n-rwsr-xr-x 1 root root 16384 Oct 14 03:47 /usr/local/bin/backup\n```\n\nThis SUID binary was created by the attacker! When executed, it runs as root (due to SUID) but can be called by any user.\n\n## Attack Timeline\n\n1. Attacker exploited web app vulnerability → gained www-data shell\n2. Found world-writable directory: /usr/local/bin (misconfigured!)\n3. Compiled malicious binary with SUID bit\n4. Set as owner: root, permissions: 4755\n5. Executed binary → instant root shell\n\n## Prevention\n\nRegular permission audits:\n```bash\n# Baseline all SUID files  \nfind / -perm -4000 > suid_baseline.txt\n\n# Compare later\nfind / -perm -4000 > suid_current.txt\ndiff suid_baseline.txt suid_current.txt\n```\n\nThis breach could have been prevented by:\n- Proper directory permissions (/usr/local/bin should not be world-writable)\n- Regular SUID file auditing\n- Restricting www-data user permissions"
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "# Permission Memory Aids\n\n## Mnemonic: RWX UGO\n- **R**ead **W**rite e**X**ecute\n- **U**ser **G**roup **O**thers\n\n## Common Patterns\n- **644** = rw-r--r-- (documents)\n- **755** = rwxr-xr-x (scripts/executables)\n- **700** = rwx------ (private files)\n- **777** = rwxrwxrwx (DANGER - never use!)\n\n## Special Permissions: FUDGE\n- **F**ind SUID: find / -perm -4000\n- **U**nusual ownership: find / -nouser\n- **D**angerous 777: find / -perm -777\n- **G**roup writable: find / -perm -020\n- **E**verybody writable: find / -perm -002"
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "# Reflection Questions\n\n1. Why is 777 (rwxrwxrwx) almost always wrong?\n\n2. How can an attacker use a misconfigured SUID binary to gain root?\n\n3. What's the difference between SUID and sudo?\n\n4. Why does /tmp have the sticky bit set?\n\n5. How would you audit a system for permission vulnerabilities?"
      }
    },
    {
      "type": "mindset_coach",
      "content": {
        "text": "Congratulations! You now understand Linux permissions - a fundamental security control. You can read permission strings instantly, identify dangerous configurations, and understand how attackers escalate privileges. This knowledge applies to every Linux investigation you'll ever conduct. Next lesson: Users, Groups, and Authentication!"
      }
    }
  ],
  "tags": ["Course: 13Cubed-Investigating Linux Devices"]
}