{
  "lesson_id": "7f8a9c2d-4b3e-4f1a-9d6c-8e5a7f9b2c4d",
  "domain": "system",
  "title": "Windows Registry Deep Dive",
  "difficulty": 2,
  "order_index": 2,
  "prerequisites": [
    "3ad9d1e7-f1b9-49fc-b0e6-2df0d8614aff"
  ],
  "concepts": [
    "Registry Hives",
    "Registry Keys and Values",
    "Registry Permissions",
    "Registry Forensics",
    "Registry Persistence",
    "Registry Hardening",
    "RegRipper",
    "Transaction Logs"
  ],
  "content_blocks": [
    {
      "block_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d",
      "type": "mindset_coach",
      "content": {
        "text": "The Windows Registry is one of the most powerful and misunderstood components of Windows. It's simultaneously a goldmine for attackers and defenders. Here's why this matters:\n\nEvery configuration change, every installed program, every user preference, every security setting - they all leave traces in the registry. Master the registry and you can:\n- **As an attacker**: Establish persistent backdoors, disable security tools, hide malware, escalate privileges\n- **As a defender**: Harden systems, detect intrusions, perform forensics, track malware activity\n- **As an incident responder**: Build timelines, identify compromised systems, extract evidence\n\nMany people fear the registry because Microsoft made it seem fragile ('Don't edit the registry or you'll break Windows!'). Here's the truth: The registry is just a database. It has structure, logic, and patterns. Once you understand these patterns, the registry becomes readable and predictable.\n\nThink of the registry like a massive library:\n- **Hives** are different sections (Fiction, Non-Fiction, Reference)\n- **Keys** are shelves organizing related items\n- **Values** are individual books with specific information\n- **Permissions** control who can read or change books\n\nThe beautiful part: Registry knowledge compounds. Every hour you spend learning registry internals pays dividends across red teaming, blue teaming, forensics, and system administration. One of the highest ROI investments in cybersecurity.\n\nLet's unlock the registry's secrets together."
      },
      "simplified_explanation": "Registry = Windows' central database for all settings and configurations. Hives are major sections. Keys are folders. Values store actual data. Understanding registry structure lets you configure, attack, defend, and investigate Windows systems.",
      "memory_aids": [
        "HKLM = Machine-wide settings (all users), HKCU = Current User settings (one user)",
        "Registry hives are actual files on disk (not just abstract database)",
        "5 main root keys: HKLM, HKCU, HKCR, HKU, HKCC (memorize these!)",
        "Run keys = auto-start programs (attackers love these for persistence)"
      ],
      "teach_like_im_10": "The registry is like Windows' brain - it remembers every setting and preference. Hives are like different parts of the brain (memory, emotions, coordination). Keys are like folders organizing thoughts. Values are actual memories and settings. You can read the brain to understand what Windows knows, and change it to modify Windows' behavior."
    },
    {
      "block_id": "b2c3d4e5-f6a7-4b8c-9d0e-1f2a3b4c5d6e",
      "type": "explanation",
      "content": {
        "text": "## Registry Architecture\n\n### The Five Root Keys (Hives)\n\nThe Windows Registry organizes data into five top-level hierarchies called root keys or hives:\n\n**1. HKEY_LOCAL_MACHINE (HKLM)**\n- **Purpose**: System-wide settings affecting all users\n- **Scope**: Hardware configuration, system drivers, services, software installed for all users\n- **Permissions**: Typically requires administrator rights to modify\n- **Physical Location**: Multiple files in C:\\Windows\\System32\\config\n\n**2. HKEY_CURRENT_USER (HKCU)**\n- **Purpose**: Settings for currently logged-in user\n- **Scope**: User preferences, desktop configuration, application settings\n- **Permissions**: Users can modify their own HKCU\n- **Physical Location**: C:\\Users\\[Username]\\NTUSER.DAT\n- **Note**: HKCU is actually a pointer to HKU\\[User SID]\n\n**3. HKEY_CLASSES_ROOT (HKCR)**\n- **Purpose**: File associations and COM object registrations\n- **Scope**: What program opens .pdf files? Defined here\n- **Note**: HKCR merges data from HKLM\\SOFTWARE\\Classes and HKCU\\SOFTWARE\\Classes\n- **Security Implication**: Attackers modify file associations to launch malware when users open legitimate files\n\n**4. HKEY_USERS (HKU)**\n- **Purpose**: Contains HKCU for all loaded user profiles\n- **Scope**: Every user's settings stored as HKU\\[SID]\n\n**5. HKEY_CURRENT_CONFIG (HKCC)**\n- **Purpose**: Current hardware profile\n- **Scope**: Hardware configuration for current session\n- **Note**: Rarely used in modern Windows (legacy from multi-hardware-profile days)\n\n### Registry Data Structure\n\n```\nRoot Key (Hive)\n└── Key (like a folder)\n    └── Subkey (nested folder)\n        ├── Value Entry #1 (name: data)\n        ├── Value Entry #2 (name: data)\n        └── Value Entry #3 (name: data)\n```\n\n**Example**:\n```\nHKEY_LOCAL_MACHINE\n└── SOFTWARE\n    └── Microsoft\n        └── Windows\n            └── CurrentVersion\n                └── Run\n                    ├── SecurityHealth (Value) = \"C:\\Windows\\system32\\SecurityHealthSystray.exe\"\n                    ├── VMware User Process (Value) = \"C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe -n vmusr\"\n                    └── [Your Program] (Value) = \"C:\\Path\\to\\program.exe\"\n```\n\n### Registry Value Types\n\nRegistry values store data in different formats:\n\n**REG_SZ** (String)\n- Simple text string\n- Example: ProgramPath = \"C:\\Program Files\\App\\app.exe\"\n- Most common value type\n\n**REG_EXPAND_SZ** (Expandable String)\n- String with environment variables\n- Example: UserPath = \"%USERPROFILE%\\Documents\"\n- Windows expands %USERPROFILE% when reading\n\n**REG_MULTI_SZ** (Multi-String)\n- Multiple strings separated by null characters\n- Example: DependOnService = [\"RpcSs\", \"LanmanWorkstation\"]\n- Used for lists (service dependencies, search paths)\n\n**REG_DWORD** (32-bit number)\n- Integer value (0 to 4,294,967,295)\n- Example: Enabled = 1 (or 0 for disabled)\n- Boolean values typically use 0/1\n\n**REG_QWORD** (64-bit number)\n- Larger integer value\n- Example: InstallDate = 132847392000000000\n\n**REG_BINARY**\n- Raw binary data\n- Example: Security descriptors, hardware configurations\n- Displayed as hex: 01 00 04 80 14 00 00 00\n\n**REG_NONE**\n- No defined type\n\n## Physical Registry Files (Hives on Disk)\n\nThe registry isn't just a virtual database - it's stored in physical files:\n\n**System Hives** (C:\\Windows\\System32\\config):\n```\nSAM         → HKLM\\SAM (user accounts, password hashes)\nSECURITY    → HKLM\\SECURITY (security policies, LSA secrets)\nSOFTWARE    → HKLM\\SOFTWARE (installed software)\nSYSTEM      → HKLM\\SYSTEM (services, drivers, boot config)\nDEFAULT     → HKU\\.DEFAULT (default user profile)\n```\n\n**User Hives** (C:\\Users\\[Username]):\n```\nNTUSER.DAT           → HKCU (user preferences and settings)\nNTUSER.DAT.LOG1/2    → Transaction logs (backup for corruption recovery)\nUsrClass.dat         → HKCU\\SOFTWARE\\Classes (user file associations)\n```\n\n**Application Hives**:\nApplications can create custom hive files:\n```\nC:\\Users\\[User]\\AppData\\Local\\Microsoft\\Windows\\UsrClass.dat\n```bash\n\n### Transaction Logs\n\nWindows uses transaction logs to protect registry integrity:\n\n```\nSYSTEM (main hive file)\nSYSTEM.LOG1 (transaction log)\nSYSTEM.LOG2 (backup transaction log)\n```\n\n**How Transaction Logs Work**:\n1. User/program requests registry change\n2. Windows writes change to .LOG1 first\n3. After successful write to log, changes applied to main hive\n4. If crash occurs mid-write, Windows replays .LOG1 on next boot\n\n**Forensic Value**: Transaction logs may contain recently deleted data not yet overwritten in main hive!\n\n## Critical Registry Locations\n\n### Persistence Locations (Auto-Start Programs)\n\n**Run Keys** (Most Common):\n```\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nHKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n```\n- Programs listed here execute at user login\n- RunOnce = execute once then delete value\n- **Attacker tactic**: Add malware path to Run key for persistence\n\n**Example**:\n```\nHKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nMalwareBackdoor (REG_SZ) = \"C:\\Users\\Public\\update.exe\"\n```\nEvery time user logs in, update.exe executes.\n\n**Startup Folders** (Also Registry-Linked):\n```\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n```\nDefines locations like:\n- Common Startup: C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\n- User Startup: C:\\Users\\[User]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\n\n**Winlogon Keys**:\n```\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\nUserinit = \"C:\\Windows\\system32\\userinit.exe,C:\\malware.exe\"\nShell = \"explorer.exe, C:\\backdoor.exe\"\n```\n- Userinit runs at logon (before desktop appears)\n- Shell defines desktop program (normally explorer.exe)\n- Attackers append malware to these comma-separated lists\n\n**Services**:\n```\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\[ServiceName]\nImagePath = \"C:\\Path\\to\\service.exe\"\nStart = 2 (0=Boot, 1=System, 2=Automatic, 3=Manual, 4=Disabled)\nType = 16 (Win32OwnProcess)\n```\nAttackers create malicious services or modify existing ones.\n\n**Scheduled Tasks** (Registry References):\n```\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\n```\nTasks defined in Task Scheduler leave registry traces.\n\n### Security-Critical Locations\n\n**SAM (Security Accounts Manager)**:\n```\nHKLM\\SAM\\SAM\\Domains\\Account\\Users\n```\n- Stores user account information\n- Password hashes (NTLM) stored here (encrypted)\n- Only SYSTEM account can read by default\n- Attackers dump SAM to crack passwords offline\n\n**LSA Secrets**:\n```\nHKLM\\SECURITY\\Policy\\Secrets\n```\n- Local Security Authority stores sensitive data:\n- Service account passwords\n- VPN credentials\n- Auto-logon passwords\n- Domain cached credentials\n- Highly targeted by attackers for credential theft\n\n**Security Policies**:\n```\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\nEnableLUA = 1 (User Account Control enabled)\nConsentPromptBehaviorAdmin = 2 (Prompt for consent)\n```\nAttackers disable UAC by setting EnableLUA = 0.\n\n**Windows Defender**:\n```\nHKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\nDisableAntiSpyware = 1 (Defender disabled)\nDisableRealtimeMonitoring = 1\n```\nMalware tries to disable Defender via registry changes.\n\n**Firewall**:\n```\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\n```\nFirewall rules and configurations stored here.\n\n### Forensically Valuable Locations\n\n**Recently Opened Files**:\n```\nHKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs\nHKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\OpenSavePidlMRU\n```\nTracks recently opened files (helpful for building user activity timeline).\n\n**Typed URLs** (Internet Explorer/Edge):\n```\nHKCU\\SOFTWARE\\Microsoft\\Internet Explorer\\TypedURLs\n```\nWebsites user typed into address bar.\n\n**User Assist**:\n```\nHKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\n```\n- Tracks program execution frequency and last run time\n- Encoded in ROT13 (simple Caesar cipher)\n- Reveals what programs user ran and when\n\n**MUICache**:\n```\nHKCU\\SOFTWARE\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\MuiCache\n```\nCaches application names and paths (tracks executed programs).\n\n**ShimCache (Application Compatibility Cache)**:\n```\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCompatCache\n```\n- Tracks program execution for compatibility purposes\n- Records:\n- Full file path\n- File size\n- Last modified time\n- Execution flag (may indicate program ran)\n- **Critical for forensics**: Persists even after program deletion\n- Can contain evidence of malware execution\n\n**Amcache.hve**:\n```\nC:\\Windows\\AppCompat\\Programs\\Amcache.hve\n```\n- Separate hive file tracking application installations\n- Records:\n- SHA1 hash of executable\n- Full path\n- Install date\n- Publisher information\n- Extremely valuable for identifying installed programs and malware\n\n**BAM/DAM** (Background Activity Moderator/Desktop Activity Moderator):\n```\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\bam\\State\\UserSettings\\[SID]\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\dam\\State\\UserSettings\\[SID]\n```\n- Windows 10+ feature tracking program execution times\n- Shows exact last execution timestamp\n- Excellent for timeline analysis\n\n**Networking Information**:\n```\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Interfaces\n```\nNetwork adapter configurations, IP addresses, DHCP settings.\n\n**USB Device History**:\n```\nHKLM\\SYSTEM\\CurrentControlSet\\Enum\\USBSTOR\nHKLM\\SYSTEM\\CurrentControlSet\\Enum\\USB\n```\nAll USB devices ever connected (vendor ID, product ID, serial number, first/last connection times).\n\n**Mounted Devices**:\n```\nHKLM\\SYSTEM\\MountedDevices\n```\nDrive letters assigned to volumes (helps identify external drives).\n\n## Registry Permissions and Security\n\n### Access Control on Registry Keys\n\nJust like file system permissions (NTFS ACLs), registry keys have permissions controlling who can access them.\n\n**Permission Types**:\n- **Query Value**: Read value data\n- **Set Value**: Modify or create values\n- **Create Subkey**: Create nested keys\n- **Enumerate Subkeys**: List subkeys\n- **Notify**: Receive change notifications\n- **Create Link**: Create symbolic links\n- **Delete**: Delete key\n- **Write DAC**: Modify permissions\n- **Write Owner**: Take ownership\n- **Read Control**: Read security descriptor\n\n**Common Permission Levels**:\n- **Read**: Query Value, Enumerate Subkeys, Notify, Read Control\n- **Full Control**: All permissions\n\n**Viewing Registry Permissions**:\n```powershell\n# PowerShell\nGet-Acl -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" | Format-List\n\n# Result shows:\nPath   : Microsoft.PowerShell.Core\\Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nOwner  : BUILTIN\\Administrators\nAccess : BUILTIN\\Administrators Allow  FullControl\nNT AUTHORITY\\SYSTEM Allow  FullControl\nBUILTIN\\Users Allow  ReadKey\n```\n\n**Security Implications**:\n- If users have Write access to Run keys → persistence attack possible\n- If users can modify service registry keys → privilege escalation possible\n- Overly permissive registry keys = common vulnerability\n\n### Weak Registry Permissions (Attack Vector)\n\n**Scenario**: Service registry key has weak permissions\n\n```powershell\n# Check service registry permissions\nGet-Acl \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\VulnerableService\" | Format-List\n\n# If output shows:\nAccess : BUILTIN\\Users Allow  FullControl\n```\n\n**Exploitation**:\n```powershell\n# Attacker modifies ImagePath to point to malware\nSet-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\VulnerableService\" -Name \"ImagePath\" -Value \"C:\\malware.exe\"\n\n# Restart service\nRestart-Service VulnerableService\n\n# Service now runs malware with SYSTEM privileges\n```\n\n**Defense**: Audit registry permissions, ensure only administrators can modify service keys.\n\n### Registry Symbolic Links\n\nRegistry supports symbolic links (like shortcuts):\n\n```\nHKCU → Points to HKU\\[Current User SID]\n```\n\nAttackers can create registry symbolic links to redirect registry access:\n- Application expects to read/write HKCU\\Key\n- Attacker creates symbolic link redirecting to HKLM\\Key\n- Application inadvertently modifies system-wide settings\n\n## Registry Operations and Tools\n\n### Built-in Tools\n\n**1. Registry Editor (regedit.exe)**\n- GUI tool for browsing and editing registry\n- Run as Administrator to edit HKLM keys\n- **Features**:\n- Search (Ctrl+F) for keys, values, data\n- Export keys to .reg files (backup/sharing)\n- Import .reg files (apply changes)\n- Connect to remote registry (network-based management)\n\n**2. Command-Line: reg.exe**\n```cmd\n# Query value\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\" /v ProgramFilesDir\n\n# Add value\nreg add \"HKCU\\SOFTWARE\\Test\" /v TestValue /t REG_SZ /d \"Hello\" /f\n\n# Delete value\nreg delete \"HKCU\\SOFTWARE\\Test\" /v TestValue /f\n\n# Export key to file\nreg export \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" C:\\backup.reg\n\n# Import reg file\nreg import C:\\backup.reg\n\n# Compare two keys\nreg compare \"HKLM\\SOFTWARE\\Key1\" \"HKLM\\SOFTWARE\\Key2\"\n```\n\n**3. PowerShell Registry Provider**\n```powershell\n# Navigate registry like file system\ncd HKLM:\\SOFTWARE\\Microsoft\nls  # List subkeys\n\n# Read value\nGet-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\" -Name ProgramFilesDir\n\n# Set value\nSet-ItemProperty -Path \"HKCU:\\SOFTWARE\\Test\" -Name \"MyValue\" -Value \"Data\"\n\n# Create new key\nNew-Item -Path \"HKCU:\\SOFTWARE\\MyApp\"\n\n# Create new value\nNew-ItemProperty -Path \"HKCU:\\SOFTWARE\\MyApp\" -Name \"Setting\" -Value \"Value\" -PropertyType String\n\n# Delete key\nRemove-Item -Path \"HKCU:\\SOFTWARE\\MyApp\" -Recurse\n\n# Get permissions\nGet-Acl \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\"\n\n# Set permissions\n$acl = Get-Acl \"HKLM:\\SOFTWARE\\MyApp\"\n$rule = New-Object System.Security.AccessControl.RegistryAccessRule(\"Users\",\"ReadKey\",\"Allow\")\n$acl.SetAccessRule($rule)\nSet-Acl \"HKLM:\\SOFTWARE\\MyApp\" $acl\n```bash\n\n### Forensic Tools\n\n**RegRipper**\n- **Purpose**: Automate registry forensics\n- **What it does**: Extracts forensic artifacts from registry hives\n- **Usage**:\n```bash\n# Parse SYSTEM hive for network information\nrip.pl -r SYSTEM -p compname,networkcards,route,networklist\n\n# Parse NTUSER.DAT for user activity\nrip.pl -r NTUSER.DAT -p userassist,recentdocs,typedurls\n\n# Parse SOFTWARE hive for installed applications\nrip.pl -r SOFTWARE -p uninstall,product\n```\n- **Output**: Human-readable reports of registry artifacts\n- **Plugins**: 500+ plugins extracting specific artifacts\n\n**Registry Explorer (Eric Zimmerman)**\n- GUI tool for forensic registry analysis\n- Features:\n- View deleted registry keys (slack space recovery)\n- Transaction log replay\n- Bookmark important keys\n- Export to CSV/JSON\n- Built-in hex editor\n\n**Registry Decoder (Digital Detective)**\n- Commercial forensic tool\n- Automates extraction of 100+ forensic artifacts\n- Timeline generation\n- Keyword searching across all hives\n\n**FTK Imager (AccessData)**\n- Free forensic tool\n- Can mount registry hives from disk images\n- Export registry keys\n- View registry without booting Windows\n\n### Incident Response Tools\n\n**Autoruns (Sysinternals)**\n- Shows all auto-start programs\n- Checks:\n- Run keys\n- Services\n- Scheduled tasks\n- Drivers\n- Explorer extensions\n- **Use case**: Quickly identify malicious persistence\n- **Features**:\n- VirusTotal integration (check file reputation)\n- Hide Microsoft signed entries (focus on suspicious items)\n- Jump to registry location\n- Delete entries\n\n**Process Monitor (Sysinternals)**\n- Real-time monitoring of registry access\n- Shows what processes read/write which registry keys\n- **Use case**:\n- Reverse engineer malware (what registry keys does it touch?)\n- Debug application issues\n- Identify configuration locations\n- **Filters**: Focus on specific processes or registry paths\n\n**RegShot**\n- Compare registry before/after snapshots\n- **Use case**: Determine what changes an installer/malware makes\n- **Process**:\n1. Take initial snapshot\n2. Install software or run malware in sandbox\n3. Take second snapshot\n4. Compare → See all registry changes\n\n## Registry-Based Attacks\n\n### 1. Persistence via Run Keys\n\n**Attack**:\n```powershell\n# Attacker adds malware to Run key\nSet-ItemProperty -Path \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" -Name \"GoogleUpdate\" -Value \"C:\\Users\\Public\\malware.exe\"\n```\n\n**Detection**:\n```powershell\n# Defender: Monitor Run keys for unauthorized changes\nGet-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"\nGet-ItemProperty -Path \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"\n```\n\n**Mitigation**:\n- Enable registry auditing for Run keys\n- Use application whitelisting (only approved programs can run)\n- Monitor Run keys with SIEM\n\n### 2. UAC Bypass via Registry\n\n**Attack**: Modify registry from medium integrity to disable UAC\n```powershell\n# Some registry keys writable by medium integrity processes\n# Attacker uses registry symbolic link to escalate\n```\n\nExamples:\n- **EventViewer Hijack**: Modify HKCU\\Software\\Classes\\mscfile\\shell\\open\\command\n- **Fodhelper**: Modify HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command\n\nWhen user launches Event Viewer or Fodhelper (both auto-elevate), they execute attacker's command at high integrity.\n\n**Detection**:\n- Monitor for unusual changes to mscfile/ms-settings keys\n- Watch for registry symbolic link creation\n\n**Mitigation**:\n- Patch Windows (many UAC bypasses are patched)\n- Use \"Always notify\" UAC setting\n- Restrict registry permissions\n\n### 3. Service Modification\n\n**Attack**: Modify existing service to execute malware\n```powershell\n# Find service with weak permissions\nGet-Acl \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\*\" | Where-Object {$_.Access -match \"Users.*FullControl\"}\n\n# Modify service ImagePath\nSet-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\VulnService\" -Name \"ImagePath\" -Value \"C:\\malware.exe\"\n\n# Restart service (now runs malware as SYSTEM)\nRestart-Service VulnService\n```\n\n**Detection**:\n```powershell\n# Monitor service ImagePath changes\n# Compare current ImagePath with baseline\n$services = Get-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\*\\Parameters\" -Name ServiceDll\n```\n\n**Mitigation**:\n- Harden service registry permissions (only SYSTEM/Administrators)\n- Monitor service changes with Sysmon Event ID 13\n- Baseline service configurations\n\n### 4. Credential Theft (SAM/LSA Secrets Dumping)\n\n**Attack**:\n```powershell\n# Attacker with SYSTEM privileges dumps SAM database\n# Using Mimikatz or similar tools\nreg save HKLM\\SAM C:\\temp\\sam.hive\nreg save HKLM\\SYSTEM C:\\temp\\system.hive\nreg save HKLM\\SECURITY C:\\temp\\security.hive\n\n# Transfer to attacker machine, extract password hashes offline\n```\n\n**Detection**:\n- Monitor for \"reg save\" commands targeting SAM/SYSTEM/SECURITY\n- Watch for Mimikatz indicators (lsass.exe access)\n- Check for volume shadow copy access (alternate attack method)\n\n**Mitigation**:\n- Enable LSA Protection (RunAsPPL)\n- Use Credential Guard (virtualization-based security)\n- Monitor sensitive process access\n- Restrict SYSTEM-level access\n\n### 5. Disabling Security Tools\n\n**Attack**: Disable Windows Defender via registry\n```powershell\nSet-ItemProperty -Path \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" -Name \"DisableAntiSpyware\" -Value 1\nSet-ItemProperty -Path \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableRealtimeMonitoring\" -Value 1\n```\n\n**Detection**:\n- Monitor Defender-related registry keys for changes\n- Alert on DisableAntiSpyware = 1\n- Check group policy settings\n\n**Mitigation**:\n- Enable Tamper Protection (prevents registry changes)\n- Restrict registry permissions\n- Monitor with Sysmon Event ID 13 (RegistryValueSet)\n\n## Registry Forensics Deep Dive\n\n### Building User Activity Timeline\n\nCombine multiple registry artifacts:\n\n1. **Program Execution**:\n- UserAssist (execution count, last run time)\n- ShimCache (program existence, last modified)\n- Amcache (installation date, publisher)\n- BAM/DAM (exact execution timestamp)\n\n2. **File Access**:\n- RecentDocs (recently opened files)\n- OpenSavePidlMRU (files opened via Open/Save dialogs)\n- Office Recent (Office-specific recent files)\n\n3. **Network Activity**:\n- TypedURLs (websites user visited)\n- Network List (Wi-Fi networks connected)\n- Interface history (network configurations)\n\n4. **External Devices**:\n- USBSTOR (USB storage devices)\n- Mounted Devices (drive letters)\n\n**Example Timeline**:\n```\n2025-10-26 14:32:00 - USB device connected (SanDisk 32GB, SN: 123456)\n2025-10-26 14:33:15 - User opened file \"sensitive_data.xlsx\" from USB (E:)\n2025-10-26 14:35:42 - Excel executed (UserAssist)\n2025-10-26 14:40:10 - File saved to C:\\Users\\John\\Documents\\sensitive_data.xlsx\n2025-10-26 14:41:23 - Chrome.exe executed\n2025-10-26 14:41:45 - User navigated to \"fileupload.malicious-site.com\" (TypedURLs)\n2025-10-26 14:42:30 - USB device removed\n```\n\nThis timeline reveals potential data exfiltration.\n\n### Recovering Deleted Registry Keys\n\nWhen registry keys are deleted:\n1. Main hive marks space as available (but doesn't overwrite immediately)\n2. Transaction logs may still contain deleted data\n3. Volume shadow copies contain previous registry versions\n\n**Recovery Methods**:\n\n**1. Parse Transaction Logs**:\n```bash\n# Use Registry Explorer to replay transaction logs\n# Automatically merges .LOG1/.LOG2 with main hive\n# Shows deleted keys that haven't been overwritten\n```\n\n**2. Volume Shadow Copies**:\n```powershell\n# List shadow copies\nvssadmin list shadows\n\n# Mount shadow copy\nmklink /D C:\\shadow \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\\n\n# Access old registry hive\nC:\\shadow\\Windows\\System32\\config\\SOFTWARE\n```\n\n**3. Memory Forensics**:\n- Registry hives loaded into memory\n- Memory dump may contain registry data\n- Use Volatility or Rekall to extract registry from memory\n\n### Detecting Registry Anomalies\n\n**Unusual Persistence Locations**:\n```\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs\n(DLLs loaded into every process - highly malicious if used)\n\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell\n(Should only be \"explorer.exe\" - anything else suspicious)\n\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\[program.exe]\\Debugger\n(If set, debugger launches instead of program - used for hijacking)\n```\n\n**Suspicious Patterns**:\n- Run keys with random names (e.g., \"xjkf82h\")\n- Executables running from temp directories\n- Multiple entries pointing to same executable\n- Services with no DisplayName or Description\n- Registry keys created at unusual times (3 AM)\n\n**Baseline Deviation**:\n- Compare current registry state with known-good baseline\n- Alert on:\n- New auto-start entries\n- Modified service ImagePath values\n- New/modified file associations\n- Disabled security features\n\n## Registry Hardening\n\n### 1. Restrict Run Key Modifications\n\n```powershell\n# Remove write permissions for Users on Run keys\n$acl = Get-Acl \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"\n$rule = New-Object System.Security.AccessControl.RegistryAccessRule(\"Users\",\"Write\",\"Deny\")\n$acl.SetAccessRule($rule)\nSet-Acl \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" $acl\n```bash\n\n### 2. Enable Registry Auditing\n\n```powershell\n# Audit all changes to Run keys\n$acl = Get-Acl \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"\n$audit = New-Object System.Security.AccessControl.RegistryAuditRule(\"Everyone\",\"SetValue,CreateSubKey,Delete\",\"None\",\"None\",\"Success,Failure\")\n$acl.AddAuditRule($audit)\nSet-Acl \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" $acl\n```\n\nEvents logged to Security event log (Event ID 4657).\n\n### 3. Use Sysmon for Detailed Registry Monitoring\n\n**Sysmon Configuration**:\n```xml\n<Sysmon schemaversion=\"4.90\">\n<EventFiltering>\n<RegistryEvent onmatch=\"include\">\n<TargetObject condition=\"contains\">\\CurrentVersion\\Run</TargetObject>\n<TargetObject condition=\"contains\">\\CurrentControlSet\\Services</TargetObject>\n<TargetObject condition=\"contains\">\\Windows Defender</TargetObject>\n</RegistryEvent>\n</EventFiltering>\n</Sysmon>\n```\n\n**Sysmon Registry Events**:\n- **Event ID 12**: RegistryObjectCreateAndDelete (new keys)\n- **Event ID 13**: RegistryValueSet (value changes)\n- **Event ID 14**: RegistryObjectRename (key renamed)\n\n### 4. Disable Unnecessary Features\n\n```powershell\n# Disable AutoRun (prevents malware from USB auto-execution)\nSet-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" -Name \"NoDriveTypeAutoRun\" -Value 255\n\n# Disable PowerShell v2 (lacks security features)\nDisable-WindowsOptionalFeature -Online -FeatureName MicrosoftWindowsPowerShellV2Root\n\n# Require signed scripts\nSet-ExecutionPolicy AllSigned\n```bash\n\n### 5. Restrict Remote Registry Access\n\n```powershell\n# Disable Remote Registry service\nStop-Service RemoteRegistry\nSet-Service RemoteRegistry -StartupType Disabled\n\n# If remote access needed, restrict permissions\n$acl = Get-Acl \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurePipeServers\\winreg\"\n# Only allow specific accounts\n```bash\n\n## Practical Exercises\n\n### Exercise 1: Identify Persistence Mechanisms\n\n**Task**: Find all auto-start programs on your system\n\n```powershell\n# Check Run keys\nGet-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"\nGet-ItemProperty -Path \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"\n\n# Check services set to automatic\nGet-Service | Where-Object {$_.StartType -eq \"Automatic\"}\n\n# Or use Autoruns tool (GUI)\nautoruns.exe\n```\n\n**Question**: Are all these entries legitimate? Research any suspicious ones.\n\n### Exercise 2: Monitor Registry in Real-Time\n\n**Task**: Watch registry changes as you install software\n\n1. Download and run Process Monitor (Procmon)\n2. Filter for RegSetValue operations\n3. Install a program\n4. Observe what registry changes occur\n\n**Questions**:\n- Where did the program write configuration?\n- Did it create any Run keys?\n- Did it create services?\n\n### Exercise 3: Forensic Timeline Analysis\n\n**Task**: Extract user activity from registry\n\n```bash\n# Use RegRipper on NTUSER.DAT\nrip.pl -r \"C:\\Users\\[User]\\NTUSER.DAT\" -p userassist\nrip.pl -r \"C:\\Users\\[User]\\NTUSER.DAT\" -p recentdocs\n\n# Parse SYSTEM hive for system info\nrip.pl -r \"C:\\Windows\\System32\\config\\SYSTEM\" -p compname,networkcards\n```\n\n**Analysis**:\n- What programs did the user run?\n- What files did they open?\n- When did they last log in?\n\n### Exercise 4: Detect Weak Service Permissions\n\n**Task**: Identify services vulnerable to registry-based attacks\n\n```powershell\n# Check all service registry permissions\n$services = Get-ChildItem \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\"\nforeach ($service in $services) {\n$acl = Get-Acl $service.PSPath\n$access = $acl.Access | Where-Object {$_.IdentityReference -match \"Users\" -and $_.RegistryRights -match \"FullControl|Write\"}\nif ($access) {\nWrite-Host \"Vulnerable service: $($service.PSChildName)\"\nWrite-Host \"  Access: $($access.IdentityReference) - $($access.RegistryRights)\"\n}\n}\n```\n\n**Remediation**: Restrict permissions to Administrators and SYSTEM only.\n\n## Key Takeaways\n\n1. **Registry is Windows' configuration database** - every setting, every install, every preference stored here\n\n2. **Five root keys (hives)** - HKLM (system), HKCU (user), HKCR (file associations), HKU (all users), HKCC (hardware)\n\n3. **Physical hive files** exist on disk (C:\\Windows\\System32\\config) - can be extracted for forensics\n\n4. **Run keys are #1 persistence mechanism** - attackers add malware here for auto-execution\n\n5. **Registry permissions matter** - weak permissions enable privilege escalation and persistence\n\n6. **Forensic goldmine** - UserAssist, ShimCache, RecentDocs, TypedURLs, USB history all in registry\n\n7. **Transaction logs preserve deleted data** - forensic value beyond main hive\n\n8. **Monitor registry with Sysmon** - Event IDs 12/13/14 track registry changes\n\n9. **RegRipper automates forensic extraction** - hundreds of plugins for different artifacts\n\n10. **Harden critical registry keys** - restrict permissions, enable auditing, use Tamper Protection\n\nThe registry is simultaneously:\n- Attacker's persistence playground (Run keys, services, file associations)\n- Defender's monitoring target (Sysmon, auditing, baselines)\n- Forensicator's evidence trove (UserAssist, ShimCache, Amcache)\n- Sysadmin's configuration interface (Group Policy, system settings)\n\nMaster the registry and you've mastered a critical component of Windows security."
      },
      "ascii_art": "REGISTRY STRUCTURE\n\nHKEY_LOCAL_MACHINE (HKLM)\n├── SAM (user accounts)\n├── SECURITY (policies)\n├── SOFTWARE (installed apps)\n│   └── Microsoft\n│       └── Windows\n│           └── CurrentVersion\n│               └── Run (auto-start)\n└── SYSTEM (services, drivers)\n    └── CurrentControlSet\n        └── Services\n            └── [ServiceName]\n\nHKEY_CURRENT_USER (HKCU)\n├── SOFTWARE\n│   └── Microsoft\n│       └── Windows\n│           └── CurrentVersion\n│               └── Run (user auto-start)\n└── Network\n\nPhysical Files:\nC:\\Windows\\System32\\config\n├── SAM\n├── SECURITY\n├── SOFTWARE\n├── SYSTEM\n└── DEFAULT\n\nC:\\Users\\[User]\n└── NTUSER.DAT",
      "examples": [
        {
          "scenario": "Detecting Malware Persistence",
          "explanation": "Incident responder investigating infected system runs 'reg query HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run' and finds entry: 'WindowsUpdate' = 'C:\\Users\\Public\\svchost.exe'. Suspicious because: (1) Unusual location for svchost.exe (should be System32), (2) Name mimics legitimate process, (3) User confirms they didn't install this. Responder removes registry entry, deletes file, scans for additional IOCs."
        },
        {
          "scenario": "Forensic Timeline Reconstruction",
          "explanation": "USB drive containing classified files stolen from company. Forensic analyst extracts NTUSER.DAT and SYSTEM hive from suspect's laptop. RegRipper analysis reveals: (1) USBSTOR shows SanDisk 32GB drive connected on date/time matching incident, (2) RecentDocs shows files from drive opened, (3) TypedURLs shows file upload site visited 5 minutes later, (4) BAM shows upload utility executed. Timeline proves suspect copied and uploaded files. Evidence used in prosecution."
        },
        {
          "scenario": "Service Hijacking Attack",
          "explanation": "Attacker gains limited user access. Enumerates services, finds 'VulnerableService' with registry permissions allowing Users to modify. Changes ImagePath from 'C:\\Program Files\\App\\service.exe' to 'C:\\Windows\\Temp\\backdoor.exe'. Waits for system reboot. Service starts automatically, executes backdoor with SYSTEM privileges. Attacker now has full control. Defense: Audit service permissions, restrict to Administrators only."
        }
      ]
    },
    {
      "type": "video",
      "content": {
        "title": "Video: Windows Registry Deep Dive Overview",
        "url": "https://www.youtube.com/embed/Vh_h6NfLkAg",
        "description": "Watch this video for a visual introduction to the concepts covered in this lesson."
      }
    },
    {
      "block_id": "c3d4e5f6-a7b8-4c9d-0e1f-2a3b4c5d6e7f",
      "type": "real_world",
      "content": {
        "text": "## Real-World Registry-Based Attacks\n\n### APT29 (Cozy Bear) - Registry Persistence\n\n**Attack**: Russian APT group APT29 compromised U.S. government networks (2015-2016)\n\n**Technique**: PowerShell backdoor registered in Run key\n```\nHKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n\"OneDrive Update\" = \"powershell.exe -WindowStyle Hidden -EncodedCommand [base64]\"\n```\n\n**Why it worked**:\n- Blended in with legitimate startup entries\n- PowerShell is legitimate Windows tool (no AV alerts)\n- Encoded command hid malicious intent\n- Persisted across reboots for months undetected\n\n**Lesson**: Monitor Run keys for PowerShell entries, especially with encoded commands or unusual window styles.\n\n### NotPetya Ransomware (2017) - Credential Harvesting\n\n**Attack**: NotPetya ransomware spread globally causing $10 billion in damage\n\n**Registry Component**: Used Mimikatz to dump credentials from registry\n```\nreg save HKLM\\SAM sam.hive\nreg save HKLM\\SYSTEM system.hive\n# Extracted NTLM hashes, used for lateral movement\n```\n\n**Impact**: Compromised administrator credentials enabled spread across entire networks\n\n**Lesson**: \n- Enable LSA Protection (prevents unauthorized lsass.exe access)\n- Monitor for \"reg save\" commands targeting SAM/SYSTEM\n- Use Credential Guard on critical systems\n\n### SolarWinds Supply Chain Attack (2020) - Service Modification\n\n**Attack**: Russian SVR compromised SolarWinds Orion updates, distributed to 18,000+ organizations\n\n**Registry Technique**: SUNBURST backdoor modified service registry keys\n```\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\SolarWinds.BusinessLayerHost\nImagePath modified to include malicious DLL\n```\n\n**Stealth tactics**:\n- Legitimate signed service modified (not new service created)\n- Dormant period before activation (evade initial detection)\n- Registry timestamps manipulated\n\n**Lesson**: \n- Baseline service configurations\n- Monitor for ImagePath changes even in trusted services\n- Verify digital signatures regularly (compromise detection)\n\n### Emotet Malware - Registry-Based Obfuscation\n\n**Attack**: Banking trojan Emotet infected millions of systems\n\n**Registry Persistence**:\n```\nHKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n[Random GUID] = \"regsvr32.exe /s C:\\Users\\[User]\\AppData\\Local\\[random]\\[random].dll\"\n```\n\n**Obfuscation techniques**:\n- Random GUID as value name (different on each infection)\n- Random file and folder names\n- Legitimate Windows tool (regsvr32.exe) to load malicious DLL\n- Fileless variant stored payload in registry (not file system)\n\n**Fileless Variant**:\n```\nHKCU\\SOFTWARE\\[Random GUID]\n(Default) = [base64 encoded payload]\n```\nPowerShell script reads this value, decodes, executes in memory.\n\n**Lesson**: \n- Monitor Run keys for regsvr32.exe and PowerShell\n- Unusual registry keys with large binary/base64 data = suspicious\n- Entropy analysis (random strings often indicate malware)\n\n### TrickBot - UAC Bypass via Registry\n\n**Attack**: TrickBot banking malware used registry for UAC bypass\n\n**Technique**: Fodhelper UAC bypass\n```\nHKCU\\SOFTWARE\\Classes\\ms-settings\\shell\\open\\command\n(Default) = \"cmd.exe /c [malware command]\"\nDelegateExecute = \"\" (empty string crucial for exploit)\n```\n\nWhen victim launches fodhelper.exe (Windows Settings helper, auto-elevates):\n1. Fodhelper looks for ms-settings handler in HKCU (user-writable)\n2. Finds attacker's command in HKCU\\Classes\\ms-settings\\shell\\open\\command\n3. Executes attacker's command with high integrity (bypassed UAC!)\n\n**Lesson**:\n- Monitor HKCU\\Classes for suspicious entries (ms-settings, mscfile, etc.)\n- Use \"Always notify\" UAC setting\n- Application whitelisting prevents arbitrary commands\n\n### Duqu 2.0 - Memory-Only Registry\n\n**Attack**: Highly sophisticated nation-state malware targeting Kaspersky (2015)\n\n**Technique**: Entirely memory-resident (no persistent files)\n\n**Registry Role**:\n- Created volatile registry keys (HKLM\\HARDWARE subtree)\n- Keys in HARDWARE subtree aren't saved to disk\n- Stored configuration in memory-only registry keys\n- Disappeared completely on reboot (anti-forensics)\n\n**Re-infection**:\n- Compromised network devices (routers) re-infected systems after reboot\n- No disk artifacts = nearly impossible to detect via traditional forensics\n\n**Lesson**:\n- Memory forensics crucial (live response, not just disk analysis)\n- Monitor for unusual HKLM\\HARDWARE usage\n- Network-level detection essential for memory-only malware\n\n## Defensive Use Cases\n\n### Case Study: Enterprise Registry Hardening (Financial Institution)\n\n**Scenario**: Bank implements registry hardening after ransomware incident\n\n**Measures**:\n1. **Run Key Monitoring**:\n- Sysmon monitoring all Run key changes (Event ID 13)\n- SIEM alerts on new entries\n- Weekly automated baseline comparison\n\n2. **Service Protection**:\n- Audited 500+ services for weak registry permissions\n- Removed User/Everyone write access\n- Enabled auditing on service keys\n\n3. **Credential Protection**:\n- Enabled LSA Protection on all systems\n- Deployed Credential Guard on Windows 10/11 systems\n- Monitored for SAM/SECURITY hive access\n\n4. **Application Whitelisting**:\n- Only approved applications can execute\n- Even if malware added to Run key, execution blocked\n\n**Result**: \n- Detected and blocked 15 malware persistence attempts in first month\n- Prevented 3 privilege escalation attempts via service modification\n- Reduced incident response time by 60% (early detection)\n\n### Case Study: Forensic Investigation (Data Breach)\n\n**Scenario**: Healthcare organization discovers data breach, engages forensic team\n\n**Registry Forensics**:\n1. **Timeline Reconstruction**:\n- Extracted NTUSER.DAT from all potentially compromised users\n- RegRipper analysis revealed:\n- UserAssist: Unusual data export tools executed\n- RecentDocs: Database backup files accessed\n- TypedURLs: Anonymous file upload sites visited\n\n2. **Lateral Movement Tracking**:\n- SYSTEM hive analysis showed:\n- RDP connections from unusual IPs\n- New user accounts created (registry artifacts)\n- Network adapter configurations changed\n\n3. **Malware Identification**:\n- ShimCache revealed execution of:\n- Credential dumping tools (Mimikatz variants)\n- Network scanners\n- Data exfiltration scripts\n- Amcache provided file hashes (matched known malware)\n\n4. **USB Device Tracking**:\n- USBSTOR analysis showed:\n- External drive connected to compromised workstation\n- First connection: 2 days before breach discovered\n- Last connection: 1 hour before network traffic spike\n\n**Outcome**: \n- Identified patient zero (user who connected infected USB)\n- Reconstructed complete attack timeline (initial access to exfiltration)\n- Determined scope: 250,000 patient records compromised\n- Evidence used to report to regulators and notify affected individuals\n\n## Registry in Modern Threat Hunting\n\n**Hunt #1: Unusual Persistence Mechanisms**\n```powershell\n# Search for Run keys pointing to temp directories\nGet-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" | \nWhere-Object {$_ -match \"Temp|AppData\\\\Local|Public\"}\n\nGet-ItemProperty -Path \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" | \nWhere-Object {$_ -match \"Temp|AppData\\\\Local|Public\"}\n```\n\n**Hunt #2: Services with Suspicious Configurations**\n```powershell\n# Find services running from user directories\nGet-ChildItem \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\" | \nGet-ItemProperty | \nWhere-Object {$_.ImagePath -match \"Users|Temp|Public\"} | \nSelect PSChildName, ImagePath\n```\n\n**Hunt #3: AppInit_DLLs (Dangerous Persistence)**\n```powershell\n# Check for DLLs loaded into every process (rare legitimate use)\nGet-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\" -Name AppInit_DLLs\n```\n\n**Hunt #4: Debugger Hijacking**\n```powershell\n# Find programs with debuggers attached (rare, usually malicious)\nGet-ChildItem \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\" | \nGet-ItemProperty -Name Debugger -ErrorAction SilentlyContinue | \nSelect PSChildName, Debugger\n```\n\nThese hunts reveal persistence mechanisms often missed by traditional AV."
      }
    },
    {
      "block_id": "d4e5f6a7-b8c9-4d0e-1f2a-3b4c5d6e7f8a",
      "type": "quiz",
      "content": {
        "text": "Test your Windows Registry knowledge",
        "questions": [
          {
            "question": "Which registry hive contains user account password hashes?",
            "options": [
              "HKEY_CURRENT_USER",
              "HKEY_LOCAL_MACHINE\\SAM",
              "HKEY_LOCAL_MACHINE\\SECURITY",
              "HKEY_USERS"
            ],
            "correct_answer": 1,
            "explanation": "HKEY_LOCAL_MACHINE\\SAM stores user account information including password hashes (encrypted). HKLM\\SECURITY stores LSA secrets (service passwords, cached credentials). HKCU is user preferences (no password hashes)."
          },
          {
            "question": "An attacker wants persistence that survives reboot. Which is the MOST common registry location?",
            "options": [
              "HKLM\\SYSTEM\\CurrentControlSet\\Control",
              "HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",
              "HKEY_CLASSES_ROOT\\exefile\\shell\\open\\command",
              "HKLM\\HARDWARE\\DESCRIPTION\\System"
            ],
            "correct_answer": 1,
            "explanation": "Run keys (HKCU and HKLM\\...\\Run) are the most common persistence mechanism - programs listed here execute at user login. HKLM\\HARDWARE is volatile (memory-only). Exefile hijacking is possible but less common and more obvious."
          },
          {
            "question": "What does ShimCache (Application Compatibility Cache) provide for forensic investigators?",
            "options": [
              "Real-time monitoring of running processes",
              "Evidence of program execution even after file deletion",
              "Decrypted user passwords",
              "Network connection history"
            ],
            "correct_answer": 1,
            "explanation": "ShimCache records program execution metadata (path, size, last modified time) and persists even after the program is deleted. It doesn't provide passwords, real-time monitoring, or network history. Critical for proving a malware file existed and potentially executed."
          },
          {
            "question": "A service registry key has FullControl permissions for Users group. What attack is possible?",
            "options": [
              "Denial of Service only",
              "Privilege escalation to SYSTEM",
              "Password cracking",
              "Network traffic interception"
            ],
            "correct_answer": 1,
            "explanation": "Weak service permissions allow low-privilege users to modify the service's ImagePath to point to malware. When the service starts (often automatically), it runs malware with SYSTEM privileges - privilege escalation achieved. Not related to DoS, password cracking, or network traffic."
          },
          {
            "question": "Which tool automatically extracts hundreds of forensic artifacts from registry hives?",
            "options": [
              "Process Monitor",
              "Autoruns",
              "RegRipper",
              "RegEdit"
            ],
            "correct_answer": 2,
            "explanation": "RegRipper is specifically designed for forensic registry analysis with 500+ plugins extracting artifacts (UserAssist, RecentDocs, services, etc.). Autoruns shows persistence mechanisms (live system). Process Monitor shows real-time registry access. RegEdit is manual editing tool."
          }
        ]
      }
    },
    {
      "block_id": "e5f6a7b8-c9d0-4e1f-2a3b-4c5d6e7f8a9b",
      "type": "memory_aid",
      "content": {
        "text": "## Registry Mastery Memory Aids\n\n**The 5 Root Keys (HHLUC)**:\n- **H**KLM - **H**ardware and system (Machine-wide)\n- **H**KCU - **H**ome for current user\n- **L**ocal machine (HKLM)\n- **U**sers (HKU - all users)\n- **C**lasses (HKCR - file associations)\n- **C**urrent config (HKCC - hardware)\n\n**Physical Hive Files (SSSD)**:\n- **S**AM - user accounts\n- **S**ECURITY - policies and secrets\n- **S**OFTWARE - installed programs\n- **S**YSTEM - services and drivers\n- **D**EFAULT - default user profile\n\n**Persistence Locations (RSSW)**:\n- **R**un keys (most common)\n- **S**ervices (high privilege)\n- **S**cheduled tasks\n- **W**inlogon (Userinit, Shell)\n\n**Forensic Artifacts (USRAM)**:\n- **U**serAssist (program execution count and time)\n- **S**himCache (program existence and metadata)\n- **R**ecentDocs (recently opened files)\n- **A**mcache (installation evidence with hashes)\n- **M**UICache (executed program names)\n\n**UAC Bypass Targets (MEMS)**:\n- **M**scfile (Event Viewer hijack)\n- **E**ventvwr (Event Viewer)\n- **M**s-settings (Fodhelper hijack)\n- **S**dctlcfg (System Properties)\n\n**Registry Permissions (QSEND)**:\n- **Q**uery Value (read)\n- **S**et Value (write)\n- **E**numerate Subkeys (list)\n- **N**otify (watch for changes)\n- **D**elete (remove)\n\n**Value Types (SEMDB)**:\n- **S**Z - String\n- **E**XPAND_SZ - Expandable string (%USERPROFILE%)\n- **M**ULTI_SZ - Multiple strings\n- **D**WORD - 32-bit number\n- **B**INARY - Raw binary data\n\nUse these mnemonics when you're under pressure during incident response or exams!"
      }
    },
    {
      "block_id": "f6a7b8c9-d0e1-4f2a-3b4c-5d6e7f8a9b0c",
      "type": "reflection",
      "content": {
        "text": "## Reflect on Registry Mastery\n\n**Question 1**: You're a SOC analyst. Your SIEM alerts on a new registry value created:\n```\nHKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n\"OneDrive Sync\" = \"powershell.exe -WindowStyle Hidden -EncodedCommand [base64]\"\n```\nWhat makes this suspicious? What would you do next?\n\n**Question 2**: During forensic investigation, you find this in ShimCache:\n```\nC:\\Users\\John\\Desktop\\definitely_not_malware.exe\nLast Modified: 2025-10-20 14:32:00\nSize: 245,760 bytes\n```\nBut the file no longer exists on disk. What can you conclude? What other registry artifacts might provide additional context?\n\n**Question 3**: You discover a service with this configuration:\n```\nImagePath: C:\\Program Files\\Legitimate App\\service.exe\nPermissions: Users - FullControl\n```\nExplain the security risk. How would you remediate it? What monitoring would you implement?\n\n**Question 4**: An attacker gained admin access and ran:\n```\nreg save HKLM\\SAM sam.hive\nreg save HKLM\\SYSTEM system.hive\n```\nWhat is the attacker trying to accomplish? What defensive measures could have prevented this?\n\n**Question 5**: You're hardening a Windows server. What registry-based mitigations would you implement? Consider:\n- Persistence prevention\n- Credential protection  \n- Monitoring and detection\n- UAC bypass prevention\n\nThink through your answers. These scenarios mirror real-world incidents."
      }
    }
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Understand registry architecture including hives, keys, values, and physical storage",
    "Identify critical registry locations for persistence, security settings, and forensic artifacts",
    "Analyze registry permissions and identify security misconfigurations",
    "Perform registry-based forensic investigations using tools like RegRipper",
    "Detect and respond to registry-based attacks (persistence, UAC bypass, credential theft)",
    "Implement registry hardening and monitoring strategies",
    "Use registry artifacts to build incident timelines and track user activity"
  ],
  "post_assessment": [
    {
      "question": "What is the primary difference between HKEY_LOCAL_MACHINE and HKEY_CURRENT_USER?",
      "type": "multiple_choice",
      "options": [
        "HKLM stores temporary data, HKCU stores permanent data",
        "HKLM contains system-wide settings for all users, HKCU contains settings for currently logged-in user",
        "HKLM requires SYSTEM privileges to read, HKCU requires admin privileges",
        "HKLM is volatile (memory-only), HKCU is persistent"
      ],
      "correct_answer": "HKLM contains system-wide settings for all users, HKCU contains settings for currently logged-in user",
      "explanation": "HKLM (HKEY_LOCAL_MACHINE) stores system-wide configurations affecting all users (services, system software, hardware). HKCU (HKEY_CURRENT_USER) stores preferences for the currently logged-in user only. Both are persistent (saved to disk). HKLM typically requires admin to modify, HKCU is user-writable.",
      "question_id": "c77afe4f-3f15-4cd6-8f3e-087680a5c437",
      "difficulty": 2
    },
    {
      "question": "Which registry artifact provides the most accurate timestamp for program execution?",
      "type": "multiple_choice",
      "options": [
        "UserAssist",
        "ShimCache",
        "BAM/DAM",
        "Amcache"
      ],
      "correct_answer": "BAM/DAM",
      "explanation": "BAM/DAM (Background/Desktop Activity Moderator) provides exact execution timestamps with precision to the second. UserAssist shows execution count and last run time but less precise. ShimCache shows last modified time (not execution time). Amcache shows installation date (not each execution).",
      "question_id": "de7e1e38-f565-413e-84c1-22c79b8c37a5",
      "difficulty": 2
    },
    {
      "question": "An attacker modifies HKCU\\SOFTWARE\\Classes\\ms-settings\\shell\\open\\command. What attack is this?",
      "type": "multiple_choice",
      "options": [
        "Credential theft",
        "UAC bypass (Fodhelper hijack)",
        "Service persistence",
        "Registry symbolic link attack"
      ],
      "correct_answer": "UAC bypass (Fodhelper hijack)",
      "explanation": "This is the Fodhelper UAC bypass technique. Fodhelper.exe auto-elevates and checks HKCU\\Classes\\ms-settings (user-writable) before HKLM. Attacker places malicious command there, fodhelper executes it with high integrity, bypassing UAC prompt. Not related to credentials, services, or symlinks.",
      "question_id": "19006765-93d1-4b7f-a5ed-0ccbf0976a29",
      "difficulty": 2
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "meta_learning",
    "minimum_effective_dose",
    "teach_like_im_10",
    "memory_hooks",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ]
}