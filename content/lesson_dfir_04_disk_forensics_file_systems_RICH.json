{
  "lesson_id": "f6a7b8c9-d0e1-4f2a-3b4c-5d6e7f8a9b0c",
  "domain": "dfir",
  "title": "Disk Forensics and File System Analysis",
  "difficulty": 2,
  "order_index": 4,
  "prerequisites": [
    "7333ad37-a513-4598-a23b-9729e3114bae"
  ],
  "concepts": [
    "File Systems",
    "NTFS",
    "MFT",
    "Deleted File Recovery",
    "File Carving",
    "Slack Space",
    "Alternate Data Streams",
    "Forensic Imaging",
    "Write Blockers"
  ],
  "content_blocks": [
    {
      "block_id": "1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d",
      "type": "mindset_coach",
      "content": {
        "text": "Disk forensics is where digital investigations truly begin. Everything lives on disk - documents, executables, browser history, deleted files, malware artifacts, user activity traces. Master disk forensics and you can recover deleted evidence, reconstruct user actions, identify malware persistence, and build timelines from filesystem metadata.\n\nHere's the critical insight: File deletion doesn't actually delete data. When you delete a file, the operating system simply marks the space as available and removes the directory entry. The actual data remains on disk until overwritten. This fundamental fact makes disk forensics possible - and powerful.\n\nMany people think forensics requires expensive tools and certifications. Here's the truth: The foundational concepts - file systems, MFT, slack space, data carving - are universal and can be applied with free tools. Understanding NTFS internals, timestamps, and data structures is more valuable than any specific tool.\n\nThink of a hard drive like a massive library:\n- **File system** = Card catalog (tells you where books are)\n- **MFT (Master File Table)** = Detailed catalog with book locations, creation dates, authors\n- **Clusters** = Shelves holding actual book content\n- **Deleted files** = Books removed from catalog but still on shelves\n- **File carving** = Searching shelves directly for books missing from catalog\n\nThe beautiful part: File systems leave extensive forensic artifacts - timestamps showing when files were created/modified/accessed, alternate data streams hiding data, slack space containing remnants of previous files. These artifacts survive attempts to hide evidence.\n\nThis lesson covers NTFS internals, MFT analysis, deleted file recovery, file carving, alternate data streams, and forensic imaging. You'll learn how to extract maximum intelligence from disks, recover deleted evidence, and identify anti-forensic techniques. Not abstract theory - practical disk forensics for real investigations."
      },
      "simplified_explanation": "Disk forensics = Analyzing hard drives for evidence. File systems (NTFS) organize data with metadata (timestamps, size, location). Deleted files aren't actually erased - data remains until overwritten. MFT = Master catalog tracking all files. File carving = Recovering files by searching raw disk data. Forensic imaging = Exact copy for analysis.",
      "memory_aids": [
        "MFT = Master File Table (NTFS catalog of all files with metadata)",
        "Deleted file recovery: Data stays until overwritten",
        "File carving: Search for file signatures (headers/footers) in raw data",
        "ADS = Alternate Data Streams (hidden data in NTFS)",
        "Slack space = Unused space in last cluster (can contain remnants)"
      ],
      "teach_like_im_10": "Imagine your hard drive is a huge notebook with an index at the front (MFT). When you save a file, it writes the content on pages and updates the index showing which pages. When you 'delete' a file, it just crosses out the index entry but doesn't erase the actual pages - the content is still there! Forensics is like reading those crossed-out pages before someone writes over them."
    },
    {
      "block_id": "2b3c4d5e-6f7a-8b9c-0d1e-2f3a4b5c6d7e",
      "type": "explanation",
      "content": {
        "text": "## File System Fundamentals\n\n### What is a File System?\n\nA **file system** organizes and manages data on storage devices. It determines:\n- How data is stored (allocation)\n- How data is retrieved (access)\n- How metadata is maintained (names, timestamps, permissions)\n\n### Common File Systems\n\n**NTFS (New Technology File System)**:\n- **Platform**: Windows (default since Windows NT)\n- **Features**: Permissions (ACLs), encryption (EFS), compression, journaling, alternate data streams\n- **Max file size**: 16 EB (exabytes)\n- **Forensic value**: Extensive metadata, timestamps, change journal\n\n**FAT32 (File Allocation Table 32)**:\n- **Platform**: USB drives, SD cards, older Windows\n- **Features**: Simple, widely compatible\n- **Max file size**: 4 GB (limitation)\n- **Forensic value**: Less metadata than NTFS\n\n**exFAT (Extended FAT)**:\n- **Platform**: Large USB drives, SD cards\n- **Features**: Overcomes FAT32 4GB limit\n- **Max file size**: 16 EB\n- **Forensic value**: Similar to FAT32\n\n**ext4 (Fourth Extended Filesystem)**:\n- **Platform**: Linux (default on most distros)\n- **Features**: Journaling, permissions\n- **Max file size**: 16 TB\n- **Forensic value**: Timestamps, inodes\n\n**APFS (Apple File System)**:\n- **Platform**: macOS (10.13+), iOS\n- **Features**: Encryption, snapshots, cloning\n- **Forensic value**: Extensive metadata\n\nThis lesson focuses on **NTFS** (most common in enterprise/forensics).\n\n## NTFS Architecture\n\n### Clusters and Sectors\n\n**Sector**: Smallest physical unit on disk (typically 512 bytes or 4KB)\n\n**Cluster**: Smallest logical unit NTFS allocates (typically 4KB = 8 sectors)\n\n**Why clusters matter**:\n```\nFile size: 5 KB\nCluster size: 4 KB\nClusters allocated: 2 (4 KB + 4 KB = 8 KB)\nWasted space (slack): 3 KB (8 KB allocated - 5 KB used)\n```\n\n**Slack Space**: Unused space in last cluster. Can contain remnants of previous file data (forensic goldmine).\n\n### Master File Table (MFT)\n\nThe **MFT** is NTFS's central catalog - a database of all files and directories.\n\n**MFT Structure**:\n- Each file/folder = One MFT entry (record)\n- MFT entry size: 1024 bytes (usually)\n- MFT location: Beginning of NTFS volume\n- MFT is itself a file: $MFT\n\n**MFT Entry Contents**:\n```\n- File name\n- Timestamps (MACB - Modified, Accessed, Changed, Born)\n- File size\n- File attributes (hidden, system, read-only, etc.)\n- Security descriptor (permissions)\n- Data runs (where file data is located on disk)\n- Alternate Data Streams (ADS)\n```\n\n**Example MFT Entry**:\n```\nMFT Entry #12345\nFile Name: document.docx\nCreated: 2025-10-26 14:30:00\nModified: 2025-10-27 09:15:23\nAccessed: 2025-10-27 10:00:00\nChanged: 2025-10-27 09:15:23\nSize: 45,678 bytes\nClusters: 12 clusters starting at cluster 500000\nAttributes: Archive\n```\n\n**Resident vs Non-Resident Files**:\n\n**Resident**: Small files stored entirely within MFT entry (< ~700 bytes)\n```\nMFT Entry: [Metadata + File Content]\nNo separate disk allocation needed\n```\n\n**Non-Resident**: Larger files stored in separate clusters\n```\nMFT Entry: [Metadata + Pointers to clusters]\nFile content: Stored in clusters elsewhere on disk\n```\n\n**Forensic Value**: Even if file deleted, MFT entry may remain with metadata and resident file content.\n\n### NTFS Timestamps (MACB)\n\nEvery file has four timestamps:\n\n**$STANDARD_INFORMATION (SI) Timestamps**:\n- **Modified**: Content last modified\n- **Accessed**: File last opened/read\n- **Changed**: Metadata last changed (permissions, rename, etc.)\n- **Born (Created)**: File created\n\n**$FILE_NAME (FN) Timestamps**:\n- Same four timestamps, but for file name\n- Less likely to be modified by user/malware\n- More forensically reliable\n\n**Forensic Analysis**:\n```\nSI Modified: 2025-10-27 09:00:00\nFN Modified: 2025-10-26 14:30:00\n\nInterpretation: $SI timestamp changed but $FN didn't.\nPossibility: Timestomping (anti-forensics technique to change timestamps)\n```\n\n**Timestomping Detection**:\n- Compare SI vs FN timestamps\n- Mismatches indicate potential timestamp manipulation\n- $FILE_NAME timestamps harder to manipulate (require direct MFT editing)\n\n### NTFS System Files\n\nNTFS uses special system files (metadata files) starting with $:\n\n**$MFT**: Master File Table (catalog of all files)\n**$MFTMirr**: Backup of first MFT entries\n**$LogFile**: Transaction log (journaling for crash recovery)\n**$Volume**: Volume information\n**$AttrDef**: Attribute definitions\n**$Bitmap**: Cluster allocation bitmap (which clusters are in use)\n**$Boot**: Boot sector\n**$BadClus**: Bad cluster list\n**$Secure**: Security descriptors\n**$UpCase**: Uppercase conversion table\n**$Extend**: Extended attributes and features\n\n**Forensic Use**:\n- **$LogFile**: Transaction history (file operations, even deleted)\n- **$Bitmap**: Identify unallocated clusters (search for deleted data)\n- **$MFT**: Complete file listing with metadata\n\n## Deleted File Recovery\n\n### How File Deletion Works\n\n**User deletes file**:\n```\n1. File moved to Recycle Bin ($Recycle.Bin folder)\n- File still exists on disk\n- Renamed to $R[random].ext\n- Metadata stored in $I[random].ext\n\n2. User empties Recycle Bin:\n- MFT entry marked as deleted (free)\n- Clusters marked as available in $Bitmap\n- Actual file data remains on disk (not overwritten)\n- File data persists until clusters reused\n```\n\n**Forensic Window**: Time between deletion and overwrite (depends on disk activity).\n\n### MFT-Based Recovery\n\n**When**: MFT entry still exists but marked deleted.\n\n**Process**:\n1. Parse MFT\n2. Find entries marked as deleted\n3. Extract metadata (name, size, timestamps)\n4. Read data runs (cluster locations)\n5. Copy data from clusters\n6. Reconstruct file\n\n**Tools**:\n```bash\n# Autopsy (GUI)\n# Loads disk image, automatically recovers deleted files\n\n# The Sleuth Kit (CLI)\nfls -d disk.dd  # List deleted files\nicat disk.dd 12345 > recovered_file.docx  # Recover file by MFT entry number\n```\n\n**Limitations**:\n- Clusters may be partially overwritten (incomplete recovery)\n- Fragmented files harder to recover\n- MFT entry may be overwritten/reused\n\n### File Carving\n\n**When**: MFT entry destroyed or file never had MFT entry (e.g., unallocated space, memory dump).\n\n**Concept**: Search raw disk data for file signatures (magic numbers).\n\n**File Signatures** (Headers/Footers):\n```\nPDF:  %PDF at start, %%EOF at end\nJPEG: FF D8 FF at start, FF D9 at end\nPNG:  89 50 4E 47 at start\nZIP:  50 4B 03 04 at start\nEXE:  4D 5A (MZ) at start\nDOCX: 50 4B 03 04 (ZIP format) at start\n```\n\n**Carving Process**:\n```\n1. Read disk sequentially (sector by sector)\n2. Search for file signature (header)\n3. Read until footer found or max file size reached\n4. Extract data between header and footer\n5. Validate file (check if it opens correctly)\n6. Save recovered file\n```\n\n**Example (Scalpel config)**:\n```bash\n# scalpel.conf\npdf y 5000000 %PDF PDFEOF\njpg y 20000000 \\xff\\xd8\\xff \\xff\\xd9\npng y 20000000 \\x89PNG \\x49\\x45\\x4E\\x44\nzip y 50000000 PK\\x03\\x04\n```\n\n**Running Scalpel**:\n```bash\nscalpel -c scalpel.conf -o output/ disk.dd\n# Carves all matching files from disk image\n```\n\n**Limitations**:\n- Fragmented files not recovered correctly\n- False positives (header signature matches random data)\n- File boundaries ambiguous (no clear footer)\n\n**Advanced Carving** (PhotoRec, Foremost):\n- Multiple file type support\n- Smart carving (validates file structure)\n- Fragment recovery\n\n## Alternate Data Streams (ADS)\n\n### What are ADS?\n\nNTFS feature allowing multiple data streams within single file.\n\n**Normal File**:\n```\nfile.txt  (default stream: file content)\n```\n\n**File with ADS**:\n```\nfile.txt (default stream: visible content)\nfile.txt:hidden (alternate stream: hidden content)\nfile.txt:malware.exe (alternate stream: hidden executable)\n```\n\n**Characteristics**:\n- ADS not visible in Explorer\n- ADS not counted in file size (dir shows size of default stream only)\n- ADS can contain any data (text, executables, etc.)\n\n### Creating ADS\n\n**Command Line**:\n```cmd\n# Create file with ADS\necho \"This is hidden\" > file.txt:hidden\n\n# Read ADS\nmore < file.txt:hidden\n\n# Execute from ADS\ntype malware.exe > legit.txt:malware.exe\nwmic process call create \"C:\\path\\to\\legit.txt:malware.exe\"\n```\n\n**PowerShell**:\n```powershell\n# Create ADS\nSet-Content -Path .\\file.txt -Stream hidden -Value \"Secret data\"\n\n# Read ADS\nGet-Content -Path .\\file.txt -Stream hidden\n\n# List all streams\nGet-Item .\\file.txt -Stream *\n```bash\n\n### ADS in Attacks\n\n**Hiding Malware**:\n```\nAttacker creates:\ninnocent.txt (contains legitimate text)\ninnocent.txt:malware.exe (contains malicious executable)\n\nUser sees: innocent.txt (looks normal)\nAntivirus may not scan ADS\nMalware hidden from dir listing\n```\n\n**Zone.Identifier** (Legitimate ADS):\n```\nDownloaded files have ADS: filename:Zone.Identifier\nContents:\n[ZoneTransfer]\nZoneId=3  (3 = Internet)\n\nWindows uses this to show \"downloaded from internet\" warning\n```bash\n\n### Detecting ADS\n\n**Command Line**:\n```cmd\n# Find files with ADS\ndir /r\n# Shows all streams including ADS\n\n# Streams.exe (Sysinternals)\nstreams.exe -s C:\\\n# Recursively finds all ADS\n```\n\n**PowerShell**:\n```powershell\n# Find ADS across directory\nGet-ChildItem -Path C:\\ -Recurse | ForEach-Object {\nGet-Item $_.FullName -Stream * -ErrorAction SilentlyContinue |\nWhere-Object {$_.Stream -ne ':$DATA'}\n} | Select-Object FileName, Stream, Length\n```\n\n**Forensic Tools**:\n- FTK Imager: Shows ADS in file listing\n- Autopsy: Detects and displays ADS\n- Sleuth Kit: Can extract ADS\n\n### Removing ADS\n\n```powershell\n# Remove specific ADS\nRemove-Item -Path .\\file.txt -Stream hidden\n\n# Copy file (removes all ADS)\nCopy-Item file.txt newfile.txt\n# newfile.txt has no ADS\n```bash\n\n## Forensic Imaging\n\n### Why Image?\n\n**Forensic imaging** creates exact bit-for-bit copy of disk.\n\n**Reasons**:\n1. **Preserve original**: Work on copy, not evidence disk\n2. **Legal admissibility**: Prove data not tampered with\n3. **Repeatability**: Multiple analysts can examine same image\n4. **Hash verification**: Cryptographic proof image matches original\n\n### Imaging vs Backup\n\n**Backup**: Copies files (doesn't capture deleted files, slack space, free space)\n**Forensic Image**: Exact copy of every sector (includes unallocated space, deleted files, slack)\n\n### Write Blockers\n\n**Problem**: Connecting disk to analysis workstation modifies disk (OS writes timestamps, creates temp files).\n\n**Solution**: Write blocker prevents any writes to evidence disk.\n\n**Types**:\n- **Hardware Write Blocker**: Physical device between disk and computer\n- **Software Write Blocker**: Software that blocks write operations\n\n**Verification**: Test write blocker by attempting write operation (should fail).\n\n### Creating Forensic Images\n\n**Tools**:\n\n**FTK Imager** (GUI, Free):\n```\n1. File → Create Disk Image\n2. Select source (physical drive, logical drive, file)\n3. Add destination (E01, raw, AFF)\n4. Enter case information\n5. Verify image (hash check)\n```\n\n**dd (Linux/Mac)**:\n```bash\n# Basic imaging\nsudo dd if=/dev/sda of=disk.dd bs=4096 status=progress\n# if = input file (source disk)\n# of = output file (destination image)\n# bs = block size (4096 bytes)\n\n# With error handling\nsudo dd if=/dev/sda of=disk.dd bs=4096 conv=noerror,sync status=progress\n# conv=noerror,sync continues on read errors, pads with zeros\n```\n\n**dc3dd** (Enhanced dd):\n```bash\nsudo dc3dd if=/dev/sda of=disk.dd hash=md5 hash=sha256 log=imaging.log\n# Computes hashes during imaging\n# Creates detailed log\n```\n\n**Guymager** (GUI, Linux):\n```\n1. Select source drive\n2. Right-click → Acquire image\n3. Choose format (dd, EWF/E01, AFF)\n4. Set destination\n5. Image with hash verification\n```bash\n\n### Image Formats\n\n**Raw (.dd, .img)**:\n- **Format**: Exact bit-for-bit copy\n- **Pros**: Simple, universal compatibility\n- **Cons**: No compression, no metadata, large file size\n- **Use**: Simple cases, compatibility\n\n**EnCase (.E01, .Ex01)**:\n- **Format**: Expert Witness Format (EWF)\n- **Pros**: Compression (~50% reduction), metadata (case info, hash), splitting (multiple files)\n- **Cons**: Proprietary (but tools support it)\n- **Use**: Law enforcement, professional forensics\n\n**AFF (Advanced Forensic Format)**:\n- **Format**: Open source alternative to E01\n- **Pros**: Compression, metadata, open standard\n- **Cons**: Less tool support than E01\n- **Use**: Open source investigations\n\n### Verifying Image Integrity\n\n**Hashing**:\n```bash\n# Hash original disk\nmd5sum /dev/sda > original.md5\nsha256sum /dev/sda > original.sha256\n\n# Hash image\nmd5sum disk.dd > image.md5\nsha256sum disk.dd > image.sha256\n\n# Compare hashes\ndiff original.md5 image.md5\n# If identical → Image is exact copy\n```\n\n**Chain of Custody**: Document every step\n```\nEvidence Log:\nDate/Time: 2025-10-27 14:30:00\nInvestigator: John Doe\nAction: Created forensic image of disk\nDisk: WD 500GB SN:12345\nImage: case001.E01\nMD5: a1b2c3d4...\nSHA256: e5f6a7b8...\nTool: FTK Imager 4.7\nWrite Blocker: Tableau T8\n```bash\n\n## Practical Disk Forensics\n\n### Mounting Forensic Images (Read-Only)\n\n**Linux**:\n```bash\n# Mount raw image\nsudo mkdir /mnt/evidence\nsudo mount -o ro,loop disk.dd /mnt/evidence\n# ro = read-only (prevent modification)\n\n# Mount E01 image\nsudo apt install ewf-tools\newfmount disk.E01 /mnt/ewf\nsudo mount -o ro,loop /mnt/ewf/ewf1 /mnt/evidence\n```\n\n**Windows** (Arsenal Image Mounter):\n```\n1. Download Arsenal Image Mounter\n2. File → Mount disk image\n3. Select image file\n4. Check \"Read-only\" and \"Fake disk signatures\"\n5. Mount (appears as new drive letter)\n```bash\n\n### Analyzing MFT\n\n**Extracting MFT**:\n```bash\n# Using FTK Imager\n1. Add Evidence Item (disk image)\n2. Navigate to [root]\\$MFT\n3. Right-click → Export Files\n4. Save $MFT file\n\n# Using dd\nsudo dd if=/dev/sda1 of=mft.raw bs=1024 skip=0 count=65536\n# Extracts first 64 MB (typically includes entire MFT)\n```\n\n**Parsing MFT** (MFTECmd):\n```powershell\n# Eric Zimmerman's MFTECmd\nMFTECmd.exe -f \"C:\\Cases\\$MFT\" --csv \"C:\\Output\" --csvf mft_parsed.csv\n# Outputs CSV with all MFT entries and metadata\n```\n\n**Analysis**:\n```python\nimport pandas as pd\n\n# Load parsed MFT\ndf = pd.read_csv('mft_parsed.csv')\n\n# Find recently created files\nrecent = df[df['Created'] > '2025-10-26']\nprint(recent[['FileName', 'Created', 'FilePath']])\n\n# Find files with suspicious extensions\nsuspicious = df[df['FileName'].str.endswith(('.exe', '.dll', '.ps1'))]\nprint(suspicious[['FileName', 'Created', 'FilePath']])\n\n# Find timestomping (SI != FN timestamps)\ntimestomp = df[df['Modified_SI'] != df['Modified_FN']]\nprint(timestomp[['FileName', 'Modified_SI', 'Modified_FN']])\n```bash\n\n### Timeline Analysis from MFT\n\n**Goal**: Reconstruct user activity chronologically.\n\n```bash\n# Using mactime (Sleuth Kit)\nfls -r -m C: disk.dd > bodyfile.txt\nmactime -b bodyfile.txt -d > timeline.csv\n```\n\n**Timeline Output**:\n```\nDate,Time,File,Activity\n2025-10-26,14:30:00,C:/Users/john/Downloads/malware.exe,Created\n2025-10-26,14:31:15,C:/Users/john/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup/persistence.lnk,Created\n2025-10-26,14:32:00,C:/Windows/System32/cmd.exe,Modified\n```\n\n**Analysis**: Timeline reveals malware downloaded, persistence established via Startup folder.\n\n### Slack Space Analysis\n\n**Extract Slack Space**:\n```bash\n# Using Sleuth Kit\nblkls disk.dd > unallocated.dd\n# Extracts all unallocated/slack space\n\n# Search for keywords in slack space\nstrings unallocated.dd | grep -i \"password\"\n```\n\n**Forensic Value**: Slack space can contain:\n- Remnants of deleted files\n- Overwritten data\n- Sensitive information (passwords, credit cards)\n\n## Key Takeaways\n\n1. **File deletion doesn't erase data** - marks space available, data remains until overwritten\n2. **MFT is NTFS catalog** - Contains metadata for all files (timestamps, size, location)\n3. **MACB timestamps** - Modified, Accessed, Changed, Born (four timestamps per file)\n4. **$STANDARD_INFO vs $FILE_NAME** - SI easily manipulated, FN more reliable\n5. **File carving** - Recover files by searching for headers/footers (when MFT entry lost)\n6. **Alternate Data Streams** - Hidden NTFS feature, used by malware\n7. **Forensic imaging** - Bit-for-bit copy with hash verification (preserves evidence)\n8. **Write blockers** - Prevent modifications to evidence disk\n9. **Slack space** - Unused cluster space, can contain remnants\n10. **Timeline analysis** - Reconstruct activity from filesystem metadata\n\nDisk forensics reveals what happened on a system - even when users try to hide it. Master the file system and you master evidence recovery."
      },
      "ascii_art": "NTFS STRUCTURE\n\n┌─────────────────────────────────────┐\n│     NTFS VOLUME                     │\n├─────────────────────────────────────┤\n│ Boot Sector                         │\n│ ($Boot)                             │\n├─────────────────────────────────────┤\n│ Master File Table (MFT)             │\n│ ($MFT)                              │\n│ ┌─────────────────────────────────┐ │\n│ │ Entry 0: $MFT                   │ │\n│ │ Entry 1: $MFTMirr               │ │\n│ │ Entry 2: $LogFile               │ │\n│ │ Entry 3: $Volume                │ │\n│ │ Entry 4: $AttrDef               │ │\n│ │ Entry 5: . (root directory)    │ │\n│ │ Entry 6: $Bitmap                │ │\n│ │ ...                             │ │\n│ │ Entry 100: document.docx        │ │\n│ │ Entry 101: photo.jpg            │ │\n│ └─────────────────────────────────┘ │\n├─────────────────────────────────────┤\n│ System Files                        │\n│ ($LogFile, $Bitmap, etc.)          │\n├─────────────────────────────────────┤\n│ User Data (Files and Directories)   │\n│                                     │\n│ [Clusters containing file content]  │\n└─────────────────────────────────────┘\n\nMFT ENTRY STRUCTURE\n\n┌───────────────────────────────────┐\n│ MFT Entry #12345 (1024 bytes)    │\n├───────────────────────────────────┤\n│ Standard Information              │\n│  - Created: 2025-10-26 14:30     │\n│  - Modified: 2025-10-27 09:15    │\n│  - Accessed: 2025-10-27 10:00    │\n│  - Changed: 2025-10-27 09:15     │\n│  - Attributes: Archive           │\n├───────────────────────────────────┤\n│ File Name                         │\n│  - Name: document.docx            │\n│  - Parent Directory: MFT Entry 50│\n│  - Created: 2025-10-26 14:30     │\n│  - Modified: 2025-10-27 09:15    │\n├───────────────────────────────────┤\n│ Security Descriptor               │\n│  - Owner: DOMAIN\\user             │\n│  - Permissions: Read/Write        │\n├───────────────────────────────────┤\n│ Data (or Data Runs)               │\n│  - Size: 45,678 bytes             │\n│  - Clusters: 12                   │\n│  - Location: Clusters 500000-500011│\n└───────────────────────────────────┘\n\nFILE DELETION PROCESS\n\n1. Active File:\n   MFT Entry: [Active] → Data in Clusters 1000-1005\n   $Bitmap: [1][1][1][1][1][1] (Clusters in use)\n\n2. User Deletes File:\n   MFT Entry: [Deleted] → Data STILL in Clusters 1000-1005\n   $Bitmap: [0][0][0][0][0][0] (Clusters marked free)\n   [FILE DATA STILL ON DISK]\n\n3. After Overwrite:\n   MFT Entry: [Reused for new file]\n   Clusters: [New data overwrites old data]\n   [FILE DATA LOST]\n\nFORENSIC WINDOW: Time between step 2 and 3\n\nALTERNATE DATA STREAMS\n\nNormal File View:\n  file.txt (1 KB)\n  \nActual NTFS Structure:\n  file.txt::$DATA (1 KB - default stream)\n  file.txt:hidden::$DATA (500 bytes - ADS)\n  file.txt:malware.exe::$DATA (50 KB - ADS)\n  \n  Total on disk: 51.5 KB\n  Explorer shows: 1 KB (only default stream)\n  \nAttacker uses ADS to hide malware!\n\nFILE CARVING PROCESS\n\nRaw Disk Data:\n  [Random bytes] FF D8 FF [JPEG data] FF D9 [Random bytes]\n       ↑                               ↑\n    JPEG Start                      JPEG End\n    Signature                       Signature\n    \nCarver:\n  1. Scans disk for FF D8 FF (JPEG header)\n  2. Reads data until FF D9 (JPEG footer)\n  3. Extracts everything between\n  4. Saves as recovered.jpg\n  5. Validates (can image viewer open it?)",
      "examples": [
        {
          "scenario": "Recovering Deleted Evidence in Employee Misconduct Case",
          "explanation": "HR reports employee potentially leaked confidential documents before termination. Forensic analyst images employee's workstation drive (write blocker + FTK Imager). Analysis: (1) Parse MFT, find 15 deleted .docx files with 'CONFIDENTIAL' in filename. (2) Check MFT timestamps: Files deleted 1 hour before employee left building. (3) Recover files using MFT data runs (clusters not yet overwritten). (4) File contents confirm leaked documents. (5) Check $Recycle.Bin metadata ($I files) - shows files deleted manually, not automated cleanup. (6) Timeline analysis shows: Document opened 14:30, USB device connected 14:35 (from registry), documents deleted 14:40, employee badge out 15:00. Evidence: Employee opened confidential docs, likely copied to USB, deleted originals, left. Recovered deleted files + timeline = strong evidence for legal action."
        },
        {
          "scenario": "Detecting Malware via Alternate Data Streams",
          "explanation": "Antivirus found no malware but system shows signs of compromise (unusual network traffic, suspicious processes). Forensic analyst searches for ADS: (1) Runs 'streams.exe -s C:\\' (Sysinternals), finds C:\\Windows\\System32\\calc.exe:update.exe (50 KB). (2) Legitimate calc.exe is 27 KB, but 'dir' shows 27 KB (ADS not counted). (3) Extracts ADS: 'more < calc.exe:update.exe > extracted_malware.exe'. (4) Analysis reveals backdoor trojan. (5) Checks other files, finds 5 more executables with ADS. Attack method: Attacker used ADS to hide malware in legitimate system files. AV scanned default streams only (calc.exe is legitimate), missed ADS. Network traffic came from ADS-hidden malware. Mitigation: Remove ADS, investigate how attacker gained access, deploy ADS monitoring."
        },
        {
          "scenario": "Timestomping Detection During Incident Response",
          "explanation": "Investigating suspected APT compromise. Analyst reviews recently created files in C:\\Windows\\System32. Finds 'svchost32.exe' (note '32' - similar to legitimate svchost.exe). File properties show: Created: 2015-07-15 (10 years ago), Modified: 2015-07-15. Suspicious: Why would old system file appear during investigation? Analyst extracts MFT, compares $STANDARD_INFORMATION vs $FILE_NAME timestamps. Result: $SI timestamps show 2015 (manipulated), $FN timestamps show 2025-10-26 (actual creation - yesterday!). Conclusion: Attacker used timestomping (tools like timestomp.exe) to make malware appear old/legitimate. Manipulated $SI timestamps but couldn't modify $FN (requires direct MFT editing with system offline). $FN revealed true creation date. Analysis of svchost32.exe confirms malware. Timestomping detected via MFT forensics - attacker's anti-forensics technique failed."
        }
      ]
    },
    {
      "type": "video",
      "content": {
        "title": "Video: Disk Forensics and File System Analysis Overview",
        "url": "https://www.youtube.com/embed/Vh_h6NfLkAg",
        "description": "Watch this video for a visual introduction to the concepts covered in this lesson."
      }
    },
    {
      "block_id": "3c4d5e6f-7a8b-9c0d-1e2f-3a4b5c6d7e8f",
      "type": "quiz",
      "content": {
        "text": "Test your disk forensics knowledge",
        "questions": [
          {
            "question": "When a file is deleted in Windows, what actually happens to the data?",
            "options": [
              "Data is immediately erased from disk",
              "Data is encrypted and cannot be recovered",
              "MFT entry marked as deleted and clusters marked available, but actual data remains on disk until overwritten",
              "Data is moved to a hidden partition"
            ],
            "correct_answer": 2,
            "explanation": "File deletion in NTFS: (1) MFT entry marked as deleted (available for reuse), (2) Clusters marked as free in $Bitmap, (3) Actual file data REMAINS on disk until those clusters are allocated to a new file and overwritten. This is why deleted file recovery works - the data persists. Not immediately erased (would be slow), not encrypted, not moved. Forensic window = time between deletion and overwrite."
          },
          {
            "question": "What is the Master File Table (MFT) in NTFS?",
            "options": [
              "A backup of deleted files",
              "A database containing an entry for every file and directory with metadata (name, size, timestamps, location)",
              "A table of file permissions",
              "A cache of recently accessed files"
            ],
            "correct_answer": 1,
            "explanation": "MFT is NTFS's central catalog - a database with one entry (record) per file/directory. Each MFT entry contains: filename, MACB timestamps (Modified, Accessed, Changed, Born), size, attributes, security descriptor, data runs (cluster locations or file content if small). MFT is first place forensic analysts look - provides complete file listing even for deleted files (if MFT entry not overwritten). Not a backup, permission table, or cache - it's the master catalog."
          },
          {
            "question": "What forensic technique recovers files when the MFT entry is destroyed?",
            "options": [
              "Registry analysis",
              "File carving (searching for file signatures in raw disk data)",
              "Event log analysis",
              "Memory forensics"
            ],
            "correct_answer": 1,
            "explanation": "File carving searches raw disk data for file signatures (magic numbers/headers). Example: JPEG starts with FF D8 FF, ends with FF D9. Carver scans disk, finds JPEG header, reads until footer, extracts data, saves as recovered file. Used when: (1) MFT entry destroyed/overwritten, (2) Unallocated space analysis, (3) Memory dumps. Doesn't rely on file system metadata. Tools: Scalpel, PhotoRec, Foremost. Registry/event logs don't contain file data. Memory forensics is different technique."
          },
          {
            "question": "What are Alternate Data Streams (ADS) in NTFS and why are they significant for security?",
            "options": [
              "Backup copies of files created automatically",
              "A feature allowing multiple data streams within a single file, used by malware to hide data",
              "Compressed versions of large files",
              "Network transfer protocols"
            ],
            "correct_answer": 1,
            "explanation": "ADS = NTFS feature allowing multiple data streams per file. Normal: file.txt contains visible content. With ADS: file.txt:hidden contains hidden content, file.txt:malware.exe contains hidden executable. Security concern: Malware hides in ADS (not visible in Explorer, not counted in file size, may evade AV). Example: Legitimate file.txt + ADS with trojan. Detection: dir /r, streams.exe, Get-Item -Stream *. Not backups, compression, or network protocols - it's a file system feature attackers abuse."
          },
          {
            "question": "Why is forensic imaging with hash verification important?",
            "options": [
              "Makes the image smaller",
              "Creates bit-for-bit copy and cryptographic proof that image matches original, preserving evidence integrity",
              "Speeds up analysis",
              "Automatically finds malware"
            ],
            "correct_answer": 1,
            "explanation": "Forensic imaging creates exact bit-for-bit copy of disk (every sector including deleted files, slack space, unallocated space). Hash verification (MD5, SHA-256) proves image matches original - if hashes match, image is mathematically proven identical. Importance: (1) Preserves original evidence (work on copy), (2) Legal admissibility (prove not tampered with), (3) Repeatability (multiple analysts examine same data). Not about size/speed/malware detection - about evidence integrity and legal validity."
          }
        ]
      }
    },
    {
      "block_id": "4d5e6f7a-8b9c-0d1e-2f3a-4b5c6d7e8f9a",
      "type": "reflection",
      "content": {
        "text": "## Reflect on Disk Forensics\n\n**Question 1**: You're investigating a data breach. Suspect deleted files before forensics team arrived. You create forensic image and find:\n- 50 deleted .xlsx files in MFT (marked deleted)\n- $Bitmap shows those clusters now free\n- Files deleted 2 hours ago\n- Disk 40% full (moderate activity)\n\nWhat is likelihood of successful recovery? What factors affect recovery? What tools/techniques would you use?\n\n**Question 2**: Analyzing suspect's hard drive, you find:\n```\nFile: harmless.txt (1 KB)\nDir shows size: 1 KB\nDisk space used: 25 MB\nstreams.exe output:\nharmless.txt:$DATA (1 KB)\nharmless.txt:backup.zip:$DATA (25 MB)\n```\nWhat's happening? Is this suspicious? How would you extract and analyze the hidden data?\n\n**Question 3**: MFT analysis reveals:\n```\nFile: important_document.docx\n$STANDARD_INFO timestamps:\nCreated: 2020-01-15 10:00:00\nModified: 2020-01-15 10:30:00\n$FILE_NAME timestamps:\nCreated: 2025-10-27 14:00:00\nModified: 2025-10-27 14:15:00\n```\nWhat does this indicate? What attack technique was used? How reliable are these timestamps?\n\n**Question 4**: Compare these two forensic acquisition scenarios:\n\n**Scenario A**:\n- Boot suspect laptop into Windows\n- Connect external USB drive\n- Copy C:\\ contents to USB\n- Create MD5 hash of copied files\n\n**Scenario B**:\n- Connect suspect laptop drive to forensic workstation via hardware write blocker\n- Boot forensic workstation (not suspect drive)\n- Create bit-for-bit image using FTK Imager\n- Verify image with MD5 and SHA-256 hashes\n- Document chain of custody\n\nWhich is forensically sound? What's wrong with Scenario A? What evidence would be lost/contaminated?\n\n**Question 5**: You need to analyze 10 TB RAID array from compromised file server. Considerations:\n- Storage: Limited space for 10 TB image\n- Time: Imaging will take 24+ hours\n- Priority: Need to identify attacker's initial access point quickly\n- Scope: Suspect focuses on one specific directory\n\nDesign forensic acquisition and analysis strategy balancing:\n- Forensic soundness (proper imaging)\n- Time constraints (need answers fast)\n- Resource limitations (storage space)\n- Targeted vs comprehensive analysis"
      }
    }
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Understand NTFS architecture including MFT, clusters, and system files",
    "Explain how file deletion works and why deleted files can be recovered",
    "Perform deleted file recovery using MFT-based and file carving techniques",
    "Analyze NTFS timestamps (MACB) to reconstruct file activity",
    "Detect timestomping by comparing $STANDARD_INFO vs $FILE_NAME timestamps",
    "Identify and extract Alternate Data Streams used to hide malware",
    "Create forensically sound disk images with hash verification",
    "Understand and apply forensic imaging best practices including write blockers"
  ],
  "post_assessment": [
    {
      "question": "What is the Master File Table (MFT) in NTFS?",
      "type": "multiple_choice",
      "options": [
        "A list of all deleted files",
        "A database containing metadata for every file and directory including timestamps, size, and location",
        "The boot sector of the disk",
        "A backup of important system files"
      ],
      "correct_answer": "A database containing metadata for every file and directory including timestamps, size, and location",
      "explanation": "The MFT is NTFS's central catalog - a database with one entry per file/directory. Each MFT entry contains: filename, four timestamps (Modified, Accessed, Changed, Born), file size, attributes, security descriptor, and data runs (cluster locations). The MFT is the first place forensic analysts look for file information, including deleted files if MFT entries haven't been overwritten yet.",
      "question_id": "fa35e176-c562-4a57-af54-5cd53578d854",
      "difficulty": 2
    },
    {
      "question": "Why can deleted files often be recovered in NTFS?",
      "type": "multiple_choice",
      "options": [
        "Windows creates automatic backups of all files",
        "When files are deleted, the MFT entry is marked as deleted and clusters are marked available, but the actual data remains on disk until overwritten",
        "Deleted files are moved to a hidden recovery partition",
        "File deletion only removes the filename, not the content"
      ],
      "correct_answer": "When files are deleted, the MFT entry is marked as deleted and clusters are marked available, but the actual data remains on disk until overwritten",
      "explanation": "File deletion in NTFS doesn't erase data - it marks the MFT entry as deleted (available for reuse) and marks the clusters as free in $Bitmap. The actual file data remains on disk until those clusters are allocated to new files and overwritten. This creates a 'forensic window' where deleted files can be recovered. The window closes when disk activity overwrites those clusters.",
      "question_id": "92fa72c9-3adc-4514-b992-b4c9c262be7d",
      "difficulty": 2
    },
    {
      "question": "What are Alternate Data Streams (ADS) and why are they significant for security?",
      "type": "multiple_choice",
      "options": [
        "Encrypted backups of sensitive files",
        "An NTFS feature allowing multiple data streams within one file, commonly abused by malware to hide data",
        "Network protocols for file transfer",
        "Compressed versions of large files"
      ],
      "correct_answer": "An NTFS feature allowing multiple data streams within one file, commonly abused by malware to hide data",
      "explanation": "ADS is an NTFS feature allowing multiple data streams per file (e.g., file.txt:hidden or file.txt:malware.exe). Security significance: Malware hides executables or data in ADS - not visible in Windows Explorer, not counted in file size displayed by 'dir', may evade antivirus. Detection requires specific tools (dir /r, streams.exe, Get-Item -Stream *). Legitimate uses exist (Zone.Identifier for downloaded files) but it's commonly abused.",
      "question_id": "62ebbd3d-cc0a-4464-b53b-20d3099c41c1",
      "difficulty": 2
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "minimum_effective_dose",
    "teach_like_im_10",
    "memory_hooks",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ]
}