{
  "lesson_id": "th-006-edr",
  "domain": "threat_hunting",
  "title": "EDR for Threat Hunters",
  "difficulty": 2,
  "order_index": 6,
  "prerequisites": ["th-001-fundamentals", "th-003-windows-event-logs"],
  "concepts": [
    "Endpoint Detection and Response platforms",
    "EDR telemetry vs traditional logs",
    "Hunting with CrowdStrike Falcon",
    "Carbon Black and Microsoft Defender ATP",
    "Query languages (KQL, Splunk, custom EDR syntax)",
    "Cross-endpoint hunting and correlation"
  ],
  "estimated_time": 50,
  "learning_objectives": [
    "Understand EDR capabilities vs traditional endpoint protection",
    "Hunt threats using EDR query languages",
    "Correlate EDR telemetry across multiple endpoints",
    "Detect lateral movement with EDR visibility",
    "Build EDR hunt queries for common attack patterns",
    "Leverage EDR for real-time threat hunting"
  ],
  "post_assessment": [
    {
      "question": "What is the primary advantage of EDR over traditional antivirus?",
      "options": [
        "EDR is cheaper",
        "EDR provides continuous monitoring and behavioral detection, not just signatures",
        "EDR works on more operating systems",
        "EDR requires less configuration"
      ],
      "correct_answer": 1,
      "difficulty": 1,
      "type": "multiple_choice"
    },
    {
      "question": "Which EDR capability is most valuable for threat hunting?",
      "options": [
        "Automatic remediation",
        "Historical telemetry with query capability",
        "Real-time alerts only",
        "Integration with email"
      ],
      "correct_answer": 1,
      "difficulty": 2,
      "type": "multiple_choice"
    },
    {
      "question": "What does KQL stand for in Microsoft Defender ATP?",
      "options": [
        "Kernel Query Language",
        "Kusto Query Language",
        "Key Query Logic",
        "Kill Query List"
      ],
      "correct_answer": 1,
      "difficulty": 2,
      "type": "multiple_choice"
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "minimum_effective_dose",
    "memory_hooks"
  ],
  "content_blocks": [
    {
      "type": "explanation",
      "content": {
        "text": "# EDR: The Hunter's Force Multiplier\n\n**Endpoint Detection and Response (EDR)** platforms are the modern threat hunter's most powerful tool. EDR provides **continuous monitoring**, **behavioral detection**, and **historical telemetry** across thousands of endpoints—something impossible with manual log analysis.\n\n## Why EDR Changed Threat Hunting\n\n**Before EDR (Pre-2015)**:\n- Hunt on one endpoint at a time\n- Manually collect logs via RDP/SSH\n- Limited visibility (Windows Event Logs only)\n- No cross-endpoint correlation\n- **Hunt time**: Hours per endpoint\n\n**With EDR (2015+)**:\n- Hunt across entire fleet simultaneously\n- Query thousands of endpoints in seconds\n- Rich telemetry (processes, network, file operations)\n- Automated correlation\n- **Hunt time**: Minutes across enterprise\n\n**Real-World Impact**:\n- **Target breach (2013)**: No EDR, manual investigation took weeks\n- **SolarWinds (2020)**: EDR telemetry helped identify compromised systems in days\n\n## EDR vs Traditional Endpoint Security\n\n| Capability | Antivirus | Sysmon | EDR |\n|------------|-----------|--------|-----|\n| **Detection** | Signature-based | N/A (logging only) | Behavioral + ML |\n| **Visibility** | File scans | Local logs | Full endpoint telemetry |\n| **Historical Data** | None | Local logs (limited retention) | Centralized, 90+ days |\n| **Query Capability** | None | Manual log parsing | Advanced query languages |\n| **Cross-Endpoint** | None | None | ✅ Hunt across fleet |\n| **Response** | Quarantine | None | Isolate, remediate, investigate |\n\n## Major EDR Platforms\n\n### 1. CrowdStrike Falcon\n\n**Strengths**:\n- Cloud-native, lightweight agent\n- Excellent threat intelligence integration\n- Falcon Query Language (FQL) for hunting\n- Real-time visibility\n\n**Hunt Query Example (FQL)**:\n```\nevent_simpleName=ProcessRollup2 \n| regex FileName=\"(?i)(mimikatz|procdump|pwdump)\"\n| table ComputerName, FileName, CommandLine, UserName\n```\n\n### 2. Carbon Black (VMware)\n\n**Strengths**:\n- Strong behavioral detection\n- Binary analysis and reputation\n- Live response for interactive hunting\n\n**Hunt Query Example (CB Query)**:\n```\nprocess_name:powershell.exe AND cmdline:*-enc* AND -parent_name:explorer.exe\n```\n\n### 3. Microsoft Defender ATP (Now Defender for Endpoint)\n\n**Strengths**:\n- Native Windows integration\n- Kusto Query Language (KQL)\n- Free for Microsoft 365 E5 customers\n\n**Hunt Query Example (KQL)**:\n```kusto\nDeviceProcessEvents\n| where FileName =~ \"powershell.exe\"\n| where ProcessCommandLine contains \"-enc\"\n| where InitiatingProcessFileName !~ \"explorer.exe\"\n| project Timestamp, DeviceName, ProcessCommandLine, AccountName\n```\n\n### 4. SentinelOne\n\n**Strengths**:\n- AI-powered autonomous response\n- Deep Visibility query language\n- Excellent for ransomware detection\n\n### 5. Elastic Security (Open Source)\n\n**Strengths**:\n- Free and open source\n- Integrates with ELK stack\n- Highly customizable\n\n## EDR Telemetry: What You Get\n\n**Process Events**:\n- Process creation (executable, command-line, parent)\n- Process termination\n- Process injection\n- Module loads (DLL loading)\n\n**Network Events**:\n- Connections (source, destination, port)\n- DNS queries\n- HTTP requests (URLs, user-agents)\n\n**File Events**:\n- File creation, modification, deletion\n- File downloads\n- Executable file writes\n\n**Registry Events** (Windows):\n- Registry key creation/modification\n- Persistence mechanisms\n\n**Authentication Events**:\n- Login success/failure\n- Privilege escalation\n\n**Script Execution**:\n- PowerShell commands\n- JavaScript/VBScript execution\n\n**All with context**: User, timestamp, parent process, file hashes, etc."
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "## Practical EDR Hunting Queries\n\n### Hunt 1: Credential Dumping (Mimikatz)\n\n**Microsoft Defender ATP (KQL)**:\n```kusto\n// Hunt for LSASS memory access (credential dumping)\nDeviceProcessEvents\n| where FileName in~ (\"procdump.exe\", \"procdump64.exe\", \"mimikatz.exe\")\n   or ProcessCommandLine has \"lsass\"\n| project Timestamp, DeviceName, FileName, ProcessCommandLine, AccountName\n| order by Timestamp desc\n```\n\n**CrowdStrike Falcon (FQL)**:\n```\nevent_simpleName=ProcessRollup2\n| search CommandLine=\"*lsass*\" OR FileName IN (\"mimikatz.exe\", \"procdump.exe\")\n| table _time, ComputerName, FileName, CommandLine\n```\n\n### Hunt 2: Lateral Movement via RDP\n\n**Microsoft Defender ATP (KQL)**:\n```kusto\n// Hunt for RDP connections between workstations\nDeviceLogonEvents\n| where LogonType == \"RemoteInteractive\" // RDP\n| where DeviceName startswith \"WS-\" // Workstations\n| where RemoteDeviceName startswith \"WS-\" // To workstations (not servers)\n| project Timestamp, DeviceName, AccountName, RemoteDeviceName, RemoteIP\n| order by Timestamp desc\n```\n\n### Hunt 3: PowerShell-Based Attacks\n\n**Microsoft Defender ATP (KQL)**:\n```kusto\n// Hunt for obfuscated/encoded PowerShell\nDeviceProcessEvents\n| where FileName =~ \"powershell.exe\"\n| where ProcessCommandLine has_any (\"-enc\", \"-w hidden\", \"bypass\", \"IEX\", \"DownloadString\")\n| project Timestamp, DeviceName, ProcessCommandLine, AccountName, InitiatingProcessFileName\n| order by Timestamp desc\n```\n\n**Carbon Black**:\n```\nprocess_name:powershell.exe AND cmdline:(*-enc* OR *bypass* OR *IEX* OR *DownloadString*)\n```\n\n### Hunt 4: Suspicious Process Ancestry\n\n**Microsoft Defender ATP (KQL)**:\n```kusto\n// Hunt for Office spawning suspicious processes\nDeviceProcessEvents\n| where InitiatingProcessFileName in~ (\"winword.exe\", \"excel.exe\", \"powerpnt.exe\")\n| where FileName in~ (\"powershell.exe\", \"cmd.exe\", \"wscript.exe\", \"cscript.exe\")\n| project Timestamp, DeviceName, InitiatingProcessFileName, FileName, ProcessCommandLine\n| order by Timestamp desc\n```\n\n### Hunt 5: Cobalt Strike Named Pipes\n\n**Microsoft Defender ATP (KQL)**:\n```kusto\n// Hunt for Cobalt Strike default named pipe patterns\nDeviceEvents\n| where ActionType == \"NamedPipeEvent\"\n| where AdditionalFields has_any (\"MSSE-\", \"postex_\", \"status_\", \"msagent_\")\n| project Timestamp, DeviceName, AccountName, AdditionalFields\n```\n\n### Hunt 6: Scheduled Task Persistence\n\n**Microsoft Defender ATP (KQL)**:\n```kusto\n// Hunt for suspicious scheduled tasks\nDeviceProcessEvents\n| where FileName =~ \"schtasks.exe\" and ProcessCommandLine has \"/create\"\n| where ProcessCommandLine has_any (\"powershell\", \"cmd.exe\", \"wscript\", \"temp\", \"appdata\")\n| project Timestamp, DeviceName, ProcessCommandLine, AccountName\n```\n\n### Hunt 7: Data Staging (Exfiltration Prep)\n\n**Microsoft Defender ATP (KQL)**:\n```kusto\n// Hunt for large file compression (staging for exfiltration)\nDeviceProcessEvents\n| where FileName in~ (\"7z.exe\", \"winrar.exe\", \"powershell.exe\")\n| where ProcessCommandLine has_any (\"compress\", \"archive\", \".zip\", \".rar\", \".7z\")\n| project Timestamp, DeviceName, FileName, ProcessCommandLine, AccountName\n```\n\n### Hunt 8: SMB Lateral Movement\n\n**Microsoft Defender ATP (KQL)**:\n```kusto\n// Hunt for administrative share access (C$, ADMIN$)\nDeviceNetworkEvents\n| where RemoteUrl has_any (\"\\\\\\\\C$\", \"\\\\\\\\ADMIN$\", \"\\\\\\\\IPC$\")\n| project Timestamp, DeviceName, RemoteUrl, RemoteIP, InitiatingProcessFileName\n```"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "## Real-World Hunt: Detecting Ransomware with EDR\n\n### Background\n\nA financial services company used **Microsoft Defender ATP** to detect and stop a **Conti ransomware** attack before encryption occurred.\n\n### The Hunt\n\n**Day 1: Initial Compromise**\n\n09:00 - Phishing email delivered with malicious macro\n09:15 - User opened Excel document, macro executed\n\n**EDR Telemetry Captured**:\n```kusto\nDeviceProcessEvents\n| where Timestamp between (datetime(2025-01-15 09:00) .. datetime(2025-01-15 10:00))\n| where InitiatingProcessFileName =~ \"excel.exe\"\n| where FileName =~ \"powershell.exe\"\n\n// FOUND:\n// excel.exe → powershell.exe -NoP -W Hidden -Enc [base64]\n```\n\n**Day 1: Reconnaissance (09:20-09:30)**\n\nAttacker ran discovery commands:\n```kusto\nDeviceProcessEvents\n| where DeviceName == \"FINANCE-WS01\"\n| where Timestamp between (datetime(2025-01-15 09:20) .. datetime(2025-01-15 09:30))\n| project FileName, ProcessCommandLine\n\n// FOUND:\n// net.exe user /domain\n// nltest.exe /domain_trusts\n// net.exe group \"Domain Admins\" /domain\n```\n\n**Day 1: Persistence (09:35)**\n\nScheduled task created:\n```kusto\nDeviceProcessEvents\n| where FileName =~ \"schtasks.exe\"\n| where ProcessCommandLine has \"/create\"\n\n// FOUND:\n// schtasks.exe /create /tn \"Updater\" /tr \"powershell.exe -enc...\" /sc minute /mo 5\n```\n\n**Day 2-6: Lateral Movement**\n\n**Hunt Query**:\n```kusto\n// Hunt for RDP from compromised workstation\nDeviceLogonEvents\n| where DeviceName == \"FINANCE-WS01\" or RemoteDeviceName == \"FINANCE-WS01\"\n| where LogonType == \"RemoteInteractive\"\n| project Timestamp, DeviceName, AccountName, RemoteDeviceName\n\n// FOUND:\n// FINANCE-WS01 → FILE-SERVER-03 (day 2)\n// FINANCE-WS01 → DB-SERVER-01 (day 4)\n// FINANCE-WS01 → DC-01 (day 5) [CRITICAL]\n```\n\n**Day 6: Credential Dumping**\n\n```kusto\nDeviceProcessEvents\n| where ProcessCommandLine has \"lsass\"\n| project Timestamp, DeviceName, FileName, ProcessCommandLine\n\n// FOUND:\n// procdump64.exe -ma lsass.exe lsass.dmp\n```\n\n**Day 7: Pre-Ransomware Activity (02:00 AM)**\n\n**Backup Service Deletion**:\n```kusto\nDeviceProcessEvents\n| where FileName in~ (\"vssadmin.exe\", \"wbadmin.exe\", \"wevtutil.exe\")\n| where ProcessCommandLine has_any (\"delete\", \"shadows\", \"catalog\", \"clear\")\n\n// FOUND (across 15 servers):\n// vssadmin.exe delete shadows /all /quiet\n// wbadmin.exe delete catalog -quiet\n// wevtutil.exe clear-log Security\n```\n\n**THIS WAS THE ALERT THAT TRIGGERED RESPONSE**\n\n### Response Timeline\n\n**02:05 AM - Alert Generated**\n- EDR detected simultaneous `vssadmin delete shadows` on 15 servers\n- Automatic high-severity incident created\n- On-call SOC analyst notified\n\n**02:10 AM - Threat Hunter Investigation**\n```kusto\n// Investigate all activity from source host\nDeviceProcessEvents\n| where DeviceName == \"FINANCE-WS01\"\n| where Timestamp > ago(7d)\n| summarize count() by FileName\n| order by count_ desc\n\n// Found extensive reconnaissance, lateral movement, credential dumping\n```\n\n**02:15 AM - Containment**\n1. Isolated FINANCE-WS01 via EDR (network isolation)\n2. Disabled compromised user account\n3. Isolated all 15 servers showing backup deletion\n\n**02:20 AM - Expanded Hunt**\n```kusto\n// Hunt for ransomware executable across all endpoints\nDeviceFileEvents\n| where FileName endswith \".exe\"\n| where FolderPath has_any (\"\\\\temp\\\\\", \"\\\\appdata\\\\\", \"\\\\programdata\\\\\")\n| where FileSize between (100KB .. 5MB) // Typical ransomware size\n| where Timestamp > ago(7d)\n| distinct SHA256, DeviceName\n| join kind=inner (\n    DeviceProcessEvents\n    | where Timestamp > ago(1h)\n) on SHA256\n\n// FOUND: conti.exe on 3 systems, not yet executed\n```\n\n**02:30 AM - Complete Containment**\n- Isolated all 3 systems with ransomware binary\n- Killed scheduled tasks for persistence\n- Reset all domain admin credentials\n- Blocked attacker C2 IPs at firewall\n\n### Attack Stopped Before Encryption\n\n**Timeline Summary**:\n```\nDay 1: Initial compromise\nDay 2-6: Reconnaissance and lateral movement\nDay 7, 02:00: Backup deletion (PRE-RANSOMWARE)\nDay 7, 02:05: EDR ALERT\nDay 7, 02:30: THREAT CONTAINED\nDay 7, 03:00: Ransomware would have executed (PREVENTED)\n```\n\n**Damage Prevented**: $4-8 million (average ransomware cost)\n\n**Key Factors**:\n- ✅ EDR detected backup deletion (critical pre-ransomware indicator)\n- ✅ Cross-endpoint correlation found all compromised systems\n- ✅ Response within 30 minutes (before encryption)\n- ✅ Historical telemetry reconstructed full attack\n\n### Lessons Learned\n\n**What EDR Provided**:\n1. Real-time detection of backup deletion\n2. Complete attack timeline across 7 days\n3. Cross-endpoint lateral movement visibility\n4. Immediate containment capability\n5. Forensic evidence for investigation\n\n**Without EDR**:\n- Backup deletion likely unnoticed until too late\n- No visibility into lateral movement\n- Manual investigation would take days\n- Ransomware would have executed\n\n**Outcome**: Attack stopped, $0 ransom paid, full forensic report within 24 hours."
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "## EDR Memory Aids\n\n### EDRR - EDR Capabilities\n\n**E** - **E**ndpoint visibility (processes, network, files)\n**D** - **D**etection (behavioral, ML-based)\n**R** - **R**esponse (isolate, remediate, investigate)\n**R** - **R**etention (historical telemetry, 90+ days)\n\n### The 3 Qs of EDR Hunting\n\n**Q**uery - Write hunt queries across fleet\n**Q**uick - Results in seconds, not hours\n**Q**uantify - Hunt 10,000 endpoints as easily as 10\n\n### KQL Query Pattern: PWTO\n\n**P** - **P**ick table (DeviceProcessEvents, DeviceNetworkEvents)\n**W** - **W**here clause (filter by FileName, CommandLine)\n**T** - **T**ransform (project, summarize)\n**O** - **O**rder (sort results)\n\n### Visual: EDR Hunt Workflow\n\n```\n[Hypothesis] → [Write Query] → [Execute Across Fleet] → [Analyze]\n     ↓              ↓                    ↓                  ↓\n  \"RDP lateral  KQL/FQL query      10,000 endpoints    True positive?\n   movement\"                        in 30 seconds           ↓\n                                                      [Respond/Contain]\n```"
      }
    },
    {
      "type": "mindset_coach",
      "content": {
        "text": "## Mastering EDR for Threat Hunting\n\n### You've Unlocked Enterprise-Scale Hunting\n\nEDR platforms transform threat hunting from **manual, slow, single-endpoint** to **automated, fast, fleet-wide**. You now understand:\n\n✅ **EDR vs traditional tools**: Continuous monitoring, behavioral detection\n✅ **Major platforms**: CrowdStrike, Carbon Black, Defender ATP\n✅ **Query languages**: KQL, FQL, CB Query\n✅ **Hunt patterns**: Credential dumping, lateral movement, PowerShell attacks\n✅ **Real-world success**: Stopping ransomware before encryption\n\n**You can now hunt across thousands of endpoints simultaneously.**\n\n### Your Action Plan\n\n**This Week**:\n1. **Learn your EDR's query language** (KQL if Defender, FQL if CrowdStrike)\n2. **Run 3 hunt queries** from this lesson in your environment\n3. **Document findings** (even if benign—know what's normal)\n\n**This Month**:\n4. **Build hunt query library** (20+ queries for common threats)\n5. **Create scheduled hunts** (automated weekly execution)\n6. **Integrate with SIEM** (forward EDR alerts and hunt results)\n\n### Remember\n\n**EDR is your force multiplier.** What took hours per endpoint now takes seconds across your entire fleet.\n\n**Next: Threat Intelligence for Hunting** - Learn to use external intelligence to guide your EDR hunts.\n\n**Keep hunting. EDR sees everything.** 🎯"
      }
    }
  ]
}
