{
  "lesson_id": "e5f6a7b8-c9d0-4e1f-2a3b-4c5d6e7f8a9b",
  "domain": "osint",
  "title": "Shodan & IoT Search",
  "difficulty": 2,
  "order_index": 5,
  "prerequisites": ["d4e5f6a7-b8c9-4d0e-1f2a-3b4c5d6e7f8a"],
  "concepts": [
    "Shodan Search Engine Fundamentals",
    "Advanced Shodan Filters and Queries",
    "IoT and ICS Device Discovery",
    "Censys and ZoomEye Alternatives",
    "Vulnerable Device Identification",
    "Webcam and Security Camera OSINT",
    "Industrial Control Systems Reconnaissance",
    "Banner Grabbing and Service Fingerprinting"
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Master Shodan search syntax and filters to discover internet-connected devices",
    "Identify vulnerable IoT devices, webcams, and industrial control systems",
    "Use Censys and ZoomEye as complementary search engines for infrastructure discovery",
    "Understand the security risks of exposed devices and services",
    "Perform ethical reconnaissance on organizational exposure using IoT search engines",
    "Analyze banner information to fingerprint services and identify vulnerabilities"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "content": {
        "text": "Welcome to the world of IoT reconnaissance! You're about to discover that the internet isn't just websites and servers—it's millions of connected devices: industrial control systems, security cameras, smart home devices, medical equipment, and infrastructure that was never designed with security in mind.\n\nShodan has been called 'the most dangerous search engine on the internet.' Why? Because while Google indexes websites, Shodan indexes EVERYTHING connected to the internet—including things that should never be exposed. Printers with open admin panels. Webcams with default passwords. Power plant control systems accessible without authentication. Hospital equipment broadcasting patient data.\n\nHere's what makes this lesson critical: IoT security is often an afterthought. Devices ship with default credentials, get deployed without security hardening, and remain unpatched for years. The result? An attacker's paradise. A defender's nightmare.\n\nJim Kwik teaches: 'Information without application is just entertainment.' This lesson isn't about finding vulnerable devices for exploitation—it's about understanding the massive exposure organizations face from connected devices. As a security professional, you need to know: What devices in my organization are exposed? What vulnerabilities can attackers find using the same tools?\n\nThink like a critical infrastructure defender: every webcam, every router, every IoT sensor is a potential entry point. Red teamers use Shodan to find the weakest links. Blue teamers use Shodan to find exposure before attackers do. Threat intelligence analysts use Shodan to track threat actor infrastructure.\n\nBy the end of this lesson, you'll see the internet differently. You'll realize that security isn't just about protecting servers—it's about securing the millions of connected devices that organizations don't even know they have. Let's explore the IoT attack surface together."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## What is Shodan?\n\nShodan is a search engine for internet-connected devices. Created by John Matherly in 2009, Shodan continuously scans the entire IPv4 address space, connecting to every port on every IP, recording what services respond and what information they reveal.\n\n### How Shodan Works\n\n**Traditional Search Engines (Google)**:\n1. Crawl websites by following links\n2. Index text content\n3. Rank by relevance and authority\n4. Search returns web pages\n\n**Shodan**:\n1. Scan all IPs on specific ports (80, 443, 22, 21, 23, etc.)\n2. Connect and record 'banner' responses (what the service says about itself)\n3. Parse banners for service type, version, device info\n4. Index metadata: location, organization, vulnerabilities\n5. Search returns connected devices\n\n### Banner Grabbing\n\nWhen Shodan connects to a service, it receives a 'banner'—information the service volunteers:\n\n**Example: HTTP Server Banner**\n```\nHTTP/1.1 200 OK\nServer: Apache/2.4.41 (Ubuntu)\nX-Powered-By: PHP/7.4.3\nDate: Tue, 28 Oct 2025 10:30:00 GMT\n```\n\n**What Shodan Learns**:\n- Server type: Apache\n- Version: 2.4.41\n- Operating System: Ubuntu\n- Programming language: PHP 7.4.3\n- This banner reveals the entire technology stack\n\n**Example: SSH Server Banner**\n```\nSSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.3\n```\n\n**What Shodan Learns**:\n- Service: SSH (remote access)\n- Version: OpenSSH 7.6p1\n- OS: Ubuntu\n- Patch level: 4ubuntu0.3\n\n**Example: IoT Device Banner**\n```\nHTTP/1.1 200 OK\nServer: uc-httpd 1.0.0\nWWW-Authenticate: Basic realm=\"IP Camera\"\n```\n\n**What Shodan Learns**:\n- Device type: IP Camera\n- Server: uc-httpd (common in cheap IoT devices)\n- Authentication: Basic (weak)\n\n### What Shodan Indexes\n\n**Infrastructure**:\n- Web servers (Apache, Nginx, IIS)\n- Databases (MongoDB, MySQL, Elasticsearch)\n- FTP servers\n- SSH servers\n- VPN gateways\n- Routers and firewalls\n\n**IoT Devices**:\n- Security cameras / webcams\n- Smart home devices (thermostats, locks, lighting)\n- Industrial sensors\n- Building management systems\n- Network printers\n- Smart TVs\n\n**Industrial Control Systems (ICS)**:\n- SCADA systems (power, water, manufacturing)\n- Programmable Logic Controllers (PLCs)\n- Human-Machine Interfaces (HMIs)\n- Building automation\n- Traffic control systems\n\n**Unusual Devices**:\n- Medical equipment (MRI machines, X-ray systems)\n- Cash registers and POS systems\n- Digital signage\n- Aquarium controllers (seriously)\n- Bitcoin mining operations\n- Internet-connected refrigerators\n\n### The Security Problem\n\nMany of these devices:\n- ✅ Are connected to the internet (by design or misconfiguration)\n- ❌ Were never intended to be publicly accessible\n- ❌ Have default credentials (admin/admin, admin/password)\n- ❌ Have no authentication at all\n- ❌ Run outdated software with known vulnerabilities\n- ❌ Cannot be easily patched or updated\n- ❌ Are not monitored by security teams\n\n**Real Example**:\nIn 2016, the Mirai botnet infected 600,000+ IoT devices (cameras, routers, DVRs) using default credentials found via Shodan-like scanning. The botnet launched the largest DDoS attack in history, taking down major websites including Twitter, Netflix, and Reddit.\n\n### Shodan vs. Traditional Port Scanning\n\n**Traditional Port Scanning (Nmap)**:\n```\nYou → Target IP → Scan ports → Record responses\n- Targeted: You choose specific IPs/ranges\n- Active: You directly connect to targets\n- Detectable: Target's IDS/IPS sees your scans\n- Slow: Scanning millions of IPs takes days/weeks\n- Requires: Your infrastructure and bandwidth\n```\n\n**Shodan**:\n```\nShodan → Entire Internet → Indexed database → You search\n- Comprehensive: Every IP on the internet\n- Passive: You query a database, never touch targets\n- Undetectable: Targets don't know you're searching\n- Fast: Instant results from pre-indexed data\n- Requires: Just a Shodan account\n```\n\n**For Attackers**: Shodan is reconnaissance without leaving a trace\n**For Defenders**: Shodan shows what attackers can already see\n\n### Shodan Accounts and Pricing\n\n**Free Account**:\n- 1 result per search (very limited)\n- Basic filters\n- No API access\n- Good for learning syntax\n\n**Membership ($59/month or $599/year)**:\n- Unlimited results\n- Full filter access\n- API access (100 queries/month)\n- Download data\n- Historical data\n\n**Enterprise**:\n- Higher API limits\n- Custom scanning\n- Priority support\n\n**For Learning**: Start with free account to understand syntax, upgrade when needed for professional use.\n\n### Ethical and Legal Considerations\n\n**Using Shodan is Legal**: Searching a public database is not hacking\n\n**BUT**:\n- ❌ Accessing devices without authorization IS illegal\n- ❌ Using default credentials to log in IS unauthorized access\n- ❌ Exploiting vulnerabilities found via Shodan IS hacking\n- ✅ Searching for YOUR organization's exposure IS good security practice\n- ✅ Responsible disclosure of critical exposures IS ethical\n- ✅ Using Shodan for authorized pentests IS appropriate\n\n**Remember**: Shodan is a reconnaissance tool. Reconnaissance is legal. What you do with the information determines legality and ethics."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Shodan Search Syntax and Filters\n\nShodan's power lies in its filter syntax, allowing precise queries for specific devices, services, and vulnerabilities.\n\n### Basic Search\n\n**Simple Keyword Search**:\n```\napache\n# Returns: All devices with 'apache' in their banner\n# Millions of results\n```\n\n**IP Address Search**:\n```\n8.8.8.8\n# Returns: Information about Google's DNS server at 8.8.8.8\n```\n\n**Hostname Search**:\n```\nhostname:example.com\n# Returns: All IPs associated with example.com domain\n```\n\n### Essential Filters\n\n**port:** (Search by Port Number)\n```\nport:22\n# Returns: All devices with SSH (port 22) open\n\nport:3389\n# Returns: All devices with RDP (Remote Desktop) open\n\nport:80,443\n# Returns: Devices with HTTP or HTTPS\n```\n\n**country:** (Geographic Location)\n```\ncountry:US\n# Returns: Devices in the United States\n\ncountry:CN\n# Returns: Devices in China\n```\n\n**city:** (Specific City)\n```\ncity:\"New York\"\n# Returns: Devices in New York City\n# Use quotes for multi-word cities\n```\n\n**org:** (Organization/ISP)\n```\norg:\"Amazon\"\n# Returns: Devices hosted on AWS\n\norg:\"Google\"\n# Returns: Devices on Google Cloud\n\norg:\"Digital Ocean\"\n# Returns: Devices on DigitalOcean\n```\n\n**net:** (IP Range/CIDR)\n```\nnet:192.168.0.0/16\n# Returns: Devices in this IP range\n\nnet:203.0.113.0/24\n# Returns: Devices in this /24 subnet\n```\n\n**os:** (Operating System)\n```\nos:\"Windows 7\"\n# Returns: Devices running Windows 7 (likely unpatched!)\n\nos:\"Linux\"\n# Returns: Linux devices\n\nos:\"Windows Server 2008\"\n# Returns: Outdated Windows servers\n```\n\n**product:** (Software/Service)\n```\nproduct:\"Apache httpd\"\n# Returns: Apache web servers\n\nproduct:\"Microsoft IIS\"\n# Returns: Microsoft IIS servers\n\nproduct:\"OpenSSH\"\n# Returns: SSH servers\n```\n\n**version:** (Software Version)\n```\nproduct:\"Apache httpd\" version:\"2.4.1\"\n# Returns: Specific Apache version (may have known vulnerabilities)\n```\n\n**vuln:** (CVE Vulnerabilities)\n```\nvuln:CVE-2014-0160\n# Returns: Devices vulnerable to Heartbleed\n\nvuln:CVE-2017-5638\n# Returns: Devices vulnerable to Apache Struts RCE\n```\n\n### Combining Filters (Boolean Logic)\n\n**AND (multiple filters)**:\n```\ncountry:US port:22 product:OpenSSH\n# Returns: SSH servers in the US\n```\n\n**OR (alternative matches)**:\n```\ncity:\"San Francisco\" OR city:\"Los Angeles\"\n# Returns: Devices in either city\n```\n\n**NOT (exclusion)**:\n```\napache -country:US\n# Returns: Apache servers NOT in the US\n```\n\n**Grouping with Parentheses**:\n```\n(city:\"New York\" OR city:\"Boston\") port:80\n# Returns: Web servers in New York or Boston\n```\n\n### Device-Specific Searches\n\n**Webcams and IP Cameras**:\n```\nproduct:\"webcamXP\"\n# Webcam software\n\ntitle:\"IP Camera\"\n# Devices with \"IP Camera\" in web interface title\n\n\"Server: SQ-WEBCAM\"\n# Specific webcam server software\n\nhas_screenshot:true port:80\n# Web interfaces with screenshots (often cameras)\n```\n\n**Network Equipment**:\n```\n\"cisco\" port:23\n# Cisco devices with Telnet open (insecure!)\n\nproduct:\"MikroTik RouterOS\"\n# MikroTik routers\n\ntitle:\"pfSense\"\n# pfSense firewall interfaces\n```\n\n**Industrial Control Systems (ICS/SCADA)**:\n```\nport:502\n# Modbus protocol (industrial automation)\n\nproduct:\"Siemens S7\"\n# Siemens PLCs\n\n\"Schneider Electric\"\n# Schneider Electric ICS devices\n\nport:1911,4911\n# Niagara Fox protocol (building automation)\n\nport:20000 \"DNP3\"\n# DNP3 protocol (power grid SCADA)\n```\n\n**Database Servers**:\n```\nproduct:\"MongoDB\" port:27017\n# MongoDB databases\n\nproduct:\"MySQL\" port:3306\n# MySQL databases\n\nproduct:\"Elasticsearch\" port:9200\n# Elasticsearch instances\n```\n\n**Remote Access**:\n```\nport:3389 country:US\n# RDP servers in the US\n\nport:5900\n# VNC (Virtual Network Computing) servers\n\nproduct:\"TeamViewer\"\n# TeamViewer remote access\n```\n\n### Advanced Search Techniques\n\n**Search by HTTP Title**:\n```\ntitle:\"Dashboard\"\n# Web interfaces with \"Dashboard\" in title\n\ntitle:\"admin\" title:\"login\"\n# Admin login pages\n```\n\n**Search by HTTP Headers**:\n```\nhttp.component:\"PHP\"\n# Sites running PHP\n\nhttp.component:\"WordPress\"\n# WordPress sites\n```\n\n**Search by SSL Certificate**:\n```\nssl:\"example.com\"\n# Devices with SSL certificates for example.com\n\nssl.cert.subject.cn:\"*.example.com\"\n# Wildcard certificates\n```\n\n**Search by HTML Content**:\n```\nhtml:\"default password\"\n# Pages mentioning default passwords (warnings or instructions)\n\nhtml:\"Index of /\"\n# Open directory listings\n```\n\n**Search by Banner Content**:\n```\n\"Authentication: disabled\"\n# Devices explicitly stating no authentication\n\n\"default password\"\n# Banners mentioning default credentials\n```\n\n### Real-World Search Examples\n\n**Find Outdated Windows Servers**:\n```\nos:\"Windows Server 2003\" country:US\n# Extremely outdated (no longer supported since 2015)\n```\n\n**Find Databases Without Authentication**:\n```\nproduct:\"MongoDB\" -authentication\n# MongoDB without auth enabled (data exposure)\n```\n\n**Find Exposed Admin Panels**:\n```\ntitle:\"admin\" port:80 country:US\n# Admin interfaces on port 80\n```\n\n**Find IoT Devices with Default Credentials**:\n```\n\"default password\" has_screenshot:true\n# Devices mentioning defaults with web interface\n```\n\n**Find Critical Infrastructure (ICS)**:\n```\nport:502 country:US\n# Modbus devices in US (manufacturing, utilities)\n```\n\n**Find Vulnerable SSL/TLS**:\n```\nvuln:CVE-2014-0160 port:443\n# HTTPS servers vulnerable to Heartbleed\n```\n\n### Shodan CLI (Command-Line Interface)\n\n**Installation**:\n```bash\npip install shodan\nshodan init YOUR_API_KEY\n```\n\n**Basic CLI Usage**:\n```bash\n# Search from command line\nshodan search \"port:22 country:US\" --limit 10\n\n# Get info about an IP\nshodan host 8.8.8.8\n\n# Download search results to file\nshodan download results.json.gz \"apache country:US\"\n\n# Parse downloaded results\nshodan parse results.json.gz --fields ip_str,port,org\n```\n\n### Shodan Dorks (Pre-Made Queries)\n\n**GitHub Repository**: https://github.com/jakejarvis/awesome-shodan-queries\n\n**Examples**:\n```\n# Webcams with no auth:\ntitle:\"Network Camera\" -authentication\n\n# Printers:\n\"HP LaserJet\" port:9100\n\n# Jenkins CI without authentication:\ntitle:\"Dashboard [Jenkins]\" -authentication\n\n# Exposed Redis databases:\nproduct:\"Redis\" port:6379\n\n# Medical devices:\n\"Radiological\" port:104\n\n# Tesla PowerWall:\nhttp.title:\"Tesla PowerWall\"\n```"
      }
    },
    {
      "type": "video",
      "content": {
        "text": "Watch this comprehensive introduction to Shodan and IoT reconnaissance:\n\nhttps://www.youtube.com/watch?v=3pG2xKnVWMo\n\n**Video: \"Shodan - The Security Search Engine\" by NetworkChuck**\n\nThis video provides a hands-on demonstration of Shodan's capabilities, including live searches for vulnerable devices, webcams, and industrial control systems. The instructor shows real-world examples of exposed devices and discusses the security implications.\n\n**Key Topics Covered**:\n- Shodan basics and how it differs from Google\n- Search filter syntax and advanced queries\n- Finding webcams, routers, and IoT devices\n- Industrial control system (ICS) discovery\n- Responsible disclosure and ethical considerations\n\n**Watch For**:\n- The shocking number of devices accessible without authentication\n- How easily attackers can find critical infrastructure\n- The methodology for combining filters to narrow search results\n- Real-world examples of database servers exposed to the internet\n- Discussion of defensive strategies (how to avoid appearing in Shodan)\n\n**Reflection Question**: After watching, consider: How many devices in your organization might be exposed in Shodan? What would you search for to find them?"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "## Hands-On Exercise 1: Shodan Reconnaissance Workflow\n\nLet's perform systematic Shodan reconnaissance to understand your organization's exposure (or practice on authorized targets).\n\n**IMPORTANT**: These exercises demonstrate reconnaissance techniques. Only search for devices you own or have authorization to investigate.\n\n### Phase 1: Account Setup and Basic Searches\n\n**Step 1: Create Free Shodan Account**\n```\n1. Visit: https://www.shodan.io/\n2. Click \"Create Account\"\n3. Verify email\n4. Log in\n5. Note: Free account shows only 1 result per search (for full results, upgrade)\n```\n\n**Step 2: Your First Search (Test with Public Infrastructure)**\n```\n# Search for Google's DNS server\nQuery: 8.8.8.8\n\nResults show:\n- Open ports (53 - DNS, 443 - HTTPS)\n- Services running\n- SSL certificates\n- Geographic location\n- Organization: Google LLC\n- ASN: AS15169\n\nAnalysis:\n- This is expected for a public DNS server\n- Port 53 open is normal\n- No unexpected services\n```\n\n**Step 3: Search by Organization (Find Your Company)**\n```\n# Find all devices associated with your organization\nQuery: org:\"Your Company Name\"\n\n# Example:\norg:\"Amazon\"\n# Returns all AWS infrastructure\n\n# Refine by country:\norg:\"Your Company Name\" country:US\n```\n\n**What to Look For**:\n- How many devices appear?\n- What services are exposed? (Web, SSH, RDP, databases)\n- Are there unexpected devices? (Cameras, printers, IoT)\n- Any development or test environments? (dev.company.com)\n- Any database servers? (MongoDB, MySQL, Elasticsearch)\n\n### Phase 2: Port-Based Reconnaissance\n\n**Step 4: Find Remote Access Services**\n```\n# RDP (Remote Desktop Protocol)\nQuery: org:\"Your Company\" port:3389\n\nAnalysis:\n- RDP should NOT be exposed to the internet (common attack vector)\n- If found: Critical security risk (brute-force target)\n- Recommendation: Use VPN for RDP access\n\n# SSH (Secure Shell)\nQuery: org:\"Your Company\" port:22\n\nAnalysis:\n- SSH exposed is common for Linux servers\n- Check: Is this intentional? (jump boxes, bastion hosts)\n- Look for: Outdated OpenSSH versions (vulnerabilities)\n\n# VNC (Virtual Network Computing)\nQuery: org:\"Your Company\" port:5900\n\nAnalysis:\n- VNC often has weak authentication\n- Should not be internet-facing\n- High risk if discovered\n```\n\n**Step 5: Find Database Servers**\n```\n# MongoDB\nQuery: org:\"Your Company\" product:\"MongoDB\" port:27017\n\nCritical Check:\n- Is authentication enabled?\n- Search banner for \"authentication: disabled\"\n- If no auth: IMMEDIATE DATA EXPOSURE RISK\n\n# MySQL\nQuery: org:\"Your Company\" product:\"MySQL\" port:3306\n\nRisk:\n- MySQL should not be internet-facing\n- Should be behind application servers\n- Exposure indicates misconfiguration\n\n# Elasticsearch\nQuery: org:\"Your Company\" product:\"Elasticsearch\" port:9200\n\nRisk:\n- Elasticsearch often stores sensitive logs and data\n- Historically has many exposed instances\n- Check for authentication\n```\n\n**Step 6: Find Web Services**\n```\n# Admin panels\nQuery: org:\"Your Company\" title:\"admin\"\n\nLook For:\n- Admin login pages exposed\n- Default credentials documented?\n- Two-factor authentication required?\n\n# Development environments\nQuery: org:\"Your Company\" title:\"dev\" OR title:\"staging\" OR title:\"test\"\n\nRisk:\n- Dev environments often less secure\n- May contain debug info, test credentials\n- Should not be public\n```\n\n### Phase 3: IoT and Device Discovery\n\n**Step 7: Find Webcams and Surveillance**\n```\n# IP Cameras\nQuery: org:\"Your Company\" product:\"webcam\"\n\nOR\n\nQuery: org:\"Your Company\" title:\"IP Camera\"\n\nQuestions:\n- Are these intentional? (security cameras for facilities)\n- Do they require authentication?\n- Are they on the internal network or internet-facing?\n- Could they provide visual intelligence to attackers?\n```\n\n**Step 8: Find Network Equipment**\n```\n# Routers\nQuery: org:\"Your Company\" product:\"router\"\n\n# Firewalls\nQuery: org:\"Your Company\" title:\"firewall\"\n\nOR\n\nQuery: org:\"Your Company\" product:\"pfSense\"\n\nCritical Analysis:\n- Management interfaces should NOT be internet-facing\n- If found: Immediate remediation required\n- Compromise of network equipment = complete network access\n```\n\n**Step 9: Find Printers**\n```\n# Network printers\nQuery: org:\"Your Company\" port:9100\n\nOR\n\nQuery: org:\"Your Company\" \"HP LaserJet\"\n\nRisk:\n- Printers often have web interfaces with no auth\n- Can be used to:\n  - Print malicious documents\n  - Capture print jobs (data leakage)\n  - Pivot to internal network\n  - Extract stored documents\n```\n\n### Phase 4: Vulnerability Assessment\n\n**Step 10: Search for Known Vulnerabilities**\n```\n# Heartbleed (CVE-2014-0160)\nQuery: org:\"Your Company\" vuln:CVE-2014-0160\n\nIf Found:\n- Critical SSL/TLS vulnerability\n- Allows memory leak (credentials, keys)\n- Should be patched immediately\n\n# Apache Struts RCE (CVE-2017-5638)\nQuery: org:\"Your Company\" vuln:CVE-2017-5638\n\nIf Found:\n- Remote code execution vulnerability\n- Used in Equifax breach (2017)\n- Critical priority patch\n\n# EternalBlue (CVE-2017-0144)\nQuery: org:\"Your Company\" vuln:CVE-2017-0144\n\nIf Found:\n- Windows SMB vulnerability\n- Used by WannaCry ransomware\n- Extremely critical\n```\n\n**Step 11: Search for Outdated Software**\n```\n# Old Windows versions\nQuery: org:\"Your Company\" os:\"Windows XP\"\nQuery: org:\"Your Company\" os:\"Windows Server 2003\"\n\nIf Found:\n- No longer supported (no security patches)\n- Extremely vulnerable\n- Should be decommissioned or isolated\n\n# Old Linux versions\nQuery: org:\"Your Company\" os:\"Ubuntu 12.04\"\n\nIf Found:\n- End of life (no updates)\n- Known vulnerabilities\n- Upgrade required\n```\n\n### Phase 5: Documentation and Reporting\n\n**Create Exposure Report**:\n```\nSHODAN EXPOSURE ASSESSMENT\nOrganization: Your Company Name\nDate: 2025-10-28\nAnalyst: [Your Name]\n\n=== SUMMARY ===\nTotal Devices Found: 47\nCritical Findings: 3\nHigh Risk: 8\nMedium Risk: 12\nLow Risk: 24\n\n=== CRITICAL FINDINGS ===\n\n1. MongoDB Without Authentication\n   IP: 203.0.113.50\n   Port: 27017\n   Evidence: Banner shows \"authentication: disabled\"\n   Risk: Complete database exposure\n   Recommendation: Enable auth immediately, restrict IP access\n\n2. RDP Exposed to Internet\n   IP: 203.0.113.55\n   Port: 3389\n   Evidence: RDP service accessible\n   Risk: Brute-force target, ransomware vector\n   Recommendation: Disable public RDP, require VPN\n\n3. Outdated Windows Server 2003\n   IP: 192.0.2.10\n   Port: 80, 445\n   Evidence: Banner shows \"Windows Server 2003\"\n   Risk: No security patches since 2015, multiple CVEs\n   Recommendation: Decommission or isolate immediately\n\n=== HIGH RISK FINDINGS ===\n\n4. Elasticsearch Exposed (port 9200)\n5. VNC Without Authentication (port 5900)\n6. Admin Panel Accessible (title: \"Admin Login\")\n... [continue for all findings]\n\n=== RECOMMENDATIONS (Prioritized) ===\n\n1. IMMEDIATE (24 hours):\n   - Enable MongoDB authentication\n   - Block public RDP access\n   - Decommission Windows Server 2003\n\n2. HIGH PRIORITY (1 week):\n   - Restrict Elasticsearch to internal network\n   - Implement VNC authentication\n   - Add WAF to admin panels\n\n3. MEDIUM PRIORITY (1 month):\n   - Update outdated software versions\n   - Review all SSH key-based authentication\n   - Implement network segmentation\n\n=== PREVENTIVE MEASURES ===\n\n- Perform monthly Shodan scans of organization\n- Implement policy: No internet-facing databases\n- Require VPN for all remote access\n- Regular vulnerability scanning\n- Asset inventory and monitoring\n```\n\n### Phase 6: Defensive Actions\n\n**How to Remove Devices from Shodan**:\n\n1. **Fix the exposure**: Block public access, require authentication\n2. **Request removal**: Email Shodan (help@shodan.io) with:\n   - Your company name and IP ranges\n   - Explanation of why data should be removed\n   - Proof of ownership/authorization\n3. **Wait for rescan**: Shodan rescans periodically; fixed issues will update\n\n**Prevent Future Exposure**:\n```\n✅ Default deny on firewalls (only allow necessary ports)\n✅ Never expose databases directly to internet\n✅ Use VPN for all remote access (RDP, VNC, SSH admin)\n✅ Implement strong authentication (no defaults)\n✅ Regular patching and updates\n✅ Network segmentation (internal vs. DMZ vs. public)\n✅ Monitor Shodan regularly for your organization\n```\n\n**Monitor for Changes**:\n```\n# Set up Shodan monitoring (paid feature)\n1. Create Shodan account\n2. Navigate to \"Monitors\"\n3. Add your IP ranges or organization name\n4. Receive alerts when new devices appear\n\n# Alternative: Scheduled searches\n# Run weekly cron job:\n0 0 * * 1 shodan search 'org:\"Your Company\"' --limit 100 | mail -s \"Shodan Scan\" security@company.com\n```"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "## Hands-On Exercise 2: Censys and ZoomEye Alternatives\n\nShodan isn't the only IoT search engine. Censys and ZoomEye offer complementary data and different search capabilities.\n\n### Censys - Certificate and Host Search\n\n**What Makes Censys Different**:\n- Focus on SSL/TLS certificates and hosts\n- More detailed certificate analysis\n- Better for tracking certificate-based infrastructure\n- Academic research backing (University of Michigan)\n- Different scan methodology than Shodan\n\n**Censys Account Setup**:\n```\n1. Visit: https://censys.io/\n2. Create free account\n3. Free tier: 250 queries/month\n4. API access available\n```\n\n**Censys Search Syntax**:\n\n**Basic Host Search**:\n```\n# Search by IP\n1.1.1.1\n\n# Search by organization\nservices.organization: \"Amazon\"\n\n# Search by port\nservices.port: 22\n\n# Search by service\nservices.service_name: \"HTTP\"\n```\n\n**Certificate Search**:\n```\n# Search by common name\nparsed.subject.common_name: example.com\n\n# Search by organization in cert\nparsed.subject.organization: \"Example Corp\"\n\n# Search for expired certificates\nparsed.validity.end < 2023-01-01\n\n# Search by certificate authority\nparsed.issuer.organization: \"Let's Encrypt\"\n```\n\n**Advanced Queries**:\n```\n# Find hosts with specific SSL cipher suites\nservices.tls.cipher_suite.name: \"TLS_RSA_WITH_3DES_EDE_CBC_SHA\"\n\n# Find hosts with self-signed certificates\nparsed.signature.self_signed: true\n\n# Find hosts with specific HTTP server header\nservices.http.response.headers.server: \"Apache/2.4.41\"\n\n# Find hosts in specific ASN\nautonomous_system.asn: 15169\n```\n\n**Censys CLI**:\n```bash\n# Install\npip install censys\n\n# Configure\ncensys config\n# Enter API ID and Secret from https://censys.io/account/api\n\n# Search hosts\ncensys search \"services.port: 22\" --max-records 10\n\n# Search certificates\ncensys search-certs \"parsed.subject.organization: Example\" --max-records 10\n\n# Get details about specific IP\ncensys view 8.8.8.8\n```\n\n**Censys Use Cases**:\n\n1. **Track Certificate Changes**:\n```\nparsed.subject.common_name: *.company.com\n\n# Shows all subdomains with SSL certificates\n# Compare with previous scans to detect changes\n```\n\n2. **Find Weak SSL/TLS**:\n```\nservices.tls.version: \"SSLv3\"\n# SSLv3 is deprecated and vulnerable\n\nservices.tls.cipher_suite.name: \"*DES*\"\n# DES and 3DES are weak ciphers\n```\n\n3. **Monitor Infrastructure**:\n```\nservices.organization: \"Your Company\" AND services.port: 443\n# Track all HTTPS services\n```\n\n### ZoomEye - Chinese Alternative\n\n**What Makes ZoomEye Different**:\n- Based in China, better coverage of Asian infrastructure\n- Web and network device focus\n- Different data sources than Shodan/Censys\n- Free searches with account\n\n**ZoomEye Account Setup**:\n```\n1. Visit: https://www.zoomeye.org/\n2. Create account (or log in with GitHub)\n3. Free tier: Limited searches per day\n```\n\n**ZoomEye Search Syntax**:\n\n**Basic Searches**:\n```\n# Search by keyword\napache\n\n# Search by IP\nip:8.8.8.8\n\n# Search by port\nport:22\n\n# Search by country\ncountry:CN\n\n# Search by city\ncity:Beijing\n```\n\n**Advanced Filters**:\n```\n# Search by service\nservice:http\n\n# Search by OS\nos:windows\n\n# Search by device type\ndevice:router\n\n# Search by application\napp:apache\n\n# Search by version\nver:2.4.41\n```\n\n**Combined Queries**:\n```\n# Nginx servers in China\napp:nginx country:CN\n\n# RDP in United States\nport:3389 country:US\n\n# Webcams in Japan\ndevice:webcam country:JP\n\n# MySQL databases worldwide\nport:3306\n```\n\n**ZoomEye API**:\n```python\nimport requests\n\n# Login to get access token\nurl = \"https://api.zoomeye.org/user/login\"\ndata = {\n    \"username\": \"your_username\",\n    \"password\": \"your_password\"\n}\nresponse = requests.post(url, json=data)\ntoken = response.json()['access_token']\n\n# Search\nheaders = {\"Authorization\": f\"JWT {token}\"}\nurl = \"https://api.zoomeye.org/host/search\"\nparams = {\"query\": \"apache +country:US\", \"page\": 1}\nresponse = requests.get(url, params=params, headers=headers)\nresults = response.json()\n```\n\n### Comparative Analysis: Shodan vs. Censys vs. ZoomEye\n\n**Data Coverage**:\n```\nShodan:\n- ~600+ million devices indexed\n- Scans every IP monthly\n- Strong: IoT, ICS, all device types\n- Weak: Certificate analysis\n\nCensys:\n- ~4+ billion certificates indexed\n- Scans every IP weekly\n- Strong: SSL/TLS certificates, academic rigor\n- Weak: Non-HTTP services\n\nZoomEye:\n- ~2+ billion devices indexed\n- Focus on web services\n- Strong: Asian infrastructure\n- Weak: Western infrastructure compared to others\n```\n\n**Search Capabilities**:\n```\nBest for General IoT: Shodan\nBest for Certificate Intel: Censys\nBest for Asian Coverage: ZoomEye\nBest for ICS/SCADA: Shodan\nBest for Historical Data: Shodan (paid)\n```\n\n**Pricing** (as of 2025):\n```\nShodan:\n- Free: Very limited (1 result per search)\n- Membership: $59/month\n- API: Included with membership\n\nCensys:\n- Free: 250 queries/month\n- Pro: $99/month (5,000 queries)\n- API: Included\n\nZoomEye:\n- Free: Limited daily searches\n- VIP: ~$10/month (more searches)\n- API: Included\n```\n\n### Practical Workflow: Use All Three\n\n**Step 1: Start with Shodan** (broadest coverage)\n```\nQuery: org:\"Your Company\"\n\nFindings:\n- 50 devices discovered\n- 3 with critical vulnerabilities\n- Document all IPs and services\n```\n\n**Step 2: Deep-dive with Censys** (certificate analysis)\n```\nQuery: services.organization: \"Your Company\"\n\nFindings:\n- 75 SSL certificates found (more than Shodan)\n- Discovered additional subdomains:\n  - dev-api.company.com (not in Shodan)\n  - test-vpn.company.com (certificate exists but no active service)\n- Identified weak SSL ciphers on 5 hosts\n```\n\n**Step 3: Check ZoomEye** (alternative perspective)\n```\nQuery: site:company.com\n\nFindings:\n- 45 devices (overlaps with Shodan but some unique)\n- Found 2 devices Shodan missed:\n  - Asia-Pacific server not in Shodan\n  - Temporary cloud instance\n```\n\n**Step 4: Correlate Results**\n```\nShodan: 50 devices\nCensys: 75 certificates → extract 60 unique hosts\nZoomEye: 45 devices\n\nCombined (after deduplication): 80 unique exposed assets\n\nConclusion:\n- Using only one search engine missed 38% of exposure\n- Different scan times captured different infrastructure states\n- Certificate data revealed more subdomains than active scans\n```\n\n### Automated Multi-Engine Search Script\n\n```python\n#!/usr/bin/env python3\n\nimport shodan\nimport requests\nimport censys.search\nimport json\n\n# Initialize APIs\nshodan_api = shodan.Shodan(\"YOUR_SHODAN_API_KEY\")\ncensys_hosts = censys.search.CensysHosts(\"YOUR_CENSYS_API_ID\", \"YOUR_CENSYS_API_SECRET\")\n\ndef search_shodan(query):\n    try:\n        results = shodan_api.search(query)\n        print(f\"[Shodan] Found {results['total']} results\")\n        return [r['ip_str'] for r in results['matches']]\n    except Exception as e:\n        print(f\"[Shodan] Error: {e}\")\n        return []\n\ndef search_censys(query):\n    try:\n        results = list(censys_hosts.search(query, per_page=100, pages=1))\n        print(f\"[Censys] Found {len(results)} results\")\n        return [r['ip'] for r in results]\n    except Exception as e:\n        print(f\"[Censys] Error: {e}\")\n        return []\n\ndef correlate_results(shodan_ips, censys_ips):\n    all_ips = set(shodan_ips + censys_ips)\n    shodan_only = set(shodan_ips) - set(censys_ips)\n    censys_only = set(censys_ips) - set(shodan_ips)\n    both = set(shodan_ips) & set(censys_ips)\n    \n    print(f\"\\n=== CORRELATION ANALYSIS ===\")\n    print(f\"Total Unique IPs: {len(all_ips)}\")\n    print(f\"Found in Both: {len(both)}\")\n    print(f\"Shodan Only: {len(shodan_only)}\")\n    print(f\"Censys Only: {len(censys_only)}\")\n    \n    return list(all_ips)\n\nif __name__ == \"__main__\":\n    org_name = \"Your Company Name\"\n    \n    print(f\"Searching for: {org_name}\\n\")\n    \n    shodan_ips = search_shodan(f'org:\"{org_name}\"')\n    censys_ips = search_censys(f'services.organization: \"{org_name}\"')\n    \n    all_ips = correlate_results(shodan_ips, censys_ips)\n    \n    # Save results\n    with open('exposure_report.json', 'w') as f:\n        json.dump({\n            'organization': org_name,\n            'total_ips': len(all_ips),\n            'ips': all_ips,\n            'shodan_count': len(shodan_ips),\n            'censys_count': len(censys_ips)\n        }, f, indent=2)\n    \n    print(f\"\\nResults saved to: exposure_report.json\")\n```\n\n**Run the script**:\n```bash\npython3 multi_engine_search.py\n```\n\nThis comprehensive approach ensures you don't miss any exposed assets by relying on a single search engine."
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "## Real-World Case Study: The Mirai Botnet (2016)\n\n### The Incident\n\nOn October 21, 2016, the internet experienced one of the largest Distributed Denial of Service (DDoS) attacks in history. Dyn, a major DNS provider, was overwhelmed by traffic from millions of compromised IoT devices. Twitter, Netflix, Reddit, GitHub, and hundreds of other major websites became inaccessible for hours.\n\nThe attack was powered by the Mirai botnet—and it started with IoT reconnaissance similar to what you've learned in this lesson.\n\n### The Attack Timeline\n\n**August 2016**: Mirai malware first observed in the wild\n**September 20, 2016**: Mirai source code released publicly on Hackforums\n**September 22, 2016**: Attack on Krebs on Security (620 Gbps—largest DDoS at the time)\n**October 21, 2016**: Attack on Dyn DNS (1.2 Tbps—new record)\n**December 2016**: Mirai botnet peaks at 2.5 million infected devices\n\n### How Mirai Worked (Shodan-Style Reconnaissance)\n\n**Phase 1: IoT Device Discovery**\n\nMirai didn't use Shodan directly, but it used the same technique—scanning the entire internet for IoT devices:\n\n```\nTarget Ports:\n- 23 (Telnet)\n- 2323 (Alternate Telnet)\n- 22 (SSH)\n\nTarget Devices:\n- IP cameras (especially Chinese brands: Dahua, Hikvision, DVR)\n- Home routers (ASUS, Netgear, D-Link)\n- Digital video recorders (DVRs)\n- Network-attached storage (NAS)\n```\n\n**Scanning Method**:\n```bash\n# Mirai scanned the entire IPv4 space (4 billion IPs)\nfor ip in 0.0.0.0 to 255.255.255.255:\n    if port 23 open:\n        try default credentials\n        if success:\n            infect with Mirai\n```\n\n**What a Shodan search would have revealed**:\n```\nQuery: port:23 product:\"DVR\"\n\nResults: 2.4 million devices with Telnet open\nMany with default credentials:\n- admin/admin\n- admin/password\n- root/root\n- admin/12345\n- root/default\n```\n\n**Phase 2: Credential Brute-Force**\n\nMirai had a built-in list of 60+ default username/password combinations:\n\n```\nCommon Default Credentials Tried:\n- admin / admin\n- admin / password\n- root / root\n- admin / 1234\n- admin / 12345\n- admin / 123456\n- root / admin\n- admin / (blank)\n- root / 12345\n- user / user\n... (60+ combinations)\n```\n\n**Success Rate**: ~30-40% of IoT devices still used default credentials\n\n**Phase 3: Infection and C2**\n\nOnce credentials worked:\n1. Mirai uploaded malware binary to device\n2. Device connected to Command & Control (C2) server\n3. Device awaited attack commands\n4. Device continued scanning for more victims (worm behavior)\n\n**Botnet Growth**:\n```\nDay 1: 100 infected devices\nDay 7: 10,000 infected devices (exponential growth)\nDay 30: 500,000 infected devices\nDay 60: 2.5 million infected devices (peak)\n```\n\n**Phase 4: DDoS Attacks**\n\n**Attack on Krebs on Security** (September 22, 2016):\n```\nTarget: krebsonsecurity.com (security journalist)\nReason: Krebs investigated DDoS-for-hire services\nBotnet Size: ~350,000 devices\nTraffic Volume: 620 Gbps\nAttack Type: HTTP flood, SYN flood\nDuration: Sustained for days\nResult: Krebs forced offline, had to move to Google's Project Shield\n```\n\n**Attack on Dyn DNS** (October 21, 2016):\n```\nTarget: Dyn DNS infrastructure (manages DNS for major sites)\nBotnet Size: ~100,000 devices (simultaneously)\nTraffic Volume: 1.2 Tbps (1,200 Gbps)\nAttack Type: DNS query flood\nImpacted Sites:\n- Twitter\n- Netflix\n- Reddit\n- GitHub\n- Spotify\n- PlayStation Network\n- Amazon\n- Airbnb\n- PayPal\n(Hundreds more)\n\nDuration: Multiple waves over 10 hours\nResult: Worst internet outage in history\n```\n\n### The Perpetrators\n\n**Arrested in December 2016**:\n- Paras Jha (21, New Jersey) - Primary author\n- Josiah White (20, Pennsylvania) - Co-conspirator\n- Dalton Norman (21, Louisiana) - Co-conspirator\n\n**Motivation**: \n- Initially created to DDoS Minecraft server competitors\n- Evolved into DDoS-for-hire business\n- Released source code to throw off investigators (didn't work)\n\n**Charges**:\n- Computer fraud and abuse\n- Conspiracy to commit computer fraud\n\n**Sentences** (2018):\n- Minimal jail time (cooperative with FBI)\n- Community service\n- Monetary restitution\n- Notable: Light sentences because they:\n  - Cooperated with FBI\n  - Helped improve IoT security\n  - Were young (college-aged)\n\n### The IoT Vulnerability Problem\n\n**Why Were So Many Devices Vulnerable?**\n\n1. **Default Credentials**:\n   - Manufacturers shipped devices with admin/admin\n   - Users never changed defaults\n   - Some devices had hardcoded credentials (unchangeable!)\n\n2. **No Security Updates**:\n   - Most IoT devices never received firmware updates\n   - No automatic update mechanism\n   - Users didn't know how to update\n\n3. **Weak Design**:\n   - Telnet (unencrypted) instead of SSH\n   - No brute-force protection (unlimited login attempts)\n   - No rate limiting\n\n4. **Internet-Facing By Design**:\n   - Users wanted remote access to cameras\n   - Devices configured for UPnP (auto-port-forwarding)\n   - No firewall by default\n\n**Shodan Statistics at the Time**:\n```\nQuery: port:23 \"DVR\" -authentication\nResults: 2.4 million DVRs with Telnet and no auth\n\nQuery: port:80 title:\"IP Camera\" default password\nResults: 500,000+ cameras with known defaults\n\nQuery: product:\"Xiongmai\" port:23\nResults: 1.5 million Xiongmai devices (major Mirai target)\n```\n\n### The Aftermath and Lessons\n\n**Immediate Impact**:\n- $110 million in damages (Dyn estimated)\n- Hundreds of millions of users affected\n- Major internet outage lasting hours\n- Global awareness of IoT security risks\n\n**Industry Response**:\n\n1. **California IoT Security Law** (SB-327, 2020):\n   - Banned default passwords on IoT devices\n   - Required unique passwords per device\n   - Manufacturers must allow users to change credentials\n\n2. **UK IoT Security Law** (2020):\n   - Similar to California's law\n   - Top 3 requirements:\n     - No default passwords\n     - Vulnerability disclosure policy\n     - Security updates policy\n\n3. **NIST IoT Security Guidelines**:\n   - Device identification\n   - Device configuration\n   - Data protection\n   - Logical access control\n   - Software/firmware update\n\n4. **Manufacturer Changes**:\n   - Many manufacturers stopped using Telnet\n   - Forced password changes on first use\n   - Automatic security updates\n   - Improved authentication\n\n**Long-Term Impact**:\n- IoT security became mainstream concern\n- Mirai variants still active today (2025)\n- Ongoing challenge: Millions of unpatched legacy devices\n\n### What Defenders Should Have Done\n\n**Before Mirai**:\n```\n✅ Search Shodan for your organization:\n   Query: org:\"Your Company\" port:23\n   \n✅ Identify all IoT devices on network:\n   - Inventory cameras, DVRs, printers, sensors\n   \n✅ Change default credentials:\n   - Audit all devices for admin/admin\n   \n✅ Network segmentation:\n   - IoT devices on separate VLAN\n   - No direct internet access\n   - Access via VPN only\n   \n✅ Disable unnecessary services:\n   - Disable Telnet, enable SSH\n   - Disable UPnP\n   - Close unused ports\n```\n\n**Defense-in-Depth Against IoT Botnets**:\n```\n1. Network Level:\n   - Firewall rules: Block inbound Telnet (port 23)\n   - Segment IoT devices from critical networks\n   - Monitor for scanning behavior\n\n2. Device Level:\n   - Change default credentials\n   - Disable unused services\n   - Apply firmware updates\n   - Use strong passwords\n\n3. Monitoring:\n   - Watch for outbound scanning (infected devices scan for more)\n   - Monitor for unusual traffic volumes\n   - Alert on connections to known C2 servers\n\n4. Shodan Monitoring:\n   - Regular searches: org:\"Your Company\" port:23,2323,22\n   - Alert on new exposed devices\n   - Remediate findings within 24 hours\n```\n\n### Try It Yourself (Ethically)\n\n**Defensive Exercise**:\n\n1. **Search Shodan for your organization**:\n   ```\n   org:\"Your Company\" port:23\n   org:\"Your Company\" product:\"webcam\"\n   org:\"Your Company\" \"default password\"\n   ```\n\n2. **Identify IoT devices**:\n   - Do any DVRs, cameras, or IoT devices appear?\n   - Are they supposed to be internet-facing?\n\n3. **Check for default credentials** (on YOUR OWN devices):\n   - Look up your device model online\n   - Check if you've changed the default password\n\n4. **Remediate**:\n   - Change all default credentials\n   - Disable internet access where unnecessary\n   - Update firmware\n\n5. **Report findings**:\n   - Document IoT exposure\n   - Share with security team\n   - Implement preventive measures\n\n**Remember**: Mirai succeeded because millions of devices were left unsecured. Don't let your organization be part of the next botnet."
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "## Shodan & IoT Search Quick Reference\n\n### Essential Shodan Filters Mnemonic: **\"PONCHOS\"**\n\n- **P**ort: `port:22` (specific port number)\n- **O**rg: `org:\"Amazon\"` (organization/ISP)\n- **N**et: `net:192.168.0.0/16` (IP range)\n- **C**ountry: `country:US` (geographic location)\n- **H**ostname: `hostname:example.com` (domain)\n- **O**S: `os:\"Windows 7\"` (operating system)\n- **S**ervice: `product:\"Apache\"` (service/software)\n\n---\n\n### High-Risk Ports to Monitor\n\nMnemonic: **\"SSHH, RaVeN Steals Data\"**\n\n- **S** = SSH (22) - Remote shell access\n- **S** = SMTP (25) - Email servers\n- **H** = HTTP (80) - Web servers\n- **H** = HTTPS (443) - Secure web\n- **R** = RDP (3389) - Windows Remote Desktop\n- **V** = VNC (5900) - Virtual Network Computing\n- **N** = NetBIOS (445) - Windows file sharing\n- **S** = SQL (3306/1433/5432) - MySQL/MSSQL/PostgreSQL\n- **D** = Database (27017/6379/9200) - MongoDB/Redis/Elasticsearch\n\n---\n\n### Critical Vulnerability Search Pattern\n\n```bash\n# Template:\norg:\"Your Company\" vuln:CVE-YYYY-XXXXX\n\n# Top CVEs to search:\nvuln:CVE-2014-0160  # Heartbleed (SSL)\nvuln:CVE-2017-0144  # EternalBlue (WannaCry)\nvuln:CVE-2017-5638  # Apache Struts (Equifax breach)\nvuln:CVE-2021-44228 # Log4Shell\n```\n\n---\n\n### IoT Device Discovery Patterns\n\n**Webcams**:\n```\nproduct:\"webcamXP\"\ntitle:\"IP Camera\"\n\"Server: SQ-WEBCAM\"\nhas_screenshot:true port:80\n```\n\n**Industrial Control Systems**:\n```\nport:502           # Modbus\nport:1911,4911     # Niagara\nport:20000         # DNP3\nproduct:\"Siemens\"\n\"Schneider Electric\"\n```\n\n**Network Equipment**:\n```\nproduct:\"MikroTik\"\ntitle:\"pfSense\"\n\"cisco\" port:23\ntitle:\"EdgeRouter\"\n```\n\n**Databases**:\n```\nproduct:\"MongoDB\" port:27017\nproduct:\"MySQL\" port:3306\nproduct:\"Elasticsearch\" port:9200\nproduct:\"Redis\" port:6379\n```\n\n---\n\n### Shodan CLI Commands\n\n```bash\n# Setup\npip install shodan\nshodan init YOUR_API_KEY\n\n# Search\nshodan search \"apache country:US\" --limit 10\n\n# Host information\nshodan host 8.8.8.8\n\n# Download results\nshodan download results.json.gz \"query\"\n\n# Parse downloaded data\nshodan parse results.json.gz --fields ip_str,port,org\n\n# Count results (without downloading)\nshodan count \"product:nginx\"\n```\n\n---\n\n### Censys vs. Shodan vs. ZoomEye\n\n**When to Use Each**:\n\n```\nShodan:\n✅ IoT devices\n✅ ICS/SCADA\n✅ General reconnaissance\n✅ Vulnerability searches\n\nCensys:\n✅ SSL/TLS certificates\n✅ Certificate transparency\n✅ Historical certificate data\n✅ Academic/research use\n\nZoomEye:\n✅ Asian infrastructure\n✅ Chinese/Japanese/Korean devices\n✅ Alternative perspective\n✅ Budget searches (cheaper)\n```\n\n---\n\n### Defense Checklist: Remove from Shodan\n\nMnemonic: **\"SCAN FASTER\"**\n\n- **S**egment network (IoT on separate VLAN)\n- **C**hange default credentials (admin/admin → strong passwords)\n- **A**uthentication required (no open access)\n- **N**o unnecessary exposure (firewall blocks)\n\n- **F**irmware updates (patch regularly)\n- **A**udit regularly (monthly Shodan searches)\n- **S**ervices disabled (Telnet → SSH, close unused ports)\n- **T**LS encryption (HTTPS not HTTP)\n- **E**xternal scans (find exposure before attackers)\n- **R**eport and remediate (document and fix)\n\n---\n\n### Common Default Credentials\n\n**Never use these (attackers try them first)**:\n\n```\nadmin / admin\nadmin / password\nroot / root\nadmin / 12345\nadmin / (blank)\nroot / admin\nadmin / 1234\nuser / user\nadmin / admin123\nroot / password\n```\n\n**Real-world compromises**: Mirai botnet (2016) used 60+ default credentials to infect 2.5 million IoT devices.\n\n---\n\n### Shodan Dork Examples\n\n**Exposed Databases**:\n```\nproduct:\"MongoDB\" -authentication\nproduct:\"Elasticsearch\" -authentication\nproduct:\"Redis\" -authentication\n```\n\n**Admin Panels**:\n```\ntitle:\"admin\" title:\"login\"\ntitle:\"Dashboard\" -authentication\nhttp.title:\"Administration Panel\"\n```\n\n**Printers**:\n```\nport:9100\n\"HP LaserJet\" port:80\ntitle:\"Printer\"\n```\n\n**VPN/Remote Access**:\n```\ntitle:\"VPN\" -authentication\nproduct:\"Fortinet\" port:443\n\"Citrix Gateway\"\n```\n\n**Outdated Systems**:\n```\nos:\"Windows XP\"\nos:\"Windows Server 2003\"\nproduct:\"Apache\" version:\"2.2\"\n```\n\n---\n\n### Reconnaissance Workflow\n\n**5-Step Shodan Assessment**:\n\n```\n1. Organization Search:\n   org:\"Your Company\"\n   → Identify all exposed assets\n\n2. Critical Services:\n   org:\"Your Company\" port:3389,5900,23\n   → Find remote access points\n\n3. Database Exposure:\n   org:\"Your Company\" port:27017,3306,9200\n   → Check for exposed databases\n\n4. Vulnerability Check:\n   org:\"Your Company\" vuln:*\n   → Identify known CVEs\n\n5. IoT Devices:\n   org:\"Your Company\" product:\"webcam\" OR product:\"camera\"\n   → Find IoT exposure\n```\n\n---\n\n### Legal Reminder\n\n**Legal**:\n- ✅ Searching Shodan/Censys/ZoomEye\n- ✅ Viewing banner information\n- ✅ Documenting findings\n- ✅ Searching for YOUR organization\n- ✅ Responsible disclosure (critical findings)\n\n**Illegal** (without authorization):\n- ❌ Logging into discovered devices\n- ❌ Attempting default credentials\n- ❌ Exploiting vulnerabilities\n- ❌ Accessing data on exposed devices\n- ❌ DDoS or disrupting services\n\n**Gray Area** (proceed cautiously):\n- ⚠️ Accessing publicly exposed admin panels (even without auth)\n- ⚠️ Viewing webcam feeds (even if no password)\n- ⚠️ Downloading exposed database dumps\n\n**Rule**: Just because it's accessible doesn't mean accessing it is legal. Reconnaissance is OK. Interaction requires authorization.\n\n---\n\n### Monitoring and Alerting\n\n**Set Up Shodan Monitoring** (paid feature):\n```\n1. Create network monitor:\n   - Add your IP ranges\n   - Add your organization name\n\n2. Configure alerts:\n   - New devices appear\n   - Vulnerabilities detected\n   - Specific ports exposed\n\n3. Receive notifications:\n   - Email alerts\n   - Slack/Discord webhooks\n   - API polling\n```\n\n**Alternative (Free)**:\n```bash\n# Cron job for weekly scans\n#!/bin/bash\nshodan search 'org:\"Your Company\"' --limit 100 > shodan_results.txt\nmail -s \"Weekly Shodan Scan\" security@company.com < shodan_results.txt\n```\n\n---\n\n### Quick Reference Card\n\n**Organization Exposure Assessment**:\n```\n□ Run: org:\"Company Name\"\n□ Check: port:3389,22,23 (remote access)\n□ Check: port:27017,3306,9200 (databases)\n□ Check: product:\"webcam\" (IoT devices)\n□ Check: vuln:* (known vulnerabilities)\n□ Check: os:\"Windows XP\" (outdated systems)\n□ Document all findings\n□ Prioritize by risk\n□ Remediate within SLA\n□ Re-scan to verify fixes\n□ Schedule recurring scans\n```"
      }
    },
    {
      "type": "quiz",
      "content": {
        "text": "## Knowledge Check: Shodan & IoT Search\n\n**Question 1: Vulnerability Assessment Priority**\n\nYou perform a Shodan search on your organization and discover the following exposed services:\n\nA) Web server (port 80) running Apache 2.4.50 with CVE-2021-41773 (path traversal RCE)\nB) SSH server (port 22) running OpenSSH 8.2 (latest version, no known CVEs)\nC) MongoDB database (port 27017) with authentication enabled\nD) Security camera (port 8080) with title \"IP Camera\" and default admin/admin credentials mentioned in banner\n\nWhich finding should you prioritize for immediate remediation, and why?\n\nCorrect Answer: A) Web server with CVE-2021-41773 (path traversal RCE)\n\nExplanation: While option D (camera with default credentials) is also critical, option A is the highest priority for several reasons: (1) CVE-2021-41773 is a Remote Code Execution vulnerability allowing attackers to run arbitrary commands on the server—this is the most severe class of vulnerability. (2) The vulnerability is publicly known and actively exploited (exploits are widely available). (3) A compromised web server can lead to complete system takeover, data theft, and lateral movement to other systems. (4) Web servers typically have higher privileges and access than IoT devices like cameras. Option D is concerning because default credentials allow unauthorized access, but the impact is limited to camera feed access and potentially using the camera as a pivot point. Option B (SSH with latest version) is low risk—exposure is expected for remote administration, and no known vulnerabilities exist. Option C (MongoDB with auth) is properly secured. The prioritization framework: RCE vulnerabilities > Authentication issues > Properly configured services. Both A and D need immediate attention, but A could result in complete infrastructure compromise within hours, while D's impact is more limited.",
        "difficulty": 3
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "## Reflection: The IoT Attack Surface\n\nCongratulations on completing Shodan & IoT Search! You've learned how attackers discover vulnerable devices and how defenders can find their own exposure before attackers do. Take a moment to reflect on what this means for your security practice.\n\n### Reflection Questions\n\n**1. Your Organization's IoT Footprint**\n\nPerform a Shodan search on your organization (with authorization):\n- Query: `org:\"Your Organization Name\"`\n- How many devices appear?\n- Were you surprised by any findings?\n- Did you discover IoT devices you didn't know were internet-facing?\n- How many devices had concerning configurations (default credentials, outdated software, unnecessary exposure)?\n\n**Action**: Create a list of 5 most concerning findings and share with your security team.\n\n**2. The Mirai Case Study Lessons**\n\nReflect on the Mirai botnet case:\n- What surprised you most about how simple the attack was?\n- Why do you think millions of devices still had default credentials in 2016?\n- Do you think the same vulnerabilities exist today in 2025?\n- What would you do differently if you were responsible for IoT security at a large organization?\n\n**3. Ethical Considerations**\n\nImagine you discover an exposed webcam feed via Shodan showing a hospital operating room:\n- Is viewing the feed legal? (It requires no authentication)\n- Is it ethical?\n- What should you do?\n- Who should you notify?\n\n**Consider**: Just because something is accessible doesn't make accessing it legal or ethical. What's your personal framework for making this decision?\n\n**4. Defense Prioritization**\n\nYou have limited time and resources. Rank these findings by remediation priority:\n- [ ] 50 webcams with default credentials (low business impact, but easy to fix)\n- [ ] 1 MongoDB database without authentication (high business impact, contains customer data)\n- [ ] 10 RDP servers exposed to internet (potential ransomware vector)\n- [ ] 5 Windows XP machines (outdated OS, end-of-life)\n- [ ] 100 web servers with minor SSL configuration issues (low severity)\n\n**Your ranking**: ___________\n\n**Justification**: Why did you prioritize in this order? What factors influenced your decision (impact, likelihood, ease of exploitation, business continuity)?\n\n**5. Red Team vs. Blue Team Perspective**\n\nReflect from both viewpoints:\n\n**As a Red Teamer**:\n- What would you search for first in Shodan during a penetration test?\n- What types of devices provide the easiest initial access?\n- How would you chain IoT device access to deeper network penetration?\n\n**As a Blue Teamer**:\n- How often should you perform Shodan scans of your organization?\n- What processes would you implement to prevent IoT devices from being exposed?\n- How would you handle shadow IT (devices deployed without security team knowledge)?\n\n**Synthesis**: How do these perspectives complement each other?\n\n**6. The Bigger Picture: IoT Security Culture**\n\nReflect on organizational culture:\n- Why do you think IoT devices are often neglected in security strategies?\n- Who in your organization is responsible for IoT security? (IT? Security? Facilities? No one?)\n- How would you build awareness about IoT risks across different departments?\n- What policy changes would you recommend?\n\n---\n\n### Practical Next Steps\n\n**Before moving to Lesson 6 (Maltego & Relationship Mapping)**:\n\n1. **Perform a complete Shodan assessment** on your organization:\n   - Organization search\n   - Critical service identification\n   - Database exposure check\n   - IoT device discovery\n   - Vulnerability verification\n\n2. **Document your findings** in a formal report:\n   - Executive summary\n   - Detailed findings with risk ratings\n   - Remediation recommendations\n   - Timeline for fixes\n\n3. **Create a monitoring process**:\n   - Set up Shodan monitors (if you have paid account)\n   - Schedule recurring manual searches (monthly minimum)\n   - Define escalation procedures for critical findings\n\n4. **Educate your team**:\n   - Share Mirai case study with leadership\n   - Demonstrate Shodan to IT/security team\n   - Build awareness about IoT exposure\n\n5. **Implement preventive measures**:\n   - Network segmentation for IoT devices\n   - Default credential audit and change policy\n   - Firewall rules to block unnecessary exposure\n   - Regular IoT asset inventory\n\n---\n\n### Key Takeaways\n\nAs you continue your OSINT journey:\n\n1. **Shodan makes the invisible visible**: Millions of devices you didn't know existed are one search away.\n\n2. **IoT security is often an afterthought**: Many organizations focus on traditional IT while IoT devices multiply in the shadows.\n\n3. **Default credentials are still the #1 risk**: Even in 2025, attackers succeed with admin/admin.\n\n4. **What attackers can find, you should find first**: Defensive Shodan use is critical for security posture.\n\n5. **Reconnaissance is legal; exploitation is not**: Know where the line is and never cross it.\n\n6. **Use multiple search engines**: Shodan, Censys, and ZoomEye each provide different perspectives.\n\nYou now understand how attackers discover vulnerable devices and how massive botnets like Mirai come to exist. More importantly, you know how to find your organization's exposure before attackers do.\n\nIn the next lesson, you'll learn to map relationships between discovered infrastructure using Maltego—connecting the dots between domains, IPs, people, and organizations to build comprehensive intelligence pictures."
      }
    }
  ],
  "post_assessment": [
    {
      "question": "During a Shodan search, you discover a Siemens S7 PLC (Programmable Logic Controller) for a water treatment facility with port 102 (S7comm protocol) exposed to the internet and no authentication. The banner reveals it's controlling chemical dosing pumps. What is the MOST appropriate course of action?",
      "options": [
        "Immediately report to US-CERT/CISA as critical infrastructure vulnerability, then notify the facility owner",
        "Attempt to connect to verify the vulnerability, document the finding, then report to facility owner",
        "Post about the finding on Twitter to raise public awareness about critical infrastructure security",
        "Do nothing—this is the facility's responsibility and reporting might expose you to legal liability"
      ],
      "correct_answer": 0,
      "explanation": "Option A is correct and represents best practices for critical infrastructure vulnerability disclosure. Here's why: (1) Critical infrastructure (water, power, healthcare, transportation) falls under CISA's jurisdiction in the US. Reporting to CISA (via US-CERT) ensures coordinated response and protects you legally under responsible disclosure frameworks. (2) Water treatment facilities are classified as critical national infrastructure—compromise could endanger public health. (3) CISA has established relationships with facility operators and can coordinate notification diplomatically. (4) Documenting the finding through official channels protects you from legal retaliation. Option B is WRONG because attempting to connect to an ICS device without authorization is illegal (CFAA violation) and potentially dangerous—you could cause physical damage or disruption. ICS devices are fragile and not designed for security testing. Option C is WRONG and potentially illegal—public disclosure before the facility has a chance to respond is irresponsible and could enable attackers to exploit the vulnerability. This is the opposite of responsible disclosure. Option D is WRONG because you have a moral and often legal obligation to report critical infrastructure vulnerabilities. Many jurisdictions have 'Good Samaritan' laws protecting security researchers who report vulnerabilities responsibly. The proper disclosure timeline: (1) Report to CISA immediately (24 hours), (2) CISA coordinates with facility, (3) Facility remediates, (4) Only after remediation, consider public disclosure if appropriate. This scenario is based on real incidents—exposed ICS devices have been found controlling power grids, water treatment, and manufacturing. Responsible disclosure has prevented real-world disasters.",
      "difficulty": 3
    },
    {
      "question": "You're conducting authorized reconnaissance on your company and discover via Shodan that a MongoDB database (port 27017) has been exposed for 6 months. The database contains customer PII and has no authentication. You also find the same database listed in a 3-month-old Pastebin post titled 'Exposed Databases' with connection details. What is the MOST critical immediate action?",
      "options": [
        "Block port 27017 at the firewall level to stop further unauthorized access",
        "Immediately investigate authentication logs and assume breach—begin incident response protocol",
        "Enable MongoDB authentication and notify customers of potential data exposure under GDPR/data breach laws",
        "Take the database offline completely until security assessment is complete"
      ],
      "correct_answer": 1,
      "explanation": "Option B is correct. This scenario describes a likely breach, not just a vulnerability. Here's the critical thinking: (1) Database exposed for 6 months with no auth = window of vulnerability. (2) Pastebin post 3 months ago = public knowledge of exposure. (3) Assumption: If one person found it and posted publicly, others found it too. (4) Under GDPR/CCPA/breach notification laws, you must ASSUME breach until proven otherwise when sensitive data is exposed. Option B is correct because your first step is incident response: (a) Preserve evidence (don't alter the database yet), (b) Review logs to determine if unauthorized access occurred, (c) Identify what data was accessed, (d) Determine breach notification obligations. Only after investigation do you remediate. Option A (blocking the port) is necessary but not sufficient—damage may already be done, and you'd be destroying evidence of access. Option C (enabling auth + notification) jumps ahead—you need to investigate FIRST to know what to notify (what data was accessed? how many customers affected?). Option D (taking offline) might be necessary for containment, but investigating logs comes first—once you take it offline, you lose the ability to monitor ongoing attacker activity. The correct sequence: (1) Assume breach, activate IR team [Option B], (2) Preserve evidence and analyze logs, (3) Contain (block access or take offline) [Options A or D], (4) Eradicate (enable auth, fix config), (5) Notify (customers, regulators) [Option C], (6) Recover and improve. This scenario is realistic—many Shodan findings turn out to be active breaches. The MongoDB exposure problem was so widespread that in 2017, ransom attacks targeted tens of thousands of exposed MongoDB instances, wiping data and demanding Bitcoin payment. Companies that assumed 'exposure = vulnerability' instead of 'exposure = breach' often discovered too late that data had been exfiltrated months earlier.",
      "difficulty": 3
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "spaced_repetition",
    "visualization",
    "real_world_application",
    "mistakes_as_learning"
  ],
  "mitre_attack_tags": [
    "T1595.002 - Active Scanning: Vulnerability Scanning",
    "T1590 - Gather Victim Network Information",
    "T1592 - Gather Victim Host Information",
    "T1596 - Search Open Technical Databases",
    "T1595 - Active Scanning"
  ]
}
