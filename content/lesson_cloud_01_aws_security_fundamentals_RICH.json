{
  "lesson_id": "c1a2b3d4-5e6f-7a8b-9c0d-1e2f3a4b5c6d",
  "domain": "cloud",
  "title": "AWS Security Fundamentals and Best Practices",
  "difficulty": 1,
  "order_index": 1,
  "prerequisites": [
    "a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d"
  ],
  "concepts": [
    "AWS Identity and Access Management (IAM)",
    "AWS Security Best Practices",
    "S3 Bucket Security and Misconfigurations",
    "CloudTrail Logging and Monitoring",
    "AWS Security Groups vs NACLs",
    "IAM Policy Structure and Least Privilege",
    "AWS Organizations and Multi-Account Strategy",
    "AWS Key Management Service (KMS)",
    "AWS Secrets Manager",
    "VPC Security Architecture",
    "AWS GuardDuty Threat Detection",
    "AWS Config Compliance Monitoring",
    "Common AWS Attack Vectors",
    "Capital One Breach Case Study",
    "Server-Side Request Forgery (SSRF) on EC2",
    "IAM Role Assumption Attacks"
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Understand AWS IAM fundamentals including users, roles, policies, and groups",
    "Configure S3 buckets securely to prevent data exposure and unauthorized access",
    "Implement CloudTrail logging for comprehensive audit trails and incident investigation",
    "Design secure VPC architectures with proper security groups and network ACLs",
    "Apply the principle of least privilege to IAM policies and resource permissions",
    "Use AWS native security services (GuardDuty, Config, Security Hub) for threat detection",
    "Analyze the Capital One breach to understand cloud-specific attack vectors",
    "Implement encryption at rest and in transit using KMS and certificate management",
    "Detect and prevent common AWS misconfigurations that lead to security incidents",
    "Develop a multi-account security strategy using AWS Organizations and Control Tower"
  ],
  "content_blocks": [
    {
      "type": "explanation",
      "title": "Introduction to AWS Security Architecture",
      "content": {
        "text": "Welcome to AWS Security Fundamentals! You're about to master the most critical cloud security skills in today's job market. According to the 2024 Cloud Security Report, 95% of organizations have workloads in AWS, and 98% cite security as their top cloud concern. That means AWS security expertise isn't just valuable—it's ESSENTIAL.\n\n**Why AWS Security Matters More Than Ever**\n\nThe cloud has fundamentally changed the security landscape. Traditional perimeter-based defenses don't work when your infrastructure is software-defined and accessible from anywhere. In 2019, Capital One suffered one of the largest cloud breaches in history—over 100 million customer records exposed due to a misconfigured web application firewall and overly permissive IAM roles. The breach cost Capital One $190 million in settlements and immeasurable reputational damage.\n\nBut here's the empowering truth: that breach was 100% preventable with proper AWS security practices. And you're about to learn exactly how to prevent incidents like this.\n\n**The AWS Shared Responsibility Model**\n\nAWS security operates under the \"Shared Responsibility Model\"—one of the most important concepts you'll learn:\n\n```\n┌─────────────────────────────────────────────────────┐\n│           AWS SHARED RESPONSIBILITY MODEL           │\n├─────────────────────────────────────────────────────┤\n│  CUSTOMER RESPONSIBILITY (Security IN the Cloud)    │\n│  ┌───────────────────────────────────────────────┐  │\n│  │ • Customer Data                               │  │\n│  │ • IAM Users, Roles, Policies                  │  │\n│  │ • Application Security                        │  │\n│  │ • Operating System Patching (EC2)             │  │\n│  │ • Network Configuration (Security Groups)     │  │\n│  │ • Encryption (Data at Rest and In Transit)    │  │\n│  │ • S3 Bucket Policies and ACLs                 │  │\n│  └───────────────────────────────────────────────┘  │\n├─────────────────────────────────────────────────────┤\n│  AWS RESPONSIBILITY (Security OF the Cloud)         │\n│  ┌───────────────────────────────────────────────┐  │\n│  │ • Physical Data Center Security               │  │\n│  │ • Hardware Infrastructure                     │  │\n│  │ • Network Infrastructure                      │  │\n│  │ • Virtualization Layer (Hypervisor)           │  │\n│  │ • Managed Service Security (RDS, S3, Lambda)  │  │\n│  └───────────────────────────────────────────────┘  │\n└─────────────────────────────────────────────────────┘\n```\n\nAWS secures the infrastructure (hardware, data centers, network), but YOU are responsible for securing what you put IN that infrastructure. This lesson teaches you how to master your side of the shared responsibility model.\n\n**AWS Identity and Access Management (IAM): The Foundation**\n\nIAM is the bedrock of AWS security. Every AWS action requires authentication (who are you?) and authorization (what can you do?). IAM controls both.\n\n**IAM Core Components:**\n\n1. **Users** - Individual identities (e.g., john.doe@company.com)\n2. **Groups** - Collections of users (e.g., \"Developers\", \"DBAs\")\n3. **Roles** - Temporary credentials for services or federated users\n4. **Policies** - JSON documents defining permissions\n\n**IAM Best Practice #1: Never Use Root Account**\n\nWhen you create an AWS account, you get a \"root\" user with unrestricted access. This is like logging into Linux as root 24/7—extremely dangerous. The root account should:\n- Have MFA (Multi-Factor Authentication) enabled immediately\n- Never have access keys (programmatic access)\n- Only be used for initial setup and billing tasks\n- Have its credentials stored in a physical safe\n\nReal-world incident: In 2020, an AWS customer's root account was compromised because the email/password was reused from a LinkedIn breach. Attackers spun up hundreds of EC2 instances for cryptocurrency mining, costing the company $50,000 in two days.\n\n**IAM Best Practice #2: Principle of Least Privilege**\n\nGrant the minimum permissions necessary for a task—no more. Many breaches happen because developers have more access than needed.\n\nBad Example (too permissive):\n```json\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [{\n\"Effect\": \"Allow\",\n\"Action\": \"*\",\n\"Resource\": \"*\"\n}]\n}\n```\n\nThis grants FULL ACCESS to EVERYTHING—the equivalent of giving every employee the master key to every room in a building.\n\nGood Example (least privilege):\n```json\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [{\n\"Effect\": \"Allow\",\n\"Action\": [\n\"s3:GetObject\",\n\"s3:PutObject\"\n],\n\"Resource\": \"arn:aws:s3:::my-app-bucket/uploads/*\"\n}]\n}\n```\n\nThis allows ONLY reading and writing to a specific folder in ONE S3 bucket—exactly what a file upload service needs.\n\n**Understanding IAM Policy Structure**\n\nIAM policies are JSON documents with this structure:\n\n```json\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Sid\": \"AllowEC2ReadOnly\",\n\"Effect\": \"Allow\",\n\"Action\": [\n\"ec2:Describe*\",\n\"ec2:Get*\"\n],\n\"Resource\": \"*\",\n\"Condition\": {\n\"IpAddress\": {\n\"aws:SourceIp\": \"203.0.113.0/24\"\n}\n}\n}\n]\n}\n```\n\n**Breaking it down:**\n- **Version**: Always \"2012-10-17\" (the current IAM policy language version)\n- **Statement**: Array of permission statements\n- **Sid**: Statement ID (optional, for documentation)\n- **Effect**: \"Allow\" or \"Deny\"\n- **Action**: AWS API actions (e.g., \"s3:GetObject\", \"ec2:RunInstances\")\n- **Resource**: ARN (Amazon Resource Name) of resources this applies to\n- **Condition**: Optional constraints (IP address, time, MFA required, etc.)\n\n**Policy Evaluation Logic**\n\nAWS evaluates policies in this order:\n1. **Explicit Deny** - If any policy denies, access is denied (deny always wins)\n2. **Explicit Allow** - If any policy allows and nothing denies, access is allowed\n3. **Implicit Deny** - If nothing explicitly allows, access is denied by default\n\nThis is critical for security: AWS is \"deny by default\". You must explicitly grant permissions.\n\n**IAM Roles vs Users: When to Use What**\n\n**Users** are for long-term credentials:\n- Human administrators and developers\n- Service accounts that need permanent access keys (not recommended, but sometimes necessary)\n\n**Roles** are for temporary credentials:\n- EC2 instances accessing S3 or databases\n- Lambda functions accessing DynamoDB\n- Cross-account access (Company A accessing Company B's resources)\n- Federated users (SSO from Okta, Azure AD, Google Workspace)\n\n**Why Roles Are More Secure:**\n- Credentials rotate automatically (every 15 minutes to 12 hours)\n- No long-term access keys to leak in Git repositories\n- Temporary credentials can't be used if stolen after expiration\n\nCapital One breach lesson: The attacker obtained IAM role credentials from a compromised EC2 instance. If those credentials had expired quickly and been scoped minimally, the breach scope would have been far smaller.\n\n**S3 Bucket Security: The Most Common Cloud Vulnerability**\n\nS3 (Simple Storage Service) is AWS's object storage. It's also the #1 source of cloud data breaches. Why? Because it's easy to misconfigure.\n\n**The Three Layers of S3 Security:**\n\n1. **Block Public Access** (account and bucket level)\n2. **Bucket Policies** (resource-based policies)\n3. **IAM Policies** (identity-based policies)\n4. **Access Control Lists (ACLs)** - legacy, avoid using\n\n**S3 Block Public Access Settings:**\n\nIn 2018, AWS introduced \"Block Public Access\" settings after numerous data exposure incidents. These are your safety net:\n\n```\n┌─────────────────────────────────────────────────┐\n│      S3 BLOCK PUBLIC ACCESS SETTINGS            │\n├─────────────────────────────────────────────────┤\n│ ☑ Block public access to buckets and objects   │\n│   granted through new access control lists      │\n│                                                 │\n│ ☑ Block public access to buckets and objects   │\n│   granted through any access control lists      │\n│                                                 │\n│ ☑ Block public access to buckets and objects   │\n│   granted through new public bucket policies    │\n│                                                 │\n│ ☑ Block public and cross-account access to     │\n│   buckets and objects through any public        │\n│   bucket policies                               │\n└─────────────────────────────────────────────────┘\n```\n\n**Default setting for new accounts**: All four are ENABLED (as of 2023).\n**Your job**: Keep them enabled unless you have a specific, documented reason to disable them.\n\n**Real-World S3 Breach Examples:**\n\n1. **Capital One (2019)**: 100 million records exposed\n2. **Facebook (2019)**: 540 million user records exposed via third-party S3 bucket\n3. **Verizon (2017)**: 14 million customer records exposed\n4. **Accenture (2017)**: 137 GB of data exposed including passwords and decryption keys\n5. **Dow Jones (2017)**: 2.2 million customer records exposed\n\nCommon thread: Misconfigured S3 bucket permissions.\n\n**How to Secure S3 Buckets:**\n\n```\n1. Enable Block Public Access at ACCOUNT level (applies to all buckets)\n2. Enable S3 bucket versioning (recover from accidental deletions/modifications)\n3. Enable S3 server access logging (track all requests)\n4. Enable S3 Object Lock for compliance (WORM - Write Once Read Many)\n5. Use bucket policies with explicit IP restrictions\n6. Encrypt data at rest with S3 default encryption (AES-256 or KMS)\n7. Encrypt data in transit (require TLS 1.2+)\n8. Enable AWS CloudTrail for S3 data events (who accessed what)\n9. Use VPC Endpoints for S3 access from EC2 (avoid public internet)\n10. Regular audits with AWS Access Analyzer and Trusted Advisor\n```\n\n**CloudTrail: Your AWS Audit Log**\n\nCloudTrail records every API call made in your AWS account. This is like security camera footage for your cloud infrastructure.\n\n**What CloudTrail Captures:**\n- Who made the request (user/role identity)\n- When (timestamp with millisecond precision)\n- What action (API call, e.g., \"RunInstances\", \"PutObject\")\n- Which resource (ARN of affected resource)\n- From where (source IP address)\n- Result (success or failure with error code)\n\n**CloudTrail Event Example:**\n```json\n{\n\"eventVersion\": \"1.08\",\n\"userIdentity\": {\n\"type\": \"IAMUser\",\n\"userName\": \"john.doe\",\n\"principalId\": \"AIDAI234567EXAMPLE\"\n},\n\"eventTime\": \"2024-01-15T14:32:18Z\",\n\"eventSource\": \"s3.amazonaws.com\",\n\"eventName\": \"PutBucketPolicy\",\n\"sourceIPAddress\": \"203.0.113.42\",\n\"userAgent\": \"aws-cli/2.13.5\",\n\"requestParameters\": {\n\"bucketName\": \"sensitive-data-bucket\",\n\"policy\": \"<JSON policy document>\"\n},\n\"responseElements\": null,\n\"requestID\": \"EXAMPLE123456789\",\n\"eventID\": \"abc-123-def-456\",\n\"eventType\": \"AwsApiCall\",\n\"recipientAccountId\": \"123456789012\"\n}\n```\n\nThis event shows user \"john.doe\" modified the bucket policy for \"sensitive-data-bucket\" at 2:32 PM on January 15, 2024, from IP address 203.0.113.42.\n\n**Incident Response Use Case:**\n\nSay you discover unauthorized S3 data access at 3:00 AM. With CloudTrail, you can:\n\n1. Identify the compromised IAM credentials\n2. See all API calls made with those credentials\n3. Determine what data was accessed or exfiltrated\n4. Trace the attack timeline from initial access to data theft\n5. Identify the source IP and user agent (was it a script? a browser?)\n\n**CloudTrail Best Practices:**\n\n✅ Enable in ALL regions (attackers often use unused regions)\n✅ Store logs in a dedicated security account (not production)\n✅ Enable log file integrity validation (detect tampering)\n✅ Encrypt logs with KMS\n✅ Set up S3 lifecycle policies (move old logs to Glacier for cost savings)\n✅ Send logs to CloudWatch Logs for real-time alerting\n✅ Enable S3 data events (logs object-level operations like GetObject)\n\n**AWS VPC Security Architecture**\n\nVPC (Virtual Private Cloud) is your software-defined network in AWS. Proper VPC design is critical for defense in depth.\n\n**VPC Security Components:**\n\n```\n┌───────────────────────────────────────────────────────────┐\n│                      VPC (10.0.0.0/16)                    │\n│                                                           │\n│  ┌─────────────────────────────────────────────────┐    │\n│  │  Public Subnet (10.0.1.0/24)                    │    │\n│  │  ┌──────────────┐  ┌──────────────┐             │    │\n│  │  │ Web Server   │  │ Web Server   │             │    │\n│  │  │ (Security    │  │ (Security    │             │    │\n│  │  │  Group: HTTP)│  │  Group: HTTP)│             │    │\n│  │  └──────────────┘  └──────────────┘             │    │\n│  └─────────────────────────────────────────────────┘    │\n│                         │                                │\n│                         ↓                                │\n│  ┌─────────────────────────────────────────────────┐    │\n│  │  Private Subnet (10.0.2.0/24)                   │    │\n│  │  ┌──────────────┐  ┌──────────────┐             │    │\n│  │  │ App Server   │  │ App Server   │             │    │\n│  │  │ (Security    │  │ (Security    │             │    │\n│  │  │  Group: 8080)│  │  Group: 8080)│             │    │\n│  │  └──────────────┘  └──────────────┘             │    │\n│  └─────────────────────────────────────────────────┘    │\n│                         │                                │\n│                         ↓                                │\n│  ┌─────────────────────────────────────────────────┐    │\n│  │  Private Subnet (10.0.3.0/24)                   │    │\n│  │  ┌──────────────┐                                │    │\n│  │  │   RDS MySQL  │                                │    │\n│  │  │ (Security    │                                │    │\n│  │  │  Group: 3306)│                                │    │\n│  │  └──────────────┘                                │    │\n│  └─────────────────────────────────────────────────┘    │\n│                                                           │\n└───────────────────────────────────────────────────────────┘\n│                               │\nInternet Gateway              NAT Gateway\n(Inbound/Outbound)           (Outbound Only)\n```\n\n**Security Groups vs Network ACLs:**\n\n**Security Groups (Stateful - Recommended):**\n- Applied to EC2 instances/ENIs\n- Stateful (return traffic automatically allowed)\n- Rules are \"Allow\" only (deny by default)\n- Evaluate all rules before deciding\n\n**Network ACLs (Stateless - Secondary Defense):**\n- Applied to subnets\n- Stateless (must explicitly allow return traffic)\n- Rules can \"Allow\" or \"Deny\"\n- Evaluate rules in numerical order\n\n**Security Group Example (Web Server):**\n```\nInbound Rules:\n- Type: HTTP, Protocol: TCP, Port: 80, Source: 0.0.0.0/0\n- Type: HTTPS, Protocol: TCP, Port: 443, Source: 0.0.0.0/0\n- Type: SSH, Protocol: TCP, Port: 22, Source: 203.0.113.0/24 (office IP)\n\nOutbound Rules:\n- Type: All traffic, Protocol: All, Port: All, Destination: 0.0.0.0/0\n```\n\nNotice SSH is restricted to the office IP range—not open to the entire internet.\n\n**AWS Security Services: Your Force Multipliers**\n\n**1. AWS GuardDuty (Threat Detection)**\n\nGuardDuty uses machine learning to analyze:\n- CloudTrail logs (AWS API activity)\n- VPC Flow Logs (network traffic)\n- DNS query logs (domain lookups)\n\nIt detects:\n- Compromised EC2 instances (crypto mining, C2 communication)\n- Compromised IAM credentials (unusual API activity, impossible travel)\n- Reconnaissance activity (port scanning, brute force)\n- Data exfiltration (unusual data transfers)\n\n**Example GuardDuty Finding:**\n```\nTitle: UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration\nSeverity: High\nDescription: An IAM user's temporary credentials from an EC2 instance \nwere used from an external IP address.\nRecommendation: Rotate credentials, investigate the external IP, \nreview CloudTrail for actions taken.\n```\n\n**2. AWS Config (Compliance Monitoring)**\n\nConfig continuously monitors resource configurations and evaluates them against rules:\n\n- Are S3 buckets encrypted?\n- Are security groups allowing unrestricted SSH (0.0.0.0/0:22)?\n- Are RDS databases publicly accessible?\n- Are EC2 instances using approved AMIs?\n\n**3. AWS Security Hub (Unified Dashboard)**\n\nSecurity Hub aggregates findings from:\n- GuardDuty\n- Inspector (vulnerability scanning)\n- Macie (sensitive data discovery)\n- IAM Access Analyzer\n- Third-party tools (Palo Alto, Tenable, etc.)\n\nIt also runs automated security checks against:\n- CIS AWS Foundations Benchmark\n- PCI-DSS compliance\n- AWS Foundational Security Best Practices\n\n**Multi-Account Security Strategy**\n\nEnterprise AWS security requires MULTIPLE accounts, not one giant account. Why?\n\n1. **Blast radius containment** - A breach in development doesn't affect production\n2. **Billing separation** - Know exactly what each team/project costs\n3. **Regulatory compliance** - Isolate PCI, HIPAA, SOC 2 workloads\n4. **Simpler IAM** - Fewer users per account = clearer permissions\n\n**Typical Multi-Account Structure:**\n```\nManagement Account (root organization)\n├── Security Account (CloudTrail, GuardDuty aggregation)\n├── Log Archive Account (centralized logging)\n├── Audit Account (read-only access for compliance)\n├── Shared Services Account (Active Directory, DNS)\n├── Development Account\n├── Staging Account\n└── Production Account\n```\n\n**AWS Organizations** lets you:\n- Centrally manage multiple accounts\n- Apply Service Control Policies (SCPs) - guardrails across accounts\n- Consolidated billing\n- Automated account creation\n\n**Service Control Policy Example (Prevent Public S3 Buckets):**\n```json\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [{\n\"Effect\": \"Deny\",\n\"Action\": [\n\"s3:PutBucketPolicy\",\n\"s3:PutBucketAcl\",\n\"s3:PutObjectAcl\"\n],\n\"Resource\": \"*\",\n\"Condition\": {\n\"StringEquals\": {\n\"s3:x-amz-acl\": [\n\"public-read\",\n\"public-read-write\"\n]\n}\n}\n}]\n}\n```\n\nThis SCP prevents ANYONE in the account from making S3 buckets public, even administrators.\n\n**Key Takeaway**\n\nAWS security is a shared responsibility. AWS secures the infrastructure, but YOU must secure your data, IAM, network, and applications. Master IAM (least privilege, roles over users), secure S3 buckets (Block Public Access, encryption, logging), enable CloudTrail for auditability, and leverage AWS security services like GuardDuty and Config. The Capital One breach was preventable with these practices—and now you know how to prevent the next one."
      }
    },
    {
      "type": "code_exercise",
      "title": "Hands-On AWS Security Configuration",
      "content": {
        "text": "Let's put your AWS security knowledge into practice with real-world configuration tasks. These exercises use the AWS CLI and demonstrate production-ready security implementations.\n\n**Exercise 1: Secure IAM User Creation with MFA Enforcement**\n\nCreate a new IAM user with proper security controls:\n\n```bash\n# 1. Create a new IAM user\naws iam create-user --user-name jane.developer\n\n# 2. Add user to a group (better than direct policy attachment)\naws iam create-group --group-name Developers\naws iam add-user-to-group --user-name jane.developer --group-name Developers\n\n# 3. Attach a managed policy to the group (least privilege example)\naws iam attach-group-policy \\\n--group-name Developers \\\n--policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess\n\n# 4. Create a custom policy requiring MFA for sensitive actions\ncat > require-mfa-policy.json << 'EOF'\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Sid\": \"AllowAllActionsWithMFA\",\n\"Effect\": \"Allow\",\n\"Action\": \"*\",\n\"Resource\": \"*\",\n\"Condition\": {\n\"BoolIfExists\": {\n\"aws:MultiFactorAuthPresent\": \"true\"\n}\n}\n},\n{\n\"Sid\": \"DenyAllActionsWithoutMFA\",\n\"Effect\": \"Deny\",\n\"NotAction\": [\n\"iam:CreateVirtualMFADevice\",\n\"iam:EnableMFADevice\",\n\"iam:GetUser\",\n\"iam:ListMFADevices\",\n\"iam:ListVirtualMFADevices\",\n\"iam:ResyncMFADevice\",\n\"sts:GetSessionToken\"\n],\n\"Resource\": \"*\",\n\"Condition\": {\n\"BoolIfExists\": {\n\"aws:MultiFactorAuthPresent\": \"false\"\n}\n}\n}\n]\n}\nEOF\n\n# 5. Create and attach the MFA policy\naws iam create-policy \\\n--policy-name RequireMFAPolicy \\\n--policy-document file://require-mfa-policy.json\n\naws iam attach-user-policy \\\n--user-name jane.developer \\\n--policy-arn arn:aws:iam::YOUR-ACCOUNT-ID:policy/RequireMFAPolicy\n\n# 6. Generate initial credentials\naws iam create-login-profile \\\n--user-name jane.developer \\\n--password 'TempPassword123!' \\\n--password-reset-required\n\n# 7. Create access keys (if programmatic access needed)\naws iam create-access-key --user-name jane.developer\n```\n\n**What This Does:**\n- Creates user and assigns to group (scalable permission management)\n- Requires password reset on first login\n- Enforces MFA for all actions except MFA setup itself\n- Follows principle of least privilege\n\n**Exercise 2: Secure S3 Bucket Configuration**\n\nCreate a production-ready S3 bucket with all security controls:\n\n```bash\n# 1. Create the bucket (with versioning enabled from the start)\naws s3api create-bucket \\\n--bucket my-secure-app-data-prod \\\n--region us-east-1\n\n# 2. Block ALL public access (critical first step)\naws s3api put-public-access-block \\\n--bucket my-secure-app-data-prod \\\n--public-access-block-configuration \\\n\"BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true\"\n\n# 3. Enable versioning (protection against accidental deletion/modification)\naws s3api put-bucket-versioning \\\n--bucket my-secure-app-data-prod \\\n--versioning-configuration Status=Enabled\n\n# 4. Enable default encryption (AES-256)\naws s3api put-bucket-encryption \\\n--bucket my-secure-app-data-prod \\\n--server-side-encryption-configuration '{\n\"Rules\": [{\n\"ApplyServerSideEncryptionByDefault\": {\n\"SSEAlgorithm\": \"AES256\"\n},\n\"BucketKeyEnabled\": true\n}]\n}'\n\n# 5. Enable server access logging\naws s3api put-bucket-logging \\\n--bucket my-secure-app-data-prod \\\n--bucket-logging-status '{\n\"LoggingEnabled\": {\n\"TargetBucket\": \"my-s3-access-logs\",\n\"TargetPrefix\": \"app-data-logs/\"\n}\n}'\n\n# 6. Apply a restrictive bucket policy (require TLS, restrict to VPC)\ncat > bucket-policy.json << 'EOF'\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Sid\": \"DenyInsecureTransport\",\n\"Effect\": \"Deny\",\n\"Principal\": \"*\",\n\"Action\": \"s3:*\",\n\"Resource\": [\n\"arn:aws:s3:::my-secure-app-data-prod\",\n\"arn:aws:s3:::my-secure-app-data-prod/*\"\n],\n\"Condition\": {\n\"Bool\": {\n\"aws:SecureTransport\": \"false\"\n}\n}\n},\n{\n\"Sid\": \"RestrictToVPC\",\n\"Effect\": \"Deny\",\n\"Principal\": \"*\",\n\"Action\": \"s3:*\",\n\"Resource\": [\n\"arn:aws:s3:::my-secure-app-data-prod\",\n\"arn:aws:s3:::my-secure-app-data-prod/*\"\n],\n\"Condition\": {\n\"StringNotEquals\": {\n\"aws:SourceVpc\": \"vpc-12345678\"\n}\n}\n}\n]\n}\nEOF\n\naws s3api put-bucket-policy \\\n--bucket my-secure-app-data-prod \\\n--policy file://bucket-policy.json\n\n# 7. Enable lifecycle policy (transition old versions to cheaper storage)\ncat > lifecycle-policy.json << 'EOF'\n{\n\"Rules\": [\n{\n\"Id\": \"ArchiveOldVersions\",\n\"Status\": \"Enabled\",\n\"NoncurrentVersionTransitions\": [\n{\n\"NoncurrentDays\": 30,\n\"StorageClass\": \"STANDARD_IA\"\n},\n{\n\"NoncurrentDays\": 90,\n\"StorageClass\": \"GLACIER\"\n}\n],\n\"NoncurrentVersionExpiration\": {\n\"NoncurrentDays\": 365\n}\n}\n]\n}\nEOF\n\naws s3api put-bucket-lifecycle-configuration \\\n--bucket my-secure-app-data-prod \\\n--lifecycle-configuration file://lifecycle-policy.json\n\n# 8. Verify security configuration\naws s3api get-public-access-block --bucket my-secure-app-data-prod\naws s3api get-bucket-encryption --bucket my-secure-app-data-prod\naws s3api get-bucket-versioning --bucket my-secure-app-data-prod\n```\n\n**Security Layers Applied:**\n✅ Public access blocked\n✅ Versioning enabled (ransomware protection)\n✅ Encryption at rest (AES-256)\n✅ TLS required (encryption in transit)\n✅ VPC restriction (network isolation)\n✅ Access logging enabled\n✅ Lifecycle management (cost optimization)\n\n**Exercise 3: Enable CloudTrail with Security Best Practices**\n\nSet up comprehensive CloudTrail logging:\n\n```bash\n# 1. Create a dedicated S3 bucket for CloudTrail logs\naws s3api create-bucket \\\n--bucket my-org-cloudtrail-logs \\\n--region us-east-1\n\n# 2. Apply CloudTrail bucket policy (allows CloudTrail service to write)\ncat > cloudtrail-bucket-policy.json << 'EOF'\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Sid\": \"AWSCloudTrailAclCheck\",\n\"Effect\": \"Allow\",\n\"Principal\": {\n\"Service\": \"cloudtrail.amazonaws.com\"\n},\n\"Action\": \"s3:GetBucketAcl\",\n\"Resource\": \"arn:aws:s3:::my-org-cloudtrail-logs\"\n},\n{\n\"Sid\": \"AWSCloudTrailWrite\",\n\"Effect\": \"Allow\",\n\"Principal\": {\n\"Service\": \"cloudtrail.amazonaws.com\"\n},\n\"Action\": \"s3:PutObject\",\n\"Resource\": \"arn:aws:s3:::my-org-cloudtrail-logs/AWSLogs/*\",\n\"Condition\": {\n\"StringEquals\": {\n\"s3:x-amz-acl\": \"bucket-owner-full-control\"\n}\n}\n}\n]\n}\nEOF\n\naws s3api put-bucket-policy \\\n--bucket my-org-cloudtrail-logs \\\n--policy file://cloudtrail-bucket-policy.json\n\n# 3. Create a KMS key for CloudTrail log encryption\nKMS_KEY_ID=$(aws kms create-key \\\n--description \"CloudTrail log encryption key\" \\\n--query 'KeyMetadata.KeyId' \\\n--output text)\n\naws kms create-alias \\\n--alias-name alias/cloudtrail-logs \\\n--target-key-id $KMS_KEY_ID\n\n# 4. Update KMS key policy to allow CloudTrail\ncat > kms-key-policy.json << EOF\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Sid\": \"Enable IAM User Permissions\",\n\"Effect\": \"Allow\",\n\"Principal\": {\n\"AWS\": \"arn:aws:iam::YOUR-ACCOUNT-ID:root\"\n},\n\"Action\": \"kms:*\",\n\"Resource\": \"*\"\n},\n{\n\"Sid\": \"Allow CloudTrail to encrypt logs\",\n\"Effect\": \"Allow\",\n\"Principal\": {\n\"Service\": \"cloudtrail.amazonaws.com\"\n},\n\"Action\": [\n\"kms:GenerateDataKey*\",\n\"kms:DecryptDataKey\"\n],\n\"Resource\": \"*\",\n\"Condition\": {\n\"StringLike\": {\n\"kms:EncryptionContext:aws:cloudtrail:arn\": \"arn:aws:cloudtrail:*:YOUR-ACCOUNT-ID:trail/*\"\n}\n}\n}\n]\n}\nEOF\n\naws kms put-key-policy \\\n--key-id $KMS_KEY_ID \\\n--policy-name default \\\n--policy file://kms-key-policy.json\n\n# 5. Create the CloudTrail trail with all features enabled\naws cloudtrail create-trail \\\n--name my-organization-trail \\\n--s3-bucket-name my-org-cloudtrail-logs \\\n--include-global-service-events \\\n--is-multi-region-trail \\\n--enable-log-file-validation \\\n--kms-key-id $KMS_KEY_ID\n\n# 6. Configure CloudTrail to log S3 data events (object-level operations)\ncat > event-selectors.json << 'EOF'\n{\n\"EventSelectors\": [\n{\n\"ReadWriteType\": \"All\",\n\"IncludeManagementEvents\": true,\n\"DataResources\": [\n{\n\"Type\": \"AWS::S3::Object\",\n\"Values\": [\n\"arn:aws:s3:::my-secure-app-data-prod/*\"\n]\n}\n]\n}\n]\n}\nEOF\n\naws cloudtrail put-event-selectors \\\n--trail-name my-organization-trail \\\n--event-selectors file://event-selectors.json\n\n# 7. Start logging\naws cloudtrail start-logging --name my-organization-trail\n\n# 8. Verify CloudTrail is active\naws cloudtrail get-trail-status --name my-organization-trail\naws cloudtrail describe-trails --trail-name-list my-organization-trail\n```\n\n**CloudTrail Security Features Enabled:**\n✅ Multi-region (captures activity in all regions)\n✅ Log file integrity validation (detect tampering)\n✅ KMS encryption (protect sensitive log data)\n✅ S3 data events (track object-level operations)\n✅ Global service events (IAM, STS, CloudFront)\n\n**Exercise 4: Create a Secure VPC with Public and Private Subnets**\n\n```bash\n# 1. Create the VPC\nVPC_ID=$(aws ec2 create-vpc \\\n--cidr-block 10.0.0.0/16 \\\n--query 'Vpc.VpcId' \\\n--output text)\n\naws ec2 create-tags \\\n--resources $VPC_ID \\\n--tags Key=Name,Value=SecureVPC\n\n# 2. Enable DNS hostnames (required for RDS, ELB)\naws ec2 modify-vpc-attribute \\\n--vpc-id $VPC_ID \\\n--enable-dns-hostnames\n\n# 3. Create public subnet (for load balancers, NAT gateways)\nPUBLIC_SUBNET_ID=$(aws ec2 create-subnet \\\n--vpc-id $VPC_ID \\\n--cidr-block 10.0.1.0/24 \\\n--availability-zone us-east-1a \\\n--query 'Subnet.SubnetId' \\\n--output text)\n\naws ec2 create-tags \\\n--resources $PUBLIC_SUBNET_ID \\\n--tags Key=Name,Value=PublicSubnet-1a\n\n# 4. Create private subnet (for application servers)\nPRIVATE_SUBNET_ID=$(aws ec2 create-subnet \\\n--vpc-id $VPC_ID \\\n--cidr-block 10.0.2.0/24 \\\n--availability-zone us-east-1a \\\n--query 'Subnet.SubnetId' \\\n--output text)\n\naws ec2 create-tags \\\n--resources $PRIVATE_SUBNET_ID \\\n--tags Key=Name,Value=PrivateSubnet-1a\n\n# 5. Create Internet Gateway (for public subnet)\nIGW_ID=$(aws ec2 create-internet-gateway \\\n--query 'InternetGateway.InternetGatewayId' \\\n--output text)\n\naws ec2 attach-internet-gateway \\\n--vpc-id $VPC_ID \\\n--internet-gateway-id $IGW_ID\n\n# 6. Create NAT Gateway (for private subnet outbound access)\n# First, allocate an Elastic IP for the NAT Gateway\nEIP_ALLOC_ID=$(aws ec2 allocate-address \\\n--domain vpc \\\n--query 'AllocationId' \\\n--output text)\n\nNAT_GW_ID=$(aws ec2 create-nat-gateway \\\n--subnet-id $PUBLIC_SUBNET_ID \\\n--allocation-id $EIP_ALLOC_ID \\\n--query 'NatGateway.NatGatewayId' \\\n--output text)\n\n# Wait for NAT Gateway to become available (takes 1-2 minutes)\naws ec2 wait nat-gateway-available --nat-gateway-ids $NAT_GW_ID\n\n# 7. Create route tables\nPUBLIC_RT_ID=$(aws ec2 create-route-table \\\n--vpc-id $VPC_ID \\\n--query 'RouteTable.RouteTableId' \\\n--output text)\n\nPRIVATE_RT_ID=$(aws ec2 create-route-table \\\n--vpc-id $VPC_ID \\\n--query 'RouteTable.RouteTableId' \\\n--output text)\n\n# 8. Add routes\n# Public subnet: route internet traffic to Internet Gateway\naws ec2 create-route \\\n--route-table-id $PUBLIC_RT_ID \\\n--destination-cidr-block 0.0.0.0/0 \\\n--gateway-id $IGW_ID\n\n# Private subnet: route internet traffic to NAT Gateway\naws ec2 create-route \\\n--route-table-id $PRIVATE_RT_ID \\\n--destination-cidr-block 0.0.0.0/0 \\\n--nat-gateway-id $NAT_GW_ID\n\n# 9. Associate route tables with subnets\naws ec2 associate-route-table \\\n--subnet-id $PUBLIC_SUBNET_ID \\\n--route-table-id $PUBLIC_RT_ID\n\naws ec2 associate-route-table \\\n--subnet-id $PRIVATE_SUBNET_ID \\\n--route-table-id $PRIVATE_RT_ID\n\n# 10. Create security groups\n# Web server security group (public subnet)\nWEB_SG_ID=$(aws ec2 create-security-group \\\n--group-name web-server-sg \\\n--description \"Security group for web servers\" \\\n--vpc-id $VPC_ID \\\n--query 'GroupId' \\\n--output text)\n\n# Allow HTTP from anywhere\naws ec2 authorize-security-group-ingress \\\n--group-id $WEB_SG_ID \\\n--protocol tcp \\\n--port 80 \\\n--cidr 0.0.0.0/0\n\n# Allow HTTPS from anywhere\naws ec2 authorize-security-group-ingress \\\n--group-id $WEB_SG_ID \\\n--protocol tcp \\\n--port 443 \\\n--cidr 0.0.0.0/0\n\n# Allow SSH only from your IP (REPLACE WITH YOUR IP)\naws ec2 authorize-security-group-ingress \\\n--group-id $WEB_SG_ID \\\n--protocol tcp \\\n--port 22 \\\n--cidr YOUR_IP_ADDRESS/32\n\n# Application server security group (private subnet)\nAPP_SG_ID=$(aws ec2 create-security-group \\\n--group-name app-server-sg \\\n--description \"Security group for application servers\" \\\n--vpc-id $VPC_ID \\\n--query 'GroupId' \\\n--output text)\n\n# Allow traffic only from web server security group\naws ec2 authorize-security-group-ingress \\\n--group-id $APP_SG_ID \\\n--protocol tcp \\\n--port 8080 \\\n--source-group $WEB_SG_ID\n\n# Database security group (private subnet)\nDB_SG_ID=$(aws ec2 create-security-group \\\n--group-name database-sg \\\n--description \"Security group for databases\" \\\n--vpc-id $VPC_ID \\\n--query 'GroupId' \\\n--output text)\n\n# Allow MySQL traffic only from application server security group\naws ec2 authorize-security-group-ingress \\\n--group-id $DB_SG_ID \\\n--protocol tcp \\\n--port 3306 \\\n--source-group $APP_SG_ID\n\necho \"VPC Setup Complete!\"\necho \"VPC ID: $VPC_ID\"\necho \"Public Subnet: $PUBLIC_SUBNET_ID\"\necho \"Private Subnet: $PRIVATE_SUBNET_ID\"\necho \"Web SG: $WEB_SG_ID\"\necho \"App SG: $APP_SG_ID\"\necho \"Database SG: $DB_SG_ID\"\n```\n\n**Security Architecture Highlights:**\n- Public subnet: Only for load balancers and NAT gateways (internet-facing)\n- Private subnet: Application servers and databases (no direct internet access)\n- NAT Gateway: Private subnet instances can reach internet for updates\n- Security groups: Layered defense (web → app → database)\n- SSH restricted to your IP only\n\n**Exercise 5: Detect Overly Permissive IAM Policies**\n\nUse AWS IAM Access Analyzer to find security issues:\n\n```bash\n# 1. Enable IAM Access Analyzer\nANALYZER_ARN=$(aws accessanalyzer create-analyzer \\\n--analyzer-name my-account-analyzer \\\n--type ACCOUNT \\\n--query 'arn' \\\n--output text)\n\necho \"Access Analyzer enabled: $ANALYZER_ARN\"\n\n# 2. Wait for initial scan (takes 10-30 minutes)\n# Then list findings\naws accessanalyzer list-findings \\\n--analyzer-arn $ANALYZER_ARN \\\n--query 'findings[?status==`ACTIVE`].[id, resourceType, resource]' \\\n--output table\n\n# 3. Get detailed finding information\naws accessanalyzer get-finding \\\n--analyzer-arn $ANALYZER_ARN \\\n--id FINDING_ID_HERE\n\n# 4. Script to check for overly permissive S3 buckets\nfor bucket in $(aws s3 ls | awk '{print $3}'); do\necho \"Checking bucket: $bucket\"\n\n# Check for public access\naws s3api get-public-access-block --bucket $bucket 2>/dev/null || echo \"  ⚠️  No Block Public Access configured\"\n\n# Check bucket policy\nPOLICY=$(aws s3api get-bucket-policy --bucket $bucket --query 'Policy' --output text 2>/dev/null)\nif echo \"$POLICY\" | grep -q '\"Principal\":\"\\*\"'; then\necho \"  🚨 ALERT: Bucket has wildcard principal in policy!\"\nfi\n\n# Check for encryption\naws s3api get-bucket-encryption --bucket $bucket &>/dev/null || echo \"  ⚠️  No default encryption enabled\"\n\necho \"\"\ndone\n\n# 5. Audit IAM users without MFA\necho \"IAM Users Without MFA:\"\nfor user in $(aws iam list-users --query 'Users[].UserName' --output text); do\nMFA_DEVICES=$(aws iam list-mfa-devices --user-name $user --query 'MFADevices' --output text)\nif [ -z \"$MFA_DEVICES\" ]; then\necho \"  🚨 $user - NO MFA ENABLED\"\nfi\ndone\n\n# 6. Find security groups with unrestricted SSH access (0.0.0.0/0:22)\necho \"\\nSecurity Groups with Open SSH:\"\naws ec2 describe-security-groups \\\n--filters Name=ip-permission.from-port,Values=22 Name=ip-permission.to-port,Values=22 Name=ip-permission.cidr,Values='0.0.0.0/0' \\\n--query 'SecurityGroups[].[GroupId, GroupName, VpcId]' \\\n--output table\n\n# 7. Find publicly accessible RDS databases\necho \"\\nPublicly Accessible RDS Instances:\"\naws rds describe-db-instances \\\n--query 'DBInstances[?PubliclyAccessible==`true`].[DBInstanceIdentifier, Engine, Endpoint.Address]' \\\n--output table\n```\n\n**What to Look For:**\n- S3 buckets without Block Public Access\n- S3 bucket policies with `\"Principal\": \"*\"`\n- IAM users without MFA\n- Security groups allowing 0.0.0.0/0 on SSH/RDP\n- RDS databases with `PubliclyAccessible=true`\n- IAM policies with `\"Action\": \"*\"` and `\"Resource\": \"*\"`\n\n**Challenge Exercise: Investigate a Simulated Security Incident**\n\nScenario: You receive a GuardDuty alert about unusual API activity from an IAM user \"john.smith\". Investigate using CloudTrail.\n\n```bash\n# 1. Query CloudTrail for all actions by the suspicious user\naws cloudtrail lookup-events \\\n--lookup-attributes AttributeKey=Username,AttributeValue=john.smith \\\n--start-time 2024-01-15T00:00:00Z \\\n--max-results 50 \\\n--query 'Events[].[EventTime, EventName, Resources[0].ResourceName]' \\\n--output table\n\n# 2. Find all API calls from an unusual IP address\naws cloudtrail lookup-events \\\n--lookup-attributes AttributeKey=Username,AttributeValue=john.smith \\\n--query 'Events[?contains(CloudTrailEvent, `\"sourceIPAddress\":\"203.0.113.42\"`)].[EventTime, EventName]' \\\n--output table\n\n# 3. Check if IAM credentials were modified\naws cloudtrail lookup-events \\\n--lookup-attributes AttributeKey=Username,AttributeValue=john.smith \\\n--query 'Events[?EventName==`CreateAccessKey` || EventName==`DeleteAccessKey` || EventName==`UpdateAccessKey`]' \\\n--output json\n\n# 4. Immediate response: Disable the user's access keys\nfor key in $(aws iam list-access-keys --user-name john.smith --query 'AccessKeyMetadata[].AccessKeyId' --output text); do\necho \"Disabling access key: $key\"\naws iam update-access-key --user-name john.smith --access-key-id $key --status Inactive\ndone\n\n# 5. Disable console password\naws iam delete-login-profile --user-name john.smith\n\n# 6. Attach a deny-all policy for additional safety\ncat > deny-all.json << 'EOF'\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [{\n\"Effect\": \"Deny\",\n\"Action\": \"*\",\n\"Resource\": \"*\"\n}]\n}\nEOF\n\naws iam put-user-policy \\\n--user-name john.smith \\\n--policy-name DenyAllQuarantine \\\n--policy-document file://deny-all.json\n\n# 7. Check what resources were accessed\naws cloudtrail lookup-events \\\n--lookup-attributes AttributeKey=Username,AttributeValue=john.smith \\\n--query 'Events[?EventName==`GetObject` || EventName==`PutObject` || EventName==`DescribeInstances`].[EventTime, EventName, Resources[0].ResourceName]' \\\n--output table\n```\n\n**Incident Response Checklist:**\n✅ Identify compromised credentials\n✅ Disable access immediately\n✅ Review CloudTrail for actions taken\n✅ Check for data exfiltration\n✅ Check for privilege escalation attempts\n✅ Check for persistence mechanisms (new IAM users, roles, access keys)\n✅ Document timeline for post-incident report\n✅ Rotate all potentially exposed credentials\n\n**Pro Tips:**\n- Practice these exercises in a test AWS account (not production!)\n- Use AWS CloudShell for quick CLI access without installing AWS CLI\n- Automate security checks with AWS Config rules\n- Set up CloudWatch alarms for critical events (root account usage, MFA disablement)\n- Use AWS Organizations SCPs to prevent dangerous actions entirely"
      }
    },
    {
      "type": "real_world",
      "title": "The Capital One Breach: A Case Study in Cloud Security Failure",
      "content": {
        "text": "On July 19, 2019, Capital One announced one of the largest cloud security breaches in history: over 100 million U.S. customers and 6 million Canadian customers had their data exposed. The breach included:\n\n- 140,000 Social Security numbers\n- 80,000 bank account numbers\n- 1 million Canadian Social Insurance Numbers\n- Names, addresses, phone numbers, email addresses\n- Credit scores, credit limits, payment history\n- Fragments of transaction data\n\n**The Financial and Reputational Cost:**\n- $190 million settlement (largest ever for a data breach at the time)\n- Significant reputational damage\n- Customer trust erosion\n- Years of legal proceedings\n- Regulatory scrutiny and compliance costs\n\n**The Attacker:**\n\nPaige Thompson, a former AWS engineer and software engineer at Capital One, exploited her deep knowledge of cloud infrastructure to execute the attack. She wasn't an elite hacker—she used relatively straightforward techniques that Capital One should have defended against.\n\n**The Attack Chain: How It Happened**\n\n**Step 1: Initial Reconnaissance (March 2019)**\n\nThompson scanned Capital One's infrastructure looking for misconfigured web applications. She discovered a web application firewall (WAF) that was improperly configured.\n\n**Step 2: SSRF Vulnerability Exploitation**\n\nThe critical flaw was a Server-Side Request Forgery (SSRF) vulnerability in the WAF. SSRF allows an attacker to make the server send requests to internal resources that should not be accessible from the outside.\n\nHere's how SSRF works in the AWS context:\n\n```python\n# Vulnerable application code (simplified)\nimport requests\n\ndef fetch_url(user_provided_url):\n# NO VALIDATION - accepts any URL from user input\nresponse = requests.get(user_provided_url)\nreturn response.text\n\n# Normal use:\nfetch_url(\"https://api.example.com/data\")\n\n# Malicious use (attacker exploits this):\nfetch_url(\"http://169.254.169.254/latest/meta-data/iam/security-credentials/WAF-Role\")\n```\n\n**What is 169.254.169.254?**\n\nThis is AWS's \"Instance Metadata Service\" (IMDS)—a special IP address accessible ONLY from within EC2 instances. It provides:\n- Instance details (AMI ID, instance type, region)\n- IAM role credentials (temporary access keys)\n- User data and tags\n\nEvery EC2 instance can access this endpoint to retrieve its IAM role credentials:\n\n```bash\n# Normal use (from within an EC2 instance):\ncurl http://169.254.169.254/latest/meta-data/iam/security-credentials/\n# Returns: WAF-Role\n\ncurl http://169.254.169.254/latest/meta-data/iam/security-credentials/WAF-Role\n# Returns:\n{\n\"AccessKeyId\": \"ASIA...\",\n\"SecretAccessKey\": \"wJalr...\",\n\"Token\": \"FwoGZXIv...\",\n\"Expiration\": \"2024-01-15T12:34:56Z\"\n}\n```\n\nThompson used the SSRF vulnerability to force Capital One's WAF to query the IMDS endpoint and return the IAM role credentials to her.\n\n**Step 3: IAM Role Credential Theft**\n\nThe WAF was running with an IAM role called \"WAF-Role\". This role had far too many permissions—violating the principle of least privilege.\n\nHere's what the role SHOULD have looked like (minimal permissions):\n\n```json\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [{\n\"Effect\": \"Allow\",\n\"Action\": [\n\"wafv2:GetWebACL\",\n\"wafv2:UpdateWebACL\",\n\"logs:PutLogEvents\"\n],\n\"Resource\": [\n\"arn:aws:wafv2:us-west-2:111122223333:regional/webacl/capital-one-waf/*\",\n\"arn:aws:logs:us-west-2:111122223333:log-group:/aws/waf/*\"\n]\n}]\n}\n```\n\nBut the actual role likely looked more like this (overly permissive):\n\n```json\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [{\n\"Effect\": \"Allow\",\n\"Action\": [\n\"s3:ListBucket\",\n\"s3:GetObject\",\n\"s3:GetBucketLocation\",\n\"ec2:Describe*\",\n\"elasticloadbalancing:Describe*\"\n],\n\"Resource\": \"*\"\n}]\n}\n```\n\nNotice the wildcard (`\"*\"`) in the Resource field—this granted access to ALL S3 buckets and ALL EC2 instances, not just the ones the WAF needed.\n\n**Step 4: S3 Bucket Discovery**\n\nWith the stolen IAM credentials, Thompson used the AWS CLI to list S3 buckets:\n\n```bash\nexport AWS_ACCESS_KEY_ID=ASIA...\nexport AWS_SECRET_ACCESS_KEY=wJalr...\nexport AWS_SESSION_TOKEN=FwoGZXIv...\n\n# List all S3 buckets\naws s3 ls\n# Returns:\n# 2019-01-15 10:23:45 capital-one-customer-data-prod\n# 2019-01-15 10:23:45 capital-one-credit-reports\n# 2019-01-15 10:23:45 capital-one-internal-backups\n\n# List contents of a bucket\naws s3 ls s3://capital-one-customer-data-prod/ --recursive\n```\n\n**Step 5: Data Exfiltration**\n\nOver the course of several weeks (March-April 2019), Thompson downloaded over 700 folders containing customer data:\n\n```bash\n# Download entire bucket\naws s3 sync s3://capital-one-customer-data-prod/ ./capital-one-data/\n\n# Result: 30+ GB of sensitive customer data downloaded to her home computer\n```\n\nThe stolen data included:\n- Database dumps (SQL backups with plaintext data)\n- Customer application files\n- Credit card application data\n- Internal configuration files\n\n**Step 6: Mistake That Led to Her Capture**\n\nThompson bragged about the breach on GitHub, Slack, and Meetup.com:\n\n\"I've basically strapped myself with a bomb vest, dropping capital ones dox and admitting it. I wanna distribute those buckets I think first.\"\n\nShe also posted:\n- Proof-of-concept commands showing the SSRF exploitation\n- Screenshots of Capital One's AWS infrastructure\n- Lists of S3 buckets she had accessed\n\nA GitHub user noticed these posts and reported them to Capital One on July 17, 2019. Capital One investigated and confirmed the breach. Thompson was arrested by the FBI on July 29, 2019.\n\n**What Capital One Did Wrong: The Security Failures**\n\n**1. Overly Permissive IAM Role**\n\nThe WAF-Role had access to S3 buckets it didn't need. Principle of least privilege violated.\n\n**Fix:**\n```json\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [{\n\"Effect\": \"Allow\",\n\"Action\": [\"s3:GetObject\"],\n\"Resource\": \"arn:aws:s3:::waf-config-bucket/waf-rules/*\"\n}]\n}\n```\n\nOnly allow access to the SPECIFIC bucket and prefix needed for WAF configuration.\n\n**2. No IMDS Protection (IMDSv1 vs IMDSv2)**\n\nCapital One was using IMDSv1, which is vulnerable to SSRF attacks. AWS released IMDSv2 in 2019 specifically to mitigate SSRF.\n\n**IMDSv1 (Vulnerable):**\n```bash\ncurl http://169.254.169.254/latest/meta-data/iam/security-credentials/\n```\n\nAny request to this IP works—even SSRF-forced requests.\n\n**IMDSv2 (Protected):**\n```bash\n# Step 1: Request a session token (requires PUT method)\nTOKEN=`curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`\n\n# Step 2: Use token in subsequent requests\ncurl http://169.254.169.254/latest/meta-data/iam/security-credentials/ -H \"X-aws-ec2-metadata-token: $TOKEN\"\n```\n\nIMDSv2 requires a PUT request to get a token first, then the token must be included in headers. SSRF vulnerabilities typically only allow GET requests, so this blocks the attack.\n\n**How to enforce IMDSv2:**\n```bash\n# Require IMDSv2 on all new EC2 instances\naws ec2 modify-instance-metadata-options \\\n--instance-id i-1234567890abcdef0 \\\n--http-tokens required \\\n--http-put-response-hop-limit 1\n```\n\n**Or enforce via IAM policy:**\n```json\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [{\n\"Sid\": \"RequireIMDSv2\",\n\"Effect\": \"Deny\",\n\"Action\": \"ec2:RunInstances\",\n\"Resource\": \"arn:aws:ec2:*:*:instance/*\",\n\"Condition\": {\n\"StringNotEquals\": {\n\"ec2:MetadataHttpTokens\": \"required\"\n}\n}\n}]\n}\n```\n\nThis policy prevents launching EC2 instances unless they require IMDSv2.\n\n**3. No S3 Access Logging or Monitoring**\n\nCapital One didn't have sufficient logging to detect the massive data exfiltration. They should have:\n\n- Enabled S3 server access logging\n- Enabled CloudTrail data events for S3\n- Set up CloudWatch alarms for unusual S3 API activity\n- Used AWS GuardDuty (it detects credential exfiltration and unusual API activity)\n\n**Detection query that would have caught this:**\n\n```sql\n-- CloudTrail query for unusual S3 access\nSELECT \nuserIdentity.principalId,\nCOUNT(*) as api_calls,\nSUM(CASE WHEN eventName = 'GetObject' THEN 1 ELSE 0 END) as get_object_calls,\nCOUNT(DISTINCT requestParameters.bucketName) as unique_buckets\nFROM cloudtrail_logs\nWHERE eventName IN ('GetObject', 'ListBucket')\nAND eventTime > DATE_SUB(NOW(), INTERVAL 1 HOUR)\nGROUP BY userIdentity.principalId\nHAVING api_calls > 1000 OR unique_buckets > 10\n```\n\nThis would have flagged Thompson's activity: thousands of GetObject calls across multiple buckets in a short time.\n\n**4. No Network Segmentation**\n\nThe WAF had network access to production S3 buckets. Why?\n\n**Better architecture:**\n\n```\n┌──────────────────────────────────────────────────┐\n│  Public Subnet (Internet-facing)                 │\n│  ┌────────────────────────────────────────────┐  │\n│  │  WAF (NO access to production S3)          │  │\n│  └────────────────────────────────────────────┘  │\n└──────────────────────────────────────────────────┘\n│\n↓\n┌──────────────────────────────────────────────────┐\n│  Private Subnet (Application Tier)               │\n│  ┌────────────────────────────────────────────┐  │\n│  │  Application Servers                       │  │\n│  │  (Limited S3 access via VPC Endpoint)      │  │\n│  └────────────────────────────────────────────┘  │\n└──────────────────────────────────────────────────┘\n│\n↓\n┌──────────────────────────────────────────────────┐\n│  Private Subnet (Data Tier)                      │\n│  ┌────────────────────────────────────────────┐  │\n│  │  S3 Buckets (VPC Endpoint only)            │  │\n│  │  NO public internet access                 │  │\n│  └────────────────────────────────────────────┘  │\n└──────────────────────────────────────────────────┘\n```\n\n**Use VPC Endpoints for S3:**\n\n```bash\naws ec2 create-vpc-endpoint \\\n--vpc-id vpc-12345678 \\\n--service-name com.amazonaws.us-east-1.s3 \\\n--route-table-ids rtb-12345678\n```\n\nThen restrict S3 bucket to only allow access via that VPC endpoint:\n\n```json\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [{\n\"Sid\": \"OnlyFromVPCEndpoint\",\n\"Effect\": \"Deny\",\n\"Principal\": \"*\",\n\"Action\": \"s3:*\",\n\"Resource\": [\n\"arn:aws:s3:::capital-one-customer-data-prod\",\n\"arn:aws:s3:::capital-one-customer-data-prod/*\"\n],\n\"Condition\": {\n\"StringNotEquals\": {\n\"aws:SourceVpce\": \"vpce-1a2b3c4d\"\n}\n}\n}]\n}\n```\n\nNow, even if an attacker steals IAM credentials, they can't access the S3 bucket from outside the VPC.\n\n**5. No Data Classification or Encryption Strategy**\n\nCapital One stored highly sensitive data (SSNs, bank account numbers) in S3 without:\n- Field-level encryption (data was encrypted at rest but decrypted when accessed)\n- Tokenization (replacing sensitive data with non-sensitive tokens)\n- Data loss prevention (DLP) monitoring\n\n**Better approach:**\n\n```python\n# Instead of storing SSN as plaintext:\n{\n\"customer_id\": \"12345\",\n\"ssn\": \"123-45-6789\"  # ❌ Plaintext\n}\n\n# Use encryption with AWS KMS:\nimport boto3\n\nkms = boto3.client('kms')\n\nencrypted_ssn = kms.encrypt(\nKeyId='arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab',\nPlaintext='123-45-6789'\n)\n\n{\n\"customer_id\": \"12345\",\n\"ssn\": encrypted_ssn['CiphertextBlob']  # ✅ Encrypted\n}\n```\n\nNow, even if an attacker downloads the S3 data, they can't decrypt it without access to the KMS key (which requires separate permissions).\n\n**What We Can Learn: The Prevention Checklist**\n\n✅ **Principle of Least Privilege**: IAM roles should have ONLY the permissions needed\n✅ **IMDSv2**: Enforce on all EC2 instances to prevent SSRF-based credential theft\n✅ **S3 Block Public Access**: Enable at account and bucket level\n✅ **VPC Endpoints**: Isolate S3 access from public internet\n✅ **Encryption**: Use KMS for sensitive data, not just default S3 encryption\n✅ **Logging**: CloudTrail data events + S3 access logs + GuardDuty\n✅ **Monitoring**: CloudWatch alarms for unusual API activity (mass downloads, unusual IP addresses)\n✅ **Network Segmentation**: WAF shouldn't have direct access to production data stores\n✅ **Regular Audits**: Use AWS Config, Access Analyzer, Trusted Advisor\n✅ **Incident Response Plan**: Detect, contain, eradicate, recover\n\n**The Aftermath**\n\nPaige Thompson pleaded guilty in 2022 and was sentenced to time served plus supervised release. Capital One paid the $190 million settlement, implemented comprehensive security improvements, and faced years of regulatory scrutiny.\n\nThe breach was 100% preventable with proper AWS security practices. Every control that failed was a known best practice in 2019. Capital One's failure wasn't technical ignorance—it was failure to implement known controls.\n\nYour job as a cloud security professional is to make sure this never happens on your watch. You now have the knowledge to prevent it."
      }
    },
    {
      "type": "reflection",
      "title": "Applying AWS Security to Your Career",
      "content": {
        "text": "Take a moment to reflect on how this knowledge applies to your cybersecurity journey:\n\n**Reflection Questions:**\n\n1. **Knowledge Assessment**\n- Before this lesson, how would you rate your AWS security knowledge (1-10)?\n- After this lesson, where are you now?\n- What specific concept clicked for you (IAM policies, S3 security, CloudTrail, the Capital One breach)?\n\n2. **Real-World Connection**\n- Think about the Capital One breach. What was the root cause? (Hint: It wasn't technology—it was failure to apply security fundamentals.)\n- If you were Capital One's cloud security engineer in 2019, what is the FIRST control you would have implemented to prevent the breach?\n- Why do you think so many organizations still make the same mistakes despite public breaches?\n\n3. **Career Application**\n- How does AWS security knowledge apply to your career goals?\n- If you're pursuing a SOC analyst role: How would you use CloudTrail and GuardDuty to detect threats?\n- If you're pursuing a cloud security engineer role: What IAM and VPC controls would you prioritize?\n- If you're pursuing a penetration testing role: How would you exploit misconfigured S3 buckets or overly permissive IAM roles?\n\n4. **Hands-On Practice Commitment**\n- Will you create a free-tier AWS account to practice these skills?\n- Which exercise from this lesson will you complete first?\n- How will you document your learning (blog post, GitHub repo, personal notes)?\n\n5. **The Shared Responsibility Model**\n- Explain the Shared Responsibility Model in your own words.\n- What is AWS responsible for?\n- What are YOU responsible for?\n- Why does this distinction matter in cloud security?\n\n6. **Principle of Least Privilege**\n- Why is least privilege harder to implement in practice than in theory?\n- Think of a scenario where a developer might resist least privilege (e.g., \"I need full S3 access to do my job\"). How would you handle this conversation?\n- What tools can help you enforce least privilege (hint: IAM Access Analyzer, AWS Config)?\n\n7. **Incident Response Preparedness**\n- If you received a GuardDuty alert right now about compromised IAM credentials, what would be your first three actions?\n- Why is CloudTrail critical for incident response?\n- What's the difference between detective controls (CloudTrail, GuardDuty) and preventive controls (IAM policies, S3 Block Public Access)?\n\n8. **Learning Mindset**\n- What was the most challenging part of this lesson?\n- How did you overcome confusion or uncertainty?\n- What additional resources will you use to deepen your AWS security expertise (AWS documentation, hands-on labs, certifications)?\n\n9. **Confidence Check**\n- On a scale of 1-10, how confident do you feel configuring IAM policies?\n- How confident do you feel securing S3 buckets?\n- How confident do you feel investigating a security incident using CloudTrail?\n- What specific skill do you need to practice more?\n\n10. **Next Steps**\n- What is ONE action you'll take in the next 24 hours to reinforce this learning?\n- Will you set up a personal AWS account and run through the exercises?\n- Will you read the Capital One breach post-mortem report?\n- Will you start studying for the AWS Certified Security - Specialty certification?\n\n**Action Item:**\n\nWrite down your answers to these questions. Research shows that reflection solidifies learning and increases retention by 40%. The act of articulating what you learned transforms passive knowledge into active expertise.\n\n**Remember:**\n\nCloud security is one of the HIGHEST-DEMAND skills in cybersecurity. According to the 2024 Cybersecurity Jobs Report:\n- Cloud security engineer roles have increased 250% in the last 3 years\n- Average salary for AWS security specialists: $130,000-$180,000\n- 95% of Fortune 500 companies use AWS\n- Security is the #1 concern for cloud adoption\n\nYou are learning a skill that organizations desperately need. The Capital One breach cost $190 million. Preventing just ONE breach makes you invaluable.\n\nKeep going. You're building expertise that will define your career."
      }
    },
    {
      "type": "memory_aid",
      "title": "AWS Security Quick Reference",
      "content": {
        "text": "**IAM Policy Evaluation Logic (Memorize This!)**\n\nMnemonic: **\"DEA\"** (Drug Enforcement Agency)\n- **D**eny explicitly → Access DENIED (deny always wins)\n- **E**xplicit allow → Access ALLOWED (if no deny exists)\n- **A**ll else → Access DENIED (default deny)\n\n**IAM Best Practices: \"GRUMP MFA\"**\n- **G**roups (assign permissions to groups, not individual users)\n- **R**oles (use roles for EC2, Lambda, cross-account access)\n- **U**nused credentials (remove old access keys, rotate regularly)\n- **M**inimal permissions (principle of least privilege)\n- **P**olicies (use managed policies, not inline policies)\n- **M**FA (enable multi-factor authentication for all users)\n- **F**orbid root (never use root account for daily tasks)\n- **A**udit (review permissions regularly with Access Analyzer)\n\n**S3 Security Layers: \"BEEP\"**\n- **B**lock Public Access (enable at account level)\n- **E**ncryption (default encryption with AES-256 or KMS)\n- **E**vent logging (CloudTrail data events, S3 access logs)\n- **P**olicies (restrict with bucket policies and IAM policies)\n\n**VPC Security: \"SNAG\"**\n- **S**ecurity Groups (stateful, allow rules, instance-level)\n- **N**etwork ACLs (stateless, allow/deny rules, subnet-level)\n- **A**rchitecture (public subnets for LBs, private for apps/data)\n- **G**ateways (Internet Gateway for public, NAT Gateway for private outbound)\n\n**CloudTrail Event Investigation: \"WWAWR\"**\n- **W**ho (userIdentity: which user/role made the call?)\n- **W**hen (eventTime: timestamp of the action)\n- **A**ction (eventName: what API call was made?)\n- **W**here (sourceIPAddress: where did the request come from?)\n- **R**esource (resources: what was affected?)\n\n**Incident Response: \"DICER\"**\n- **D**etect (GuardDuty alert, CloudTrail anomaly, user report)\n- **I**solate (disable IAM credentials, quarantine EC2 instances)\n- **C**ollect (preserve CloudTrail logs, memory dumps, snapshots)\n- **E**radicate (remove backdoors, rotate credentials, patch vulnerabilities)\n- **R**ecover (restore from clean backups, implement additional controls)\n\n**Common AWS Attack Vectors: \"SIMPLE\"**\n- **S**SRF on EC2 (IMDS credential theft via 169.254.169.254)\n- **I**AM over-permissions (wildcard policies, unused access keys)\n- **M**isconfig S3 (public buckets, overly permissive policies)\n- **P**ublic snapshots (EBS, RDS snapshots exposed publicly)\n- **L**ambda secrets (hardcoded credentials in function code)\n- **E**xposed keys (access keys committed to GitHub)\n\n**Capital One Breach: \"SOIL\"**\n- **S**SRF vulnerability in WAF\n- **O**verly permissive IAM role\n- **I**MDSv1 (allowed SSRF-based credential theft)\n- **L**ack of monitoring (no detection of mass S3 downloads)\n\n**Multi-Account Strategy: \"SLAS\"**\n- **S**ecurity account (centralized logging, GuardDuty aggregation)\n- **L**og archive account (immutable logs, compliance retention)\n- **A**udit account (read-only access for third-party auditors)\n- **S**hared services account (Active Directory, DNS, monitoring)\n\n**IMDSv2 Protection (Prevents SSRF)**\n```bash\n# Quick command to require IMDSv2:\naws ec2 modify-instance-metadata-options \\\n--instance-id i-1234567890abcdef0 \\\n--http-tokens required\n```\n\n**Emergency Credential Revocation**\n```bash\n# Disable all access keys for a compromised user:\nfor key in $(aws iam list-access-keys --user-name COMPROMISED_USER --query 'AccessKeyMetadata[].AccessKeyId' --output text); do\naws iam update-access-key --user-name COMPROMISED_USER --access-key-id $key --status Inactive\ndone\n```\n\n**Quick S3 Security Check**\n```bash\n# Check if a bucket allows public access:\naws s3api get-bucket-acl --bucket BUCKET_NAME\naws s3api get-public-access-block --bucket BUCKET_NAME\naws s3api get-bucket-policy --bucket BUCKET_NAME\n```\n\n**CloudTrail Query for Root Account Usage (Critical Alert!)**\n```bash\naws cloudtrail lookup-events \\\n--lookup-attributes AttributeKey=Username,AttributeValue=root \\\n--max-results 50\n```\n\n**Service Control Policy (Prevent Public S3 Buckets Org-Wide)**\n```json\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [{\n\"Effect\": \"Deny\",\n\"Action\": [\"s3:PutBucketPublicAccessBlock\"],\n\"Resource\": \"*\",\n\"Condition\": {\n\"Bool\": {\"s3:BlockPublicAccess\": \"false\"}\n}\n}]\n}\n```\n\n**AWS Well-Architected Framework: Security Pillar (5 Principles)**\n\n1. **Identity and Access Management** (IAM, MFA, least privilege)\n2. **Detective Controls** (CloudTrail, GuardDuty, Config)\n3. **Infrastructure Protection** (VPC, Security Groups, WAF)\n4. **Data Protection** (encryption at rest and in transit, KMS)\n5. **Incident Response** (runbooks, automation, backups)\n\n**Certification Roadmap**\n\n1. **AWS Certified Cloud Practitioner** (foundational)\n2. **AWS Certified Solutions Architect - Associate** (IAM, VPC, S3 deep dive)\n3. **AWS Certified Security - Specialty** (advanced security concepts)\n\n**Key AWS Documentation Links**\n\n- IAM Best Practices: https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\n- S3 Security: https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html\n- CloudTrail: https://docs.aws.amazon.com/awscloudtrail/latest/userguide/\n- GuardDuty: https://docs.aws.amazon.com/guardduty/latest/ug/\n\n**Print This Out and Keep It Next to Your Workspace!**\n\nThese mnemonics and quick references will save you time during real-world security incidents and certification exams. Repetition builds mastery—review this daily for one week, and it'll be permanently encoded in your memory."
      }
    },
    {
      "type": "video",
      "title": "AWS Security Video Tutorials",
      "content": {
        "resources": "**Recommended AWS Security Video Resources:**\n\n**1. Official AWS Training**\n- \"Introduction to AWS Security\" (AWS Skill Builder)\n- \"AWS Security Fundamentals\" (AWS Training and Certification)\n- \"Deep Dive on AWS CloudTrail\" (AWS Online Tech Talks)\n- \"AWS re:Inforce Security Conference\" (annual conference, free recordings)\n\n**2. YouTube Channels**\n- \"AWS Online Tech Talks\" - Official AWS channel with deep dives\n- \"A Cloud Guru\" - AWS security certification prep\n- \"freeCodeCamp.org\" - \"AWS Certified Security Specialty\" (10+ hour course)\n- \"Stephane Maarek\" - Hands-on AWS tutorials\n\n**3. Specific Topic Tutorials**\n- \"AWS IAM Policies Explained\" (search YouTube)\n- \"How to Secure S3 Buckets\" (AWS official)\n- \"CloudTrail for Security Investigations\" (AWS re:Invent)\n- \"Capital One Breach Explained\" (technical breakdown)\n\n**4. Hands-On Labs**\n- AWS Workshop: \"Introduction to AWS Security\" (https://awssecworkshops.com)\n- Qwiklabs: \"Security and Identity Fundamentals\" (Google Cloud Skills Boost)\n- A Cloud Guru: AWS Security Playground (sandbox environment)\n\n**Additional Learning Resources:**\n\n- **AWS Documentation**: https://docs.aws.amazon.com (definitive source)\n- **AWS Security Blog**: https://aws.amazon.com/blogs/security/\n- **Open Source Tool: ScoutSuite** (AWS security auditing tool)\n- **Open Source Tool: Prowler** (CIS Benchmark compliance checker)\n- **Capital One Breach Report**: Search for \"Capital One breach post-mortem\" for detailed technical analysis\n\n**Practice Platforms:**\n\n- **Free Tier AWS Account**: Create one at https://aws.amazon.com/free/\n- **CloudGoat** (Rhino Security Labs): Deliberately vulnerable AWS infrastructure for penetration testing practice\n- **Flaws.cloud**: CTF-style challenges for AWS security (by Scott Piper)\n- **Flaws2.cloud**: Advanced AWS security challenges\n\nSet aside 30 minutes this week to watch ONE video from the list above. Active learning (watching + doing) beats passive reading every time."
      }
    }
  ],
  "post_assessment": [
    {
      "question": "You discover that an IAM user 'john.doe' has the following policy attached: {\"Effect\": \"Allow\", \"Action\": \"*\", \"Resource\": \"*\"}. Additionally, an SCP at the organization level denies S3 delete actions: {\"Effect\": \"Deny\", \"Action\": \"s3:Delete*\", \"Resource\": \"*\"}. Can john.doe delete an S3 object?",
      "options": [
        "Yes, because the IAM policy explicitly allows all actions",
        "No, because SCPs override IAM policies and deny always wins",
        "Yes, but only if john.doe has MFA enabled",
        "No, because the IAM policy must explicitly allow S3 delete actions"
      ],
      "correct_answer": 1,
      "explanation": "**Correct answer: No, because SCPs override IAM policies and deny always wins.**\n\nAWS policy evaluation follows this hierarchy:\n1. **Organization SCPs** (Service Control Policies) - Maximum permissions boundary\n2. **Resource-based policies** (S3 bucket policies, etc.)\n3. **Identity-based policies** (IAM user/role policies)\n4. **Permissions boundaries** (optional IAM feature)\n\nThe evaluation logic: **Explicit Deny > Explicit Allow > Implicit Deny (default)**\n\nIn this scenario:\n- The SCP explicitly DENIES `s3:Delete*` actions\n- The IAM policy explicitly ALLOWS all actions (`*`)\n- Deny always wins, regardless of allows\n\nEven though john.doe has a wildcard allow policy, the SCP deny prevents S3 delete actions. SCPs act as guardrails—they define the MAXIMUM permissions an account can have, but they cannot grant permissions themselves.\n\n**Real-world application:**\nOrganizations use SCPs to prevent catastrophic actions across all accounts:\n- Deny disabling CloudTrail\n- Deny creating public S3 buckets\n- Deny leaving approved regions (e.g., only allow us-east-1 and us-west-2)\n- Deny disabling GuardDuty\n\nThink of SCPs as the \"rules of the house\" that apply to everyone, regardless of individual permissions.",
      "question_id": "ea90fda5-560a-4887-b7b0-44ec35189577",
      "type": "multiple_choice",
      "difficulty": 1
    },
    {
      "question": "You're investigating a suspected data exfiltration incident. CloudTrail logs show 5,000 'GetObject' API calls from an IAM role in a 10-minute window, all targeting a sensitive S3 bucket. The sourceIPAddress is 203.0.113.42, which is not in your organization's IP range. What is the MOST likely attack scenario?",
      "options": [
        "An attacker compromised an EC2 instance's IAM role credentials and used them from an external location",
        "A developer accidentally ran a script that downloaded files for backup purposes",
        "This is normal behavior for an automated ETL (Extract, Transform, Load) process",
        "The CloudTrail logs are incorrect due to a logging misconfiguration"
      ],
      "correct_answer": 0,
      "explanation": "**Correct answer: An attacker compromised an EC2 instance's IAM role credentials and used them from an external location.**\n\n**Why this is the correct answer:**\n\n1. **IAM Role credentials can be exfiltrated**: When an EC2 instance has an IAM role, it retrieves temporary credentials from the Instance Metadata Service (IMDS). If an attacker gains access to the instance (via SSRF, RCE, or SSH compromise), they can steal these credentials:\n\n```bash\n# From compromised EC2 instance:\ncurl http://169.254.169.254/latest/meta-data/iam/security-credentials/AppServerRole\n\n# Returns:\n{\n  \"AccessKeyId\": \"ASIAXXX...\",\n  \"SecretAccessKey\": \"wJalr...\",\n  \"Token\": \"FwoGZXIv...\",\n  \"Expiration\": \"2024-01-15T14:32:18Z\"\n}\n\n# Attacker then uses these credentials from their own machine:\nexport AWS_ACCESS_KEY_ID=ASIAXXX...\nexport AWS_SECRET_ACCESS_KEY=wJalr...\nexport AWS_SESSION_TOKEN=FwoGZXIv...\n\naws s3 sync s3://sensitive-data-bucket/ ./stolen-data/\n```\n\n2. **The external IP address is the red flag**: CloudTrail records the sourceIPAddress. If the role is used from an IP address outside your organization, it indicates credential theft.\n\n3. **5,000 GetObject calls in 10 minutes is anomalous**: Normal application behavior involves predictable patterns. Mass data downloading is a clear indicator of exfiltration.\n\n**Why other answers are wrong:**\n\n- **Developer backup script**: While possible, the external IP address makes this unlikely. A developer would typically run scripts from corporate infrastructure.\n- **ETL process**: Legitimate ETL processes run on scheduled intervals from known infrastructure (e.g., AWS Glue, EMR). The external IP and burst activity pattern don't match.\n- **CloudTrail misconfiguration**: CloudTrail logs are highly reliable. Assuming logs are wrong without evidence is dangerous.\n\n**This matches the Capital One breach scenario:**\n\nIn 2019, Paige Thompson exploited an SSRF vulnerability to steal IAM role credentials from a Capital One EC2 instance, then used those credentials from her home computer to download 30GB of customer data. The attack chain:\n\n1. SSRF vulnerability → IMDS access → IAM role credentials stolen\n2. Credentials used from external IP (her home)\n3. Mass S3 GetObject calls (data exfiltration)\n\n**Immediate response actions:**\n\n```bash\n# 1. Identify the compromised role\naws cloudtrail lookup-events \\\n  --lookup-attributes AttributeKey=Username,AttributeValue=AppServerRole \\\n  --query 'Events[?contains(CloudTrailEvent, `203.0.113.42`)]'\n\n# 2. Revoke all active sessions for the role\naws iam put-role-policy \\\n  --role-name AppServerRole \\\n  --policy-name RevokeOldSessions \\\n  --policy-document '{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [{\n      \"Effect\": \"Deny\",\n      \"Action\": \"*\",\n      \"Resource\": \"*\",\n      \"Condition\": {\n        \"DateLessThan\": {\"aws:TokenIssueTime\": \"2024-01-15T14:00:00Z\"}\n      }\n    }]\n  }'\n\n# 3. Investigate what data was accessed\naws cloudtrail lookup-events \\\n  --lookup-attributes AttributeKey=ResourceName,AttributeValue=sensitive-data-bucket \\\n  --query 'Events[?eventName==`GetObject`].[eventTime, requestParameters.key]'\n\n# 4. Identify the compromised EC2 instance\naws ec2 describe-instances \\\n  --filters \"Name=iam-instance-profile.arn,Values=*AppServerRole*\" \\\n  --query 'Reservations[].Instances[].[InstanceId, PrivateIpAddress, LaunchTime]'\n```\n\n**Prevention:**\n- Enable IMDSv2 (requires session tokens, prevents SSRF-based theft)\n- Restrict IAM role permissions (least privilege)\n- Enable GuardDuty (detects \"UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration\")\n- Implement VPC endpoints for S3 (prevent external access)\n- Set up CloudWatch alarms for unusual API activity\n\n**This scenario is exactly what AWS GuardDuty is designed to detect.**",
      "question_id": "7665a50a-693b-49be-b6dd-ac18f8fe8869",
      "type": "multiple_choice",
      "difficulty": 1
    },
    {
      "question": "Your organization requires all S3 data to be encrypted at rest. You configure default encryption on an S3 bucket using AES-256 (SSE-S3). A developer then uploads a file using 'aws s3 cp file.txt s3://bucket/ --sse aws:kms --sse-kms-key-id <key-id>'. What encryption method is used for this specific file?",
      "options": [
        "AES-256 (SSE-S3), because bucket default encryption takes precedence",
        "AWS KMS (SSE-KMS), because object-level settings override bucket defaults",
        "No encryption, because conflicting encryption settings cause the upload to fail",
        "Dual encryption using both SSE-S3 and SSE-KMS"
      ],
      "correct_answer": 1,
      "explanation": "**Correct answer: AWS KMS (SSE-KMS), because object-level settings override bucket defaults.**\n\n**S3 Encryption Hierarchy:**\n\n```\nPriority (highest to lowest):\n1. Object-level encryption settings (specified during upload)\n2. Bucket default encryption settings\n3. No encryption (if neither is configured)\n```\n\nWhen a developer explicitly specifies encryption during upload using `--sse aws:kms`, this object-level setting overrides the bucket's default encryption.\n\n**Why this matters:**\n\nS3 supports multiple encryption methods:\n\n1. **SSE-S3 (Server-Side Encryption with S3-Managed Keys)**\n   - AWS manages encryption keys\n   - AES-256 encryption\n   - No additional cost\n   - Cannot audit key usage\n   - Command: `--sse AES256`\n\n2. **SSE-KMS (Server-Side Encryption with AWS KMS)**\n   - AWS KMS manages encryption keys\n   - AES-256 encryption\n   - Key usage logged in CloudTrail (audit trail)\n   - Key rotation policies\n   - Access control via KMS key policies\n   - Additional cost (KMS API calls)\n   - Command: `--sse aws:kms --sse-kms-key-id <key-id>`\n\n3. **SSE-C (Server-Side Encryption with Customer-Provided Keys)**\n   - Customer provides encryption key with each request\n   - S3 doesn't store the key\n   - Customer responsible for key management\n   - Command: `--sse-c AES256 --sse-c-key <base64-encoded-key>`\n\n4. **Client-Side Encryption**\n   - Encrypt data before uploading to S3\n   - S3 stores encrypted data but doesn't perform encryption\n   - Customer fully responsible for encryption/decryption\n\n**How to verify encryption method:**\n\n```bash\n# Check object metadata\naws s3api head-object --bucket my-bucket --key file.txt\n\n# Output shows:\n{\n  \"ServerSideEncryption\": \"aws:kms\",\n  \"SSEKMSKeyId\": \"arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"\n}\n```\n\n**Real-world scenario:**\n\nYou have a bucket with default SSE-S3 encryption. Most files use default encryption, but highly sensitive files (e.g., customer SSNs, credit card numbers) require KMS encryption for audit trails and key rotation.\n\n**Enforcing encryption via bucket policy:**\n\nYou can DENY uploads without encryption:\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"DenyUnencryptedObjectUploads\",\n      \"Effect\": \"Deny\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:PutObject\",\n      \"Resource\": \"arn:aws:s3:::my-bucket/*\",\n      \"Condition\": {\n        \"StringNotEquals\": {\n          \"s3:x-amz-server-side-encryption\": \"aws:kms\"\n        }\n      }\n    }\n  ]\n}\n```\n\nThis policy forces ALL uploads to use KMS encryption, overriding any defaults or object-level settings that use SSE-S3.\n\n**Why other answers are wrong:**\n\n- **Bucket default takes precedence**: False. Object-level settings always override bucket defaults.\n- **Upload fails**: False. S3 allows different encryption methods on different objects in the same bucket.\n- **Dual encryption**: False. S3 uses one encryption method per object (you can't use both SSE-S3 and SSE-KMS simultaneously).\n\n**Capital One lesson:**\n\nCapital One used S3 default encryption (SSE-S3), but this didn't protect data after IAM credentials were stolen. When the attacker downloaded files, S3 decrypted them automatically (because the attacker had valid IAM credentials). A better approach:\n\n1. Use SSE-KMS with a separate KMS key\n2. Restrict KMS key permissions (separate from S3 permissions)\n3. Even if S3 credentials are stolen, attacker can't decrypt without KMS permissions\n\n**Example KMS key policy (restrictive):**\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n    \"Sid\": \"AllowDecryptionOnlyFromVPC\",\n    \"Effect\": \"Allow\",\n    \"Principal\": {\"AWS\": \"arn:aws:iam::111122223333:role/AppServerRole\"},\n    \"Action\": \"kms:Decrypt\",\n    \"Resource\": \"*\",\n    \"Condition\": {\n      \"StringEquals\": {\"aws:SourceVpc\": \"vpc-12345678\"}\n    }\n  }]\n}\n```\n\nNow, even with stolen IAM credentials, the attacker can't decrypt data from outside the VPC.\n\n**Best practice:** Use SSE-KMS for sensitive data, with restrictive KMS key policies and CloudTrail monitoring.",
      "question_id": "d5485c83-c750-4aff-a3cd-126df69d341f",
      "type": "multiple_choice",
      "difficulty": 1
    },
    {
      "question": "You need to grant a third-party vendor temporary access to specific resources in your AWS account for a security audit. They should NOT have long-term credentials. Which approach is MOST secure?",
      "options": [
        "Create an IAM user with access keys, share the credentials, and delete the user after the audit",
        "Use AWS STS AssumeRole with an external ID condition, grant the vendor's AWS account permission to assume a role in your account with limited permissions and a short session duration",
        "Add the vendor's IAM users to your AWS account and grant them ReadOnlyAccess managed policy",
        "Create a temporary S3 bucket with public read access containing the audit data"
      ],
      "correct_answer": 1,
      "explanation": "**Correct answer: Use AWS STS AssumeRole with an external ID condition, grant the vendor's AWS account permission to assume a role in your account with limited permissions and a short session duration.**\n\n**Why this is the most secure approach:**\n\nThis is the **AWS Cross-Account Access Best Practice** specifically designed for third-party vendor scenarios.\n\n**How AssumeRole Works:**\n\n```\n┌─────────────────────────────────────────────────────────┐\n│  Vendor's AWS Account (111111111111)                    │\n│  ┌────────────────────────────────────────────────────┐ │\n│  │  Vendor's IAM User: auditor@vendor.com            │ │\n│  └────────────────────────────────────────────────────┘ │\n└────────────────┬────────────────────────────────────────┘\n                 │\n                 │ (1) Calls sts:AssumeRole with External ID\n                 ↓\n┌─────────────────────────────────────────────────────────┐\n│  Your AWS Account (222222222222)                        │\n│  ┌────────────────────────────────────────────────────┐ │\n│  │  IAM Role: VendorAuditRole                        │ │\n│  │  Trust Policy: Allow 111111111111 to assume       │ │\n│  │  External ID: secret-audit-code-xyz123            │ │\n│  │  Permissions: ReadOnly access to specific         │ │\n│  │               resources                            │ │\n│  │  Session Duration: 1 hour                         │ │\n│  └────────────────────────────────────────────────────┘ │\n│                 │                                        │\n│                 │ (2) Returns temporary credentials      │\n│                 ↓    (AccessKeyId, SecretAccessKey,     │\n│                      SessionToken) valid for 1 hour     │\n└─────────────────────────────────────────────────────────┘\n                 │\n                 │ (3) Uses temporary credentials to\n                 │     access your resources\n                 ↓\n          [Audit Complete]\n```\n\n**Step-by-Step Implementation:**\n\n**1. Create an IAM role in YOUR account (222222222222):**\n\n```bash\n# Trust policy (who can assume this role)\ncat > trust-policy.json << 'EOF'\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n    \"Effect\": \"Allow\",\n    \"Principal\": {\n      \"AWS\": \"arn:aws:iam::111111111111:root\"\n    },\n    \"Action\": \"sts:AssumeRole\",\n    \"Condition\": {\n      \"StringEquals\": {\n        \"sts:ExternalId\": \"secret-audit-code-xyz123\"\n      }\n    }\n  }]\n}\nEOF\n\naws iam create-role \\\n  --role-name VendorAuditRole \\\n  --assume-role-policy-document file://trust-policy.json \\\n  --max-session-duration 3600\n\n# Attach read-only permissions\naws iam attach-role-policy \\\n  --role-name VendorAuditRole \\\n  --policy-arn arn:aws:iam::aws:policy/SecurityAudit\n\n# Or create a custom policy with more restrictions:\ncat > audit-permissions.json << 'EOF'\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"cloudtrail:LookupEvents\",\n      \"cloudtrail:GetTrailStatus\",\n      \"iam:GetAccountSummary\",\n      \"iam:ListUsers\",\n      \"iam:ListRoles\",\n      \"iam:ListPolicies\",\n      \"s3:GetBucketPolicy\",\n      \"s3:GetBucketAcl\",\n      \"s3:GetEncryptionConfiguration\",\n      \"ec2:DescribeSecurityGroups\",\n      \"ec2:DescribeInstances\"\n    ],\n    \"Resource\": \"*\"\n  }]\n}\nEOF\n\naws iam put-role-policy \\\n  --role-name VendorAuditRole \\\n  --policy-name AuditPermissions \\\n  --policy-document file://audit-permissions.json\n```\n\n**2. Share with vendor:**\n\nProvide the vendor with:\n- Role ARN: `arn:aws:iam::222222222222:role/VendorAuditRole`\n- External ID: `secret-audit-code-xyz123`\n- Session duration: 1 hour\n\n**3. Vendor assumes the role from THEIR account:**\n\n```bash\n# Vendor runs this command in their AWS account:\naws sts assume-role \\\n  --role-arn arn:aws:iam::222222222222:role/VendorAuditRole \\\n  --role-session-name audit-session-2024-01-15 \\\n  --external-id secret-audit-code-xyz123 \\\n  --duration-seconds 3600\n\n# Returns temporary credentials:\n{\n  \"Credentials\": {\n    \"AccessKeyId\": \"ASIAXXX...\",\n    \"SecretAccessKey\": \"wJalr...\",\n    \"SessionToken\": \"FwoGZXIv...\",\n    \"Expiration\": \"2024-01-15T15:32:18Z\"\n  },\n  \"AssumedRoleUser\": {\n    \"AssumedRoleId\": \"AROAXXXXXXXXX:audit-session-2024-01-15\",\n    \"Arn\": \"arn:aws:sts::222222222222:assumed-role/VendorAuditRole/audit-session-2024-01-15\"\n  }\n}\n\n# Vendor configures their CLI with temporary credentials:\nexport AWS_ACCESS_KEY_ID=ASIAXXX...\nexport AWS_SECRET_ACCESS_KEY=wJalr...\nexport AWS_SESSION_TOKEN=FwoGZXIv...\n\n# Vendor performs audit:\naws iam list-users\naws s3api list-buckets\naws ec2 describe-security-groups\n\n# After 1 hour, credentials automatically expire\n```\n\n**Security Features:**\n\n1. **External ID prevents \"confused deputy\" attacks**: Without an external ID, if the vendor works with multiple customers, they could accidentally (or maliciously) assume the wrong customer's role. The external ID acts as a secret password that only you and the vendor know.\n\n2. **Temporary credentials**: Credentials expire after 1 hour (configurable up to 12 hours). No long-term secrets to manage or revoke.\n\n3. **Least privilege**: The role only has the permissions you explicitly grant (read-only audit access, not full admin).\n\n4. **Auditable**: CloudTrail logs every AssumeRole call and every action taken with the role:\n\n```bash\n# Audit vendor's actions:\naws cloudtrail lookup-events \\\n  --lookup-attributes AttributeKey=Username,AttributeValue=VendorAuditRole \\\n  --query 'Events[].[EventTime, EventName, Resources[0].ResourceName]' \\\n  --output table\n```\n\n5. **Easy revocation**: Simply delete the role or modify the trust policy to remove the vendor's account:\n\n```bash\naws iam delete-role --role-name VendorAuditRole\n```\n\n**Why other answers are wrong:**\n\n- **IAM user with access keys**: Long-term credentials that must be manually created, shared (insecure), and revoked. Risk of credentials leaking or not being deleted after the audit.\n\n- **Add vendor's IAM users to your account**: Requires you to manage external identities. Violates the principle of separation (vendor manages their identities, you manage yours).\n\n- **Public S3 bucket**: Exposes data to the ENTIRE INTERNET, not just the vendor. Catastrophic security failure.\n\n**Real-World Use Cases:**\n\n- **Security audits** (e.g., PCI-DSS, SOC 2, HIPAA compliance audits)\n- **Third-party SaaS integrations** (e.g., DataDog, Splunk, CloudHealth)\n- **Partner integrations** (e.g., AWS Marketplace vendors)\n- **Incident response firms** (temporary forensic access)\n\n**Pro Tip:**\n\nUse **AWS CloudFormation** or **Terraform** to codify this pattern:\n\n```hcl\n# Terraform example\nresource \"aws_iam_role\" \"vendor_audit\" {\n  name               = \"VendorAuditRole\"\n  max_session_duration = 3600\n  \n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [{\n      Effect = \"Allow\"\n      Principal = {\n        AWS = \"arn:aws:iam::111111111111:root\"\n      }\n      Action = \"sts:AssumeRole\"\n      Condition = {\n        StringEquals = {\n          \"sts:ExternalId\" = var.external_id\n        }\n      }\n    }]\n  })\n}\n```\n\nThis is THE standard pattern for secure third-party access in AWS.",
      "question_id": "3c22a970-41bc-41e0-aa85-5c4db5223285",
      "type": "multiple_choice",
      "difficulty": 1
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "memory_hooks",
    "teach_like_im_10",
    "connect_to_what_i_know",
    "minimum_effective_dose",
    "meta_learning",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ]
}