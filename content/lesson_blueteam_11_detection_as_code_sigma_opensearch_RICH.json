{
  "lesson_id": "9b164659-bb33-4717-b9e6-72a0c9dde6e2",
  "domain": "blueteam",
  "title": "Detection-as-Code with Sigma & AWS OpenSearch",
  "subtitle": "From hypothesis to automated detection delivery",
  "difficulty": 2,
  "estimated_time": 55,
  "order_index": 11,
  "prerequisites": [
    "Detection Engineering Fundamentals",
    "Log Analytics with AWS OpenSearch"
  ],
  "concepts": [
    "Detection-as-code principles",
    "Sigma rule structure",
    "Mapping Sigma to OpenSearch queries",
    "Version control and CI/CD for detections",
    "Unit testing detection logic",
    "Telemetry normalisation",
    "Automation with detection pipelines",
    "Collaboration with threat hunters",
    "Metrics for detection health",
    "Continuous improvement loops"
  ],
  "learning_objectives": [
    "Author Sigma rules that capture relevant threat behaviours",
    "Convert Sigma into OpenSearch queries using tooling pipelines",
    "Implement CI/CD workflows that lint, test, and deploy detections",
    "Monitor detection health using coverage and alert quality metrics",
    "Collaborate with hunters to validate hypotheses and gather feedback",
    "Document detection context for rapid onboarding and audits"
  ],
  "content_blocks": [
    {
      "block_id": "93642379-207e-4d44-8a7b-13863bd265d1",
      "type": "mindset_coach",
      "title": "Treat Detections Like Software",
      "content": {
        "text": "Detection-as-code means clean git history, code reviews, tests, and rollback plans. Embrace the engineer mindset so defenders trust every alert."
      },
      "simplified_explanation": "Manage detections just like production code.",
      "memory_aids": [
        "Code quality = detection quality"
      ],
      "real_world_connection": "Modern SOCs run detection squads with DevOps discipline.",
      "reflection_prompt": "What part of your detection workflow lacks engineering rigour?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "57639b84-7b7b-4ae4-85ff-1e18db322b57",
      "type": "explanation",
      "title": "Detection Pipeline",
      "content": {
        "text": "## H.Y.P.E.\n- **H**ypothesis from threat intel or hunts.\n- **Y**AML Sigma rule authoring.\n- **P**ipeline conversion to OpenSearch DSL.\n- **E**valuation via tests and metrics."
      },
      "simplified_explanation": "Follow HYPE to turn ideas into reliable detections.",
      "memory_aids": [
        "Hypothesis → YAML → Pipeline → Evaluation"
      ],
      "real_world_connection": "Detection engineers refer to this flow during sprint planning.",
      "reflection_prompt": "Which HYPE step do you spend the least time on?",
      "is_interactive": false,
      "xp_reward": 10
    },
    {
      "block_id": "ea456b46-0679-42d0-957d-3eb665886fcb",
      "type": "video",
      "title": "Sigma Rule Authoring Workshop",
      "content": {
        "resources": "Watch Sigma contributors build detections and convert them for Elastic / OpenSearch.\n\n**Video**: [Sigma Detection Rule Basics](https://www.youtube.com/watch?v=2uK1KqzA5Gc)\n\nCapture tips on field mappings, condition blocks, and testing."
      },
      "simplified_explanation": "Observe the authoring flow before writing your own rules.",
      "memory_aids": [
        "Pause after each demo and replicate it locally"
      ],
      "real_world_connection": "Video mirrors community training for new Sigma adopters.",
      "reflection_prompt": "What mapping challenge might you face in OpenSearch?",
      "is_interactive": false,
      "xp_reward": 10
    },
    {
      "block_id": "c09d2822-94b1-480b-a6a3-ad378704fbf8",
      "type": "memory_aid",
      "title": "CODE Review",
      "content": {
        "text": "### C.O.D.E.\n- **C**ontext documented (TTP, data sources).\n- **O**utcome defined (alert, enrichment, suppression).\n- **D**atasets tested (positive/negative controls).\n- **E**ntry in version control with reviewers."
      },
      "simplified_explanation": "CODE ensures detections survive audits and on-call rotation.",
      "memory_aids": [
        "Context → Outcome → Datasets → Entry"
      ],
      "real_world_connection": "Detection teams use CODE checklists during pull requests.",
      "reflection_prompt": "Which CODE element is currently missing from your repo?",
      "is_interactive": false,
      "xp_reward": 5
    },
    {
      "block_id": "ace54213-4b70-43f9-a026-5dd217af2185",
      "type": "real_world",
      "title": "Field Example: Ransomware Detection Pipeline",
      "content": {
        "text": "A healthcare SOC adopted detection-as-code with Sigma. GitHub Actions linted rules, ran replay tests against log samples, and deployed to OpenSearch. Mean time to detection improved, and false positives dropped after adding CODE reviews."
      },
      "simplified_explanation": "Automation plus code review boosted quality and response speed.",
      "memory_aids": [
        "Pipeline + review = precision"
      ],
      "real_world_connection": "Presented at a detection engineering meetup.",
      "reflection_prompt": "How could automation reduce your detection deployment cycle time?",
      "is_interactive": false,
      "xp_reward": 10
    },
    {
      "block_id": "9b164659-bb33-4717-b9e6-72a0c9dde6f0",
      "type": "simulation",
      "title": "Build & Test a Sigma Rule",
      "content": {
        "text": "1. Write a Sigma rule for suspicious PowerShell download cradle.\n2. Convert it to OpenSearch DSL using sigma CLI.\n3. Run tests against sample telemetry (positive + negative cases).\n4. Commit the rule with CODE checklist metadata and open a mock pull request."
      },
      "simplified_explanation": "Practise the full detection-as-code lifecycle in a lab.",
      "memory_aids": [
        "Write → Convert → Test → Commit"
      ],
      "real_world_connection": "Detection squads run similar labs during onboarding.",
      "reflection_prompt": "Who would review your detection and what feedback would you expect?",
      "is_interactive": true,
      "xp_reward": 25
    },
    {
      "block_id": "ea456b46-0679-42d0-957d-3eb665886fcd",
      "type": "reflection",
      "title": "Teach Back the Pipeline",
      "content": {
        "text": "### Reflect & Teach\n- Explain your Sigma-to-OpenSearch pipeline to a teammate.\n- List two metrics you will track (coverage, alert quality).\n- Identify one improvement (linting, tests, documentation) to implement next sprint."
      },
      "simplified_explanation": "Teaching drives adoption and continuous improvement.",
      "memory_aids": [
        "Explain → Measure → Improve"
      ],
      "real_world_connection": "Detection teams brief SOC & hunters using this format.",
      "reflection_prompt": "When will you share your pipeline insights with stakeholders?",
      "is_interactive": false,
      "xp_reward": 5
    }
  ],
  "pre_assessment": null,
  "post_assessment": [
    {
      "question_id": "q1",
      "type": "multiple_choice",
      "question": "Why adopt detection-as-code practices?",
      "options": [
        "To write detections faster without testing",
        "To bring version control, testing, and review discipline to detection development",
        "To eliminate collaboration with hunters",
        "To avoid documenting detections"
      ],
      "correct_answer": 1,
      "explanation": "Detection-as-code applies software engineering practices to improve reliability and collaboration.",
      "difficulty": 2,
      "memory_aid": "Engineering mindset = reliable detections",
      "points": 10
    },
    {
      "question_id": "q2",
      "type": "multiple_choice",
      "question": "How does Sigma help detection teams?",
      "options": [
        "It replaces the need for SIEMs",
        "It provides a platform-agnostic format for describing detections",
        "It automatically blocks threats",
        "It encrypts log data"
      ],
      "correct_answer": 1,
      "explanation": "Sigma allows teams to author detections once and convert them to various SIEM dialects.",
      "difficulty": 2,
      "memory_aid": "Sigma = detection lingua franca",
      "points": 10
    },
    {
      "question_id": "q3",
      "type": "multiple_choice",
      "question": "What is the benefit of running detection tests against positive and negative samples?",
      "options": [
        "To intentionally produce false positives",
        "To validate accuracy and reduce noisy alerts",
        "To slow down deployments",
        "To remove the need for documentation"
      ],
      "correct_answer": 1,
      "explanation": "Testing ensures detections trigger correctly on malicious data and stay silent on benign events.",
      "difficulty": 2,
      "memory_aid": "Test to trust",
      "points": 10
    }
  ],
  "mastery_threshold": 80,
  "jim_kwik_principles": [
    "active_learning",
    "minimum_effective_dose",
    "teach_like_im_10",
    "memory_hooks",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "base_xp_reward": 130,
  "badge_unlock": null,
  "is_core_concept": false,
  "created_at": "2025-10-28T15:46:00",
  "updated_at": "2025-10-28T15:46:00",
  "author": "CyberLearn Advanced Curriculum Team",
  "version": "2.1"
}
