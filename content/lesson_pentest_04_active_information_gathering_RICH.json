{
  "lesson_id": "e8f3a21b-9d47-4c8a-b158-7a42f8e9c3d1",
  "domain": "pentest",
  "title": "Active Information Gathering",
  "subtitle": "Port scanning, service enumeration, and active reconnaissance",
  "difficulty": 2,
  "estimated_time": 45,
  "order_index": 4,
  "prerequisites": [],
  "concepts": [
    "Port Scanning",
    "Service Enumeration",
    "Nmap",
    "DNS Enumeration",
    "SMB Enumeration",
    "SNMP Enumeration",
    "Living off the Land"
  ],
  "learning_objectives": [
    "Master Nmap port scanning techniques and timing options",
    "Enumerate DNS, SMB, SMTP, and SNMP services effectively",
    "Understand the difference between passive and active reconnaissance",
    "Use Living off the Land techniques for enumeration"
  ],
  "content_blocks": [
    {
      "block_id": "ab12cd34-ef56-7890-abcd-ef1234567890",
      "type": "mindset_coach",
      "title": "The Art of Active Reconnaissance",
      "content": {
        "text": "**Welcome to the world of active information gathering!**\n\nYou're about to learn one of the most critical phases of penetration testing. Every successful hack starts with reconnaissance - the more you know about your target, the easier it is to find weaknesses.\n\n**Here's the truth**: Active reconnaissance is like knocking on every door and window of a building to see what's unlocked. It's louder than passive recon, but it gives you concrete, actionable intelligence.\n\n**The Jim Kwik principle at work**: We'll use ACTIVE LEARNING - you won't just read about Nmap, you'll see real scan outputs and learn to interpret them like a pro. We'll TEACH LIKE YOU'RE 10 - breaking down complex network protocols into simple, memorable concepts.\n\n**Why this matters**: In the 2017 Equifax breach, attackers found an unpatched Apache Struts server through active reconnaissance. That single discovery led to 147 million records stolen. Your ability to enumerate services and identify vulnerabilities can mean the difference between a secure network and a catastrophic breach.\n\n**Your goal for this lesson**: Master Nmap and service enumeration so well that when you scan a network, you can immediately identify attack vectors, vulnerable services, and misconfigurations - just like the professionals do."
      }
    },
    {
      "block_id": "bc23de45-fg67-8901-bcde-fg2345678901",
      "type": "explanation",
      "title": "Passive vs Active Information Gathering",
      "content": {
        "text": "## Understanding the Difference\n\nBefore we dive into active techniques, let's understand what makes them different from passive reconnaissance.\n\n### Passive Information Gathering\n**Definition**: Collecting information WITHOUT directly interacting with the target system.\n\n**Examples**:\n- Google dorking (site:example.com filetype:pdf)\n- WHOIS lookups\n- DNS zone transfers (from public DNS servers)\n- Social media OSINT\n- Public breach databases (Have I Been Pwned)\n- Certificate transparency logs\n\n**Advantages**:\n- ✅ Stealthy (target doesn't know you're investigating)\n- ✅ Legal (you're accessing public information)\n- ✅ Can't be detected by IDS/IPS\n\n**Limitations**:\n- ❌ Limited information\n- ❌ May be outdated\n- ❌ Can't discover internal services\n\n### Active Information Gathering\n**Definition**: Directly interacting with target systems to gather information.\n\n**Examples**:\n- Port scanning (Nmap)\n- Service enumeration (checking what's running on port 80)\n- DNS zone transfers (directly querying target DNS)\n- SMB enumeration (listing shares)\n- Banner grabbing (connecting to services)\n- Vulnerability scanning (Nessus, Nmap NSE)\n\n**Advantages**:\n- ✅ Accurate, real-time information\n- ✅ Discovers running services and versions\n- ✅ Identifies misconfigurations\n- ✅ Reveals attack surface\n\n**Limitations**:\n- ❌ Detectable (logs, IDS alerts)\n- ❌ May violate laws without authorization\n- ❌ Can trigger security alerts\n\n## When to Use Each\n\n**Passive first, active second**:\n1. **Start passive** - Gather as much as possible without touching the target\n2. **Plan active** - Based on passive intel, plan targeted active scans\n3. **Execute active** - Perform focused enumeration\n4. **Correlate** - Combine passive and active findings\n\n**Memory aid**: \"**P**assive = **P**ublic, **A**ctive = **A**ttacking\"\n\n## Legal Considerations\n\n**⚠️ CRITICAL WARNING**: Active information gathering without authorization is ILLEGAL.\n\n**Legal scenarios**:\n- ✅ Penetration testing engagement with signed contract\n- ✅ Bug bounty programs (within scope)\n- ✅ Your own systems and networks\n- ✅ Practice labs (HackTheBox, TryHackMe, PG Practice)\n\n**Illegal scenarios**:\n- ❌ Scanning your neighbor's Wi-Fi\n- ❌ Port scanning your employer without permission\n- ❌ \"Testing\" a company's security unsolicited\n- ❌ Scanning government systems \"for fun\"\n\n**The law**: In the US, the Computer Fraud and Abuse Act (CFAA) makes unauthorized access illegal. Similar laws exist worldwide.\n\n**Example case**: In 2014, a security researcher scanned a hospital's network without permission and was arrested, even though he found vulnerabilities. **Always get written authorization.**"
      }
    },
    {
      "block_id": "cd34ef56-gh78-9012-cdef-gh3456789012",
      "type": "explanation",
      "title": "Port Scanning with Nmap: The Foundation",
      "content": {
        "text": "## What is Port Scanning?\n\nPort scanning is the process of sending packets to target ports to determine which services are listening.\n\n**Think of it like this**: A server has 65,535 doors (ports). Your job is to knock on each door and see which ones are open, which are closed, and which are filtered by a firewall.\n\n### TCP Three-Way Handshake Review\n\nBefore we scan, understand how TCP connections work:\n\n```\nClient                    Server\n  |                          |\n  |----SYN-----------------→ |  (Client: \"Can I connect?\")\n  |                          |\n  | ←---------SYN/ACK--------|  (Server: \"Yes! Ready.\")\n  |                          |\n  |----ACK-----------------→ |  (Client: \"Great! Connected.\")\n  |                          |\n  |====== CONNECTION ========|\n```\n\n**SYN**: Synchronize (start connection)\n**ACK**: Acknowledge (confirm receipt)\n\nThis handshake is KEY to understanding Nmap scan types.\n\n## Nmap Scan Types\n\n### 1. TCP Connect Scan (-sT)\n**How it works**: Completes full three-way handshake\n\n```bash\nnmap -sT 192.168.1.100\n```\n\n**Pros**:\n- ✅ Most reliable\n- ✅ Works without root/admin privileges\n- ✅ Accurate results\n\n**Cons**:\n- ❌ Logged by target (full connection established)\n- ❌ Slower than SYN scan\n- ❌ Easily detected\n\n**When to use**: When you don't have root/admin, or need absolute accuracy.\n\n### 2. TCP SYN Scan (-sS) - \"Stealth Scan\"\n**How it works**: Sends SYN, receives SYN/ACK, sends RST (reset) instead of ACK\n\n```bash\nsudo nmap -sS 192.168.1.100\n```\n\n**Pros**:\n- ✅ Faster than connect scan\n- ✅ Less likely to be logged (connection not fully established)\n- ✅ Default Nmap scan (when run as root)\n\n**Cons**:\n- ❌ Requires root/admin privileges\n- ❌ Still detectable by modern IDS\n- ❌ Can break poorly coded services\n\n**When to use**: Default choice for penetration testing (with authorization).\n\n**Port states**:\n- **Open**: SYN → SYN/ACK (service listening)\n- **Closed**: SYN → RST (no service listening)\n- **Filtered**: SYN → (no response or ICMP unreachable) - firewall blocking\n\n### 3. UDP Scan (-sU)\n**How it works**: Sends UDP packets to target ports\n\n```bash\nsudo nmap -sU 192.168.1.100\n```\n\n**Why UDP matters**: Many critical services use UDP:\n- DNS (port 53)\n- SNMP (port 161)\n- DHCP (ports 67/68)\n- NTP (port 123)\n- TFTP (port 69)\n\n**Challenges**:\n- ❌ Very slow (UDP doesn't respond when port is open)\n- ❌ Often rate-limited by OS\n- ❌ Requires root/admin\n\n**Port states**:\n- **Open**: UDP packet → Service-specific response\n- **Closed**: UDP packet → ICMP port unreachable\n- **Open|filtered**: No response (could be open, could be filtered)\n\n**Speed it up**:\n```bash\n# Scan only top 20 UDP ports\nsudo nmap -sU --top-ports 20 192.168.1.100\n\n# Scan specific UDP ports\nsudo nmap -sU -p 53,161,162,389 192.168.1.100\n```\n\n### 4. Other Scan Types (Advanced)\n\n**FIN Scan (-sF)**:\n- Sends FIN (finish) packet\n- Closed ports respond with RST\n- Open ports ignore (per RFC 793)\n- Can bypass some firewalls\n\n**Xmas Scan (-sX)**:\n- Sets FIN, PSH, and URG flags\n- Named because packet \"lights up like a Christmas tree\"\n- Same behavior as FIN scan\n\n**Null Scan (-sN)**:\n- Sends packet with no flags set\n- Same behavior as FIN scan\n\n**⚠️ Note**: FIN/Xmas/Null scans don't work against Windows (Windows doesn't follow RFC 793).\n\n## Nmap Port Specification\n\n```bash\n# Scan single port\nnmap -p 80 192.168.1.100\n\n# Scan multiple specific ports\nnmap -p 22,80,443,3389 192.168.1.100\n\n# Scan port range\nnmap -p 1-1000 192.168.1.100\n\n# Scan all ports (1-65535)\nnmap -p- 192.168.1.100\n\n# Scan top 100 most common ports (default)\nnmap 192.168.1.100\n\n# Scan top 1000 most common ports\nnmap --top-ports 1000 192.168.1.100\n\n# Scan by protocol\nnmap -p T:80,443,U:53,161 192.168.1.100  # TCP 80,443 + UDP 53,161\n```\n\n## Nmap Timing Templates\n\nNmap has timing templates to control scan speed vs stealth:\n\n```bash\n-T0  # Paranoid (5 minutes between packets - for IDS evasion)\n-T1  # Sneaky (15 seconds between packets)\n-T2  # Polite (0.4 seconds between packets - less load on target)\n-T3  # Normal (default)\n-T4  # Aggressive (recommended for modern networks)\n-T5  # Insane (very fast, may miss ports due to timeouts)\n```\n\n**Real-world usage**:\n```bash\n# Fast scan for penetration testing (you have authorization)\nsudo nmap -sS -T4 -p- 192.168.1.100\n\n# Stealthy scan (trying to avoid detection)\nsudo nmap -sS -T2 -p 80,443,22 192.168.1.100\n\n# Comprehensive scan\nsudo nmap -sS -sU -T4 -p- 192.168.1.100\n```\n\n## Nmap Output Formats\n\n```bash\n# Normal output to terminal (default)\nnmap 192.168.1.100\n\n# Save to file\nnmap 192.168.1.100 -oN scan.txt        # Normal format\nnmap 192.168.1.100 -oX scan.xml        # XML format\nnmap 192.168.1.100 -oG scan.gnmap      # Greppable format\nnmap 192.168.1.100 -oA scan            # All formats (scan.nmap, scan.xml, scan.gnmap)\n```\n\n**Best practice**: Always use `-oA` to save all formats for later analysis.\n\n```bash\nsudo nmap -sS -sU -T4 -p- -oA full-scan 192.168.1.100\n```"
      }
    },
    {
      "block_id": "de45fg67-hi89-0123-defg-hi4567890123",
      "type": "explanation",
      "title": "Service and Version Detection",
      "content": {
        "text": "## Why Version Detection Matters\n\n**Scenario**: You find port 22 open. Is it:\n- OpenSSH 5.3 (vulnerable to user enumeration)?\n- OpenSSH 8.2 (patched and secure)?\n- Dropbear SSH (embedded device)?\n\n**Without version info**: You're guessing.\n**With version info**: You can search for CVEs and exploits.\n\n## Service Detection (-sV)\n\n```bash\n# Basic service detection\nnmap -sV 192.168.1.100\n\n# Aggressive service detection (more probes)\nnmap -sV --version-intensity 9 192.168.1.100\n\n# Light service detection (fewer probes, faster)\nnmap -sV --version-intensity 2 192.168.1.100\n```\n\n**Example output**:\n```\nPORT    STATE SERVICE     VERSION\n22/tcp  open  ssh         OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n80/tcp  open  http        Apache httpd 2.4.29 ((Ubuntu))\n443/tcp open  ssl/http    Apache httpd 2.4.29 ((Ubuntu))\n3306/tcp open  mysql      MySQL 5.7.33-0ubuntu0.18.04.1\n```\n\n**What Nmap tells you**:\n- **Service name**: ssh, http, mysql\n- **Version**: OpenSSH 7.6p1, Apache 2.4.29, MySQL 5.7.33\n- **OS hint**: Ubuntu Linux\n- **Extra info**: Protocol version (SSH 2.0)\n\n## Banner Grabbing\n\nNmap's version detection works by \"banner grabbing\" - connecting to services and analyzing their responses.\n\n**Manual banner grabbing with Netcat**:\n```bash\n# Grab SSH banner\nnc 192.168.1.100 22\n# Output: SSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.3\n\n# Grab HTTP banner\nnc 192.168.1.100 80\nGET / HTTP/1.1\nHost: 192.168.1.100\n\n# Output:\n# HTTP/1.1 200 OK\n# Server: Apache/2.4.29 (Ubuntu)\n# Content-Type: text/html\n```\n\n## OS Detection (-O)\n\n```bash\n# OS fingerprinting\nsudo nmap -O 192.168.1.100\n\n# Aggressive OS detection\nsudo nmap -O --osscan-guess 192.168.1.100\n```\n\n**Example output**:\n```\nRunning: Linux 4.X|5.X\nOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\nOS details: Linux 4.15 - 5.6\nNetwork Distance: 2 hops\n```\n\n**How it works**: Nmap sends specially crafted packets and analyzes responses (TCP/IP stack behavior, TTL values, window sizes, etc.).\n\n## Aggressive Scan (-A)\n\nCombines multiple detection techniques:\n\n```bash\n# Aggressive scan (enables -O, -sV, -sC, --traceroute)\nsudo nmap -A 192.168.1.100\n```\n\n**What -A does**:\n- ✅ OS detection (-O)\n- ✅ Version detection (-sV)\n- ✅ Script scanning (-sC)\n- ✅ Traceroute (--traceroute)\n\n**⚠️ Warning**: Very noisy! Generates lots of traffic and alerts.\n\n## Nmap Scripting Engine (NSE)\n\nNmap includes 600+ scripts for advanced enumeration.\n\n**Script categories**:\n- **auth**: Test authentication\n- **broadcast**: Discover hosts via broadcast\n- **brute**: Brute-force credentials\n- **default**: Default scripts (run with -sC)\n- **discovery**: Discover more about the network\n- **dos**: Test for DoS vulnerabilities (be careful!)\n- **exploit**: Exploit vulnerabilities\n- **intrusive**: Scripts that might crash services\n- **malware**: Detect malware/backdoors\n- **safe**: Won't crash services\n- **version**: Enhanced version detection\n- **vuln**: Check for known vulnerabilities\n\n**Script usage**:\n```bash\n# Run default scripts\nnmap -sC 192.168.1.100\n\n# Run specific script\nnmap --script http-enum 192.168.1.100\n\n# Run multiple scripts\nnmap --script http-enum,http-headers 192.168.1.100\n\n# Run all scripts in category\nnmap --script vuln 192.168.1.100\n\n# Run scripts by wildcard\nnmap --script \"http-*\" 192.168.1.100\n```\n\n**Useful NSE scripts**:\n```bash\n# Enumerate SMB shares\nnmap --script smb-enum-shares -p 445 192.168.1.100\n\n# Check for SMB vulnerabilities (EternalBlue, etc.)\nnmap --script smb-vuln* -p 445 192.168.1.100\n\n# Enumerate HTTP directories/files\nnmap --script http-enum -p 80 192.168.1.100\n\n# Test for SQL injection\nnmap --script http-sql-injection -p 80 192.168.1.100\n\n# DNS zone transfer\nnmap --script dns-zone-transfer --script-args dns-zone-transfer.domain=example.com -p 53 192.168.1.1\n\n# Brute force SSH\nnmap --script ssh-brute --script-args userdb=users.txt,passdb=passwords.txt -p 22 192.168.1.100\n```\n\n## Complete Nmap Workflow\n\n**Step 1: Quick scan to find live hosts**\n```bash\nnmap -sn 192.168.1.0/24 -oA ping-sweep\n```\n\n**Step 2: Fast port scan on all ports**\n```bash\nsudo nmap -sS -T4 -p- 192.168.1.100 -oA full-port-scan\n```\n\n**Step 3: Detailed scan on open ports**\n```bash\nsudo nmap -sS -sU -sV -O -sC -T4 -p 22,80,443,445,3306 192.168.1.100 -oA detailed-scan\n```\n\n**Step 4: Vulnerability scan with NSE**\n```bash\nnmap --script vuln -p 22,80,443,445,3306 192.168.1.100 -oA vuln-scan\n```"
      }
    },
    {
      "block_id": "ef56gh78-ij90-1234-efgh-ij5678901234",
      "type": "explanation",
      "title": "DNS Enumeration",
      "content": {
        "text": "## Why DNS Enumeration Matters\n\nDNS (Domain Name System) is the \"phonebook of the internet\" - it translates domain names to IP addresses. DNS records often reveal:\n- Subdomains (dev.example.com, admin.example.com)\n- Mail servers (MX records)\n- Name servers (NS records)\n- IP addresses (A/AAAA records)\n- Service records (SRV records)\n\n**Real-world impact**: In 2019, attackers found Citrix's VPN portal by enumerating DNS subdomains. That discovery led to CVE-2019-19781 exploitation and a massive breach.\n\n## DNS Record Types\n\n| Record Type | Purpose | Example |\n|------------|---------|----------|\n| **A** | IPv4 address | example.com → 192.0.2.1 |\n| **AAAA** | IPv6 address | example.com → 2001:db8::1 |\n| **MX** | Mail server | example.com → mail.example.com |\n| **NS** | Name server | example.com → ns1.example.com |\n| **TXT** | Text info (SPF, DKIM) | example.com → \"v=spf1 ...\" |\n| **CNAME** | Alias/Canonical name | www.example.com → example.com |\n| **PTR** | Reverse DNS (IP → name) | 1.2.0.192.in-addr.arpa → example.com |\n| **SRV** | Service record | _ldap._tcp.dc._msdcs.example.com |\n| **SOA** | Start of Authority | Domain admin email, serial |\n\n## DNS Lookup Tools\n\n### host Command\n```bash\n# Basic lookup\nhost example.com\n# Output: example.com has address 192.0.2.1\n\n# Specific record type\nhost -t MX example.com\n# Output: example.com mail is handled by 10 mail.example.com.\n\n# All records\nhost -a example.com\n```\n\n### dig Command (Detailed)\n```bash\n# Basic query\ndig example.com\n\n# Query specific record\ndig example.com MX\ndig example.com NS\ndig example.com TXT\n\n# Query specific DNS server\ndig @8.8.8.8 example.com\n\n# Reverse DNS lookup\ndig -x 192.0.2.1\n\n# Short answer only\ndig example.com +short\n# Output: 192.0.2.1\n```\n\n### nslookup Command\n```bash\n# Interactive mode\nnslookup\n> set type=MX\n> example.com\n> exit\n\n# Non-interactive\nnslookup -type=MX example.com\n```\n\n## DNS Zone Transfer (AXFR)\n\nA **DNS zone transfer** copies all DNS records from a name server. If misconfigured, attackers can dump the entire DNS zone.\n\n**Why it's dangerous**: Reveals all subdomains, internal hostnames, and IP addresses.\n\n**Testing for zone transfer**:\n```bash\n# Using host\nhost -l example.com ns1.example.com\n\n# Using dig\ndig axfr @ns1.example.com example.com\n\n# Using Nmap NSE\nnmap --script dns-zone-transfer --script-args dns-zone-transfer.domain=example.com -p 53 ns1.example.com\n```\n\n**If vulnerable, output looks like**:\n```\nexample.com.           IN  SOA   ns1.example.com.\nexample.com.           IN  NS    ns1.example.com.\nexample.com.           IN  A     192.0.2.1\nwww.example.com.       IN  A     192.0.2.2\nmail.example.com.      IN  A     192.0.2.3\ndev.example.com.       IN  A     10.0.0.50    ← Internal IP exposed!\nadmin.example.com.     IN  A     10.0.0.100   ← Admin portal found!\nvpn.example.com.       IN  A     203.0.113.5\nftp.example.com.       IN  A     192.0.2.4\n```\n\n**Mitigation**: DNS servers should only allow zone transfers from authorized secondary name servers.\n\n## Subdomain Enumeration\n\nWhen zone transfer fails (usually), enumerate subdomains through:\n\n### 1. Brute Force with DNSRecon\n```bash\n# Basic subdomain brute force\ndnsrecon -d example.com -D /usr/share/wordlists/dnsmap.txt -t brt\n\n# Zone transfer test\ndnsrecon -d example.com -t axfr\n\n# Standard record enumeration\ndnsrecon -d example.com -t std\n```\n\n### 2. Brute Force with DNSEnum\n```bash\ndnsenum --enum example.com\n\n# With custom wordlist\ndnsenum --enum example.com -f /usr/share/wordlists/subdomains.txt\n```\n\n### 3. Certificate Transparency Logs\nSSL certificates are logged publicly. Use these to find subdomains:\n\n**Online tools**:\n- https://crt.sh/?q=%.example.com\n- https://censys.io/\n- https://transparencyreport.google.com/https/certificates\n\n**Command-line**:\n```bash\ncurl -s \"https://crt.sh/?q=%.example.com&output=json\" | jq -r '.[].name_value' | sort -u\n```\n\n### 4. Subdomain Brute Force with Gobuster\n```bash\ngobuster dns -d example.com -w /usr/share/wordlists/subdomains.txt\n```\n\n### 5. Subdomain Enumeration with Amass\n```bash\n# Passive enumeration (OSINT)\namass enum -passive -d example.com\n\n# Active enumeration (includes brute force)\namass enum -active -d example.com\n\n# With brute force wordlist\namass enum -brute -d example.com -w /usr/share/wordlists/subdomains.txt\n```\n\n## Common Wordlists for Subdomain Brute Force\n\n```bash\n# SecLists (comprehensive)\n/usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt\n/usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt\n\n# Common subdomains\n/usr/share/wordlists/dnsmap.txt\n```\n\n**Common subdomains to check manually**:\n- www, mail, ftp, admin, portal, dev, test, staging\n- vpn, remote, owa (Outlook Web Access)\n- api, app, blog, shop, store\n- intranet, internal, private\n- backup, old, legacy"
      }
    },
    {
      "block_id": "fg67hi89-jk01-2345-fghi-jk6789012345",
      "type": "explanation",
      "title": "SMB Enumeration",
      "content": {
        "text": "## What is SMB?\n\n**SMB (Server Message Block)** is a network file sharing protocol used primarily in Windows environments.\n\n**Ports**:\n- **TCP 139**: SMB over NetBIOS\n- **TCP 445**: SMB over TCP (direct)\n\n**Why enumerate SMB**:\n- Discover shared folders (may contain sensitive data)\n- Enumerate users and groups\n- Identify Windows version and OS details\n- Test for vulnerabilities (EternalBlue, SMBGhost)\n\n## SMB Enumeration with Nmap\n\n```bash\n# Discover SMB hosts\nnmap -p 139,445 192.168.1.0/24\n\n# SMB OS discovery\nnmap -p 445 --script smb-os-discovery 192.168.1.100\n\n# Enumerate SMB shares\nnmap -p 445 --script smb-enum-shares 192.168.1.100\n\n# Enumerate SMB shares with authentication\nnmap -p 445 --script smb-enum-shares --script-args smbusername=admin,smbpassword=password 192.168.1.100\n\n# Enumerate users\nnmap -p 445 --script smb-enum-users 192.168.1.100\n\n# Check for SMB vulnerabilities\nnmap -p 445 --script smb-vuln* 192.168.1.100\n```\n\n**Common vulnerabilities detected**:\n- **MS08-067**: Netapi vulnerability (ancient, but still found)\n- **MS17-010**: EternalBlue (WannaCry, NotPetya)\n- **CVE-2020-0796**: SMBGhost (Windows 10 v1903/1909)\n\n## SMBClient - Interactive SMB Access\n\n```bash\n# List shares (no authentication)\nsmbclient -L //192.168.1.100 -N\n\n# List shares (with username)\nsmbclient -L //192.168.1.100 -U username\n\n# Connect to specific share\nsmbclient //192.168.1.100/sharename -U username\n\n# Connect with null session (no password)\nsmbclient //192.168.1.100/IPC$ -N\n```\n\n**Inside smbclient**:\n```\nsmb: \\> ls                  # List files\nsmb: \\> cd folder           # Change directory\nsmb: \\> get filename        # Download file\nsmb: \\> put filename        # Upload file\nsmb: \\> mget *              # Download all files\nsmb: \\> exit                # Quit\n```\n\n## Enum4linux - Comprehensive SMB Enumeration\n\n```bash\n# Full enumeration\nenum4linux -a 192.168.1.100\n\n# Enumerate users\nenum4linux -U 192.168.1.100\n\n# Enumerate shares\nenum4linux -S 192.168.1.100\n\n# Enumerate groups\nenum4linux -G 192.168.1.100\n\n# Enumerate password policy\nenum4linux -P 192.168.1.100\n\n# With credentials\nenum4linux -u admin -p password -a 192.168.1.100\n```\n\n**What enum4linux reveals**:\n- Domain name and SID\n- User accounts and RIDs\n- Group memberships\n- Shared folders and permissions\n- Password policy (complexity, lockout threshold)\n- OS version and build\n\n## CrackMapExec - Modern SMB Enumeration\n\n```bash\n# Check if SMB is accessible\ncrackmapexec smb 192.168.1.100\n\n# Enumerate shares\ncrackmapexec smb 192.168.1.100 -u '' -p '' --shares\n\n# Enumerate shares with credentials\ncrackmapexec smb 192.168.1.100 -u admin -p password --shares\n\n# Enumerate users\ncrackmapexec smb 192.168.1.100 -u admin -p password --users\n\n# Enumerate logged-on users\ncrackmapexec smb 192.168.1.100 -u admin -p password --loggedon-users\n\n# Dump SAM (local accounts)\ncrackmapexec smb 192.168.1.100 -u admin -p password --sam\n\n# Pass-the-Hash\ncrackmapexec smb 192.168.1.100 -u admin -H aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0\n```\n\n## SMB Null Sessions\n\nA **null session** is an anonymous connection to SMB (no username/password).\n\n**Testing for null sessions**:\n```bash\n# rpcclient\nrpcclient -U \"\" -N 192.168.1.100\nrpcclient $> enumdomusers   # List users\nrpcclient $> enumdomgroups  # List groups\nrpcclient $> queryuser 500  # Get info on user RID 500 (Administrator)\n\n# smbclient\nsmbclient -L //192.168.1.100 -N\n\n# enum4linux\nenum4linux -n 192.168.1.100\n```\n\n**If null sessions work**: You can enumerate users, shares, and groups WITHOUT credentials.\n\n**Mitigation**: Disable null sessions:\n- Windows Registry: `RestrictAnonymous = 2`\n- Group Policy: Network access: Do not allow anonymous enumeration of SAM accounts\n\n## Common SMB Shares\n\n**Default Windows shares**:\n- **C$**: Administrative share (entire C: drive) - Requires admin\n- **ADMIN$**: Windows directory - Requires admin\n- **IPC$**: Inter-process communication - Used for enumeration\n- **NETLOGON**: Domain controller share for logon scripts\n- **SYSVOL**: Domain controller share for Group Policy\n\n**User shares**:\n- **Users**: Home directories\n- **Shared**: Common shared folder\n- **Public**: Public folder\n\n**Look for**:\n- Misconfigured permissions (Everyone: Full Control)\n- Sensitive files (passwords.txt, credentials.xlsx)\n- Scripts with hardcoded credentials\n- Backups and configuration files"
      }
    },
    {
      "block_id": "gh78ij90-kl12-3456-ghij-kl7890123456",
      "type": "explanation",
      "title": "SMTP and SNMP Enumeration",
      "content": {
        "text": "## SMTP Enumeration (Port 25/587)\n\n**SMTP (Simple Mail Transfer Protocol)** is used for sending emails. SMTP servers can leak user information.\n\n### SMTP User Enumeration\n\nSMTP has built-in commands for verifying email addresses:\n\n**VRFY (Verify)**: Check if user exists\n```bash\ntelnet 192.168.1.100 25\nVRFY root\n# Response: 252 2.0.0 root       ← User exists!\n\nVRFY nonexistent\n# Response: 550 5.1.1 User unknown  ← User doesn't exist\n```\n\n**EXPN (Expand)**: Expand mailing list\n```bash\ntelnet 192.168.1.100 25\nEXPN administrators\n# Response:\n# 250 2.1.0 admin@example.com\n# 250 2.1.0 root@example.com\n```\n\n**RCPT TO (Recipient)**: Test if user accepts mail\n```bash\ntelnet 192.168.1.100 25\nMAIL FROM: test@test.com\nRCPT TO: root@example.com\n# Response: 250 2.1.5 Ok  ← User exists!\n\nRCPT TO: nonexistent@example.com\n# Response: 550 5.1.1 User unknown  ← User doesn't exist\n```\n\n### Automated SMTP Enumeration\n\n**With Nmap NSE**:\n```bash\nnmap --script smtp-enum-users --script-args smtp-enum-users.methods={VRFY,EXPN,RCPT} -p 25 192.168.1.100\n\n# With username wordlist\nnmap --script smtp-enum-users --script-args userdb=/usr/share/wordlists/names.txt -p 25 192.168.1.100\n```\n\n**With smtp-user-enum**:\n```bash\n# Test VRFY method\nsmtp-user-enum -M VRFY -U /usr/share/wordlists/names.txt -t 192.168.1.100\n\n# Test EXPN method\nsmtp-user-enum -M EXPN -U /usr/share/wordlists/names.txt -t 192.168.1.100\n\n# Test RCPT method\nsmtp-user-enum -M RCPT -U /usr/share/wordlists/names.txt -t 192.168.1.100\n```\n\n**Common usernames to test**:\n- root, admin, administrator\n- postmaster, webmaster\n- info, sales, support\n- backup, test, dev\n\n### SMTP Open Relay Testing\n\nAn **open relay** allows anyone to send email through the server (used by spammers).\n\n**Testing**:\n```bash\ntelnet 192.168.1.100 25\nMAIL FROM: attacker@evil.com\nRCPT TO: victim@external.com     ← External address\nDATA\nSubject: Test\n\nThis is a test.\n.\nQUIT\n```\n\n**If accepted**: Server is an open relay.\n\n**With Nmap**:\n```bash\nnmap --script smtp-open-relay -p 25 192.168.1.100\n```\n\n## SNMP Enumeration (Ports 161/162 UDP)\n\n**SNMP (Simple Network Management Protocol)** is used for network device management. SNMP can leak MASSIVE amounts of information:\n- Network configuration\n- Running processes\n- Installed software\n- Open ports\n- User accounts\n- System information\n\n### SNMP Basics\n\n**Versions**:\n- **SNMPv1**: No encryption, uses community strings (like passwords)\n- **SNMPv2c**: No encryption, improved error handling\n- **SNMPv3**: Encrypted, authentication\n\n**Community Strings** (like passwords):\n- **public**: Default read-only community string\n- **private**: Default read-write community string\n\n**MIB (Management Information Base)**: Database of SNMP objects\n**OID (Object Identifier)**: Unique identifier for each MIB object\n\n### SNMP Enumeration with snmpwalk\n\n```bash\n# Enumerate all SNMP objects (using 'public' community string)\nsnmpwalk -v 2c -c public 192.168.1.100\n\n# Enumerate specific OID\nsnmpwalk -v 2c -c public 192.168.1.100 1.3.6.1.2.1.1\n\n# Try different community strings\nsnmpwalk -v 2c -c private 192.168.1.100\nsnmpwalk -v 2c -c manager 192.168.1.100\nsnmpwalk -v 2c -c admin 192.168.1.100\n```\n\n**If SNMP is misconfigured**: You'll get pages of output with sensitive data.\n\n### Useful SNMP OIDs\n\n| OID | Information |\n|-----|-------------|\n| 1.3.6.1.2.1.1.1.0 | System description |\n| 1.3.6.1.2.1.1.5.0 | Hostname |\n| 1.3.6.1.2.1.25.1.6.0 | Running processes |\n| 1.3.6.1.2.1.25.4.2.1.2 | Running programs |\n| 1.3.6.1.2.1.6.13.1.3 | Open TCP ports |\n| 1.3.6.1.2.1.25.6.3.1.2 | Installed software |\n| 1.3.6.1.4.1.77.1.2.25 | User accounts |\n\n**Query specific information**:\n```bash\n# Get system description\nsnmpget -v 2c -c public 192.168.1.100 1.3.6.1.2.1.1.1.0\n\n# Get hostname\nsnmpget -v 2c -c public 192.168.1.100 1.3.6.1.2.1.1.5.0\n\n# Get user accounts (Windows)\nsnmpwalk -v 2c -c public 192.168.1.100 1.3.6.1.4.1.77.1.2.25\n\n# Get running processes\nsnmpwalk -v 2c -c public 192.168.1.100 1.3.6.1.2.1.25.4.2.1.2\n```\n\n### SNMP Community String Brute Force\n\n```bash\n# With onesixtyone (fast)\nonesixtyone -c /usr/share/wordlists/snmp-strings.txt 192.168.1.100\n\n# With Nmap NSE\nnmap -sU -p 161 --script snmp-brute --script-args snmp-brute.communitiesdb=/usr/share/wordlists/snmp-strings.txt 192.168.1.100\n```\n\n**Common community strings**:\n- public, private\n- community, snmp, snmpd\n- manager, admin\n- [company name], [device model]\n\n### snmp-check - Automated SNMP Enumeration\n\n```bash\nsnmp-check -c public 192.168.1.100\n```\n\n**Output includes**:\n- System information\n- Network interfaces and IP addresses\n- Routing table\n- Open TCP/UDP ports\n- Listening services\n- Running processes\n- Installed software\n- User accounts\n- File systems and storage\n\n### Nmap SNMP Enumeration\n\n```bash\n# Discover SNMP devices\nnmap -sU -p 161 192.168.1.0/24\n\n# SNMP info gathering\nnmap -sU -p 161 --script snmp-info 192.168.1.100\n\n# SNMP system info\nnmap -sU -p 161 --script snmp-sysdescr 192.168.1.100\n\n# SNMP process enumeration\nnmap -sU -p 161 --script snmp-processes 192.168.1.100\n\n# SNMP interface enumeration\nnmap -sU -p 161 --script snmp-interfaces 192.168.1.100\n\n# SNMP Windows user enumeration\nnmap -sU -p 161 --script snmp-win32-users 192.168.1.100\n```\n\n## Real-World SNMP Attack\n\n**Scenario**: You find SNMP with default 'public' community string.\n\n**Attack chain**:\n1. Enumerate system with snmpwalk\n2. Discover Windows hostname and domain\n3. Enumerate user accounts\n4. Discover running processes (find antivirus software)\n5. Enumerate network interfaces (find internal networks)\n6. Use information for targeted attack\n\n**Example**:\n```bash\n# Step 1: Discover SNMP\nnmap -sU -p 161 192.168.1.100\n\n# Step 2: Enumerate with default community string\nsnmp-check -c public 192.168.1.100 | tee snmp-results.txt\n\n# Step 3: Extract juicy info\ngrep -i \"user\" snmp-results.txt\ngrep -i \"process\" snmp-results.txt\ngrep -i \"software\" snmp-results.txt\n\n# Step 4: Use findings for next phase of attack\n```"
      }
    },
    {
      "block_id": "hi89jk01-lm23-4567-hijk-lm8901234567",
      "type": "real_world",
      "title": "Living off the Land Techniques",
      "content": {
        "text": "## What is \"Living off the Land\"?\n\n**Definition**: Using legitimate system tools and binaries already present on target systems for reconnaissance and attack, rather than uploading your own tools.\n\n**Why it matters**:\n- ✅ Evades antivirus (using trusted system binaries)\n- ✅ Bypasses application whitelisting\n- ✅ Leaves less forensic evidence\n- ✅ Blends in with normal activity\n\n**Real-world example**: In the 2020 SolarWinds attack, adversaries used Windows built-in tools like PowerShell, WMI, and Net commands extensively to avoid detection.\n\n## Windows Built-in Enumeration Tools\n\n### ipconfig - Network Configuration\n```cmd\n# Show all network interfaces\nipconfig /all\n\n# Display DNS cache (reveals recently accessed domains)\nipconfig /displaydns\n\n# Clear DNS cache (to cover tracks)\nipconfig /flushdns\n```\n\n**What you learn**:\n- IP addresses and subnet masks\n- DNS servers\n- DHCP server\n- Domain name\n- Network adapter types\n\n### net - Network Commands\n```cmd\n# Display current domain\nnet config workstation\n\n# List domain controllers\nnet group \"Domain Controllers\" /domain\n\n# List domain admins\nnet group \"Domain Admins\" /domain\n\n# List all domain users\nnet user /domain\n\n# Get info about specific user\nnet user username /domain\n\n# List local accounts\nnet user\n\n# List shares on remote computer\nnet view \\\\computername\n\n# List all computers in domain\nnet view /domain\n\n# Display current user sessions\nnet session\n\n# Show who's logged on to remote system\nnet view \\\\computername /all\n```\n\n### nltest - Domain Controller Testing\n```cmd\n# Find domain controllers\nnltest /dclist:example.com\n\n# Test domain controller trust\nnltest /server:dc1.example.com /query\n\n# Display domain trusts\nnltest /domain_trusts\n```\n\n### dsquery - Active Directory Queries\n```cmd\n# Find all computers in AD\ndsquery computer\n\n# Find all users in AD\ndsquery user\n\n# Find domain controllers\ndsquery server\n\n# Find OUs\ndsquery ou\n\n# Find users in specific OU\ndsquery user \"OU=Sales,DC=example,DC=com\"\n\n# Find inactive computers (not logged in for 4 weeks)\ndsquery computer -inactive 4\n```\n\n### whoami - Current User Info\n```cmd\n# Display current username\nwhoami\n\n# Display user privileges\nwhoami /priv\n\n# Display user groups\nwhoami /groups\n\n# Display all info\nwhoami /all\n```\n\n### tasklist - Running Processes\n```cmd\n# List all processes\ntasklist\n\n# List processes on remote computer\ntasklist /S computername /U domain\\username\n\n# Find specific process\ntasklist | findstr \"antivirus.exe\"\n\n# Display detailed process info\ntasklist /v\n\n# Show services hosted in each process\ntasklist /svc\n```\n\n### netstat - Network Connections\n```cmd\n# Show all connections and listening ports\nnetstat -ano\n\n# Show listening ports with process names\nnetstat -abon\n\n# Show routing table\nnetstat -r\n\n# Show network statistics\nnetstat -s\n```\n\n**Columns explained**:\n- **-a**: All connections and listening ports\n- **-n**: Numerical addresses (no DNS resolution)\n- **-o**: Show process ID (PID)\n- **-b**: Show executable name\n\n### PowerShell Enumeration\n\n```powershell\n# Get network adapters\nGet-NetIPAddress\nGet-NetIPConfiguration\n\n# Get DNS cache\nGet-DnsClientCache\n\n# Enumerate local users\nGet-LocalUser\nGet-LocalGroup\nGet-LocalGroupMember -Group \"Administrators\"\n\n# Enumerate AD users (requires AD module)\nGet-ADUser -Filter * | Select Name,SamAccountName\nGet-ADUser -Filter * -Properties * | Select Name,LastLogonDate\n\n# Enumerate AD computers\nGet-ADComputer -Filter * | Select Name,OperatingSystem\n\n# Find domain controllers\nGet-ADDomainController -Filter *\n\n# Get domain info\nGet-ADDomain\n\n# Enumerate shares\nGet-SmbShare\nGet-SmbShareAccess -Name \"ShareName\"\n\n# Enumerate running processes\nGet-Process | Select Name,ID,Path\n\n# Enumerate services\nGet-Service | Where-Object {$_.Status -eq \"Running\"}\n\n# Check firewall rules\nGet-NetFirewallRule | Where-Object {$_.Enabled -eq 'True'}\n\n# Port scan with PowerShell\n1..1024 | % {echo ((New-Object Net.Sockets.TcpClient).Connect(\"192.168.1.100\",$_)) \"Port $_ is open\"} 2>$null\n```\n\n## Linux Built-in Enumeration Tools\n\n### Network Information\n```bash\n# Show IP addresses\nip addr\nifconfig\n\n# Show routing table\nip route\nroute -n\n\n# Show ARP cache (recently communicated hosts)\nip neigh\narp -a\n\n# Show listening ports\nss -tuln\nnetstat -tuln\n\n# Show active connections with process info\nss -tupn\nnetstat -tupn\n```\n\n### User and Group Enumeration\n```bash\n# Display current user\nwhoami\nid\n\n# List all users\ncat /etc/passwd\ncut -d: -f1 /etc/passwd\n\n# List all groups\ncat /etc/group\n\n# List sudo privileges\nsudo -l\n\n# Check who's logged in\nw\nwho\nlast\n```\n\n### System Information\n```bash\n# OS version\ncat /etc/os-release\nuname -a\n\n# Kernel version\nuname -r\n\n# CPU info\nlscpu\ncat /proc/cpuinfo\n\n# Memory info\nfree -h\ncat /proc/meminfo\n\n# Disk info\ndf -h\nlsblk\n\n# Running processes\nps aux\nps -ef\n```\n\n### File System Enumeration\n```bash\n# Find SUID binaries (potential privilege escalation)\nfind / -perm -4000 -type f 2>/dev/null\n\n# Find writable directories\nfind / -writable -type d 2>/dev/null\n\n# Find files modified in last 10 minutes\nfind / -mmin -10 -type f 2>/dev/null\n\n# Search for passwords in files\ngrep -ri \"password\" /home 2>/dev/null\ngrep -ri \"pwd=\" /var/www 2>/dev/null\n\n# Find interesting files\nfind / -name \"*.conf\" 2>/dev/null\nfind / -name \"*.bak\" 2>/dev/null\nfind / -name \"id_rsa\" 2>/dev/null\n```\n\n### Bash History Mining\n```bash\n# Check command history\nhistory\n\n# Check all users' bash history\ncat /home/*/.bash_history\ncat /root/.bash_history\n\n# Check MySQL history\ncat ~/.mysql_history\n\n# Check less history\ncat ~/.lesshst\n```\n\n## Enumeration Cheat Sheet\n\n### Windows Quick Enumeration\n```cmd\n@echo off\necho ===== SYSTEM INFO =====\nsysteminfo\necho.\necho ===== CURRENT USER =====\nwhoami /all\necho.\necho ===== LOCAL USERS =====\nnet user\necho.\necho ===== LOCAL ADMINS =====\nnet localgroup administrators\necho.\necho ===== NETWORK CONFIG =====\nipconfig /all\necho.\necho ===== ROUTING TABLE =====\nroute print\necho.\necho ===== ARP CACHE =====\narp -a\necho.\necho ===== LISTENING PORTS =====\nnetstat -ano | findstr LISTENING\necho.\necho ===== RUNNING PROCESSES =====\ntasklist\necho.\necho ===== SCHEDULED TASKS =====\nschtasks /query /fo LIST /v\n```\n\n### Linux Quick Enumeration\n```bash\n#!/bin/bash\necho \"===== SYSTEM INFO =====\"\nuname -a\ncat /etc/os-release\necho\necho \"===== CURRENT USER =====\"\nwhoami\nid\necho\necho \"===== SUDO PRIVILEGES =====\"\nsudo -l\necho\necho \"===== USERS =====\"\ncat /etc/passwd\necho\necho \"===== NETWORK CONFIG =====\"\nip addr\nip route\necho\necho \"===== LISTENING PORTS =====\"\nss -tuln\necho\necho \"===== RUNNING PROCESSES =====\"\nps aux\necho\necho \"===== CRON JOBS =====\"\ncrontab -l\ncat /etc/crontab\nls -la /etc/cron*\n```\n\n**Memory aid**: \"**L**iving **O**ff **T**he **L**and = Use **L**egitimate **O**S **T**ools **L**ocally\""
      }
    },
    {
      "block_id": "ij90kl12-mn34-5678-ijkl-mn9012345678",
      "type": "memory_aid",
      "title": "Memory Aids for Active Information Gathering",
      "content": {
        "text": "## Nmap Scan Types\n\n**\"**S**SH **T**akes **U**nicode **F**iles **X**-ray **N**avigation\"**\n- **S** = SYN scan (-sS) - Stealth scan (most common)\n- **T** = TCP connect scan (-sT) - Full connection\n- **U** = UDP scan (-sU) - UDP services\n- **F** = FIN scan (-sF) - Stealth technique\n- **X** = Xmas scan (-sX) - Christmas tree flags\n- **N** = Null scan (-sN) - No flags\n\n## Nmap Essential Flags\n\n**\"**P**lease **S**end **V**ery **O**bvious **C**ommands **A**ll\"**\n- **P** = Port specification (-p)\n- **S** = Script scanning (-sC or --script)\n- **V** = Version detection (-sV)\n- **O** = OS detection (-O)\n- **C** = Connect type (-sS, -sT, -sU)\n- **A** = Aggressive (-A) - All detection enabled\n\n## Port Numbers to Remember\n\n**\"**F**TP **S**SH **T**elnet **S**MTP **D**NS **H**TTP **S**MBs\"**\n- **F**TP = 21\n- **S**SH = 22\n- **T**elnet = 23\n- **S**MTP = 25\n- **D**NS = 53\n- **H**TTP = 80\n- **S**MB = 139, 445\n\n**Additional critical ports**:\n- 443 = HTTPS\n- 3389 = RDP\n- 3306 = MySQL\n- 5432 = PostgreSQL\n- 161/162 = SNMP\n- 389 = LDAP\n- 636 = LDAPS\n\n## DNS Record Types\n\n**\"**A**ll **M**ail **N**eeds **T**housands **S**erving **P**roperly\"**\n- **A** = A record (IPv4 address)\n- **M** = MX record (Mail server)\n- **N** = NS record (Name server)\n- **T** = TXT record (Text/SPF)\n- **S** = SRV record (Service record)\n- **P** = PTR record (Reverse DNS)\n\n## SMB Enumeration Commands\n\n**\"**E**very **N**ice **S**ysadmin **C**an **R**emember\"**\n- **E** = enum4linux (comprehensive enumeration)\n- **N** = Nmap --script smb* (script scanning)\n- **S** = smbclient -L (list shares)\n- **C** = CrackMapExec (modern tool)\n- **R** = rpcclient (RPC enumeration)\n\n## SMTP Commands\n\n**\"**V**ery **E**xcellent **R**ich **P**eople\"**\n- **V** = VRFY (verify user)\n- **E** = EXPN (expand list)\n- **R** = RCPT TO (recipient test)\n- **P** = Probe manually with telnet\n\n## Active vs Passive Recon\n\n**\"Passive = **P**ublic, Active = **A**ttack\"**\n- **Passive**: Google, WHOIS, certificate transparency\n- **Active**: Nmap, DNS queries, SMB enumeration\n\n## When Things Go Wrong\n\n**\"**N**o **R**esponse **M**eans **F**irewall\"**\n- **N**o response = Filtered port (firewall blocking)\n- **R**ST packet = Closed port (no service)\n- **M**ultiple SYN/ACK = Open port\n- **F**irewall detection: Use --reason flag\n\n## Living off the Land\n\n**\"**W**indows **I**nternals **P**rovide **N**ative **T**ools\"**\n- **W** = whoami (current user)\n- **I** = ipconfig (network config)\n- **P** = PowerShell (scripting)\n- **N** = net commands (domain info)\n- **T** = tasklist (processes)\n\n## Quick Scan Strategy\n\n**\"**P**ing, **P**orts, **S**ervices, **S**cripts, **V**ulns\"**\n1. **P**ing sweep (find live hosts)\n2. **P**ort scan (find open ports)\n3. **S**ervice detection (identify versions)\n4. **S**cript scan (enumerate services)\n5. **V**ulnerability scan (find exploits)\n\n## The Golden Rule\n\n**\"Always get authorization before active scanning\"**\n\nWrite it down. Tattoo it. Never scan without permission."
      }
    },
    {
      "block_id": "jk01lm23-no45-6789-jklm-no0123456789",
      "type": "video",
      "title": "Video Tutorial: Active Information Gathering",
      "content": {
        "text": "## Recommended Video Resources\n\n**Nmap Masterclass**:\n- [NetworkChuck: Nmap for Beginners](https://www.youtube.com/watch?v=4t4kBkMsDbQ) - 20 minutes\n- [HackerSploit: Nmap Tutorial](https://www.youtube.com/watch?v=PS677owUk-c) - 15 minutes\n\n**IppSec Walkthroughs** (Real-world enumeration):\n- Search YouTube for \"IppSec [machine name]\" - Shows professional enumeration techniques\n\n**John Hammond: SMB Enumeration**:\n- Real-world examples of SMB attacks and enumeration\n\n**Practice Platforms**:\n- HackTheBox (requires subscription)\n- TryHackMe (free tier available)\n- OffSec Proving Grounds\n\n**Key concepts to reinforce**:\n- How Nmap scan types work at the packet level\n- Real-time demonstrations of service enumeration\n- Interpreting scan results\n- Building enumeration methodology"
      }
    }
  ],
  "post_assessment": [
    {
      "question_id": "q1",
      "type": "multiple_choice",
      "question": "What is the main advantage of an Nmap SYN scan (-sS) over a TCP connect scan (-sT)?",
      "options": [
        "It can scan without root/admin privileges",
        "It doesn't complete the three-way handshake, making it faster and less likely to be logged",
        "It works better against firewalls",
        "It provides more accurate version detection"
      ],
      "correct_answer": 1,
      "explanation": "SYN scan (-sS) sends SYN, receives SYN/ACK, then sends RST instead of completing the handshake. This makes it faster (no full connection) and less likely to be logged by applications that only log completed connections. However, modern IDS/IPS systems still detect it.",
      "difficulty": 2
    },
    {
      "question_id": "q2",
      "type": "multiple_choice",
      "question": "Which of the following is NOT a valid method for SMTP user enumeration?",
      "options": [
        "VRFY command",
        "EXPN command",
        "RCPT TO command",
        "USER command"
      ],
      "correct_answer": 3,
      "explanation": "USER is not an SMTP command. Valid SMTP user enumeration methods are VRFY (verify), EXPN (expand mailing list), and RCPT TO (test recipient). USER is a POP3/IMAP command, not SMTP.",
      "difficulty": 2
    },
    {
      "question_id": "q3",
      "type": "multiple_choice",
      "question": "What does a DNS zone transfer (AXFR) reveal if successful?",
      "options": [
        "Only the main domain A record",
        "All DNS records for the domain, including subdomains and internal IPs",
        "Only the mail server (MX) records",
        "The domain registrar information"
      ],
      "correct_answer": 1,
      "explanation": "A successful DNS zone transfer (AXFR) copies the entire DNS zone, revealing all DNS records including subdomains, internal hostnames, IP addresses, mail servers, and more. This is why DNS servers should only allow zone transfers from authorized secondary name servers.",
      "difficulty": 2
    },
    {
      "question_id": "q4",
      "type": "multiple_choice",
      "question": "Which Nmap flag combination enables OS detection, version detection, script scanning, and traceroute?",
      "options": [
        "-sV -O -sC",
        "-A",
        "-sS -T4 -p-",
        "-sU --top-ports 1000"
      ],
      "correct_answer": 1,
      "explanation": "The -A flag (aggressive scan) enables OS detection (-O), version detection (-sV), script scanning (-sC), and traceroute (--traceroute) all in one command. While convenient, it's very noisy and generates significant traffic.",
      "difficulty": 1
    },
    {
      "question_id": "q5",
      "type": "multiple_choice",
      "question": "What is a 'null session' in SMB enumeration?",
      "options": [
        "A session where all commands return null values",
        "An anonymous connection to SMB without username or password",
        "A session that has timed out",
        "A deliberately blocked connection"
      ],
      "correct_answer": 1,
      "explanation": "A null session is an anonymous connection to SMB (typically to the IPC$ share) without providing credentials. If misconfigured, null sessions allow enumeration of users, shares, and groups without authentication. This is a common misconfiguration in older Windows systems.",
      "difficulty": 2
    }
  ],
  "mastery_threshold": 80,
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "real_world_connection"
  ],
  "base_xp_reward": 200,
  "is_core_concept": true,
  "author": "CyberLearn Curriculum Team",
  "version": "1.0"
}
