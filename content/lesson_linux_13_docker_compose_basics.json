{
  "lesson_id": "f8e9d0c1-b2a3-4c5d-6e7f-8a9b0c1d2e3f",
  "domain": "linux",
  "title": "Docker and Docker Compose Fundamentals for Security Labs",
  "difficulty": 1,
  "order_index": 13,
  "estimated_time": 60,
  "prerequisites": ["a7d8e9f0-c1b2-4a3d-5e6f-7a8b9c0d1e2f"],
  "concepts": [
    "Containerization fundamentals",
    "Docker architecture",
    "Container images and layers",
    "Docker networking",
    "Volume management",
    "Docker Compose multi-container applications",
    "Security lab environments",
    "Container isolation"
  ],
  "learning_objectives": [
    "Understand containerization and how Docker differs from virtual machines",
    "Install and configure Docker on Linux systems",
    "Create and manage Docker containers for security testing",
    "Build custom Docker images using Dockerfiles",
    "Use Docker Compose to orchestrate multi-container security labs",
    "Implement container networking for isolated test environments",
    "Manage persistent data with Docker volumes",
    "Apply security best practices for container deployments"
  ],
  "content_blocks": [
    {
      "type": "explanation",
      "title": "Why Docker Matters for Security Professionals",
      "content": {
        "text": "Welcome to Docker! As a security professional, you'll constantly need isolated, reproducible environments for testing, analysis, and demonstration. Docker is the industry-standard tool that makes this possible.\n\n## What is Docker?\n\nDocker is a containerization platform that packages applications and their dependencies into lightweight, portable containers. Think of containers as isolated, self-contained environments that run on your host system without the overhead of full virtual machines.\n\n## Containers vs Virtual Machines\n\n**Virtual Machines (Traditional):**\n```\n┌─────────────────────────────────┐\n│      Application                │\n├─────────────────────────────────┤\n│      Guest OS (Full Linux)      │\n├─────────────────────────────────┤\n│      Hypervisor (VMware/VBox)   │\n├─────────────────────────────────┤\n│      Host OS                    │\n├─────────────────────────────────┤\n│      Hardware                   │\n└─────────────────────────────────┘\n```\n\n**Containers (Docker):**\n```\n┌─────────────────────────────────┐\n│      Application                │\n├─────────────────────────────────┤\n│      Container Runtime (Docker) │\n├─────────────────────────────────┤\n│      Host OS                    │\n├─────────────────────────────────┤\n│      Hardware                   │\n└─────────────────────────────────┘\n```\n\n**Key Differences:**\n- **Containers** share the host kernel, **VMs** have their own kernel\n- **Containers** start in seconds, **VMs** take minutes\n- **Containers** use MB of disk space, **VMs** use GB\n- **Containers** have near-native performance, **VMs** have overhead\n\n## Why Security Professionals Love Docker\n\n**1. Isolated Testing Environments**\nTest malware, exploits, or vulnerabilities without risking your host system:\n```bash\n# Spin up isolated Kali container\ndocker run -it kalilinux/kali-rolling bash\n\n# Test exploit, then destroy container\nexit\ndocker rm <container-id>\n# Evidence gone, host untouched\n```\n\n**2. Reproducible Security Labs**\nShare exact environments with teammates:\n```yaml\n# docker-compose.yml for CTF lab\nversion: '3'\nservices:\n  web-app:\n    image: dvwa:latest\n  database:\n    image: mysql:5.7\n```\n\nAnyone can run `docker-compose up` and get identical setup.\n\n**3. Quick Tool Deployment**\nRun security tools without installation:\n```bash\n# Run nmap without installing\ndocker run --rm instrumentisto/nmap -sV target.com\n\n# Run Metasploit\ndocker run --rm -it metasploitframework/metasploit-framework\n\n# Run OWASP ZAP\ndocker run -u zap -p 8080:8080 zaproxy/zap-stable\n```\n\n**4. Vulnerable Application Testing**\nPractice attacks safely:\n- DVWA (Damn Vulnerable Web Application)\n- WebGoat\n- Juice Shop\n- Mutillidae\n\nAll available as Docker containers!\n\n**5. Blue Team Labs**\nDeploy entire security monitoring stacks:\n```yaml\n# ELK Stack for log analysis\nservices:\n  elasticsearch:\n  logstash:\n  kibana:\n```\n\n**6. Malware Analysis Sandboxes**\nContainerize analysis environments:\n```bash\n# Isolated malware analysis container\ndocker run --rm --network none -v /malware:/samples \\\n  remnux/remnux-cli\n```\n\n## Real-World Security Use Cases\n\n**Penetration Testing:**\n- Isolated attack containers\n- Tool-specific environments (Burp Suite, SQLMap)\n- Clean slate for each engagement\n\n**Incident Response:**\n- Forensic tool containers\n- Timeline analysis environments\n- Evidence processing pipelines\n\n**Red Team Operations:**\n- C2 infrastructure (Covenant, Sliver)\n- Phishing servers\n- Payload generation environments\n\n**Security Training:**\n- CTF challenges\n- Vulnerable apps for practice\n- Reproducible student labs\n\n**Threat Intelligence:**\n- MISP containers\n- Malware detonation chambers\n- IOC processing pipelines\n\n## Docker Architecture Overview\n\n```\n┌──────────────────────────────────────────┐\n│          Docker Client (CLI)             │\n│         docker run, docker build         │\n└──────────────┬───────────────────────────┘\n               │ REST API\n┌──────────────▼───────────────────────────┐\n│          Docker Daemon (dockerd)         │\n│  - Manages containers, images, networks  │\n│  - Builds images                         │\n│  - Runs containers                       │\n└──────────────┬───────────────────────────┘\n               │\n┌──────────────▼───────────────────────────┐\n│         Container Runtime                │\n│  - containerd (high-level runtime)       │\n│  - runc (low-level runtime)              │\n└──────────────────────────────────────────┘\n```\n\n**Key Components:**\n1. **Docker Client** - CLI you interact with (`docker` command)\n2. **Docker Daemon** - Background service managing everything\n3. **Docker Registry** - Image storage (Docker Hub, private registries)\n4. **Images** - Read-only templates for containers\n5. **Containers** - Running instances of images\n6. **Volumes** - Persistent data storage\n7. **Networks** - Container communication\n\n## The Docker Workflow\n\n```\nDockerfile → Build → Image → Run → Container\n    ↓           ↓        ↓       ↓        ↓\n  Recipe    docker   Template docker  Running\n            build             run     Process\n```\n\n1. Write a **Dockerfile** (recipe)\n2. **Build** an image from Dockerfile\n3. **Run** container from image\n4. Container executes your application\n5. Stop/remove container when done\n\nYou're about to learn how to master this workflow for security work!"
      },
      "order": 1
    },
    {
      "type": "code_exercise",
      "title": "Installing Docker on Linux",
      "content": {
        "text": "Let's get Docker installed and configured properly for security work.\n\n## Installation on Ubuntu/Debian\n\n```bash\n# Update package index\nsudo apt update\n\n# Install prerequisites\nsudo apt install -y \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\n# Add Docker's official GPG key\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | \\\n  sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\n# Set up Docker repository\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \\\n  https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Install Docker Engine\nsudo apt update\nsudo apt install -y docker-ce docker-ce-cli containerd.io \\\n  docker-buildx-plugin docker-compose-plugin\n\n# Verify installation\nsudo docker run hello-world\n```\n\n## Installation on RHEL/CentOS/Fedora\n\n```bash\n# Remove old versions\nsudo dnf remove docker docker-common docker-engine\n\n# Install dnf-plugins-core\nsudo dnf -y install dnf-plugins-core\n\n# Add Docker repository\nsudo dnf config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/fedora/docker-ce.repo\n\n# Install Docker\nsudo dnf install docker-ce docker-ce-cli containerd.io \\\n  docker-buildx-plugin docker-compose-plugin\n\n# Start Docker\nsudo systemctl start docker\nsudo systemctl enable docker\n\n# Verify\nsudo docker run hello-world\n```\n\n## Post-Installation: Non-Root Access\n\n**SECURITY NOTE:** Adding users to docker group gives them root-equivalent privileges!\n\nOnly do this on personal/lab machines:\n\n```bash\n# Create docker group (if doesn't exist)\nsudo groupadd docker\n\n# Add your user\nsudo usermod -aG docker $USER\n\n# Log out and back in, or run:\nnewgrp docker\n\n# Verify non-root access\ndocker run hello-world  # No sudo needed\n```\n\n## Configure Docker for Security Labs\n\n```bash\n# Enable Docker to start on boot\nsudo systemctl enable docker.service\nsudo systemctl enable containerd.service\n\n# Check Docker version\ndocker --version\n# Output: Docker version 24.0.x, build ...\n\n# Check Docker Compose version\ndocker compose version\n# Output: Docker Compose version v2.x.x\n\n# View Docker info\ndocker info\n```\n\n## Storage Configuration (Optional)\n\nFor better performance with many containers:\n\n```bash\n# View current storage driver\ndocker info | grep \"Storage Driver\"\n\n# Configure overlay2 (recommended)\nsudo mkdir -p /etc/docker\ncat <<EOF | sudo tee /etc/docker/daemon.json\n{\n  \"storage-driver\": \"overlay2\"\n}\nEOF\n\n# Restart Docker\nsudo systemctl restart docker\n```\n\n## Verify Installation\n\n```bash\n# Run test container\ndocker run --rm hello-world\n\n# Run interactive container\ndocker run --rm -it ubuntu:22.04 bash\n# Inside container:\ncat /etc/os-release\nexit\n\n# List Docker images\ndocker images\n\n# List running containers\ndocker ps\n\n# List all containers (including stopped)\ndocker ps -a\n```\n\n## Troubleshooting\n\n**Permission denied error:**\n```bash\n# Check if Docker daemon is running\nsudo systemctl status docker\n\n# Check if your user is in docker group\ngroups\n\n# If not, add and re-login\nsudo usermod -aG docker $USER\n```\n\n**Docker daemon not starting:**\n```bash\n# Check logs\nsudo journalctl -u docker.service -n 50 --no-pager\n\n# Check for port conflicts\nsudo netstat -tlnp | grep dockerd\n```",
        "code": "# Complete Docker installation verification\nsudo apt update && sudo apt install -y docker.io docker-compose\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo usermod -aG docker $USER\ndocker --version\ndocker run --rm hello-world"
      },
      "order": 2
    },
    {
      "type": "explanation",
      "title": "Docker Containers: Your First Security Lab",
      "content": {
        "text": "Now let's learn how to run and manage containers - the core of Docker.\n\n## Running Your First Container\n\n```bash\n# Run Ubuntu container\ndocker run ubuntu:22.04 echo \"Hello from container\"\n\n# What happened:\n# 1. Docker downloaded ubuntu:22.04 image\n# 2. Created container from image\n# 3. Ran 'echo' command\n# 4. Container exited\n```\n\n## Interactive Containers\n\n```bash\n# Run interactive bash shell\ndocker run -it ubuntu:22.04 bash\n\n# You're now inside the container!\n# Try these commands:\nwhoami         # root\nhostname       # random container ID\ncat /etc/os-release\napt update && apt install nmap\nnmap --version\nexit           # Exit container\n```\n\n**Flags explained:**\n- `-i` = Interactive (keep STDIN open)\n- `-t` = TTY (allocate pseudo-terminal)\n- `--rm` = Remove container after exit\n\n## Container Lifecycle\n\n```bash\n# Run container in background (detached)\ndocker run -d --name web-server nginx\n\n# List running containers\ndocker ps\n# CONTAINER ID   IMAGE   COMMAND   CREATED   STATUS   PORTS   NAMES\n# abc123def456   nginx   ...       ...       Up       ...     web-server\n\n# View container logs\ndocker logs web-server\ndocker logs -f web-server  # Follow logs (like tail -f)\n\n# Execute command in running container\ndocker exec web-server ls /etc/nginx\n\n# Open shell in running container\ndocker exec -it web-server bash\n\n# Stop container\ndocker stop web-server\n\n# Start stopped container\ndocker start web-server\n\n# Restart container\ndocker restart web-server\n\n# Remove container\ndocker rm web-server\n\n# Force remove running container\ndocker rm -f web-server\n```\n\n## Security Lab Example: Kali Linux Container\n\n```bash\n# Run Kali Linux container\ndocker run -it --name kali-lab kalilinux/kali-rolling bash\n\n# Inside container, install tools\napt update\napt install -y nmap nikto sqlmap metasploit-framework\n\n# Exit container (but don't delete it)\nexit\n\n# Container stopped but still exists\ndocker ps -a | grep kali-lab\n\n# Resume your work later\ndocker start kali-lab\ndocker exec -it kali-lab bash\n\n# When done with lab\ndocker stop kali-lab\ndocker rm kali-lab\n```\n\n## Port Mapping: Access Services\n\n```bash\n# Run web server, map port 8080 (host) to 80 (container)\ndocker run -d -p 8080:80 --name webserver nginx\n\n# Access from host\ncurl http://localhost:8080\n# You see nginx welcome page!\n\n# View port mappings\ndocker port webserver\n# 80/tcp -> 0.0.0.0:8080\n\n# Clean up\ndocker rm -f webserver\n```\n\n**Port mapping format:** `-p HOST_PORT:CONTAINER_PORT`\n\n## Volume Mounting: Persistent Data\n\n```bash\n# Create directory for malware samples\nmkdir ~/malware-samples\n\n# Run container with volume mount\ndocker run -it --rm \\\n  -v ~/malware-samples:/samples \\\n  --name malware-analysis \\\n  remnux/remnux-cli bash\n\n# Inside container, /samples directory contains your files\nls /samples\n\n# Files you create in /samples persist on host\necho \"Analysis notes\" > /samples/notes.txt\nexit\n\n# Check host\ncat ~/malware-samples/notes.txt\n# Analysis notes\n```\n\n## Environment Variables\n\n```bash\n# Pass environment variables to container\ndocker run -e TARGET_IP=192.168.1.100 -it ubuntu bash\n\n# Inside container\necho $TARGET_IP\n# 192.168.1.100\n```\n\n## Resource Limits (Important for Security Labs)\n\n```bash\n# Limit CPU and memory\ndocker run -it --rm \\\n  --cpus=\"2\" \\\n  --memory=\"2g\" \\\n  --name resource-limited \\\n  ubuntu bash\n\n# Verify limits inside container\ncat /sys/fs/cgroup/cpu/cpu.shares\ncat /sys/fs/cgroup/memory/memory.limit_in_bytes\n```\n\n## Container Inspection\n\n```bash\n# Run a container\ndocker run -d --name inspect-me nginx\n\n# Get detailed container information\ndocker inspect inspect-me\n\n# Get specific information\ndocker inspect inspect-me | grep IPAddress\ndocker inspect -f '{{.NetworkSettings.IPAddress}}' inspect-me\n\n# View resource usage\ndocker stats inspect-me\n\n# View processes in container\ndocker top inspect-me\n\n# Clean up\ndocker rm -f inspect-me\n```\n\n## Common Security Lab Containers\n\n```bash\n# DVWA (Damn Vulnerable Web Application)\ndocker run -d -p 8081:80 --name dvwa vulnerables/web-dvwa\n# Access: http://localhost:8081\n\n# Metasploitable3\ndocker run -d -p 2222:22 -p 8082:80 --name metasploitable3 \\\n  tleemcjr/metasploitable3-docker\n\n# OWASP Juice Shop\ndocker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop\n\n# Wireshark\ndocker run -d -p 3001:3000 -p 3389:3389 \\\n  --name wireshark \\\n  lscr.io/linuxserver/wireshark\n\n# Clean up all\ndocker rm -f dvwa metasploitable3 juice-shop wireshark\n```"
      },
      "order": 3
    },
    {
      "type": "code_exercise",
      "title": "Building Custom Docker Images with Dockerfiles",
      "content": {
        "text": "Learn to create custom images tailored for your security needs.\n\n## What is a Dockerfile?\n\nA Dockerfile is a recipe for building Docker images. It contains instructions to:\n- Choose base image\n- Install packages\n- Copy files\n- Configure environment\n- Set startup command\n\n## Dockerfile Basics\n\n```dockerfile\n# Start from base image\nFROM ubuntu:22.04\n\n# Set metadata\nLABEL maintainer=\"security-team@example.com\"\nLABEL description=\"Security testing container\"\n\n# Run commands during build\nRUN apt-get update && apt-get install -y \\\n    nmap \\\n    netcat \\\n    curl \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Set working directory\nWORKDIR /workspace\n\n# Copy files from host to image\nCOPY scripts/ /workspace/scripts/\n\n# Set environment variables\nENV TOOL_VERSION=1.0\n\n# Expose ports (documentation only)\nEXPOSE 8080\n\n# Default command when container starts\nCMD [\"/bin/bash\"]\n```\n\n## Example 1: Reconnaissance Container\n\n```bash\n# Create directory\nmkdir recon-container\ncd recon-container\n\n# Create Dockerfile\ncat > Dockerfile <<'EOF'\nFROM kalilinux/kali-rolling\n\n# Install reconnaissance tools\nRUN apt-get update && apt-get install -y \\\n    nmap \\\n    masscan \\\n    dnsutils \\\n    whois \\\n    subfinder \\\n    amass \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Create workspace\nWORKDIR /recon\n\n# Copy custom scripts\nCOPY recon.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/recon.sh\n\nCMD [\"/bin/bash\"]\nEOF\n\n# Create reconnaissance script\ncat > recon.sh <<'EOF'\n#!/bin/bash\necho \"[*] Starting reconnaissance on $1\"\necho \"[*] Running nmap...\"\nnmap -sV $1\necho \"[*] Running subdomain enumeration...\"\nsubfinder -d $1\nEOF\n\n# Build image\ndocker build -t recon-tool:1.0 .\n\n# Run container\ndocker run --rm -it recon-tool:1.0\n\n# Inside container, test\nrecon.sh example.com\n```\n\n## Example 2: Malware Analysis Sandbox\n\n```dockerfile\nFROM remnux/remnux-cli\n\n# Install additional analysis tools\nRUN apt-get update && apt-get install -y \\\n    python3-pip \\\n    volatility3 \\\n    yara \\\n    && pip3 install pefile malware-analysis-toolkit\n\n# Create analysis directories\nRUN mkdir -p /analysis/{samples,reports,tools}\n\nWORKDIR /analysis\n\n# Copy YARA rules\nCOPY yara-rules/ /analysis/tools/yara-rules/\n\n# Set environment\nENV ANALYST_NAME=\"SecOps Team\"\n\nCMD [\"/bin/bash\"]\n```\n\n## Example 3: CTF Challenge Container\n\n```dockerfile\nFROM ubuntu:22.04\n\n# Install web server and PHP\nRUN apt-get update && apt-get install -y \\\n    apache2 \\\n    php \\\n    libapache2-mod-php \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Copy vulnerable web app\nCOPY challenge-app/ /var/www/html/\n\n# Set permissions\nRUN chown -R www-data:www-data /var/www/html\n\n# Copy flag\nRUN echo \"FLAG{d0cker_1s_aw3s0me}\" > /root/flag.txt \\\n    && chmod 600 /root/flag.txt\n\nEXPOSE 80\n\n# Start Apache\nCMD [\"apachectl\", \"-D\", \"FOREGROUND\"]\n```\n\n## Building and Managing Images\n\n```bash\n# Build image from Dockerfile\ndocker build -t my-image:1.0 .\n\n# Build with specific Dockerfile\ndocker build -t my-image:1.0 -f Dockerfile.custom .\n\n# Build with build arguments\ndocker build --build-arg VERSION=2.0 -t my-image:2.0 .\n\n# List images\ndocker images\n\n# Remove image\ndocker rmi my-image:1.0\n\n# Remove dangling images (untagged)\ndocker image prune\n\n# Remove all unused images\ndocker image prune -a\n```\n\n## Image Tagging\n\n```bash\n# Tag image\ndocker tag my-image:1.0 my-image:latest\ndocker tag my-image:1.0 registry.example.com/my-image:1.0\n\n# Push to registry (after docker login)\ndocker push registry.example.com/my-image:1.0\n\n# Pull from registry\ndocker pull registry.example.com/my-image:1.0\n```\n\n## Multi-Stage Builds (Advanced)\n\nReduce image size by building in stages:\n\n```dockerfile\n# Build stage\nFROM golang:1.21 AS builder\nWORKDIR /app\nCOPY exploit.go .\nRUN go build -o exploit exploit.go\n\n# Runtime stage\nFROM alpine:latest\nCOPY --from=builder /app/exploit /usr/local/bin/\nCMD [\"exploit\"]\n```\n\nResult: Small final image (only Alpine + binary, no Go compiler).",
        "code": "# Complete example: Build and run custom image\nmkdir my-sec-tool && cd my-sec-tool\ncat > Dockerfile <<'EOF'\nFROM ubuntu:22.04\nRUN apt-get update && apt-get install -y nmap curl\nWORKDIR /work\nCMD [\"/bin/bash\"]\nEOF\ndocker build -t my-sec-tool:1.0 .\ndocker run --rm -it my-sec-tool:1.0"
      },
      "order": 4
    },
    {
      "type": "explanation",
      "title": "Docker Compose: Multi-Container Security Labs",
      "content": {
        "text": "Docker Compose lets you define and run multi-container applications - perfect for complex security labs.\n\n## Why Docker Compose?\n\nImagine setting up a pentest lab:\n- Vulnerable web app (PHP + Apache)\n- Database (MySQL)\n- Logging server (ELK Stack)\n- Attack box (Kali)\n\n**Without Docker Compose:**\n```bash\n# Start database\ndocker run -d --name db -e MYSQL_ROOT_PASSWORD=pass mysql:5.7\n\n# Start web app (link to db)\ndocker run -d --name webapp --link db:mysql -p 80:80 webapp-image\n\n# Start logging\ndocker run -d --name elk -p 5601:5601 elk-image\n\n# Start attack box\ndocker run -it --name kali --link webapp:target kali-image\n\n# Ugh... managing ports, links, environment variables manually!\n```\n\n**With Docker Compose:**\n```yaml\n# docker-compose.yml\nversion: '3'\nservices:\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: pass\n      \n  webapp:\n    image: webapp-image\n    ports:\n      - \"80:80\"\n    depends_on:\n      - db\n      \n  elk:\n    image: elk-image\n    ports:\n      - \"5601:5601\"\n      \n  kali:\n    image: kali-image\n    depends_on:\n      - webapp\n```\n\nOne command to start everything:\n```bash\ndocker compose up\n```\n\n## Docker Compose File Structure\n\n```yaml\nversion: '3.8'  # Compose file version\n\nservices:       # Define containers\n  service-name:\n    image: image-name:tag\n    # OR\n    build: ./directory-with-dockerfile\n    \n    container_name: custom-name\n    \n    ports:\n      - \"HOST:CONTAINER\"\n      \n    environment:\n      - VAR=value\n      \n    volumes:\n      - host-path:container-path\n      \n    networks:\n      - network-name\n      \n    depends_on:\n      - other-service\n      \n    command: override-default-command\n\nnetworks:       # Define networks\n  network-name:\n\nvolumes:        # Define volumes\n  volume-name:\n```\n\n## Example 1: DVWA Lab\n\n```yaml\n# docker-compose.yml\nversion: '3'\n\nservices:\n  web:\n    image: vulnerables/web-dvwa\n    ports:\n      - \"8080:80\"\n    environment:\n      - MYSQL_HOST=db\n      - MYSQL_DATABASE=dvwa\n      - MYSQL_USER=dvwa\n      - MYSQL_PASSWORD=p@ssw0rd\n    depends_on:\n      - db\n    networks:\n      - lab-network\n      \n  db:\n    image: mysql:5.7\n    environment:\n      - MYSQL_ROOT_PASSWORD=rootpass\n      - MYSQL_DATABASE=dvwa\n      - MYSQL_USER=dvwa\n      - MYSQL_PASSWORD=p@ssw0rd\n    volumes:\n      - dvwa-data:/var/lib/mysql\n    networks:\n      - lab-network\n\nnetworks:\n  lab-network:\n    driver: bridge\n\nvolumes:\n  dvwa-data:\n```\n\n**Usage:**\n```bash\n# Start lab\ndocker compose up -d\n\n# Access DVWA\nxdg-open http://localhost:8080\n\n# View logs\ndocker compose logs -f\n\n# Stop lab\ndocker compose down\n\n# Stop and remove volumes (clean slate)\ndocker compose down -v\n```\n\n## Example 2: ELK Stack for Log Analysis\n\n```yaml\nversion: '3'\n\nservices:\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0\n    environment:\n      - discovery.type=single-node\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - xpack.security.enabled=false\n    ports:\n      - \"9200:9200\"\n    volumes:\n      - es-data:/usr/share/elasticsearch/data\n    networks:\n      - elk\n      \n  logstash:\n    image: docker.elastic.co/logstash/logstash:8.11.0\n    ports:\n      - \"5000:5000/tcp\"\n      - \"5000:5000/udp\"\n    volumes:\n      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro\n    networks:\n      - elk\n    depends_on:\n      - elasticsearch\n      \n  kibana:\n    image: docker.elastic.co/kibana/kibana:8.11.0\n    ports:\n      - \"5601:5601\"\n    environment:\n      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200\n    networks:\n      - elk\n    depends_on:\n      - elasticsearch\n\nnetworks:\n  elk:\n    driver: bridge\n\nvolumes:\n  es-data:\n```\n\n## Example 3: Red Team Infrastructure\n\n```yaml\nversion: '3'\n\nservices:\n  # C2 Server (Covenant)\n  c2-server:\n    build: ./covenant\n    ports:\n      - \"7443:7443\"  # HTTPS listener\n      - \"8443:8443\"  # C2 management\n    volumes:\n      - c2-data:/app/Data\n    networks:\n      - redteam-net\n      \n  # Phishing server\n  phishing:\n    image: nginx:alpine\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./phishing-pages:/usr/share/nginx/html:ro\n    networks:\n      - redteam-net\n      \n  # Payload hosting\n  payloads:\n    image: python:3-alpine\n    command: python3 -m http.server 8000\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./payloads:/payloads\n    working_dir: /payloads\n    networks:\n      - redteam-net\n      \n  # Logging\n  logs:\n    image: grafana/loki:latest\n    ports:\n      - \"3100:3100\"\n    networks:\n      - redteam-net\n\nnetworks:\n  redteam-net:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.28.0.0/16\n\nvolumes:\n  c2-data:\n```\n\n## Docker Compose Commands\n\n```bash\n# Start all services\ndocker compose up\n\n# Start in background (detached)\ndocker compose up -d\n\n# Build images before starting\ndocker compose up --build\n\n# Stop services\ndocker compose stop\n\n# Stop and remove containers\ndocker compose down\n\n# Stop and remove containers + volumes\ndocker compose down -v\n\n# View running services\ndocker compose ps\n\n# View logs\ndocker compose logs\ndocker compose logs -f service-name\n\n# Execute command in service\ndocker compose exec service-name bash\n\n# Scale service (run multiple instances)\ndocker compose up --scale webapp=3 -d\n\n# Restart service\ndocker compose restart service-name\n\n# Pull latest images\ndocker compose pull\n```\n\n## Environment Variables in Compose\n\n**Using .env file:**\n```bash\n# .env\nMYSQL_ROOT_PASSWORD=secretpass\nWEB_PORT=8080\nAPP_VERSION=1.0\n```\n\n```yaml\n# docker-compose.yml\nservices:\n  db:\n    image: mysql:5.7\n    environment:\n      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n      \n  web:\n    image: myapp:${APP_VERSION}\n    ports:\n      - \"${WEB_PORT}:80\"\n```\n\n## Profiles: Conditional Services\n\n```yaml\nservices:\n  webapp:\n    image: webapp:latest\n    # Always runs\n    \n  debug-tools:\n    image: debug:latest\n    profiles:\n      - debug\n    # Only runs with: docker compose --profile debug up\n    \n  monitoring:\n    image: prometheus:latest\n    profiles:\n      - monitoring\n    # Only runs with: docker compose --profile monitoring up\n```"
      },
      "order": 5
    },
    {
      "type": "code_exercise",
      "title": "Hands-On: Complete CTF Lab with Docker Compose",
      "content": {
        "text": "Let's build a complete CTF lab environment with Docker Compose.\n\n## Lab Architecture\n\n```\n┌─────────────────────────────────────────────┐\n│           CTF Lab Network                   │\n├─────────────┬───────────────┬───────────────┤\n│  Web Chall  │  Crypto Chall │  Forensics    │\n│  (Port 80)  │  (Port 8001)  │  (Port 8002)  │\n└─────────────┴───────────────┴───────────────┘\n       │               │              │\n       └───────────────┴──────────────┘\n                       │\n             ┌─────────▼──────────┐\n             │   Scoreboard       │\n             │   (Port 8080)      │\n             └────────────────────┘\n```\n\n## Step 1: Create Project Structure\n\n```bash\nmkdir ctf-lab\ncd ctf-lab\n\n# Create directories\nmkdir -p challenges/{web,crypto,forensics}\nmkdir scoreboard\n```\n\n## Step 2: Create Web Challenge\n\n```bash\ncat > challenges/web/index.php <<'EOF'\n<?php\n// Simple SQL injection challenge\n$db = new SQLite3('/tmp/users.db');\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n    \n    // Vulnerable query\n    $query = \"SELECT * FROM users WHERE username='$username' AND password='$password'\";\n    $result = $db->query($query);\n    \n    if ($result && $result->fetchArray()) {\n        echo \"<h1>FLAG{sql_1nj3ct10n_m4st3r}</h1>\";\n    } else {\n        echo \"<h1>Login Failed</h1>\";\n    }\n}\n?>\n\n<form method=\"POST\">\n    <input type=\"text\" name=\"username\" placeholder=\"Username\">\n    <input type=\"password\" name=\"password\" placeholder=\"Password\">\n    <button type=\"submit\">Login</button>\n</form>\nEOF\n\ncat > challenges/web/Dockerfile <<'EOF'\nFROM php:8.1-apache\n\nRUN apt-get update && apt-get install -y sqlite3 \\\n    && docker-php-ext-install pdo pdo_sqlite\n\nCOPY index.php /var/www/html/\n\nRUN echo \"CREATE TABLE users (username TEXT, password TEXT); \\\n     INSERT INTO users VALUES ('admin', 'impossible_password');\" | \\\n     sqlite3 /tmp/users.db\n\nEXPOSE 80\nEOF\n```\n\n## Step 3: Create Docker Compose File\n\n```yaml\n# docker-compose.yml\nversion: '3.8'\n\nservices:\n  # Web Challenge\n  web-challenge:\n    build: ./challenges/web\n    container_name: ctf-web\n    ports:\n      - \"8080:80\"\n    networks:\n      - ctf-net\n    restart: unless-stopped\n      \n  # Crypto Challenge  \n  crypto-challenge:\n    image: python:3.11-alpine\n    container_name: ctf-crypto\n    ports:\n      - \"8001:8000\"\n    volumes:\n      - ./challenges/crypto:/app\n    working_dir: /app\n    command: python3 -m http.server 8000\n    networks:\n      - ctf-net\n    restart: unless-stopped\n      \n  # Forensics Challenge\n  forensics-challenge:\n    image: ubuntu:22.04\n    container_name: ctf-forensics\n    ports:\n      - \"8002:22\"\n    volumes:\n      - ./challenges/forensics:/evidence:ro\n    command: >\n      bash -c \"apt-get update && \n               apt-get install -y openssh-server &&\n               mkdir /var/run/sshd &&\n               echo 'root:ctfpassword' | chpasswd &&\n               sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config &&\n               /usr/sbin/sshd -D\"\n    networks:\n      - ctf-net\n    restart: unless-stopped\n      \n  # Scoreboard\n  scoreboard:\n    image: nginx:alpine\n    container_name: ctf-scoreboard\n    ports:\n      - \"8888:80\"\n    volumes:\n      - ./scoreboard:/usr/share/nginx/html:ro\n    networks:\n      - ctf-net\n    restart: unless-stopped\n\nnetworks:\n  ctf-net:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.25.0.0/16\n```\n\n## Step 4: Create Scoreboard\n\n```bash\ncat > scoreboard/index.html <<'EOF'\n<!DOCTYPE html>\n<html>\n<head>\n    <title>CTF Lab - Challenges</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 40px; }\n        .challenge { border: 1px solid #ccc; padding: 20px; margin: 20px 0; }\n        .challenge h2 { color: #333; }\n        a { color: #0066cc; text-decoration: none; }\n    </style>\n</head>\n<body>\n    <h1>🚩 CTF Lab Challenges</h1>\n    \n    <div class=\"challenge\">\n        <h2>Challenge 1: SQL Injection</h2>\n        <p>Category: Web</p>\n        <p>Points: 100</p>\n        <p>Description: Can you bypass the login?</p>\n        <a href=\"http://localhost:8080\" target=\"_blank\">Start Challenge →</a>\n    </div>\n    \n    <div class=\"challenge\">\n        <h2>Challenge 2: Caesar Cipher</h2>\n        <p>Category: Crypto</p>\n        <p>Points: 50</p>\n        <p>Description: Decrypt the message</p>\n        <a href=\"http://localhost:8001\" target=\"_blank\">Start Challenge →</a>\n    </div>\n    \n    <div class=\"challenge\">\n        <h2>Challenge 3: Hidden Files</h2>\n        <p>Category: Forensics</p>\n        <p>Points: 75</p>\n        <p>Description: Find the hidden flag</p>\n        <p>SSH: ssh root@localhost -p 8002 (password: ctfpassword)</p>\n    </div>\n</body>\n</html>\nEOF\n```\n\n## Step 5: Launch the Lab\n\n```bash\n# Build and start all services\ndocker compose up -d --build\n\n# Check all containers are running\ndocker compose ps\n\n# View logs\ndocker compose logs -f\n\n# Access scoreboard\nxdg-open http://localhost:8888\n\n# Stop the lab\ndocker compose down\n\n# Completely reset (including volumes)\ndocker compose down -v\n```\n\n## Step 6: Test the Challenges\n\n**Web Challenge (SQL Injection):**\n```bash\n# Try SQL injection\ncurl -X POST http://localhost:8080 \\\n  -d \"username=admin' OR '1'='1&password=anything\"\n\n# Should return FLAG\n```\n\n**Forensics Challenge (SSH):**\n```bash\n# Connect to forensics container\nssh root@localhost -p 8002\n# Password: ctfpassword\n\n# Inside container, find hidden files\nfind /evidence -name \"*flag*\"\n```\n\n## Advanced: Add Monitoring\n\nAdd Prometheus and Grafana to monitor lab usage:\n\n```yaml\n  prometheus:\n    image: prom/prometheus\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n    networks:\n      - ctf-net\n      \n  grafana:\n    image: grafana/grafana\n    ports:\n      - \"3000:3000\"\n    networks:\n      - ctf-net\n    depends_on:\n      - prometheus\n```",
        "code": "# Complete CTF lab setup\nmkdir ctf-lab && cd ctf-lab\nmkdir -p challenges/{web,crypto,forensics} scoreboard\n# Create docker-compose.yml and challenge files (see above)\ndocker compose up -d --build\ndocker compose ps\nxdg-open http://localhost:8888"
      },
      "order": 6
    },
    {
      "type": "explanation",
      "title": "Docker Networking for Isolated Security Labs",
      "content": {
        "text": "Understanding Docker networking is crucial for creating isolated, realistic security testing environments.\n\n## Docker Network Types\n\n**1. Bridge Network (Default)**\n```\nHost: 192.168.1.100\n  │\n  └─ docker0 bridge (172.17.0.0/16)\n       ├─ container1 (172.17.0.2)\n       ├─ container2 (172.17.0.3)\n       └─ container3 (172.17.0.4)\n```\n\nContainers can talk to each other, isolated from host network.\n\n**2. Host Network**\n```\nContainer uses host's network directly\nNo network isolation\n```\n\n**3. None Network**\n```\nNo network access (perfect for malware analysis)\n```\n\n**4. Custom Networks**\n```\nUser-defined networks with DNS resolution\n```\n\n## Network Commands\n\n```bash\n# List networks\ndocker network ls\n\n# Create custom network\ndocker network create lab-network\n\n# Inspect network\ndocker network inspect lab-network\n\n# Remove network\ndocker network rm lab-network\n\n# Remove all unused networks\ndocker network prune\n```\n\n## Scenario 1: Isolated Attack Lab\n\n```bash\n# Create isolated network\ndocker network create --subnet=10.0.10.0/24 attack-lab\n\n# Run target (vulnerable web app)\ndocker run -d --name target \\\n  --network attack-lab \\\n  --ip 10.0.10.10 \\\n  vulnerables/web-dvwa\n\n# Run attacker (Kali)\ndocker run -it --name attacker \\\n  --network attack-lab \\\n  --ip 10.0.10.100 \\\n  kalilinux/kali-rolling bash\n\n# Inside attacker container\nnmap -sV 10.0.10.10\ncurl http://10.0.10.10\n```\n\n## Scenario 2: Multi-Network Container\n\n```bash\n# Create two networks: DMZ and Internal\ndocker network create dmz\ndocker network create internal\n\n# Web server in DMZ (accessible from outside)\ndocker run -d --name webserver \\\n  --network dmz \\\n  -p 8080:80 \\\n  nginx\n\n# Database in Internal (not accessible from outside)\ndocker run -d --name database \\\n  --network internal \\\n  mysql:5.7\n\n# App server connected to BOTH networks\ndocker run -d --name appserver \\\n  --network dmz \\\n  myapp:latest\n\n# Connect appserver to internal network too\ndocker network connect internal appserver\n\n# Now appserver can:\n# - Receive requests from webserver (DMZ)\n# - Query database (Internal)\n# But webserver and database can't talk directly!\n```\n\n## Scenario 3: Network Isolation for Malware Analysis\n\n```bash\n# Create completely isolated network (no internet)\ndocker network create --internal malware-analysis\n\n# Run analysis container with NO internet access\ndocker run -it --rm \\\n  --network malware-analysis \\\n  --name malware-lab \\\n  -v ~/malware-samples:/samples \\\n  remnux/remnux-cli bash\n\n# Container can't reach internet\nping google.com  # Fails\ncurl google.com  # Fails\n\n# But you can analyze malware safely\ncd /samples\nfile suspicious.exe\nstrings suspicious.exe\n```\n\n## DNS Resolution in Docker\n\n**Default bridge network:**\n```bash\n# Containers must use IP addresses\ndocker run -d --name web nginx\ndocker run --rm alpine ping web  # FAILS\ndocker run --rm alpine ping 172.17.0.2  # Works\n```\n\n**Custom networks (with DNS):**\n```bash\ndocker network create lab\ndocker run -d --name web --network lab nginx\ndocker run --rm --network lab alpine ping web  # Works!\n# Docker provides automatic DNS: web → container IP\n```\n\n## Port Publishing\n\n```bash\n# Publish to all interfaces\ndocker run -p 8080:80 nginx\n# Host: 0.0.0.0:8080 → Container: 80\n\n# Publish to specific interface\ndocker run -p 127.0.0.1:8080:80 nginx\n# Only localhost can access\n\n# Publish to random port\ndocker run -P nginx\n# Docker chooses random host port\n\n# View port mappings\ndocker port <container>\n```\n\n## Docker Compose Networking\n\n```yaml\nversion: '3.8'\n\nservices:\n  frontend:\n    image: webapp:latest\n    networks:\n      - dmz\n    ports:\n      - \"80:80\"\n      \n  backend:\n    image: api:latest\n    networks:\n      - dmz\n      - internal\n      \n  database:\n    image: postgres:14\n    networks:\n      - internal\n    # No ports exposed to host!\n\nnetworks:\n  dmz:\n    driver: bridge\n  internal:\n    driver: bridge\n    internal: true  # No external access\n```\n\n## Network Security Best Practices\n\n1. **Use custom networks** for better isolation\n2. **Minimize exposed ports** (only expose what's necessary)\n3. **Use internal networks** for databases and sensitive services\n4. **Network segmentation** (DMZ, Internal, Management)\n5. **No host network** for untrusted containers\n6. **Firewall rules** on host for additional protection\n\n## Inspecting Container Network\n\n```bash\n# Get container IP\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' container-name\n\n# Get all network info\ndocker inspect container-name | grep -A 20 Networks\n\n# View network connections inside container\ndocker exec container-name netstat -tulpn\n\n# Test connectivity\ndocker exec container1 ping container2\n```"
      },
      "order": 7
    },
    {
      "type": "memory_aid",
      "title": "Docker Command Cheat Sheet",
      "content": {
        "text": "## Essential Docker Commands\n\n### Container Lifecycle\n```bash\ndocker run [options] IMAGE [COMMAND]   # Create and start container\ndocker ps                              # List running containers\ndocker ps -a                           # List all containers\ndocker stop CONTAINER                  # Stop container\ndocker start CONTAINER                 # Start stopped container\ndocker restart CONTAINER               # Restart container\ndocker rm CONTAINER                    # Remove container\ndocker rm -f CONTAINER                 # Force remove running container\n```\n\n### Common Run Options\n```bash\n-d                 # Detached (background)\n-it                # Interactive with TTY\n--rm               # Remove after exit\n--name NAME        # Custom name\n-p HOST:CONTAINER  # Port mapping\n-v HOST:CONTAINER  # Volume mount\n-e VAR=value       # Environment variable\n--network NET      # Network\n--cpus=\"2\"         # CPU limit\n--memory=\"2g\"      # Memory limit\n```\n\n### Image Management\n```bash\ndocker images                  # List images\ndocker pull IMAGE              # Download image\ndocker build -t NAME:TAG .     # Build image\ndocker rmi IMAGE               # Remove image\ndocker tag SOURCE TARGET       # Tag image\ndocker push IMAGE              # Upload to registry\n```\n\n### Container Inspection\n```bash\ndocker logs CONTAINER          # View logs\ndocker logs -f CONTAINER       # Follow logs\ndocker exec CONTAINER COMMAND  # Run command\ndocker exec -it CONTAINER bash # Open shell\ndocker inspect CONTAINER       # Detailed info\ndocker stats CONTAINER         # Resource usage\ndocker top CONTAINER           # Running processes\n```\n\n### Docker Compose\n```bash\ndocker compose up              # Start services\ndocker compose up -d           # Start in background\ndocker compose down            # Stop and remove\ndocker compose down -v         # Also remove volumes\ndocker compose ps              # List services\ndocker compose logs            # View logs\ndocker compose exec SVC bash   # Shell in service\ndocker compose restart SVC     # Restart service\n```\n\n### Network Management\n```bash\ndocker network ls              # List networks\ndocker network create NET      # Create network\ndocker network inspect NET     # Network details\ndocker network connect NET C   # Connect container\ndocker network disconnect NET C # Disconnect\ndocker network rm NET          # Remove network\n```\n\n### Volume Management\n```bash\ndocker volume ls               # List volumes\ndocker volume create VOL       # Create volume\ndocker volume inspect VOL      # Volume details\ndocker volume rm VOL           # Remove volume\ndocker volume prune            # Remove unused\n```\n\n### Cleanup\n```bash\ndocker system prune            # Remove unused data\ndocker system prune -a         # Remove all unused\ndocker container prune         # Remove stopped containers\ndocker image prune             # Remove dangling images\ndocker volume prune            # Remove unused volumes\ndocker network prune           # Remove unused networks\n```\n\n## Memory Mnemonics\n\n**Container Lifecycle (RSRR):**\n- **R**un - Create and start\n- **S**top - Stop running\n- **R**estart - Stop and start\n- **R**emove - Delete container\n\n**Run Flags (PIVEN):**\n- **P**ort (-p)\n- **I**nteractive (-it)\n- **V**olume (-v)\n- **E**nvironment (-e)\n- **N**ame (--name)\n\n**Docker Compose (USD):**\n- **U**p - Start\n- **S**top - Stop\n- **D**own - Stop and remove"
      },
      "order": 8
    },
    {
      "type": "mindset_coach",
      "title": "Mastering Docker for Security Work",
      "content": {
        "text": "Docker might seem complex at first, but it's one of the most valuable skills you'll develop as a security professional. Here's how to approach learning Docker:\n\n## Start Simple\n\nYou don't need to master everything at once:\n1. Run pre-built containers (Kali, DVWA)\n2. Use basic commands (run, stop, rm)\n3. Mount volumes for file sharing\n4. Map ports to access services\n\nThat's 80% of what you'll use daily!\n\n## Build Your Lab Library\n\nCreate a personal collection of docker-compose files:\n- CTF practice environment\n- Malware analysis sandbox\n- Web app testing lab\n- Network security practice\n- SIEM stack for log analysis\n\nShare these on GitHub - help others and build your portfolio!\n\n## Practice Safely\n\nDocker enables safe experimentation:\n- Test exploits without breaking your system\n- Analyze malware in isolation\n- Learn by breaking things (then `docker compose down`!)\n- Try tools before installing them\n\nMistakes are learning opportunities - containers are disposable!\n\n## Join the Community\n\nExplore Docker Hub:\n- Search for security tools\n- Read Dockerfiles to learn\n- Contribute improvements\n- Share your own images\n\n## Real-World Impact\n\nEvery skill you learn here:\n- Makes you more efficient at security work\n- Enables reproducible research\n- Facilitates team collaboration\n- Builds your professional portfolio\n- Prepares you for Kubernetes (next level!)\n\n## Next Steps\n\n1. Build a simple security lab with Docker Compose\n2. Containerize one of your security scripts\n3. Share your Dockerfile on GitHub\n4. Practice daily - muscle memory matters\n5. Explore advanced topics (multi-stage builds, registries)\n\nYou've got this! Docker is a superpower for security professionals. Start small, build momentum, and soon you'll be orchestrating complex security labs with ease.\n\nNow go build something awesome! 🐳🔒"
      },
      "order": 9
    }
  ],
  "post_assessment": [
    {
      "question_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d",
      "type": "multiple_choice",
      "question": "What is the main difference between containers and virtual machines?",
      "difficulty": 1,
      "options": [
        "A) Containers share the host OS kernel, VMs have their own kernel",
        "B) Containers are slower than VMs",
        "C) VMs use less disk space than containers",
        "D) Containers require a hypervisor, VMs don't"
      ],
      "correct_answer": "A",
      "explanation": "Containers share the host operating system kernel, making them lightweight and fast to start. Virtual machines include a full guest OS with its own kernel, requiring more resources but providing stronger isolation. This is why containers start in seconds while VMs take minutes."
    },
    {
      "question_id": "b2c3d4e5-f6a7-4b8c-9d0e-1f2a3b4c5d6e",
      "type": "multiple_choice",
      "question": "Which command runs a container in detached mode (background)?",
      "difficulty": 1,
      "options": [
        "A) docker run -b IMAGE",
        "B) docker run -d IMAGE",
        "C) docker run --background IMAGE",
        "D) docker run -detach IMAGE"
      ],
      "correct_answer": "B",
      "explanation": "The '-d' flag (short for --detach) runs a container in the background. This is essential for services like web servers that need to keep running. Without -d, the container runs in the foreground and blocks your terminal."
    },
    {
      "question_id": "c3d4e5f6-a7b8-4c9d-0e1f-2a3b4c5d6e7f",
      "type": "multiple_choice",
      "question": "What does the -p 8080:80 flag do in docker run?",
      "difficulty": 1,
      "options": [
        "A) Sets container priority to 8080",
        "B) Maps host port 8080 to container port 80",
        "C) Maps host port 80 to container port 8080",
        "D) Opens 8080 ports in the container"
      ],
      "correct_answer": "B",
      "explanation": "The -p flag maps ports in the format HOST:CONTAINER. So -p 8080:80 maps port 8080 on your host machine to port 80 inside the container. This allows you to access a web server running on container port 80 by visiting localhost:8080 on your host."
    },
    {
      "question_id": "d4e5f6a7-b8c9-4d0e-1f2a-3b4c5d6e7f8a",
      "type": "multiple_choice",
      "question": "What is the purpose of a Dockerfile?",
      "difficulty": 1,
      "options": [
        "A) To store container data permanently",
        "B) To define instructions for building a Docker image",
        "C) To list all running containers",
        "D) To configure Docker networking"
      ],
      "correct_answer": "B",
      "explanation": "A Dockerfile is a text file containing instructions to build a Docker image. It specifies the base image, packages to install, files to copy, environment variables, and commands to run. Think of it as a recipe for creating a custom container image."
    },
    {
      "question_id": "e5f6a7b8-c9d0-4e1f-2a3b-4c5d6e7f8a9b",
      "type": "multiple_choice",
      "question": "Which Docker Compose command starts all services defined in docker-compose.yml?",
      "difficulty": 1,
      "options": [
        "A) docker-compose start",
        "B) docker-compose run",
        "C) docker-compose up",
        "D) docker-compose deploy"
      ],
      "correct_answer": "C",
      "explanation": "'docker compose up' (or docker-compose up in older versions) builds, creates, and starts all services defined in your docker-compose.yml file. Add -d to run in detached mode. This single command replaces multiple docker run commands, making multi-container applications easy to manage."
    },
    {
      "question_id": "f6a7b8c9-d0e1-4f2a-3b4c-5d6e7f8a9b0c",
      "type": "multiple_choice",
      "question": "Why would you use --network none when running a malware analysis container?",
      "difficulty": 2,
      "options": [
        "A) To make the container faster",
        "B) To prevent the malware from communicating with external servers",
        "C) To allow all network protocols",
        "D) To connect to multiple networks"
      ],
      "correct_answer": "B",
      "explanation": "Using --network none completely disables networking for the container, preventing any network communication. This is critical for malware analysis to stop malware from reaching command and control servers, downloading additional payloads, or spreading to other systems while you analyze it safely."
    },
    {
      "question_id": "a7b8c9d0-e1f2-4a3b-4c5d-6e7f8a9b0c1d",
      "type": "multiple_choice",
      "question": "What does the -v flag do in docker run?",
      "difficulty": 1,
      "options": [
        "A) Enables verbose logging",
        "B) Verifies the container image",
        "C) Mounts a volume (binds host directory to container)",
        "D) Sets the container version"
      ],
      "correct_answer": "C",
      "explanation": "The -v flag (or --volume) mounts a host directory or volume into the container. Format: -v /host/path:/container/path. This allows data to persist beyond container lifetime and enables sharing files between host and container, essential for analysis work where you need to examine results."
    },
    {
      "question_id": "b8c9d0e1-f2a3-4b4c-5d6e-7f8a9b0c1d2e",
      "type": "multiple_choice",
      "question": "Which command removes all stopped containers, unused networks, and dangling images?",
      "difficulty": 2,
      "options": [
        "A) docker clean",
        "B) docker system prune",
        "C) docker remove --all",
        "D) docker cleanup"
      ],
      "correct_answer": "B",
      "explanation": "'docker system prune' removes all stopped containers, unused networks, dangling images, and build cache. Add -a to also remove unused images. This is essential for freeing up disk space after running many security labs and tests. Always review what will be deleted before confirming."
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "memory_hooks",
    "gamify_it",
    "multiple_memory_pathways"
  ]
}
