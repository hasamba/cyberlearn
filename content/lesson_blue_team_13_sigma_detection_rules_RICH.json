{
  "lesson_id": "2c3d4e5f-6a7b-8c9d-0e1f-2a3b4c5d6e7f",
  "domain": "blue_team",
  "title": "Sigma: Universal Detection Rule Format",
  "difficulty": 2,
  "order_index": 13,
  "prerequisites": [
    "blue_team_01"
  ],
  "concepts": [
    "Detection engineering",
    "Sigma rule format",
    "YAML-based signatures",
    "Backend conversion",
    "SIEM-agnostic detection",
    "Rule chaining",
    "False positive tuning",
    "Threat hunting rules"
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Understand Sigma's purpose in detection engineering",
    "Write effective Sigma rules for threat detection",
    "Convert Sigma rules to various SIEM formats",
    "Integrate Sigma into detection workflows",
    "Tune rules to reduce false positives"
  ],
  "post_assessment": [
    {
      "question": "What problem does Sigma solve in detection engineering?",
      "options": [
        "Encrypts SIEM logs",
        "Provides SIEM-agnostic detection rule format",
        "Replaces firewalls",
        "Generates malware signatures"
      ],
      "correct_answer": 1,
      "explanation": "Sigma solves the problem of SIEM vendor lock-in by providing a universal, YAML-based detection rule format that can be converted to any SIEM query language (Splunk SPL, Elastic KQL, QRadar AQL, etc.).",
      "question_id": "1bcffd1c-a46f-4a71-98e5-50e6da5837da",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "Which Sigma field is used to reduce false positives by excluding known benign activity?",
      "options": [
        "detection.selection",
        "detection.condition",
        "detection.filter",
        "logsource"
      ],
      "correct_answer": 2,
      "explanation": "The 'filter' field in the detection section is used to exclude known false positives by specifying conditions that should NOT trigger the rule, such as benign processes or trusted user accounts.",
      "question_id": "6af12637-a9f3-4eec-a001-4ed9fd605a2c",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "What is the most important takeaway from this lesson?",
      "options": [
        "Understanding the core concepts and their practical applications",
        "Memorizing all technical details",
        "Only knowing the theory without practice",
        "Focusing on a single aspect"
      ],
      "correct_answer": 0,
      "explanation": "The key takeaway is understanding how to apply the concepts learned in real-world scenarios, combining both theoretical knowledge and practical skills.",
      "question_id": "cf5e27c4-be13-4576-ab66-7855b4c24b69",
      "type": "multiple_choice",
      "difficulty": 1
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "meta_learning",
    "memory_hooks",
    "minimum_effective_dose",
    "teach_like_im_10",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "content": {
        "text": "Welcome to the world of universal detection engineering! 🎯\n\nImagine spending weeks writing custom detection rules for Splunk, then your company switches to Elastic. All your work is wasted. Or you share a great detection with a colleague, but they use QRadar—your rule is useless to them.\n\n**This is the problem Sigma solves.**\n\nThink of Sigma like **musical notation**: musicians worldwide can read the same sheet music and play it on piano, guitar, or violin. Similarly, **Sigma rules are written once and played on any SIEM**.\n\n**Mindset shift**: Stop writing SIEM-specific detections. Write Sigma rules and let automation handle the conversion. Share rules with the community. Stand on the shoulders of giants.\n\nYou're about to learn the detection format used by:\n- MITRE ATT&CK mappings\n- SOC Prime Threat Detection Marketplace (40,000+ rules)\n- Microsoft Sentinel\n- Major threat intelligence providers\n\nLet's write detections that work everywhere! 🚀"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## What is Sigma?\n\n**Sigma** is an open-source, generic signature format for SIEM systems, developed by Florian Roth and the cybersecurity community. It allows detection engineers to write rules once in YAML format and convert them to 20+ SIEM query languages.\n\n### The Problem Sigma Solves\n\n**Before Sigma**:\n\n```\nSplunk SPL:\nindex=windows EventCode=4688 \n| where like(CommandLine, \"%mimikatz%\")\n\nElastic KQL:\nevent.code:4688 AND process.command_line:*mimikatz*\n\nQRadar AQL:\nSELECT * FROM events WHERE \"Event ID\"=4688 \nAND \"Command Line\" LIKE '%mimikatz%'\n\nMicrosoft Sentinel:\nSecurityEvent\n| where EventID == 4688\n| where CommandLine contains \"mimikatz\"\n```\n\nSame detection, 4 different languages. Maintainability nightmare.\n\n**With Sigma**:\n\n```yaml\ntitle: Mimikatz Execution Detection\nstatus: experimental\nlogsource:\ncategory: process_creation\nproduct: windows\ndetection:\nselection:\nCommandLine|contains: 'mimikatz'\ncondition: selection\n```\n\nOne rule, converts to all SIEMs automatically.\n\n### Core Benefits\n\n1. **SIEM Agnostic**: Write once, run anywhere\n2. **Shareable**: Standard format for community sharing\n3. **Version Control**: YAML files work great with Git\n4. **CI/CD Integration**: Automate rule deployment\n5. **Vendor Independent**: No SIEM lock-in\n6. **Community Driven**: 2,500+ curated rules on GitHub\n\n### Sigma Ecosystem\n\n```\n┌─────────────────────────────────────────────────┐\n│         SIGMA RULE (YAML)                       │\n│   Universal detection logic                     │\n└────────────────┬────────────────────────────────┘\n│\n▼\n┌────────────────────────────────────────────────┐\n│       SIGMAC / PYSIGMA (Converter)             │\n│   Translates Sigma → SIEM queries              │\n└────────────────┬───────────────────────────────┘\n│\n┌──────────┼──────────┐\n│          │          │\n▼          ▼          ▼\n┌───────┐  ┌──────┐  ┌────────┐\n│Splunk │  │Elastic│ │QRadar  │\n│  SPL  │  │  KQL │  │  AQL   │\n└───────┘  └──────┘  └────────┘\n▼          ▼          ▼\n┌───────┐  ┌──────┐  ┌────────┐\n│ SIEM  │  │ SIEM │  │  SIEM  │\n│Alerts │  │Alerts│  │ Alerts │\n└───────┘  └──────┘  └────────┘\n```\n\n**Supported Backends** (20+):\n- Splunk, Elastic, QRadar, ArcSight, LogPoint\n- Microsoft Sentinel, Microsoft Defender ATP\n- Sumo Logic, Graylog, Humio\n- Chronicle, Securonix, Devo\n- Athena, SQL, PowerShell, Grep\n\n### Real-World Adoption\n\n- **SOC Prime**: 40,000+ Sigma rules in Threat Detection Marketplace\n- **Microsoft**: Built-in Sigma support in Sentinel\n- **MITRE**: Uses Sigma for ATT&CK detection rules\n- **GitHub**: 2,500+ curated community rules (SigmaHQ/sigma)\n- **Vendors**: 50+ security vendors integrate Sigma"
      }
    },
    {
      "type": "video",
      "content": {
        "title": "Video: Sigma Detection Rules Overview",
        "url": "https://www.youtube.com/embed/qH4W5teOxTA",
        "description": "Watch this comprehensive introduction to Sigma detection engineering."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Sigma Rule Structure\n\n### Anatomy of a Sigma Rule\n\n```yaml\n# ===== METADATA =====\ntitle: Suspicious PowerShell Encoded Command\nid: d7bcd677-645d-4691-a8d4-7a5602b780d1  # UUID\nstatus: stable  # experimental, testing, stable\ndescription: Detects suspicious encoded PowerShell commands often used by attackers\nreferences:\n- https://attack.mitre.org/techniques/T1059/001/\nauthor: Security Team\ndate: 2024/03/15\nmodified: 2024/03/20\ntags:\n- attack.execution\n- attack.t1059.001\nlevel: high  # informational, low, medium, high, critical\n\n# ===== LOG SOURCE =====\nlogsource:\ncategory: process_creation  # What type of log?\nproduct: windows            # Which OS/product?\n# Optional: service: sysmon\n\n# ===== DETECTION LOGIC =====\ndetection:\n# Selection: What to look for\nselection_encoded:\nCommandLine|contains:\n- ' -enc '\n- ' -encodedcommand '\n- ' -e '\n\nselection_suspicious:\nCommandLine|contains:\n- 'invoke-expression'\n- 'iex '\n- 'downloadstring'\n- 'system.net.webclient'\n\n# Filter: What to exclude (reduce false positives)\nfilter:\nUser: 'NT AUTHORITY\\\\SYSTEM'\nCommandLine|contains: 'C:\\\\Program Files\\\\'\n\n# Condition: Combine selections\ncondition: (selection_encoded and selection_suspicious) and not filter\n\n# ===== FALSE POSITIVE GUIDANCE =====\nfalsepositives:\n- Legitimate admin scripts\n- Software deployment tools\n\n# ===== RECOMMENDATION =====\nfields:\n- User\n- CommandLine\n- ParentImage\n- ComputerName\n```bash\n\n### Key Sections Explained\n\n**1. Metadata (Required)**\n\n```yaml\ntitle: Human-readable name\nid: Unique UUID (generate with uuidgen or online)\nstatus: experimental → testing → stable\ndescription: What does this rule detect?\nauthor: Who wrote it?\ndate: Creation date (YYYY/MM/DD)\nlevel: Severity (informational, low, medium, high, critical)\n```\n\n**2. Tags (Optional but Recommended)**\n\n```yaml\ntags:\n- attack.execution          # MITRE ATT&CK tactic\n- attack.t1059.001          # MITRE ATT&CK technique\n- attack.credential_access\n```\n\n**3. Log Source (Required)**\n\nDefines which logs this rule applies to:\n\n```yaml\n# Example 1: Generic Windows process creation\nlogsource:\ncategory: process_creation\nproduct: windows\n\n# Example 2: Specific service (Sysmon)\nlogsource:\ncategory: process_creation\nproduct: windows\nservice: sysmon\n\n# Example 3: Network connections\nlogsource:\ncategory: network_connection\nproduct: windows\n\n# Example 4: Linux authentication\nlogsource:\nproduct: linux\nservice: auth\n```\n\n**Common Categories**:\n- `process_creation` - Process execution\n- `network_connection` - Network activity\n- `file_event` - File system changes\n- `registry_event` - Registry modifications\n- `image_load` - DLL loading\n- `dns_query` - DNS lookups\n- `web` - Web proxy logs\n\n**4. Detection Logic (Required)**\n\nThe heart of the rule:\n\n```yaml\ndetection:\nselection:       # What to find\nFieldName: 'value'\n\nfilter:          # What to exclude  \nFieldName: 'benign_value'\n\ncondition: selection and not filter\n```\n\n**5. Additional Fields**\n\n```yaml\nfalsepositives:      # Known FP sources\n- Description of when FPs occur\n\nfields:              # Important fields to include in alert\n- User\n- CommandLine\n\nrelated:             # Related rules\n- id: UUID_of_related_rule\ntype: similar\n```"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "title": "Hands-On: Write Your First Sigma Rule",
        "description": "Detect Mimikatz credential dumping",
        "code": "# mimikatz_detection.yml\n\ntitle: Mimikatz Credential Dumping Execution\nid: 0f06a3a5-6a3c-4dd4-ba0c-e1ed0b4c1234\nstatus: stable\ndescription: |\n  Detects execution of Mimikatz credential dumping tool by looking for \n  characteristic command-line arguments and process names.\nreferences:\n  - https://attack.mitre.org/software/S0002/\n  - https://github.com/gentilkiwi/mimikatz\nauthor: Blue Team\ndate: 2024/03/15\nmodified: 2024/03/15\ntags:\n  - attack.credential_access\n  - attack.t1003.001  # LSASS Memory\n  - attack.t1003.002  # Security Account Manager\n  - attack.s0002      # Mimikatz software\nlevel: critical\n\nlogsource:\n  category: process_creation\n  product: windows\n\ndetection:\n  # Selection 1: Process name contains mimikatz\n  selection_image:\n    Image|endswith:\n      - '\\\\mimikatz.exe'\n      - '\\\\mimilib.dll'\n    \n  # Selection 2: Command line contains mimikatz commands\n  selection_cmdline:\n    CommandLine|contains:\n      - 'sekurlsa::logonpasswords'\n      - 'sekurlsa::msv'\n      - 'lsadump::sam'\n      - 'lsadump::secrets'\n      - 'lsadump::cache'\n      - 'crypto::capi'\n      - 'kerberos::golden'\n      - 'kerberos::ptt'\n  \n  # Selection 3: Process spawned from suspicious locations\n  selection_path:\n    Image|contains:\n      - '\\\\Users\\\\Public\\\\'\n      - '\\\\Temp\\\\'\n      - '\\\\AppData\\\\Local\\\\Temp\\\\'\n      - '\\\\ProgramData\\\\'\n    CommandLine|contains:\n      - 'privilege::debug'\n      - 'sekurlsa::'\n      - 'lsadump::'\n  \n  # Filter: Known false positives\n  filter:\n    # Exclude penetration testing tools with proper naming\n    Image|contains: 'C:\\\\PenTest\\\\Authorized\\\\'\n    User: 'DOMAIN\\\\RedTeam_Authorized'\n  \n  # Condition: Match any selection, exclude filters\n  condition: (selection_image or selection_cmdline or selection_path) and not filter\n\nfalsepositives:\n  - Authorized penetration testing\n  - Security training environments\n  - SOC testing of detection capabilities\n  \nfields:\n  - User\n  - CommandLine\n  - ParentImage\n  - ParentCommandLine\n  - ComputerName\n  - LogonId\n  \nlevel: critical\n\n# ================================================\n# TESTING THE RULE\n# ================================================\n\n# Step 1: Validate syntax\nsigma check mimikatz_detection.yml\n\n# Step 2: Convert to Splunk SPL\nsigmac -t splunk mimikatz_detection.yml\n\n# Output:\nindex=windows EventCode=4688 \n(Image=\"*\\\\mimikatz.exe\" OR Image=\"*\\\\mimilib.dll\" OR \n CommandLine=\"*sekurlsa::logonpasswords*\" OR \n CommandLine=\"*lsadump::sam*\" OR \n (Image=\"*\\\\Users\\\\Public\\\\*\" CommandLine=\"*sekurlsa::*\"))\nNOT (Image=\"*C:\\\\PenTest\\\\Authorized\\\\*\" User=\"DOMAIN\\\\RedTeam_Authorized\")\n\n# Step 3: Convert to Elastic KQL\nsigmac -t es-qs mimikatz_detection.yml\n\n# Output:\n(winlog.event_data.Image:(*\\\\mimikatz.exe OR *\\\\mimilib.dll) OR \n winlog.event_data.CommandLine:(*sekurlsa\\\\:\\\\:logonpasswords* OR *lsadump\\\\:\\\\:sam*) OR \n (winlog.event_data.Image:*\\\\Users\\\\Public\\\\* AND \n  winlog.event_data.CommandLine:*sekurlsa\\\\:\\\\:*))\nAND NOT (winlog.event_data.Image:*C\\\\:\\\\\\\\PenTest\\\\Authorized\\\\* AND \n         winlog.event_data.User:DOMAIN\\\\RedTeam_Authorized)\n\n# Step 4: Convert to Microsoft Sentinel\nsigmac -t sentinel mimikatz_detection.yml\n\n# Output:\nSecurityEvent\n| where EventID == 4688\n| where (Process has_any (\"mimikatz.exe\", \"mimilib.dll\") or\n         CommandLine has_any (\"sekurlsa::logonpasswords\", \"lsadump::sam\") or\n         (Process has_any (\"\\\\Users\\\\Public\\\\\", \"\\\\Temp\\\\\") and \n          CommandLine has \"sekurlsa::\"))\n| where not (Process has \"C:\\\\PenTest\\\\Authorized\\\\\" and \n             Account == \"DOMAIN\\\\RedTeam_Authorized\")\n\n# ================================================\n# DEPLOYING THE RULE\n# ================================================\n\n# Add to your Sigma rules repository\ngit add mimikatz_detection.yml\ngit commit -m \"Add Mimikatz detection rule\"\ngit push\n\n# Use CI/CD to auto-convert and deploy to SIEMs\n# (Example: GitHub Actions converts and pushes to Splunk)",
        "language": "yaml",
        "difficulty": "intermediate"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Sigma Modifiers and Advanced Techniques\n\n### Field Modifiers\n\nModifiers transform field values for matching:\n\n```yaml\ndetection:\nselection:\n# Contains (case-insensitive substring)\nCommandLine|contains: 'mimikatz'\n\n# Starts with\nImage|startswith: 'C:\\\\Windows\\\\System32\\\\'\n\n# Ends with\nImage|endswith: '.exe'\n\n# All (all values must match)\nCommandLine|contains|all:\n- 'powershell'\n- '-enc'\n- 'webclient'\n\n# Base64 encoded\nCommandLine|base64offset|contains: 'invoke-expression'\n\n# Regular expression\nCommandLine|re: '(?i)powershell.*-e[ncodema]{0,12}\\s+[A-Za-z0-9+/=]{100,}'\n\n# Case-sensitive match\nFileName|contains|cs: 'MALWARE.exe'\n```bash\n\n### Selection Combinations\n\n**1. AND Logic** (all must match):\n\n```yaml\ndetection:\nselection:\nImage|endswith: '\\\\powershell.exe'\nCommandLine|contains: '-encodedcommand'\ncondition: selection\n```\n\n**2. OR Logic** (any can match):\n\n```yaml\ndetection:\nselection:\nCommandLine|contains:\n- 'mimikatz'\n- 'invoke-mimikatz'\n- 'sekurlsa'\ncondition: selection\n```\n\n**3. Complex Boolean**:\n\n```yaml\ndetection:\nselection_process:\nImage|endswith: '\\\\powershell.exe'\n\nselection_network:\nCommandLine|contains:\n- 'downloadstring'\n- 'invoke-webrequest'\n\nselection_encoded:\nCommandLine|contains: ' -enc '\n\nfilter_legit:\nUser: 'NT AUTHORITY\\\\SYSTEM'\n\n# (Process is PowerShell AND (Network OR Encoded)) AND NOT System\ncondition: selection_process and (selection_network or selection_encoded) and not filter_legit\n```bash\n\n### Rule Chaining\n\nDetect multi-stage attacks:\n\n```yaml\n# Rule 1: Initial Access (Phishing)\ntitle: Office Document Spawning Executable\ndetection:\nselection:\nParentImage|endswith:\n- '\\\\WINWORD.EXE'\n- '\\\\EXCEL.EXE'\nImage|endswith: '.exe'\ncondition: selection\n\n# Rule 2: Credential Access (30 mins later)\ntitle: LSASS Memory Dump After Office Exploit\ndetection:\nselection:\nTargetImage|endswith: '\\\\lsass.exe'\nGrantedAccess: '0x1010'\ntimeframe: 30m  # Within 30 minutes\ncondition: selection\n```bash\n\n### Aggregation Rules\n\nDetect patterns over time:\n\n```yaml\ntitle: Multiple Failed Login Attempts\nlogsource:\nproduct: windows\nservice: security\ndetection:\nselection:\nEventID: 4625  # Failed logon\ncondition: selection | count(ComputerName) by TargetUserName > 10\ntimeframe: 5m\n```"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "## Real-World Case Study: Multi-SIEM Detection Pipeline\n\n**Organization**: Global financial services company\n\n**Challenge**:\n- 5 regional SOCs using different SIEMs:\n- Americas: Splunk\n- EMEA: QRadar\n- APAC: Elastic\n- Cloud: Microsoft Sentinel\n- OT: Graylog\n- Each SOC writing duplicate detections\n- No consistency in detection coverage\n- Rules not shareable between regions\n\n**Solution**: Centralized Sigma-based detection engineering\n\n### Implementation\n\n**Phase 1: Sigma Repository Setup**\n\n```bash\n# Created central Git repository\nmkdir detection-engineering\ncd detection-engineering\ngit init\n\n# Directory structure\ndetection-engineering/\n├── rules/\n│   ├── windows/\n│   │   ├── process_creation/\n│   │   ├── network_connection/\n│   │   └── registry/\n│   ├── linux/\n│   ├── cloud/\n│   └── network/\n├── config/\n│   ├── splunk_config.yml\n│   ├── qradar_config.yml\n│   ├── elastic_config.yml\n│   └── sentinel_config.yml\n├── tests/\n└── .github/workflows/  # CI/CD automation\n```\n\n**Phase 2: Rule Migration**\n\nConverted 340 existing detections to Sigma:\n\n```yaml\n# Example: Converted from Splunk-specific to universal\n\n# Old (Splunk SPL):\nindex=windows EventCode=4688 \n(CommandLine=\"*mimikatz*\" OR CommandLine=\"*sekurlsa*\")\n| where User!=\"SYSTEM\"\n\n# New (Sigma):\ntitle: Mimikatz Execution\nlogsource:\ncategory: process_creation\nproduct: windows\ndetection:\nselection:\nCommandLine|contains:\n- 'mimikatz'\n- 'sekurlsa'\nfilter:\nUser: 'SYSTEM'\ncondition: selection and not filter\n```\n\n**Phase 3: CI/CD Pipeline**\n\n```yaml\n# .github/workflows/sigma-deploy.yml\nname: Sigma Detection Pipeline\n\non:\npush:\nbranches: [main]\npaths:\n- 'rules/**'\n\njobs:\nvalidate:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v3\n\n- name: Install Sigma tools\nrun: |\npip install sigma-cli\npip install pysigma\n\n- name: Validate Sigma rules\nrun: |\nfor rule in rules/**/*.yml; do\nsigma check \"$rule\" || exit 1\ndone\n\nconvert-splunk:\nneeds: validate\nruns-on: ubuntu-latest\nsteps:\n- name: Convert to Splunk SPL\nrun: |\nmkdir -p output/splunk\nfor rule in rules/**/*.yml; do\nsigmac -t splunk -c config/splunk_config.yml \"$rule\" \\\n>> output/splunk/detections.spl\ndone\n\n- name: Deploy to Splunk\nrun: |\n# Use Splunk REST API to upload searches\ncurl -k -u admin:$SPLUNK_PASSWORD \\\nhttps://splunk.americas.company.com:8089/servicesNS/admin/search/saved/searches \\\n-d name=\"Sigma: $rule_name\" \\\n-d search=\"$(cat output/splunk/detections.spl)\"\n\nconvert-qradar:\nneeds: validate\nruns-on: ubuntu-latest\nsteps:\n- name: Convert to QRadar AQL\nrun: |\nmkdir -p output/qradar\nsigmac -t qradar -c config/qradar_config.yml rules/**/*.yml \\\n> output/qradar/rules.xml\n\n- name: Deploy to QRadar\nrun: |\n# QRadar REST API deployment\ncurl -X POST https://qradar.emea.company.com/api/analytics/rules \\\n-H \"SEC: $QRADAR_TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d @output/qradar/rules.xml\n\nconvert-elastic:\nneeds: validate\nruns-on: ubuntu-latest\nsteps:\n- name: Convert to Elastic KQL\nrun: |\nsigmac -t es-qs -c config/elastic_config.yml rules/**/*.yml \\\n> output/elastic/rules.json\n\n- name: Deploy to Elastic\nrun: |\ncurl -X POST \"https://elastic.apac.company.com:9200/.kibana/detection-rule\" \\\n-H \"kbn-xsrf: true\" \\\n-d @output/elastic/rules.json\n```\n\n**Phase 4: Testing Framework**\n\n```python\n# tests/test_sigma_rules.py\nimport yaml\nimport subprocess\nimport pytest\n\ndef test_all_rules_valid():\n\"\"\"Ensure all Sigma rules pass validation\"\"\"\nrules = glob.glob('rules/**/*.yml', recursive=True)\n\nfor rule_path in rules:\nresult = subprocess.run(\n['sigma', 'check', rule_path],\ncapture_output=True\n)\nassert result.returncode == 0, f\"Invalid rule: {rule_path}\"\n\ndef test_required_fields():\n\"\"\"Ensure all rules have required metadata\"\"\"\nrequired_fields = ['title', 'id', 'status', 'logsource', 'detection']\n\nfor rule_path in glob.glob('rules/**/*.yml', recursive=True):\nwith open(rule_path) as f:\nrule = yaml.safe_load(f)\n\nfor field in required_fields:\nassert field in rule, f\"Missing {field} in {rule_path}\"\n\ndef test_mitre_tags():\n\"\"\"Ensure high/critical rules have ATT&CK tags\"\"\"\nfor rule_path in glob.glob('rules/**/*.yml', recursive=True):\nwith open(rule_path) as f:\nrule = yaml.safe_load(f)\n\nif rule.get('level') in ['high', 'critical']:\ntags = rule.get('tags', [])\nhas_attack_tag = any(tag.startswith('attack.t') for tag in tags)\nassert has_attack_tag, f\"Missing MITRE tag in {rule_path}\"\n```bash\n\n### Results (After 6 Months)\n\n**Detection Coverage**:\n- **Before**: 340 rules (inconsistent across SIEMs)\n- **After**: 620 Sigma rules (deployed to ALL 5 SIEMs)\n- **Coverage increase**: +82%\n\n**Operational Efficiency**:\n- **Rule deployment time**: 2 weeks → 10 minutes (automated)\n- **Cross-SOC collaboration**: 5 isolated teams → 1 unified team\n- **Rule updates**: Manual per-SIEM → Automated everywhere\n\n**Detection Quality**:\n- **False positive rate**: 35% → 12% (centralized tuning)\n- **MITRE ATT&CK coverage**: 48% → 87% of techniques\n- **Mean time to deploy new detection**: 3 days → 30 minutes\n\n**Business Impact**:\n- **Cost savings**: $450K/year (eliminated redundant work)\n- **Threat detection**: +340% increase in detected incidents\n- **Compliance**: Consistent detection across all regions\n\n**Quote from Global SOC Director**:\n\n> \"Sigma transformed us from 5 isolated SOCs speaking different languages into one unified detection engineering team. A rule written in New York deploys to Tokyo, London, and Azure simultaneously. It's like we multiplied our team by 5.\"\n\n### Key Success Factors\n\n1. **Executive buy-in**: CTO mandated Sigma adoption\n2. **Training**: 40 hours of Sigma training for all analysts\n3. **CI/CD**: Automated validation and deployment\n4. **Testing**: Comprehensive test suite catches errors pre-deployment\n5. **Community**: Leveraged SigmaHQ public rules (saved 500+ hours)"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "title": "Advanced: Lateral Movement Detection Chain",
        "description": "Detect PsExec lateral movement with chained Sigma rules",
        "code": "# lateral_movement_psexec.yml\n\ntitle: Lateral Movement via PsExec\nid: 42b42f8c-7e8c-4e1a-9f0d-1234567890ab\nstatus: stable\ndescription: |\n  Detects lateral movement using PsExec by correlating:\n  1. PsExec executable on disk\n  2. PSEXESVC service creation\n  3. Network connection to admin shares\n  4. Remote process execution\nauthor: Threat Hunting Team\ndate: 2024/03/15\ntags:\n  - attack.lateral_movement\n  - attack.t1021.002  # Remote Services: SMB/Windows Admin Shares\n  - attack.t1570      # Lateral Tool Transfer\n  - attack.s0029      # PsExec\nlevel: high\n\n# ===== STAGE 1: PsExec File Creation =====\nlogsource:\n  category: file_event\n  product: windows\n\ndetection:\n  selection_file:\n    TargetFilename|endswith:\n      - '\\\\psexec.exe'\n      - '\\\\psexec64.exe'\n      - '\\\\PSEXESVC.exe'\n  condition: selection_file\n\nfields:\n  - TargetFilename\n  - User\n  - ComputerName\n\n---\n\n# ===== STAGE 2: PSEXESVC Service Creation =====\ntitle: PSEXESVC Service Installation\nid: 43c53e9d-8f9d-5f2b-0e1f-2345678901bc\nstatus: stable\nlogsource:\n  product: windows\n  service: system\ndetection:\n  selection:\n    EventID: 7045  # Service installation\n    ServiceName: 'PSEXESVC'\n  condition: selection\nfields:\n  - ServiceName\n  - ServiceFileName\n  - User\n  - ComputerName\nlevel: high\ntags:\n  - attack.lateral_movement\n  - attack.t1021.002\n\n---\n\n# ===== STAGE 3: Network Connection to Admin Shares =====\ntitle: SMB Connection to Admin Shares\nid: 54d64fae-9e0e-6f3c-1f2g-3456789012cd\nstatus: stable\nlogsource:\n  category: network_connection\n  product: windows\ndetection:\n  selection:\n    DestinationPort: 445\n    DestinationHostname|endswith:\n      - '\\\\C$'\n      - '\\\\ADMIN$'\n      - '\\\\IPC$'\n  filter:\n    User: 'NT AUTHORITY\\\\SYSTEM'\n  condition: selection and not filter\nfields:\n  - DestinationIp\n  - DestinationHostname\n  - User\n  - ProcessImage\nlevel: medium\ntags:\n  - attack.lateral_movement\n  - attack.t1021.002\n\n---\n\n# ===== STAGE 4: Remote Process Execution =====\ntitle: Remote Process Execution via PsExec\nid: 65e75gbf-0f1f-7g4d-2g3h-4567890123de\nstatus: stable\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    ParentImage|endswith: '\\\\PSEXESVC.exe'\n  filter_system:\n    # Exclude legitimate system processes\n    Image|startswith: 'C:\\\\Windows\\\\System32\\\\'\n    CommandLine|contains:\n      - 'gpupdate'\n      - 'gpresult'\n  condition: selection and not filter_system\nfields:\n  - Image\n  - CommandLine\n  - User\n  - ComputerName\n  - ParentImage\nlevel: high\ntags:\n  - attack.lateral_movement\n  - attack.execution\n  - attack.t1021.002\n  - attack.t1059\n\nfalsepositives:\n  - Legitimate system administration\n  - IT help desk remote support\n  - Patch management systems\n\n# ===================================================\n# DEPLOYING THE CHAIN\n# ===================================================\n\n# Convert all 4 stages to Splunk correlation search\nsigmac -t splunk lateral_movement_psexec.yml > psexec_lateral_movement.spl\n\n# Splunk Correlation Search:\nindex=windows \n(\n  (source=\"WinEventLog:Microsoft-Windows-Sysmon/Operational\" EventCode=11 \n   TargetFilename IN (\"*\\\\psexec.exe\", \"*\\\\psexec64.exe\", \"*\\\\PSEXESVC.exe\"))\n  OR\n  (source=\"WinEventLog:System\" EventCode=7045 ServiceName=\"PSEXESVC\")\n  OR\n  (source=\"WinEventLog:Microsoft-Windows-Sysmon/Operational\" EventCode=3 \n   DestinationPort=445 DestinationHostname IN (\"*\\\\C$\", \"*\\\\ADMIN$\", \"*\\\\IPC$\"))\n  OR  \n  (source=\"WinEventLog:Security\" EventCode=4688 ParentImage=\"*\\\\PSEXESVC.exe\")\n)\n| transaction ComputerName maxspan=5m\n| where eventcount >= 3\n| table _time, ComputerName, User, CommandLine, DestinationIp\n\n# Result: Alert when 3+ stages detected within 5 minutes on same host",
        "language": "yaml",
        "difficulty": "advanced"
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "## Sigma Rule Writing Framework: DETECT\n\n**D**efine - Clear title and description\n**E**numerate - List all IOCs/behaviors to match\n**T**ag - MITRE ATT&CK and severity\n**E**xclude - Filter false positives\n**C**ombine - Boolean logic in condition\n**T**est - Validate and convert before deploying\n\n### Essential Sigma Commands\n\n```bash\n# Validate rule syntax\nsigma check rule.yml\n\n# Convert to Splunk\nsigmac -t splunk rule.yml\n\n# Convert to Elastic\nsigmac -t es-qs rule.yml\n\n# Convert to Microsoft Sentinel\nsigmac -t sentinel rule.yml\n\n# Convert with field mapping config\nsigmac -t splunk -c config.yml rule.yml\n\n# Convert entire directory\nsigmac -t splunk -r rules/\n```bash\n\n### Rule Quality Checklist\n\n✅ **Must Have**:\n- [ ] Unique UUID in `id` field\n- [ ] Clear, descriptive `title`\n- [ ] MITRE ATT&CK tags\n- [ ] Defined `level` (severity)\n- [ ] `logsource` specified\n- [ ] At least one `selection`\n- [ ] Valid `condition`\n\n✅ **Should Have**:\n- [ ] `description` explaining detection\n- [ ] `references` to documentation\n- [ ] `falsepositives` guidance\n- [ ] `filter` for known FPs\n- [ ] `fields` for alert context\n\n✅ **Nice to Have**:\n- [ ] `author` attribution\n- [ ] `date` and `modified` timestamps\n- [ ] `related` rules\n- [ ] Comments explaining logic"
      }
    },
    {
      "type": "reflection",
      "content": {
        "question": "Your organization uses Splunk today but is considering migrating to Elastic in 2 years. You need to deploy 200 new detection rules. Would you write them in Splunk SPL or Sigma? What factors influence your decision?",
        "guidance": "Consider: (1) Short-term deployment speed (SPL faster initially), (2) Long-term migration cost (Sigma = free migration), (3) Team skill set (learning curve for Sigma), (4) Rule sharing with partners/community, (5) Vendor lock-in risk, (6) CI/CD automation possibilities. Think about technical debt vs. investment."
      }
    }
  ]
}