{
  "lesson_id": "b4f95215-14ad-468e-89ed-f81920405ebc",
  "domain": "blueteam",
  "title": "Threat Hunting Methodology",
  "subtitle": "Proactively finding threats before they trigger alerts",
  "difficulty": 3,
  "estimated_time": 45,
  "order_index": 51,
  "prerequisites": [],
  "concepts": [
    "Hypothesis-driven hunting",
    "Intelligence-driven hunting",
    "Threat hunting cycle",
    "IOC development",
    "Behavioral analysis",
    "MITRE ATT&CK hunting"
  ],
  "learning_objectives": [
    "Master hypothesis-driven threat hunting methodologies",
    "Learn to develop and test hunting hypotheses using MITRE ATT&CK",
    "Understand how to hunt for specific TTPs in your environment",
    "Build effective threat hunting programs from scratch"
  ],
  "content_blocks": [
    {
      "block_id": "f0880d53-bfc6-4cf2-b760-cc5fe196c678",
      "type": "mindset_coach",
      "title": "The Proactive Defender",
      "content": {
        "text": "**Traditional security is reactive**: Wait for alerts, respond to incidents, clean up after breaches.\n\n**Threat hunting is proactive**: Assume you're already compromised. Go find the threat before it completes its mission.\n\n**Here's the uncomfortable truth**: Your security tools will miss threats. EDR, SIEM, IDS - all have blind spots. Sophisticated attackers know this and operate in those blind spots.\n\n**Threat hunting closes the gap.**\n\nIn 2020, the average dwell time (time from initial compromise to detection) was **287 days** (Mandiant M-Trends). That's 9+ months where attackers had free rein in networks.\n\n**Threat hunters reduce dwell time to days or weeks** by proactively searching for adversary behaviors.\n\n**Real example**: In 2018, a threat hunter at a financial institution noticed unusual PowerShell execution patterns. No alerts fired. Manual investigation revealed an APT group had been exfiltrating data for 6 months. The automated tools missed it. The human hunter found it.\n\n**Your mission**: Learn to think like both attacker and defender. Develop hypotheses about how adversaries operate. Test those hypotheses. Find threats that tools miss.\n\n**This is advanced work** - it requires deep understanding of TTPs, operating systems, networks, and attacker tradecraft. But it's some of the most impactful security work you can do."
      }
    },
    {
      "block_id": "0eec8554-07f6-4415-af8f-d73084523459",
      "type": "explanation",
      "title": "What is Threat Hunting?",
      "content": {
        "text": "**Threat Hunting** = Proactive, hypothesis-driven search for threats that evaded automated detection\n\n## Hunting vs Traditional Security\n\n**Traditional Security (Reactive)**:\n```\n[Attack] → [Alert Fires] → [Analyst Investigates] → [Response]\n```\n- Waits for alerts\n- Responds to known signatures/rules\n- Attackers control timing\n\n**Threat Hunting (Proactive)**:\n```\n[Hypothesis] → [Hunt] → [Find Threat] → [New Detection] → [Response]\n```\n- Doesn't wait for alerts\n- Searches for behaviors, not just signatures\n- Defender controls timing\n\n## The Threat Hunting Cycle\n\n**1. Hypothesize**: Form theory about possible threats\n- \"I think attackers might be using WMI for lateral movement\"\n\n**2. Investigate**: Search for evidence\n- Query logs for WMI events\n- Look for abnormal patterns\n\n**3. Discover**: Find threats (or rule them out)\n- Found suspicious WMI usage OR confirmed clean\n\n**4. Respond**: Take action if threat found\n- Contain, eradicate, recover\n\n**5. Improve**: Create new detections\n- Build SIEM rule for this TTP\n- Update threat intelligence\n\n**6. Iterate**: Start new hunt\n- Test new hypothesis\n\n## Types of Threat Hunting\n\n### Hypothesis-Driven Hunting\n**Start with a theory, find evidence**\n\n**Example**:\n- **Hypothesis**: \"Attackers might be using Kerberoasting to extract service account credentials\"\n- **Hunt**: Search for Event ID 4769 with RC4 encryption and high ticket requests\n- **Result**: Found or ruled out\n\n### Intelligence-Driven Hunting  \n**Use threat intel to guide hunts**\n\n**Example**:\n- **Intel**: \"APT29 uses BITS jobs for persistence\"\n- **Hunt**: Search for BITS job creation/modifications\n- **Result**: Find APT29 activity or similar TTPs\n\n### Baseline-Driven Hunting\n**Look for deviations from normal**\n\n**Example**:\n- **Baseline**: Finance users never RDP to servers\n- **Hunt**: Search for finance user RDP sessions\n- **Result**: Compromised account or insider threat\n\n### Custom Analytics\n**Statistical/machine learning detection**\n\n**Example**:\n- **Model**: Typical DNS query volume per host\n- **Hunt**: Find hosts with 10x normal DNS queries (DNS tunneling?)\n- **Result**: C2 beaconing or exfiltration\n\n## Required Skills\n\n**Technical**:\n- Operating system internals (Windows, Linux)\n- Network protocols and traffic analysis\n- Log analysis and query languages (SPL, KQL, SQL)\n- MITRE ATT&CK framework mastery\n- Attacker TTPs and tools\n\n**Analytical**:\n- Hypothesis development\n- Critical thinking\n- Pattern recognition\n- Statistical analysis\n- False positive filtering\n\n**Tools**:\n- SIEM (Splunk, Elastic, Azure Sentinel)\n- EDR (CrowdStrike, Carbon Black, Defender)\n- Network analysis (Wireshark, Zeek)\n- Memory forensics (Volatility)\n- Threat intelligence platforms"
      }
    },
    {
      "block_id": "d779e277-98ca-43c0-ba70-6a58c8238139",
      "type": "explanation",
      "title": "Developing Hunting Hypotheses",
      "content": {
        "text": "**Good hypotheses are specific, testable, and based on reality**\n\n## MITRE ATT&CK-Based Hypotheses\n\n**Use ATT&CK to guide hypothesis development**\n\n**Technique**: T1003.001 - LSASS Memory Dump\n\n**Hypothesis**: \"Attackers might be dumping LSASS memory to steal credentials\"\n\n**Hunt indicators**:\n- Processes accessing lsass.exe memory\n- MiniDump files created\n- Tools: Mimikatz, ProcDump, Comsvcs.dll\n- Event ID 10 (Sysmon - ProcessAccess)\n\n**SIEM query (Splunk)**:\n```spl\nindex=windows EventCode=10 TargetImage=\"*lsass.exe\"\n| where GrantedAccess IN (\"0x1410\", \"0x1438\", \"0x143a\", \"0x1fffff\")\n| stats count by SourceImage, SourceUser, ComputerName\n| where count > 5\n```\n\n**Technique**: T1021.002 - SMB/Windows Admin Shares\n\n**Hypothesis**: \"Attackers might be using lateral movement via admin shares\"\n\n**Hunt indicators**:\n- Connections to ADMIN$, C$, IPC$\n- Event ID 5140 (network share access)\n- Unusual source/destination pairs\n\n**SIEM query**:\n```spl\nindex=windows EventCode=5140 ShareName IN (\"\\\\\\\\*\\\\ADMIN$\", \"\\\\\\\\*\\\\C$\")\n| stats count by src_user, src_host, dest_host, ShareName\n| where count < 5\n| table _time, src_user, src_host, dest_host, ShareName\n```\n\n## Hypothesis Development Framework\n\n**1. Identify High-Value Targets**\n- What do attackers want in YOUR environment?\n- Domain controllers, financial data, customer PII, intellectual property\n\n**2. Map Attack Paths**\n- How would attackers reach those targets?\n- Initial access → Privilege escalation → Lateral movement → Objective\n\n**3. Select TTPs to Hunt**\n- Which techniques would attackers likely use?\n- Prioritize by: Likelihood, Impact, Detectability\n\n**4. Form Specific Hypothesis**\n- \"I believe attackers might be using [TTP] to [achieve goal]\"\n\n**5. Define Observable Evidence**\n- What logs/telemetry would show this TTP?\n- What patterns or anomalies indicate malicious use?\n\n**Example: Full Hypothesis Development**\n\n**1. High-Value Target**: Domain Admin credentials\n\n**2. Attack Path**: \n```\nPhishing → User compromise → Kerberoasting → Service account → DCSync → Domain Admin\n```\n\n**3. Select TTP**: T1558.003 - Kerberoasting\n\n**4. Hypothesis**: \n\"Attackers might be requesting Kerberos service tickets for accounts with SPNs to crack offline\"\n\n**5. Observable Evidence**:\n- Event ID 4769 (Kerberos service ticket request)\n- Encryption type: 0x17 (RC4)\n- Ticket Options: 0x40810000\n- Multiple tickets requested in short time\n- Requests from unexpected sources\n\n**6. Hunt Query**:\n```spl\nindex=windows EventCode=4769 TicketEncryptionType=0x17\n| bucket _time span=1h\n| stats count by _time, src_user, ServiceName\n| where count > 10\n```\n\n## Hypothesis Prioritization\n\n**Score hypotheses on**:\n\n**Likelihood** (1-5):\n- How likely is this TTP in your environment?\n- Based on threat intel, industry targeting\n\n**Impact** (1-5):\n- How bad if this TTP succeeds?\n- Credential theft = 5, info gathering = 2\n\n**Detectability** (1-5):\n- How easy to detect this TTP?\n- Good logging = 5, no telemetry = 1\n\n**Priority Score = (Likelihood × Impact) / Detectability**\n\n**Example**:\n```\nKerberoasting:\n- Likelihood: 4 (common attack)\n- Impact: 5 (credential theft)\n- Detectability: 4 (Event ID 4769)\n- Priority: (4 × 5) / 4 = 5 (HIGH PRIORITY)\n\nKeylogger:\n- Likelihood: 2 (less common)\n- Impact: 4 (credential theft)\n- Detectability: 2 (harder to detect)\n- Priority: (2 × 4) / 2 = 4 (MEDIUM)\n```"
      }
    },
    {
      "block_id": "dfcc0c1a-3a38-4fcd-a1fa-ad05150eb80d",
      "type": "explanation",
      "title": "Practical Hunting Playbooks",
      "content": {
        "text": "## Playbook 1: Hunt for PowerShell-Based Attacks\n\n**Hypothesis**: \"Attackers are using obfuscated PowerShell for execution\"\n\n**Indicators**:\n- Encoded commands (-enc, -e)\n- Download cradles (Net.WebClient, Invoke-WebRequest)\n- Execution policy bypass\n- Hidden windows (-w hidden)\n\n**Hunt (Splunk)**:\n```spl\nindex=windows (EventCode=4688 OR EventCode=4104)\n(CommandLine=\"*-enc*\" OR CommandLine=\"*-e *\" OR \n CommandLine=\"*IEX*\" OR CommandLine=\"*Invoke-Expression*\" OR\n CommandLine=\"*downloadstring*\" OR CommandLine=\"*Net.WebClient*\")\n| stats count by ComputerName, User, CommandLine\n| sort -count\n```\n\n**What to look for**:\n- Base64 encoded commands\n- Download/execute patterns\n- Bypass attempts\n- Unusual user executing PowerShell\n\n**Response**:\n- Investigate the host\n- Check what was downloaded/executed\n- Look for persistence mechanisms\n- Create detection rule\n\n## Playbook 2: Hunt for Lateral Movement\n\n**Hypothesis**: \"Attackers are moving laterally using PsExec or similar\"\n\n**Indicators**:\n- Service creation (Event ID 7045)\n- Service name patterns (PSEXESVC, ADMIN$)\n- Remote execution tools\n- Unusual source/destination pairs\n\n**Hunt (Splunk)**:\n```spl\nindex=windows EventCode=7045\n(ServiceName=\"*psexe*\" OR ServiceName=\"*admin*\" OR ServiceName=\"*PAExec*\")\n| table _time, ComputerName, ServiceName, ServiceFileName, User\n| lookup asset_table ComputerName OUTPUT Department\n| where Department!=\"IT\"\n```\n\n**Suspicious patterns**:\n- Service created by non-IT user\n- Service name: PSEXESVC, Admin$123\n- Rapid service creation/deletion\n- Service executes from TEMP or user directories\n\n**Hunt for RDP lateral movement**:\n```spl\nindex=windows EventCode=4624 LogonType=10\n| stats count dc(dest_host) as unique_hosts by src_user\n| where unique_hosts > 10\n| table src_user, unique_hosts, count\n```\n\n**Suspicious**: Single user RDP to 10+ hosts (potential compromise)\n\n## Playbook 3: Hunt for Persistence Mechanisms\n\n**Hypothesis**: \"Attackers established persistence via registry Run keys\"\n\n**Indicators**:\n- Registry modifications to Run/RunOnce\n- Scheduled task creation\n- WMI event subscriptions\n- Startup folder additions\n\n**Hunt (Splunk)**:\n```spl\nindex=windows (EventCode=13 OR EventCode=4698)\n(TargetObject=\"*\\\\CurrentVersion\\\\Run*\" OR \n TargetObject=\"*\\\\CurrentVersion\\\\RunOnce*\" OR\n TaskName=\"*\")\n| rex field=Details \"(?<executable>\\\\w+\\\\.exe)\"\n| where NOT (executable IN (\"outlook.exe\", \"teams.exe\", \"onedrive.exe\"))\n| table _time, ComputerName, User, TargetObject, Details\n```\n\n**Red flags**:\n- Executables in TEMP, AppData\n- PowerShell/CMD in Run key\n- Obfuscated values\n- Unsigned executables\n\n## Playbook 4: Hunt for C2 Beaconing\n\n**Hypothesis**: \"Malware is beaconing to C2 servers\"\n\n**Indicators**:\n- Regular intervals (every 60s, 5min, 1hr)\n- Small consistent packet sizes\n- Connections to rare destinations\n- TLS to non-standard ports\n\n**Hunt (Splunk with network logs)**:\n```spl\nindex=network\n| bucket _time span=5m\n| stats count dc(bytes_out) as unique_sizes by _time, src_ip, dest_ip, dest_port\n| where count > 10 AND unique_sizes < 3\n| table src_ip, dest_ip, dest_port, count, unique_sizes\n```\n\n**Beacon characteristics**:\n- Consistent intervals (±5 seconds)\n- Small payloads (100-500 bytes)\n- Long-lived connections\n- HTTP GET requests with no user interaction\n\n**Advanced: Detect beaconing with frequency analysis**:\n```spl\nindex=network src_ip=<investigate_ip>\n| sort _time\n| delta _time as time_delta\n| stats count by time_delta\n| where time_delta > 50 AND time_delta < 70\n```\nIf many connections have similar intervals (55-65 seconds), likely beacon\n\n## Playbook 5: Hunt for Credential Access\n\n**Hypothesis**: \"Attackers dumped credentials using Mimikatz or similar\"\n\n**Indicators**:\n- LSASS memory access\n- SAM/SECURITY registry hive access\n- DCSync activity (replication)\n- Credential dumping tools\n\n**Hunt for LSASS access**:\n```spl\nindex=sysmon EventCode=10 TargetImage=\"*lsass.exe\"\n| where GrantedAccess IN (\"0x1410\", \"0x1010\", \"0x1438\", \"0x143a\", \"0x1fffff\")\n| lookup process_whitelist SourceImage OUTPUT is_whitelisted\n| where is_whitelisted!=1\n| table _time, Computer, SourceImage, SourceUser, GrantedAccess\n```\n\n**Hunt for DCSync**:\n```spl\nindex=windows EventCode=4662 ObjectType=\"*DS-Replication-Get-Changes*\"\n| where User!=\"*$\" AND User!=\"*MSOL*\"\n| stats count by User, SubjectDomainName\n| where count > 3\n```\n\n**Non-machine accounts performing replication = suspicious**\n\n## Playbook 6: Hunt for Data Exfiltration\n\n**Hypothesis**: \"Attackers are exfiltrating data via DNS tunneling or large uploads\"\n\n**Hunt for DNS tunneling**:\n```spl\nindex=dns\n| rex field=query \"^(?<subdomain>[^\\\\.]+)\\\\.\"\n| eval subdomain_len=len(subdomain)\n| where subdomain_len > 40\n| stats count by src_ip, query, subdomain_len\n| where count > 100\n```\n\n**Suspicious**: Long subdomains (encoded data), high query volume\n\n**Hunt for large uploads**:\n```spl\nindex=network bytes_out > 10000000\n| stats sum(bytes_out) as total_upload by src_ip, dest_ip\n| where total_upload > 1000000000\n| table src_ip, dest_ip, total_upload\n```\n\n**1GB+ upload to single destination = investigate**"
      }
    },
    {
      "block_id": "a0ae2192-7e22-451a-b071-d5b158bb5a89",
      "type": "memory_aid",
      "title": "Threat Hunting Memory Aids",
      "content": {
        "text": "## Threat Hunting Cycle\n\n**\"HIDDRI\"** (Hypothesize, Investigate, Discover, Decide, Respond, Improve):\n\n1. **H**ypothesize (form theory)\n2. **I**nvestigate (search for evidence)\n3. **D**iscover (find threats or rule out)\n4. **D**ecide (threat or false positive?)\n5. **R**espond (contain, eradicate if threat)\n6. **I**mprove (create detection, iterate)\n\n## Hypothesis Development\n\n**\"THOAS\"** (Target, How, Observable, Anomaly, Specific):\n\n- **T**arget: What do attackers want?\n- **H**ow: What TTP would they use?\n- **O**bservable: What evidence exists?\n- **A**nomaly: What's abnormal?\n- **S**pecific: Form testable hypothesis\n\n## Common TTPs to Hunt\n\n**\"PCLD KODE\"** (PowerShell, C2, Lateral, Data, Kerberos, OSINT, DCSync, Execution):\n\n- **P**owerShell abuse\n- **C**2 beaconing\n- **L**ateral movement\n- **D**ata exfiltration\n- **K**erberoasting\n- **O**SINT reconnaissance\n- **D**CSync credential theft\n- **E**xecution via WMI/scheduled tasks\n\n## Key Event IDs\n\n**Windows Security Log**:\n```\n4624 - Successful logon (check LogonType)\n4625 - Failed logon (brute force?)\n4672 - Special privileges assigned\n4688 - Process creation\n4698 - Scheduled task created\n4769 - Kerberos service ticket (Kerberoasting)\n5140 - Network share accessed (lateral movement)\n```\n\n**Sysmon**:\n```\n1  - Process creation\n3  - Network connection\n7  - Image loaded (DLL)\n10 - Process accessed (LSASS dumping)\n11 - File created\n13 - Registry value set (persistence)\n```\n\n## Beaconing Detection\n\n**\"3 C's\"** (Consistent, Cyclical, Continuous):\n\n- **C**onsistent intervals\n- **C**yclical patterns  \n- **C**ontinuous connections\n\n## Hypothesis Prioritization\n\n**Score = (Likelihood × Impact) / Detectability**\n\nHigher score = Higher priority hunt"
      }
    },
    {
      "block_id": "9a28ebd1-2352-4e39-b043-776c6dd268b2",
      "type": "explanation",
      "title": "Building Your Hunting Program",
      "content": {
        "text": "## What You've Learned\n\n✅ **Threat hunting is proactive** - Don't wait for alerts, assume compromise\n\n✅ **Hypothesis-driven approach** - Start with specific, testable theories based on MITRE ATT&CK\n\n✅ **Hunt for behaviors, not signatures** - Look for TTPs that automated tools miss\n\n✅ **Iterate and improve** - Every hunt creates new detections and reduces future blind spots\n\n✅ **Focus on high-value TTPs** - Prioritize hunts by likelihood × impact / detectability\n\n## Starting Your Hunting Program\n\n**Week 1-2: Foundation**\n\n1. **Assess current visibility**\n```\n☐ What logs do you collect?\n☐ Endpoint (Sysmon, EDR)\n☐ Network (firewall, proxy, DNS)\n☐ Identity (AD logs, authentication)\n☐ Application (server logs)\n\n☐ Retention period?\n☐ Query capabilities (SIEM, log aggregation)?\n```\n\n2. **Identify gaps**\n- Missing: PowerShell logging?\n- Missing: Sysmon on endpoints?\n- Missing: Network traffic analysis?\n\n3. **Prioritize improvements**\n- Quick win: Enable PowerShell script block logging\n- Medium: Deploy Sysmon organization-wide\n- Long-term: Implement full packet capture\n\n**Week 3-4: First Hunts**\n\n1. **Select beginner-friendly hypotheses**:\n```\n☐ Hunt for suspicious PowerShell usage\n☐ Hunt for lateral movement via admin shares\n☐ Hunt for persistence via Run keys\n```\n\n2. **Document process**:\n- Hypothesis\n- Data sources used\n- Queries executed\n- Findings (threat or clean)\n- Time spent\n\n3. **Create detections**:\n- If threat found → Build SIEM alert\n- If clean → Document baseline for future\n\n**Month 2-3: Advanced Hunts**\n\n1. **Expand to complex TTPs**:\n```\n☐ Kerberoasting\n☐ C2 beaconing\n☐ Credential dumping\n☐ Living-off-the-land techniques\n```\n\n2. **Leverage threat intel**:\n- Subscribe to CISA alerts\n- Follow threat researchers\n- Use ATT&CK Navigator\n\n3. **Measure effectiveness**:\n- Threats found per hunt\n- False positive rate\n- Time to detection (before/after hunting)\n\n**Month 4-6: Program Maturity**\n\n1. **Establish hunting cadence**:\n- Daily: Quick high-priority hunts (30 min)\n- Weekly: Deep-dive hunts (2-4 hours)\n- Monthly: Hypothesis brainstorming session\n\n2. **Build playbook library**:\n- Document successful hunts\n- Share across team\n- Version control (Git)\n\n3. **Automate repetitive hunts**:\n```python\n# Example: Automated beaconing detection\nimport splunklib.client as client\n\nservice = client.connect(host='splunk', port=8089, username='admin', password='pass')\n\nsearch_query = '''\nsearch index=network\n| bucket _time span=5m\n| stats count by _time, src_ip, dest_ip\n| where count > 10\n'''\n\njob = service.jobs.create(search_query)\n# Process results, alert if suspicious\n```\n\n## Tools for Threat Hunters\n\n**SIEM Platforms**:\n- **Splunk**: Industry standard, powerful SPL\n- **Elastic Stack**: Open source, scalable\n- **Azure Sentinel**: Cloud-native, KQL\n\n**EDR Solutions**:\n- **CrowdStrike Falcon**: Advanced threat hunting\n- **Carbon Black**: Behavioral analysis\n- **Microsoft Defender for Endpoint**: Built-in hunting queries\n\n**Threat Intel**:\n- **MITRE ATT&CK Navigator**: Visualize coverage\n- **ThreatConnect**: Intel aggregation\n- **AlienVault OTX**: Community intel\n\n**Analysis**:\n- **Jupyter Notebooks**: Document hunts\n- **Pandas**: Data manipulation\n- **Matplotlib/Seaborn**: Visualization\n\n## Metrics and KPIs\n\n**Track**:\n- Hunts conducted per week/month\n- Threats discovered (true positives)\n- False positive rate\n- Time spent per hunt\n- Detections created from hunts\n- Mean time to detection (MTTD)\n\n**Goal**: Reduce MTTD from months to days/hours\n\n## Common Pitfalls\n\n**❌ Hunting without hypothesis**\n- Random searching wastes time\n- No clear success criteria\n\n**✅ Start with specific, testable hypothesis**\n\n**❌ Ignoring false positives**\n- Too many FPs = alert fatigue\n- Team loses confidence\n\n**✅ Tune queries, document benign patterns**\n\n**❌ Not documenting hunts**\n- Can't reproduce\n- Can't improve\n- Knowledge lost\n\n**✅ Maintain hunting journal/wiki**\n\n**❌ Hunting same TTPs repeatedly**\n- Diminishing returns\n- Missing other threats\n\n**✅ Rotate through ATT&CK matrix systematically**\n\n## Words of Encouragement\n\nThreat hunting is detective work. It requires patience, curiosity, and persistence.\n\n**You won't find threats in every hunt** - and that's okay. Ruling out TTPs is valuable. Confirming your environment is clean is success.\n\n**When you DO find a threat** - one that evaded all your automated defenses - you'll understand why hunting matters.\n\n**Start simple**: Pick one hypothesis. Write one query. Spend 30 minutes. See what you find.\n\n**Every hunt makes you better**. Every query teaches you more about your environment. Every threat found prevents a breach.\n\n**The best threat hunters are relentlessly curious**: \"What if attackers are doing THIS? Let me check...\"\n\n**Welcome to threat hunting. Now go find what your tools are missing.**"
      }
    },
    {
      "type": "video",
      "title": "Video Tutorial: Threat Hunting Methodology",
      "content": {
        "resources": "Watch this comprehensive video tutorial to reinforce your learning with visual demonstrations and practical examples.\n\n**Video**: [Threat Hunting Explained by SANS Cyber Defense](https://www.youtube.com/watch?v=HAslu96jy3A)\n\n**What you'll see:**\nProactive threat hunting techniques, hypothesis development, hunt playbooks, and MITRE ATT&CK-based hunting.\n\n**Duration**: ~35 minutes\n\n**Recommended viewing**: After completing the lesson to solidify understanding.\n\n**Additional Resources:**\n- [SANS Threat Hunting Framework](https://www.sans.org/white-papers/)\n- [ThreatHunter-Playbook](https://threathunterplaybook.com/)\n- [Sqrrl Threat Hunting Reference Model](https://www.threathunting.net/sqrrl-archive)"
      }
    }
  ],
  "post_assessment": [
    {
      "question_id": "q1",
      "type": "multiple_choice",
      "question": "What is the key difference between threat hunting and traditional security monitoring?",
      "options": [
        "Threat hunting uses better tools than traditional monitoring",
        "Threat hunting is proactive and hypothesis-driven, while monitoring is reactive and alert-driven",
        "Threat hunting only works for advanced threats",
        "Threat hunting replaces the need for SIEM and EDR"
      ],
      "correct_answer": 1,
      "explanation": "Threat hunting is proactive (assumes compromise, searches for threats) and hypothesis-driven (tests specific theories about adversary behavior). Traditional monitoring is reactive (waits for alerts based on signatures/rules). Both are complementary, not replacements.",
      "difficulty": 3
    },
    {
      "question_id": "q2",
      "type": "multiple_choice",
      "question": "What framework is most commonly used to develop threat hunting hypotheses?",
      "options": [
        "NIST Cybersecurity Framework",
        "MITRE ATT&CK",
        "OWASP Top 10",
        "CIS Controls"
      ],
      "correct_answer": 1,
      "explanation": "MITRE ATT&CK is the industry-standard framework for threat hunting hypotheses. It catalogs adversary tactics, techniques, and procedures (TTPs), providing specific, observable behaviors to hunt for. Hunters use ATT&CK to guide hypothesis development and coverage.",
      "difficulty": 3
    },
    {
      "question_id": "q3",
      "type": "multiple_choice",
      "question": "When hunting for Kerberoasting attacks, which Windows Event ID should you focus on?",
      "options": [
        "4624 (Successful Logon)",
        "4688 (Process Creation)",
        "4769 (Kerberos Service Ticket Request)",
        "5140 (Network Share Access)"
      ],
      "correct_answer": 2,
      "explanation": "Event ID 4769 logs Kerberos service ticket requests. Kerberoasting involves requesting service tickets with RC4 encryption (TicketEncryptionType=0x17) for accounts with SPNs. High volume of these requests from a single account is suspicious and indicates potential Kerberoasting.",
      "difficulty": 3
    },
    {
      "question_id": "q4",
      "type": "multiple_choice",
      "question": "What are the three characteristics that typically indicate C2 beaconing behavior?",
      "options": [
        "Large file transfers, encrypted connections, multiple destinations",
        "Consistent intervals, cyclical patterns, continuous connections",
        "High bandwidth, unusual ports, foreign IP addresses",
        "Failed connections, retry attempts, DNS queries"
      ],
      "correct_answer": 1,
      "explanation": "C2 beaconing exhibits the '3 C's': Consistent intervals (regular timing like every 60 seconds), Cyclical patterns (repeating behavior), and Continuous connections (ongoing over time). These patterns distinguish beaconing from normal user traffic.",
      "difficulty": 3
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "minimum_effective_dose",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ]
}