{
  "lesson_id": "a7d3f891-5b2c-4e89-9f3a-1c8e7d4b9a21",
  "domain": "dfir",
  "title": "Network Forensics: Packet Analysis and Threat Detection",
  "difficulty": 2,
  "order_index": 6,
  "prerequisites": [
    "dfir_01",
    "dfir_03"
  ],
  "concepts": [
    "Packet Capture Analysis",
    "Wireshark Deep Packet Inspection",
    "Command and Control (C2) Traffic Detection",
    "Lateral Movement Identification",
    "Network-based IOC Extraction",
    "Protocol Analysis (HTTP, DNS, TLS, SMB)",
    "PCAP Forensics",
    "Network Traffic Baseline",
    "Malware Communication Patterns",
    "Exfiltration Detection"
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Master Wireshark filters and packet analysis techniques for forensic investigations",
    "Identify Command and Control (C2) traffic patterns and beaconing behavior",
    "Detect lateral movement techniques across network protocols (SMB, RDP, WMI)",
    "Extract network-based Indicators of Compromise (IOCs) from packet captures",
    "Analyze DNS tunneling and other covert channel techniques",
    "Recognize data exfiltration patterns in network traffic",
    "Apply protocol analysis to detect malicious activity",
    "Build network traffic baselines for anomaly detection"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "content": {
        "text": "🔍 **Welcome to Network Forensics: Where the Truth Lives in the Packets**\n\nImagine you're a detective examining a crime scene, but instead of physical evidence, you're analyzing millions of digital conversations happening across a network. Every packet tells a story—some are innocent, some are suspicious, and some reveal the smoking gun of a cyber attack.\n\n**Why This Matters**: While endpoint forensics shows you what happened on a single machine, network forensics reveals the *bigger picture*—how attackers moved laterally, what data they exfiltrated, and where their command servers are hiding. In many breaches (like the Target breach or SolarWinds), network traffic was the key evidence that revealed the full scope of the compromise.\n\n**Jim Kwik Principle - The Power of Curiosity**: Network forensics is like reading between the lines. Every unusual DNS query, every suspicious HTTP POST, every odd SMB connection is a clue. Stay curious, ask \"why is this traffic happening?\", and you'll uncover the attacker's playbook.\n\n**Your Mission Today**: You'll learn to analyze packet captures (PCAPs) like a pro, spot C2 traffic hiding in plain sight, detect lateral movement across your network, and extract IOCs that can protect your entire organization. Let's dive into the world where packets never lie! 🚀"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## What is Network Forensics?\n\n**Network forensics** is the capture, recording, and analysis of network traffic to detect intrusions, investigate security incidents, and gather evidence. Unlike live network monitoring (which focuses on real-time alerting), network forensics is *retrospective*—analyzing captured traffic after an incident has occurred.\n\n### Why Network Forensics Matters\n\n1. **Endpoint Gaps**: Even if an attacker wipes logs on a compromised machine, network traffic is captured *outside* that system and can't be erased\n2. **Lateral Movement Detection**: Shows how attackers move from one system to another\n3. **Data Exfiltration Evidence**: Reveals what data was stolen and where it went\n4. **C2 Infrastructure**: Identifies attacker command servers for threat intelligence\n5. **Timeline Reconstruction**: TCP handshakes and packet timestamps provide precise incident timelines\n\n### Key Network Forensics Tools\n\n| Tool | Purpose | Key Capability |\n|------|---------|----------------|\n| **Wireshark** | GUI packet analyzer | Deep packet inspection, protocol dissection |\n| **tcpdump** | CLI packet capture | Fast capture on servers and appliances |\n| **tshark** | CLI packet analysis | Wireshark's CLI version for automation |\n| **NetworkMiner** | Passive network sniffer | File extraction, host profiling |\n| **Zeek (Bro)** | Network security monitor | Protocol logging, anomaly detection |\n| **Rita** | Beacon detection | C2 beaconing analysis |\n| **Suricata** | IDS/IPS | Signature-based threat detection |\n\n### The Network Forensics Process\n\n```\n1. CAPTURE → Use tcpdump/Wireshark to capture traffic (full packet or headers only)\n2. PRESERVE → Save PCAPs with chain of custody and timestamps\n3. FILTER → Apply filters to reduce noise (focus on suspicious IPs, ports, protocols)\n4. ANALYZE → Deep packet inspection for anomalies and IOCs\n5. CORRELATE → Match network evidence with endpoint logs (Windows Event Logs, Sysmon)\n6. EXTRACT → Pull out files, credentials, IOCs from packets\n7. REPORT → Document findings with packet evidence and screenshots\n```\n\n**Memory Anchor - The 7 C's of Network Forensics**: **C**apture, **C**hain-of-custody, **C**lean (filter noise), **C**rack-open (analyze), **C**orrelate, **C**ollect-IOCs, **C**ommunicate findings."
      }
    },
    {
      "type": "video",
      "content": {
        "title": "Video: Network Forensics: Packet Analysis and Threat Detection Overview",
        "url": "https://www.youtube.com/embed/Vh_h6NfLkAg",
        "description": "Watch this video for a visual introduction to the concepts covered in this lesson."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Wireshark Mastery: Essential Display Filters\n\n**Wireshark display filters** are your superpower for cutting through millions of packets to find the smoking gun. Let's master the most critical filters for incident response.\n\n### Basic Syntax\n\n```\nProtocol.field operator value\n\nExamples:\nip.addr == 192.168.1.100        # Filter by IP address\ntcp.port == 445                  # Filter by TCP port\nhttp.request.method == \"POST\"    # Filter HTTP POST requests\n```\n\n### Top 20 Filters Every DFIR Analyst Must Know\n\n#### 1. IP Address Filters\n```\nip.addr == 10.0.0.50             # All traffic to/from this IP\nip.src == 10.0.0.50              # Traffic FROM this IP\nip.dst == 10.0.0.50              # Traffic TO this IP\nip.addr == 10.0.0.0/24           # Entire subnet\n!(ip.addr == 10.0.0.1)           # Exclude an IP (e.g., noisy gateway)\n```\n\n#### 2. Protocol Filters\n```\nhttp                              # All HTTP traffic\ntls                               # All TLS/SSL traffic\ndns                               # All DNS queries and responses\nsmb || smb2                       # SMB file sharing traffic (lateral movement)\nkerberos                          # Kerberos authentication\nrdp                               # Remote Desktop Protocol\n```\n\n#### 3. Port-Based Filters\n```\ntcp.port == 443                   # HTTPS traffic\ntcp.port == 3389                  # RDP connections\ntcp.port == 445 || tcp.port == 139 # SMB traffic\ntcp.port >= 49152                 # High/ephemeral ports (often C2)\n```\n\n#### 4. HTTP Filters (C2 and Exfiltration)\n```\nhttp.request                      # All HTTP requests\nhttp.request.method == \"POST\"     # POST requests (data upload)\nhttp.request.uri contains \"cmd\"   # Suspicious command injection\nhttp.user_agent contains \"curl\"   # Non-browser user agents (scripted)\nhttp.response.code == 200         # Successful responses\nhttp.file_data contains \"password\" # Data exfiltration keywords\n```\n\n#### 5. DNS Filters (Tunneling and C2)\n```\ndns.qry.name                      # All DNS queries\ndns.qry.name contains \"pastebin\"  # Known C2 domains\ndns.qry.type == 16                # TXT record queries (tunneling)\ndns.qry.name.len > 50             # Long queries (possible tunneling)\ndns.flags.response == 0           # DNS queries only (not responses)\n```\n\n#### 6. TLS/SSL Filters (Encrypted C2)\n```\ntls.handshake.type == 1           # Client Hello (connection start)\ntls.handshake.extensions_server_name # SNI field (domain in TLS)\nssl.record.content_type == 23     # Application data (post-handshake)\ntls && !tcp.port == 443           # TLS on non-standard ports (suspicious)\n```\n\n#### 7. SMB Filters (Lateral Movement)\n```\nsmb.cmd == 0xa2                   # SMB Create (file access)\nsmb.path contains \"ADMIN$\"        # Admin share access\nsmb.path contains \".exe\"          # Executable file transfers\nsmb2.filename contains \"psexec\"   # PsExec lateral movement\nntlmssp                           # NTLM authentication (pass-the-hash)\n```\n\n#### 8. Kerberos Filters (Golden Ticket, Silver Ticket)\n```\nkerberos.CNameString              # Usernames in Kerberos tickets\nkerberos.cipher == 23             # RC4 encryption (weak, often abused)\nkerberos.error_code == 25         # Clock skew errors (Golden Ticket indicator)\n```\n\n#### 9. TCP Anomalies\n```\ntcp.analysis.retransmission       # Retransmissions (network issues or evasion)\ntcp.flags.syn == 1 && tcp.flags.ack == 0  # SYN packets (port scans)\ntcp.flags.reset == 1              # RST packets (connection refused)\ntcp.window_size_value == 0        # Zero window (possible DoS)\n```\n\n#### 10. Data Size Filters (Exfiltration)\n```\nhttp.content_length > 1000000     # Large HTTP uploads (>1MB)\nftp-data                          # FTP data transfers\nsmb2.read_length > 100000         # Large SMB reads (data theft)\n```\n\n### Combining Filters with Boolean Logic\n\n```\n# Suspicious HTTP POST to external IP\nhttp.request.method == \"POST\" && !(ip.dst == 10.0.0.0/8)\n\n# SMB traffic NOT to domain controller\nsmb && !(ip.dst == 10.0.0.10)\n\n# DNS queries to suspicious TLDs\ndns.qry.name contains \".tk\" || dns.qry.name contains \".cc\" || dns.qry.name contains \".ru\"\n\n# Large uploads over HTTP/HTTPS\n(http.request.method == \"POST\" || http.request.method == \"PUT\") && http.content_length > 500000\n\n# Kerberos + SMB (lateral movement pattern)\n(kerberos || smb2) && ip.dst == 10.0.0.50\n```\n\n**Pro Tip**: Save your most-used filters as \"Buttons\" in Wireshark (Analyze → Display Filter Buttons) for one-click access during investigations."
      }
    },
    {
      "type": "diagram",
      "content": {
        "text": "## Network Forensics Investigation Flow\n\n```\n┌─────────────────────────────────────────────────────────────┐\n│                    INCIDENT ALERT                           │\n│         \"Suspicious traffic detected on host\"               │\n└──────────────────────┬──────────────────────────────────────┘\n                       ↓\n          ┌────────────────────────────┐\n          │  1. SCOPE THE INCIDENT     │\n          │  - What hosts involved?    │\n          │  - Time window?            │\n          │  - Reported symptoms?      │\n          └────────────┬───────────────┘\n                       ↓\n          ┌────────────────────────────┐\n          │  2. CAPTURE TRAFFIC        │\n          │  tcpdump -i eth0 \\         │\n          │    -w capture.pcap         │\n          │  (or retrieve from SPAN)   │\n          └────────────┬───────────────┘\n                       ↓\n          ┌────────────────────────────┐\n          │  3. BASELINE ANALYSIS      │\n          │  - Protocol distribution   │\n          │  - Top talkers             │\n          │  - Endpoints contacted     │\n          └────────────┬───────────────┘\n                       ↓\n     ┌─────────────────┴─────────────────┐\n     ↓                                   ↓\n┌──────────────┐                  ┌──────────────┐\n│ 4a. C2       │                  │ 4b. LATERAL  │\n│ DETECTION    │                  │ MOVEMENT     │\n│ - Beaconing  │                  │ - SMB/RDP    │\n│ - DNS tunnel │                  │ - PsExec     │\n│ - TLS anomaly│                  │ - WMI        │\n└──────┬───────┘                  └───────┬──────┘\n       │                                  │\n       └──────────────┬───────────────────┘\n                      ↓\n          ┌────────────────────────────┐\n          │  5. EXFILTRATION CHECK     │\n          │  - Large POST requests     │\n          │  - FTP/SFTP uploads        │\n          │  - DNS/ICMP tunneling      │\n          └────────────┬───────────────┘\n                       ↓\n          ┌────────────────────────────┐\n          │  6. EXTRACT IOCS           │\n          │  - Attacker IPs            │\n          │  - C2 domains              │\n          │  - User-Agents             │\n          │  - File hashes             │\n          └────────────┬───────────────┘\n                       ↓\n          ┌────────────────────────────┐\n          │  7. CORRELATE              │\n          │  - Match with endpoint logs│\n          │  - Check threat intel      │\n          │  - Build attack timeline   │\n          └────────────┬───────────────┘\n                       ↓\n          ┌────────────────────────────┐\n          │  8. REPORT & CONTAIN       │\n          │  - Incident report         │\n          │  - Block IOCs at firewall  │\n          │  - Isolate compromised     │\n          └────────────────────────────┘\n```"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Detecting Command and Control (C2) Traffic\n\n**C2 (Command and Control)** traffic is how attackers maintain communication with compromised systems. Detecting C2 is critical because it indicates an *active* compromise where attackers are issuing commands.\n\n### Types of C2 Channels\n\n1. **HTTP/HTTPS C2**: Most common (blends with normal web traffic)\n2. **DNS Tunneling**: Exfiltrates data via DNS queries\n3. **ICMP Tunneling**: Hides data in ping packets\n4. **Social Media C2**: Uses Twitter, Telegram, Discord as command channels\n5. **Cloud Services**: Dropbox, Google Drive, AWS S3 for file staging\n\n### C2 Beaconing Detection\n\n**Beaconing** is periodic communication between malware and its C2 server to check for commands. Key indicators:\n\n#### 1. Regular Time Intervals\n- Malware checks in every X seconds/minutes\n- Example: Cobalt Strike default beacon = 60 seconds\n- **Detection**: Look for connections with consistent jitter\n\n**Wireshark Analysis**:\n```\n1. Statistics → Conversations → TCP tab\n2. Sort by \"Packets\" column (high packet count = potential beacon)\n3. Right-click → Apply as Filter → Selected → A<->B\n4. Statistics → IO Graph\n5. Look for regular spikes in traffic (beaconing pattern)\n```\n\n#### 2. Unusual Destinations\n- Connections to IPs in uncommon countries\n- Cloud hosting providers (AWS, DigitalOcean, Linode)\n- Dynamic DNS domains (no-ip.com, duckdns.org)\n\n**Filter for cloud providers**:\n```\nip.dst == 54.0.0.0/8 || ip.dst == 18.0.0.0/8  # AWS ranges\nip.dst == 104.16.0.0/12                       # Cloudflare\n```\n\n#### 3. Suspicious User-Agents\nLegitimate browsers have complex User-Agent strings. Malware often uses:\n- Default library agents: `python-requests/2.25.1`, `curl/7.64.1`\n- Custom/rare agents: `Mozilla/4.0 (compatible; MSIE 6.0)` (ancient)\n- Empty agents: `User-Agent: -`\n\n**Filter**:\n```\nhttp.user_agent && !(http.user_agent contains \"Chrome\" || http.user_agent contains \"Firefox\" || http.user_agent contains \"Safari\")\n```\n\n#### 4. TLS Certificate Anomalies\n- Self-signed certificates\n- Unusual CN (Common Name) fields\n- Certificates issued very recently (hours/days ago)\n\n**Wireshark analysis**:\n```\ntls.handshake.type == 11  # Server Certificate\n```\nRight-click certificate → Expand → Check Issuer and Validity dates\n\n### Real-World Example: Detecting Cobalt Strike Beacon\n\n**Cobalt Strike** is a popular red team tool (and attacker favorite). Default beacons have these characteristics:\n\n1. **Beacon period**: 60 seconds (configurable)\n2. **Jitter**: ±0-50% randomization to evade detection\n3. **User-Agent**: Often mimics Internet Explorer\n4. **Traffic pattern**: Small GET requests, occasional POST with encrypted data\n\n**Detection Filter**:\n```\nhttp.request && http.user_agent contains \"MSIE\" && tcp.len < 500\n```\n\nThen check Statistics → IO Graph for regular intervals.\n\n### DNS Tunneling Detection\n\n**DNS tunneling** encodes data in DNS queries to bypass firewalls (DNS is rarely blocked).\n\n**Indicators**:\n1. **High query volume** to single domain\n2. **Long subdomain names** (>50 characters)\n3. **Unusual query types**: TXT, MX, NULL records\n4. **High entropy** in subdomains (random-looking strings)\n\n**Detection Filters**:\n```\n# Long DNS queries\ndns.qry.name.len > 50\n\n# TXT record queries (common for tunneling)\ndns.qry.type == 16\n\n# High volume to single domain\ndns && dns.flags.response == 0\n```\n\nThen: Statistics → DNS → sort by Query count\n\n**Example of DNS tunneling**:\n```\nQuery: 48656c6c6f576f726c64.malicious.com\n       ^^^^^^^^^^^^^^^^ (Hex-encoded \"HelloWorld\")\n\nResponse: TXT record with base64-encoded command\n```\n\n**Tool for detection**: `dns-tunnel-detect` or manual scripting with tshark:\n```bash\ntshark -r capture.pcap -T fields -e dns.qry.name | sort | uniq -c | sort -rn\n```\nLook for domains with hundreds of unique subdomains."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Lateral Movement Detection in Network Traffic\n\n**Lateral movement** is how attackers expand access after initial compromise, moving from one system to another. Network forensics is *ideal* for detecting this because it shows inter-host communication.\n\n### Key Lateral Movement Techniques and Their Network Signatures\n\n#### 1. PsExec (Remote Command Execution)\n\n**How it works**: Windows Sysinternals tool that copies executable to remote ADMIN$ share and creates a service to run it.\n\n**Network indicators**:\n- SMB connections to `\\\\target\\ADMIN$` or `\\\\target\\IPC$`\n- File copy of `PSEXESVC.exe` (or renamed variant)\n- Service creation via Service Control Manager (SCM)\n\n**Wireshark filters**:\n```\nsmb2.filename contains \"ADMIN$\" || smb2.filename contains \"psexe\"\nsmb2.cmd == 5  # SMB2 CREATE (file creation)\n```\n\n**Timeline example**:\n```\n1. 10:42:15 - SMB connection to \\\\10.0.0.50\\IPC$\n2. 10:42:16 - File write: \\\\10.0.0.50\\ADMIN$\\malware.exe\n3. 10:42:17 - Service creation: \"RemoteExec\"\n4. 10:42:18 - Process execution on 10.0.0.50\n```\n\n#### 2. WMI (Windows Management Instrumentation)\n\n**How it works**: Uses WMI to remotely execute commands without copying files.\n\n**Network indicators**:\n- TCP port 135 (RPC Endpoint Mapper)\n- Dynamic RPC port (49152-65535)\n- DCOM traffic (Distributed COM)\n\n**Wireshark filter**:\n```\ntcp.port == 135 || (tcp.port >= 49152 && tcp.port <= 65535)\n```\n\n**Challenge**: WMI uses encrypted RPC, so packet *content* is hard to analyze, but you can spot the connections and correlate with Windows Event ID 4688 (process creation) on target.\n\n#### 3. RDP (Remote Desktop Protocol)\n\n**How it works**: Attackers RDP into systems using compromised credentials.\n\n**Network indicators**:\n- TCP port 3389 connections\n- TLS handshake (RDP uses TLS encryption since Windows 10)\n- Multiple RDP sessions from same source to different destinations\n\n**Wireshark filter**:\n```\ntcp.port == 3389 || tls && tcp.port == 3389\n```\n\n**Suspicious patterns**:\n- RDP from workstation → workstation (not typical user behavior)\n- RDP sessions at unusual hours (2 AM from employee laptop)\n- RDP from external IP without VPN\n\n#### 4. Pass-the-Hash (PtH) Attacks\n\n**How it works**: Attacker steals NTLM hash and uses it to authenticate without knowing plaintext password.\n\n**Network indicators**:\n- NTLM authentication traffic (instead of Kerberos)\n- Same hash used across multiple systems\n- Authentication to systems user doesn't normally access\n\n**Wireshark filter**:\n```\nntlmssp\n```\n\nLook for:\n- `NTLMSSP_AUTH` packets\n- Multiple authentications in short time span\n- NTLM used when Kerberos is available (red flag)\n\n#### 5. SMB File Shares (Data Staging)\n\n**How it works**: Attackers copy stolen data to staging server before exfiltration.\n\n**Network indicators**:\n- Large SMB write operations\n- Unusual file access (e.g., HR workstation accessing Finance shares)\n- Connections to hidden shares (`\\\\server\\C$`)\n\n**Wireshark filter**:\n```\nsmb2.write_length > 100000  # Large writes (>100KB)\nsmb.path contains \"C$\" || smb.path contains \"D$\"\n```\n\n### Lateral Movement Detection Workflow\n\n**Step 1**: Filter for authentication protocols\n```\nkerberos || ntlmssp || smb2\n```\n\n**Step 2**: Build conversation matrix\n```\nStatistics → Conversations → IPv4 tab\nSort by Packets (high packet count = sustained connection)\n```\n\n**Step 3**: Look for unusual source IPs\n- Workstations shouldn't initiate SMB to other workstations\n- Database servers shouldn't RDP to web servers\n- Any system shouldn't connect to *many* targets in short time\n\n**Step 4**: Correlate with endpoint logs\n```\nNetwork shows: 10.0.0.25 → 10.0.0.50 SMB at 14:32\nEndpoint log: Event ID 4624 (Logon) on 10.0.0.50 at 14:32, source 10.0.0.25\n```\n\n**Step 5**: Check if access is legitimate\n- Is 10.0.0.25 an admin workstation?\n- Does user normally access 10.0.0.50?\n- Was this during work hours?\n\n### Memory Anchor - \"SMART Lateral Movement\"\n- **S**MB shares (file staging)\n- **M**anagement tools (WMI, PsExec)\n- **A**uthentication oddities (Pass-the-Hash, NTLM instead of Kerberos)\n- **R**DP connections (unusual patterns)\n- **T**imestamps (rapid successive logins across systems)"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "## Hands-On: Analyzing a Suspicious PCAP\n\nLet's walk through a realistic incident response scenario using Wireshark and tshark.\n\n### Scenario\nYou receive an alert: \"Workstation 10.0.0.100 may be compromised. Unusual network activity detected.\" You have a PCAP file covering the last 2 hours of network traffic.\n\n### Analysis Workflow\n\n#### Step 1: Initial Triage with tshark\n\n```bash\n# Get protocol hierarchy (what protocols are in use?)\ntshark -r suspicious.pcap -q -z io,phs\n\n# Output example:\n# HTTP: 42%\n# TLS: 35%\n# DNS: 15%\n# SMB2: 8%\n\n# Get conversation statistics (who's talking to whom?)\ntshark -r suspicious.pcap -q -z conv,ip\n\n# Look for:\n# - High packet count to single external IP (potential C2)\n# - SMB traffic between workstations (lateral movement)\n```\n\n#### Step 2: Extract HTTP Requests\n\n```bash\n# Extract all HTTP requests\ntshark -r suspicious.pcap -Y \"http.request\" -T fields \\\n  -e frame.time -e ip.src -e ip.dst -e http.request.method \\\n  -e http.request.uri -e http.user_agent\n\n# Look for:\n# - Suspicious User-Agents (curl, python-requests)\n# - POST requests with large content-length\n# - Requests to unknown domains\n```\n\n#### Step 3: DNS Analysis\n\n```bash\n# Extract DNS queries and sort by frequency\ntshark -r suspicious.pcap -Y \"dns.flags.response == 0\" \\\n  -T fields -e dns.qry.name | sort | uniq -c | sort -rn\n\n# Output example:\n# 487 www.google.com (normal)\n# 352 malicious-c2-server.tk (RED FLAG - high query count to .tk domain)\n# 12 www.microsoft.com (normal)\n\n# Check for long DNS queries (tunneling)\ntshark -r suspicious.pcap -Y \"dns.qry.name.len > 50\" \\\n  -T fields -e dns.qry.name\n```\n\n#### Step 4: Identify C2 Beaconing with Python\n\n```python\nimport pyshark\nimport pandas as pd\nfrom datetime import datetime\n\n# Load PCAP\ncap = pyshark.FileCapture('suspicious.pcap', display_filter='http')\n\n# Extract HTTP connections with timestamps\nconnections = []\nfor pkt in cap:\n    if 'HTTP' in pkt:\n        try:\n            connections.append({\n                'time': float(pkt.sniff_timestamp),\n                'src': pkt.ip.src,\n                'dst': pkt.ip.dst,\n                'method': pkt.http.request_method if hasattr(pkt.http, 'request_method') else None\n            })\n        except AttributeError:\n            pass\n\ndf = pd.DataFrame(connections)\n\n# Group by destination IP and calculate time deltas\nfor dst_ip in df['dst'].unique():\n    subset = df[df['dst'] == dst_ip].sort_values('time')\n    if len(subset) > 5:  # Need multiple connections to detect pattern\n        time_deltas = subset['time'].diff().dropna()\n        \n        # Check for consistent intervals (±20% jitter)\n        mean_delta = time_deltas.mean()\n        std_delta = time_deltas.std()\n        \n        if std_delta / mean_delta < 0.2:  # Low variance = beaconing\n            print(f\"[!] BEACON DETECTED to {dst_ip}\")\n            print(f\"    Interval: {mean_delta:.1f}s (±{std_delta:.1f}s)\")\n            print(f\"    Connections: {len(subset)}\")\n```\n\n#### Step 5: Extract Files from PCAP\n\n```bash\n# Use Wireshark GUI:\n# File → Export Objects → HTTP (or SMB, FTP)\n# Save suspicious files for malware analysis\n\n# Or use tshark:\ntshark -r suspicious.pcap --export-objects http,./http_objects/\n\n# Then check files:\nls -lh http_objects/\nfile http_objects/*\nmd5sum http_objects/*\n```\n\n#### Step 6: Search for Lateral Movement\n\n```bash\n# Find all SMB connections FROM 10.0.0.100\ntshark -r suspicious.pcap -Y \"ip.src == 10.0.0.100 && smb2\" \\\n  -T fields -e ip.dst -e smb2.filename | grep -i \"admin\\$\\|C\\$\\|psexe\"\n\n# Output example:\n# 10.0.0.105    \\\\10.0.0.105\\ADMIN$\\malware.exe\n# 10.0.0.110    \\\\10.0.0.110\\C$\\Windows\\Temp\\update.exe\n\n# RED FLAG: Workstation copying executables to other workstations\n```\n\n#### Step 7: Generate IOC Report\n\n```python\nimport json\n\niocs = {\n    \"ips\": [\n        \"45.142.212.61\",  # C2 server IP\n        \"185.220.101.32\"  # Secondary C2\n    ],\n    \"domains\": [\n        \"malicious-c2-server.tk\",\n        \"update-server.duckdns.org\"\n    ],\n    \"user_agents\": [\n        \"python-requests/2.25.1\"  # Non-browser agent\n    ],\n    \"file_hashes\": {\n        \"malware.exe\": \"44d88612fea8a8f36de82e1278abb02f\",\n        \"update.exe\": \"c4ca4238a0b923820dcc509a6f75849b\"\n    },\n    \"smb_targets\": [\n        \"10.0.0.105\",\n        \"10.0.0.110\"\n    ]\n}\n\n# Export for SIEM/EDR ingestion\nwith open('iocs.json', 'w') as f:\n    json.dump(iocs, f, indent=2)\n\nprint(\"[+] IOCs extracted and saved to iocs.json\")\nprint(f\"[+] Block {len(iocs['ips'])} IPs at firewall\")\nprint(f\"[+] Add {len(iocs['domains'])} domains to DNS blocklist\")\nprint(f\"[+] Isolate {len(iocs['smb_targets'])} lateral movement targets\")\n```\n\n### Expected Findings\n\nAfter running this analysis, you should have:\n\n1. ✅ **C2 Server Identified**: 45.142.212.61 with beaconing every ~58 seconds\n2. ✅ **Exfiltration Detected**: Large POST requests to C2 (total 15MB uploaded)\n3. ✅ **Lateral Movement**: 10.0.0.100 → 10.0.0.105, 10.0.0.110 via SMB\n4. ✅ **IOCs Extracted**: 2 IPs, 2 domains, 2 file hashes, 2 compromised hosts\n5. ✅ **Timeline Built**: Initial compromise → C2 setup → lateral movement → exfiltration\n\n### Next Steps\n1. **Contain**: Isolate 10.0.0.100, 10.0.0.105, 10.0.0.110 from network\n2. **Block**: Add IOCs to firewall, DNS filter, EDR blocklists\n3. **Investigate**: Endpoint forensics on all 3 systems\n4. **Threat Hunt**: Search for IOCs across entire network\n5. **Report**: Document timeline and evidence for leadership"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Data Exfiltration Detection\n\n**Data exfiltration** is the unauthorized transfer of data outside the organization. It's the attacker's ultimate goal—steal your data and get out.\n\n### Common Exfiltration Channels\n\n#### 1. HTTP/HTTPS POST Requests\n\n**Indicators**:\n- Large POST or PUT requests\n- Uploads to cloud storage (Dropbox, Google Drive, file-sharing sites)\n- Base64-encoded data in request bodies\n\n**Detection**:\n```\n# Large HTTP uploads\nhttp.request.method == \"POST\" && http.content_length > 1000000\n\n# Cloud storage domains\nhttp.host contains \"dropbox\" || http.host contains \"drive.google\"\n\n# Examine POST data for sensitive keywords\nhttp.file_data contains \"password\" || http.file_data contains \"confidential\"\n```\n\n**Example**: NotPetya ransomware exfiltrated credentials via HTTP POST to attacker-controlled servers before encrypting systems.\n\n#### 2. FTP/SFTP Uploads\n\n**Indicators**:\n- FTP traffic (port 21) or SFTP (port 22)\n- Large file transfers\n- Connections to external IPs\n\n**Detection**:\n```\n# FTP data connections\nftp-data\n\n# SFTP (over SSH)\ntcp.port == 22 && tcp.len > 1000\n```\n\n#### 3. DNS Tunneling (Stealth Exfiltration)\n\n**How it works**: Encode data in DNS queries to bypass DLP and firewalls.\n\n**Example**:\n```\nQuery: 7061737377b6f7264.exfil.malicious.com\n       ^^^^^^^^^^^^^^^^ (Hex-encoded \"password\")\n```\n\n**Detection**:\n```\n# High volume of DNS queries\ndns && dns.flags.response == 0\n\n# Long query names\ndns.qry.name.len > 50\n\n# Unusual query types\ndns.qry.type == 16  # TXT records\ndns.qry.type == 10  # NULL records\n```\n\n**Tool**: Use `dnscat2` detection scripts or analyze with:\n```bash\ntshark -r capture.pcap -Y \"dns\" -T fields -e dns.qry.name \\\n  | awk '{print length, $0}' | sort -rn | head -20\n```\n\n#### 4. ICMP Tunneling\n\n**How it works**: Embed data in ICMP echo requests/replies (ping packets).\n\n**Detection**:\n```\n# ICMP with large payloads\nicmp && data.len > 64\n\n# High ICMP volume\nicmp\n```\n\nThen: Statistics → Protocol Hierarchy (if ICMP > 5%, investigate)\n\n#### 5. Email Exfiltration\n\n**Indicators**:\n- Large email attachments\n- SMTP traffic (port 25, 587) to external mail servers\n- Email to unusual recipients (personal accounts, disposable email services)\n\n**Detection**:\n```\n# SMTP traffic\ntcp.port == 25 || tcp.port == 587\n\n# Large email data\nsmtp && tcp.len > 100000\n```\n\n### Exfiltration Volume Analysis\n\nUse Wireshark's **IO Graph** to spot data spikes:\n\n1. Statistics → IO Graph\n2. Add filters for different protocols:\n   - Graph 1: `http.request.method == \"POST\"`\n   - Graph 2: `ftp-data`\n   - Graph 3: `dns`\n3. Change Y-axis to \"Bytes\" (instead of Packets)\n4. Look for sudden spikes = potential exfiltration\n\n### Real-World Example: Detecting Data Theft\n\n**Scenario**: Sony Pictures breach (2014)\n- Attackers exfiltrated 100TB of data over weeks\n- Used multiple exfiltration channels (FTP, HTTP, custom protocols)\n- Network monitoring detected unusual outbound traffic spikes\n\n**Indicators**:\n- Sustained high bandwidth to external IPs (multiple GB/hour)\n- Traffic during non-business hours (2-5 AM)\n- Connections to newly-registered domains\n- Use of file compression (7z, rar) before upload\n\n### Memory Anchor - \"UPLOAD Exfiltration\"\n- **U**nusual volumes (spikes in IO graph)\n- **P**OSTing data (HTTP/HTTPS)\n- **L**arge files (check content_length, smb2.read_length)\n- **O**dd destinations (cloud storage, personal emails)\n- **A**fter hours (2-5 AM traffic)\n- **D**NS tunneling (long queries, TXT records)"
      }
    },
    {
      "type": "quiz",
      "content": {
        "text": "## Knowledge Check: Network Forensics\n\n**Question 1**: You're investigating a potential C2 beacon. Which Wireshark feature helps you identify regular time intervals between connections to the same IP?\n\nA) Protocol Hierarchy  \nB) IO Graph  \nC) Expert Info  \nD) Conversations\n\n**Answer**: B) IO Graph. Filter for the suspicious destination IP, then use Statistics → IO Graph to visualize connection patterns over time. Regular spikes indicate beaconing behavior.\n\n---\n\n**Question 2**: You see DNS queries with names like `48656c6c6f.malicious.com` and `576f726c64.malicious.com`. What attack technique is this?\n\nA) DNS Spoofing  \nB) DNS Amplification  \nC) DNS Tunneling  \nD) DNS Cache Poisoning\n\n**Answer**: C) DNS Tunneling. The hex-encoded subdomains (48656c6c6f = \"Hello\", 576f726c64 = \"World\") indicate data is being exfiltrated via DNS queries.\n\n---\n\n**Question 3**: Which of the following is the STRONGEST indicator of lateral movement?\n\nA) HTTP traffic from workstation to web server  \nB) SMB connection from workstation to file server  \nC) RDP connection from IT admin laptop to domain controller  \nD) SMB connection from workstation to another workstation with file write to ADMIN$ share\n\n**Answer**: D) Workstation-to-workstation SMB with ADMIN$ write is highly suspicious. Normal users don't access administrative shares on peer workstations. This is classic PsExec-style lateral movement.\n\n---\n\n**Question 4**: You find HTTP POST requests with `User-Agent: python-requests/2.25.1`. Why is this suspicious?\n\nA) Python is a programming language and shouldn't be used on corporate networks  \nB) It indicates automated/scripted traffic rather than human browser activity  \nC) This User-Agent is always malicious  \nD) It means Python was used to download the malware\n\n**Answer**: B) Scripted User-Agents (python-requests, curl, wget) indicate automated activity, not a human browsing with Chrome/Firefox. While not *always* malicious, it warrants investigation in a corporate environment.\n\n---\n\n**Question 5**: You want to detect potential data exfiltration. Which Wireshark filter is most effective?\n\nA) `ip.dst != 10.0.0.0/8`  \nB) `http.request.method == \"POST\" && http.content_length > 1000000`  \nC) `tcp.port == 443`  \nD) `dns`\n\n**Answer**: B) Large HTTP POST requests indicate significant data uploads, a key exfiltration indicator. Filter A catches external traffic but is too broad. C and D need additional context."
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "## Real-World Case Study: APT29 (Cozy Bear) Network Detection\n\n### The Attack: SolarWinds Supply Chain Compromise (2020)\n\n**Attacker**: APT29 (Russian state-sponsored threat actor)  \n**Target**: 18,000+ organizations using SolarWinds Orion  \n**Method**: Supply chain compromise → C2 via HTTPS → Lateral movement → Data theft\n\n### How Network Forensics Uncovered the Breach\n\n#### Phase 1: C2 Traffic Discovery\n\nFireEye's security team noticed **unusual HTTPS traffic** from their Orion server:\n\n**Initial Indicator**:\n```\nFireEye Orion Server → avsvmcloud.com (HTTPS/443)\nConnection pattern: Every 12-14 hours (low-and-slow approach)\n```\n\n**Why suspicious**:\n1. Domain `avsvmcloud.com` was newly registered (only 2 weeks old)\n2. Certificate issued by Let's Encrypt (free SSL = common in malware)\n3. Traffic only from Orion servers, not other systems\n4. Beaconing pattern with long intervals (evading short-term analysis)\n\n**Wireshark Analysis**:\n```\n# Filter TLS handshakes to suspicious domain\ntls.handshake.extensions_server_name == \"avsvmcloud.com\"\n\n# Examine certificate details\ntls.handshake.type == 11  # Server Certificate\n```\n\nFinding: Certificate CN field contained random-looking string (not company name), and Validity period started only 14 days prior.\n\n#### Phase 2: Lateral Movement Detection\n\nOnce FireEye knew Orion was compromised, they analyzed network logs for lateral movement:\n\n**Indicators Found**:\n1. **Kerberos ticket requests** from Orion service account to systems it normally doesn't access\n2. **LDAP queries** enumerating Active Directory (reconnaissance)\n3. **SMB connections** from Orion to exchange servers and file servers\n4. **RDP sessions** from Orion server to domain controllers\n\n**Wireshark Evidence**:\n```\nTime: 2020-12-08 03:17:42\nSource: 10.50.10.15 (Orion server)\nDest: 10.50.10.5 (Exchange server)\nProtocol: SMB2\nFile: \\\\10.50.10.5\\C$\\Windows\\Temp\\msupdate.exe\n```\n\nThis showed attacker copying tools to Exchange server for email harvesting.\n\n#### Phase 3: Data Exfiltration\n\n**Method**: HTTPS uploads to attacker-controlled cloud storage (disguised as Microsoft Azure domains)\n\n**Detection**:\n```\n# Large HTTPS uploads from Exchange server\ntls && tcp.port == 443 && ip.src == 10.50.10.5\n\n# Check TCP stream length\nStatistics → Conversations → TCP tab\nSort by \"Bytes A→B\" (outbound data)\n```\n\nFinding: Exchange server sent **27 GB** to `cdn.azure-services.net` (typosquatting actual Microsoft domain `azure.microsoft.com`) over 3 days.\n\n### The Forensics Process\n\n1. **Capture**: FireEye had network taps capturing all traffic (full packet capture)\n2. **Baseline**: They compared Orion traffic to historical baselines (spotted new domain)\n3. **Threat Intel**: Checked `avsvmcloud.com` against threat intel feeds (no prior reports = unknown threat)\n4. **Binary Analysis**: Extracted `msupdate.exe` from PCAP using Wireshark (Export Objects → SMB)\n5. **Correlation**: Matched network timestamps with Windows Event Logs (Event ID 4688 showed process execution)\n6. **Disclosure**: Alerted CISA (US government) who issued emergency directive ED 21-01\n\n### Lessons Learned\n\n**What Worked**:\n- ✅ Full packet capture enabled retrospective analysis\n- ✅ Network baselining detected anomalous domains\n- ✅ TLS inspection (with SSL decryption proxy) revealed C2\n- ✅ Correlation between network + endpoint logs confirmed lateral movement\n\n**What Failed**:\n- ❌ Traditional AV/EDR missed the supply chain implant (digitally signed binary)\n- ❌ Initial C2 traffic was low-volume and evaded threshold-based alerts\n- ❌ Typosquatting domain (`azure-services.net`) bypassed some domain reputation checks\n\n### Detection Rules Created After SolarWinds\n\n**1. Detect beaconing to newly-registered domains**:\n```\nAlert if:\n  - HTTPS connection to domain registered < 30 days ago\n  - AND connection pattern is regular intervals\n  - AND domain not in corporate allow-list\n```\n\n**2. Detect unusual source systems for SMB lateral movement**:\n```\nAlert if:\n  - SMB connection from non-admin workstation to multiple endpoints\n  - OR SMB from server to workstations (reverse of normal)\n```\n\n**3. Detect large data uploads to cloud storage**:\n```\nAlert if:\n  - HTTPS upload > 1GB to cloud storage domain\n  - AND source is not authorized backup/sync system\n  - AND destination domain is newly-seen in environment\n```\n\n### Impact\n\n- 18,000+ organizations compromised\n- US government agencies breached (Treasury, Commerce, Energy)\n- Attack duration: **8 months undetected**\n- Remediation cost: Estimated $100M+ across affected orgs\n- Policy changes: Executive Order 14028 (improving nation's cybersecurity)\n\n**Key Takeaway**: Network forensics was critical in uncovering this sophisticated supply chain attack. Endpoint defenses were bypassed, but network traffic couldn't lie—the C2 beaconing and lateral movement were eventually spotted through careful packet analysis.\n\n**Your Role**: As a DFIR analyst, network forensics skills would have helped detect this attack earlier by spotting the unusual Orion→avsvmcloud.com beaconing pattern."
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "## Reflection: Becoming a Network Forensics Expert\n\n**Take 5 minutes to reflect on these questions:**\n\n1. **C2 Detection**: If you were analyzing a PCAP and saw regular HTTP requests every 60 seconds to an unknown IP, what additional checks would you perform to confirm it's malicious C2 traffic? (Think: User-Agent, certificate checks, domain age, threat intel)\n\n2. **Lateral Movement**: In your organization, what would be *normal* SMB traffic patterns vs. suspicious? (Consider: workstation→server is normal, but workstation→workstation might not be)\n\n3. **Data Exfiltration**: If you detected a 10GB HTTPS upload from a database server to a cloud storage domain, what would your next 3 investigation steps be? (Consider: What data lives on that server? Who has access? Is cloud storage authorized?)\n\n4. **Skill Gaps**: What's the biggest challenge you anticipate when doing network forensics? (Learning Wireshark filters? Understanding protocols? Correlating network + endpoint data?) How will you address it?\n\n5. **Real-World Application**: Think of a recent security incident you've read about (Target breach, Colonial Pipeline, etc.). How could network forensics have detected or investigated that attack? What network indicators would have been present?\n\n**Action Item**: This week, download a practice PCAP from `malware-traffic-analysis.net` and analyze it using the filters and techniques from this lesson. Try to:\n- Identify the C2 server\n- Spot lateral movement (if any)\n- Find exfiltration traffic\n- Extract IOCs (IPs, domains, file hashes)\n\n**Mindset Note**: Network forensics is a skill that improves dramatically with practice. Your first PCAP analysis might take 2 hours. Your 50th might take 20 minutes. Keep practicing, and you'll develop that intuition for \"this traffic looks wrong.\""
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "## Memory Aids for Network Forensics\n\n### Wireshark Filter Cheat Sheet (Memorize These 10)\n\n1. **ip.addr == X** → All traffic to/from IP X\n2. **http.request** → All HTTP requests\n3. **dns.qry.name** → DNS queries\n4. **tls.handshake.type == 1** → TLS Client Hello (connection start)\n5. **smb2 && ip.src == X** → SMB traffic FROM X (lateral movement)\n6. **tcp.port == 443 && tcp.len > 1000** → Large HTTPS payloads (exfiltration)\n7. **http.request.method == \"POST\"** → HTTP uploads\n8. **tcp.analysis.retransmission** → Network issues or evasion\n9. **kerberos || ntlmssp** → Authentication traffic\n10. **!(ip.addr == X)** → Exclude IP X from results\n\n### The 7 C's of Network Forensics (Investigation Process)\n\n1. **C**apture (tcpdump, Wireshark)\n2. **C**hain-of-custody (preserve evidence)\n3. **C**lean (filter noise)\n4. **C**rack-open (analyze deeply)\n5. **C**orrelate (network + endpoint logs)\n6. **C**ollect-IOCs (extract indicators)\n7. **C**ommunicate (report findings)\n\n### C2 Detection: BATS Method\n\n- **B**eaconing (regular time intervals)\n- **A**nomalous destinations (cloud hosting, dynamic DNS)\n- **T**LS oddities (self-signed certs, weird CN fields)\n- **S**uspicious agents (curl, python-requests, old MSIE)\n\n### Lateral Movement: SMART\n\n- **S**MB shares (ADMIN$, C$, file staging)\n- **M**anagement tools (WMI, PsExec, PowerShell remoting)\n- **A**uthentication oddities (NTLM instead of Kerberos, Pass-the-Hash)\n- **R**DP connections (workstation→workstation)\n- **T**imestamps (rapid successive logins)\n\n### Exfiltration Detection: UPLOAD\n\n- **U**nusual volumes (IO graph spikes)\n- **P**OSTing data (HTTP POST/PUT)\n- **L**arge files (content_length > 1MB)\n- **O**dd destinations (Dropbox, personal email)\n- **A**fter hours (2-5 AM)\n- **D**NS tunneling (long queries, TXT records)\n\n### Port Number Quick Reference (Must Know)\n\n- **21**: FTP (file exfiltration)\n- **22**: SSH/SFTP (encrypted file transfer)\n- **25, 587**: SMTP (email exfiltration)\n- **53**: DNS (tunneling, C2)\n- **80**: HTTP (C2, exfiltration)\n- **443**: HTTPS (encrypted C2, exfiltration)\n- **445**: SMB (lateral movement, file staging)\n- **3389**: RDP (remote access, lateral movement)\n- **135, 49152-65535**: RPC/WMI (lateral movement)\n\n### Suspicious Traffic Indicators (Red Flags)\n\n- **Long DNS names** (>50 chars) → Tunneling\n- **TXT record queries** → Tunneling\n- **Non-browser User-Agents** → Automated/malware\n- **Self-signed TLS certs** → C2 server\n- **Regular time intervals** → Beaconing\n- **Workstation→workstation SMB** → Lateral movement\n- **Large POST requests** → Exfiltration\n- **NTLM when Kerberos available** → Pass-the-Hash\n- **RDP at 3 AM** → Unauthorized access\n- **Newly-registered domains** → C2 infrastructure\n\n**Pro Tip**: Print these out and keep them next to your workstation. Within 2 weeks of regular use, they'll be muscle memory!"
      }
    }
  ],
  "post_assessment": [
    {
      "question": "You're analyzing a PCAP and find 300 HTTP connections to a single external IP (45.142.212.61) occurring at 58-62 second intervals. The User-Agent is 'Mozilla/4.0 (compatible; MSIE 8.0)'. What's the most likely explanation?",
      "options": [
        "A user is repeatedly refreshing a webpage in Internet Explorer 8",
        "A web scraping bot is crawling a website",
        "C2 beacon traffic from malware with jitter",
        "A legitimate Windows Update process"
      ],
      "correct_answer": 2,
      "explanation": "This shows classic C2 beaconing: regular time intervals (~60s) with slight jitter (58-62s), outdated User-Agent (MSIE 8.0 is ancient), and external IP. The consistent interval rules out human behavior. The old User-Agent rules out legitimate Windows processes. This is malware calling home.",
      "question_id": "6bb1664e-ff88-4d8c-b7df-724eac99b08a",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "During incident response, you find DNS queries to domains like '4d616c776172652d436f6d6d616e64.exfil.example.com'. When you hex-decode the subdomain, it reveals 'Malware-Command'. What attack technique is this?",
      "options": [
        "DNS cache poisoning",
        "DNS tunneling / exfiltration",
        "DNS amplification attack",
        "Typosquatting"
      ],
      "correct_answer": 1,
      "explanation": "This is DNS tunneling. The hex-encoded subdomain contains data being exfiltrated via DNS queries. DNS tunneling is used to bypass firewalls (DNS is rarely blocked) and avoid detection by encoding data in domain names rather than using HTTP/HTTPS.",
      "question_id": "4bb473f5-2e04-4525-8324-8f08cb968b80",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "Your Wireshark capture shows SMB traffic from workstation 10.0.0.100 to 10.0.0.105 with the file path '\\\\10.0.0.105\\ADMIN$\\temp\\evil.exe', followed 3 seconds later by a service creation named 'RemoteExec'. What's happening?",
      "options": [
        "Legitimate IT administrator installing software remotely",
        "Automated Windows Update process",
        "PsExec-style lateral movement attack",
        "User copying files via network share"
      ],
      "correct_answer": 2,
      "explanation": "This is classic PsExec lateral movement: (1) file copied to ADMIN$ share, (2) service created to execute it. The ADMIN$ share is used for remote administration and is a common lateral movement path. The 3-second delay matches PsExec's operation. While an admin *could* do this legitimately, in incident response context, workstation→workstation SMB with ADMIN$ access is highly suspicious.",
      "question_id": "216bdbe7-e2e6-4fad-b391-a5ac3cdb6ba9",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "You need to detect potential data exfiltration in a 10GB PCAP file. Which tshark command is most effective?",
      "options": [
        "tshark -r capture.pcap -q -z io,phs",
        "tshark -r capture.pcap -Y 'http.request.method == \"POST\" && http.content_length > 1000000' -T fields -e ip.dst -e http.content_length",
        "tshark -r capture.pcap -Y 'tcp.port == 443'",
        "tshark -r capture.pcap -Y 'ip.dst != 10.0.0.0/8'"
      ],
      "correct_answer": 1,
      "explanation": "Option B specifically filters for large HTTP POST requests (>1MB), which are strong indicators of data exfiltration, and extracts the destination IP and upload size for analysis. Option A shows protocol hierarchy (too broad). Option C shows all HTTPS (too much noise). Option D shows external traffic (too broad). Focus on large uploads for exfiltration detection.",
      "question_id": "d1b03427-5da5-476b-8318-d15e97c987de",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "While investigating a breach, you notice NTLM authentication traffic (ntlmssp) between multiple workstations, even though your domain uses Kerberos. What attack technique does this suggest?",
      "options": [
        "Golden Ticket attack",
        "Kerberoasting",
        "Pass-the-Hash attack",
        "DCSync attack"
      ],
      "correct_answer": 2,
      "explanation": "Pass-the-Hash (PtH) uses NTLM authentication because the attacker has the NTLM hash but not the plaintext password or Kerberos ticket. In a Kerberos domain, seeing NTLM instead of Kerberos is suspicious. Golden Ticket would still use Kerberos (with forged ticket). Kerberoasting targets Kerberos service tickets. DCSync uses Directory Replication Service (DRS) protocol.",
      "question_id": "03540580-36f8-4426-868c-dc95ea95c313",
      "type": "multiple_choice",
      "difficulty": 2
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "memory_hooks",
    "minimum_effective_dose",
    "teach_like_im_10",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ]
}