{
  "lesson_id": "0ec5538c-11fb-4c20-b9a4-70eff9648001",
  "domain": "pentest",
  "title": "Reconnaissance Techniques",
  "subtitle": "Information gathering - the foundation of successful penetration testing",
  "difficulty": 2,
  "estimated_time": 40,
  "order_index": 2,
  "prerequisites": [
    "pentest_01_methodology_uuid"
  ],
  "concepts": [
    "OSINT",
    "Passive reconnaissance",
    "Active reconnaissance",
    "Subdomain enumeration",
    "Port scanning",
    "Service enumeration"
  ],
  "learning_objectives": [
    "Master passive reconnaissance using OSINT techniques",
    "Learn active reconnaissance methods including scanning and enumeration",
    "Understand the difference between passive and active recon",
    "Extract actionable intelligence for penetration testing"
  ],
  "content_blocks": [
    {
      "block_id": "c01abb79-dbc5-4d93-9d38-a404034db515",
      "type": "mindset_coach",
      "title": "The Art of Information Gathering",
      "content": {
        "text": "**\"Give me six hours to chop down a tree and I will spend the first four sharpening the axe.\"** - Abraham Lincoln\n\nIn penetration testing, reconnaissance IS sharpening the axe.\n\n**Here's the truth**: Most penetration tests are won or lost during reconnaissance. The attacker who knows more about the target has the advantage. The pentester who thoroughly reconnoiters discovers vulnerabilities others miss.\n\n**Professional pentesters spend 40-60% of their time on reconnaissance.** Not exploiting. Not reporting. Gathering intelligence.\n\nWhy? Because:\n- You can't attack what you don't know exists\n- Hidden subdomains often have weaker security\n- Exposed information reveals attack vectors\n- Employee details enable social engineering\n- Technology stacks guide exploit selection\n\n**Real example**: In 2019, a bug bounty hunter found Capital One's AWS misconfiguration by discovering an exposed `.git` folder through subdomain enumeration. The breach exposed 100 million customer records. The vulnerability wasn't sophisticated - it was **findable through thorough reconnaissance**.\n\n**Jim Kwik principle**: ACTIVE LEARNING through hands-on examples. You won't just read about reconnaissance - you'll see actual commands, tools, and techniques used by professional pentesters.\n\n**Your goal**: Master both passive (stealthy, undetectable) and active (direct, faster) reconnaissance to map your target's attack surface completely."
      }
    },
    {
      "block_id": "e696653f-2094-42c6-8d0d-30ec9dab959a",
      "type": "explanation",
      "title": "Reconnaissance Overview: Passive vs Active",
      "content": {
        "text": "**Reconnaissance** = Information gathering about the target\n\n## Two Types of Reconnaissance\n\n### Passive Reconnaissance\n\n**Definition**: Gathering information WITHOUT directly interacting with the target\n\n**Characteristics**:\n- ✅ **Stealthy**: Target has no idea you're investigating\n- ✅ **Legal**: Using publicly available information\n- ✅ **Safe**: No risk of detection or triggering alerts\n- ❌ **Slower**: Takes more time to gather information\n- ❌ **Less complete**: May miss non-public assets\n\n**Examples**:\n- Google dorking\n- WHOIS lookups\n- DNS records (via third-party services)\n- Social media research\n- Job postings analysis\n- Public documents (PDFs, presentations)\n- Wayback Machine\n- Certificate transparency logs\n\n**Analogy**: Like researching a company using only their website, social media, and news articles - never calling them or visiting in person.\n\n### Active Reconnaissance\n\n**Definition**: Gathering information BY directly interacting with the target\n\n**Characteristics**:\n- ✅ **Fast**: Quick, direct information gathering\n- ✅ **Complete**: Finds all live assets\n- ✅ **Accurate**: Current, real-time information\n- ❌ **Detectable**: Target may log your activity\n- ❌ **Legal risk**: May trigger IDS/IPS, violate laws if unauthorized\n\n**Examples**:\n- Port scanning (Nmap)\n- Subdomain brute-forcing\n- DNS zone transfers\n- Banner grabbing\n- Web application crawling\n- Network mapping\n- Vulnerability scanning\n\n**Analogy**: Like calling the company, visiting their office, testing door locks - they know someone is investigating.\n\n## When to Use Each\n\n**Passive first, active second**:\n\n```\n[Passive Recon] → Build target list\n      ↓\n[Active Recon] → Verify and enumerate\n      ↓\n[Vulnerability Assessment] → Find weaknesses\n      ↓\n[Exploitation] → Gain access\n```\n\n**Why this order?**\n1. Passive recon gives you targets without alerting anyone\n2. Active recon confirms what's live and gathers details\n3. This maximizes information while minimizing detection risk\n\n## Legal Considerations\n\n**CRITICAL**: Always get written authorization before active reconnaissance!\n\n**Passive recon**: Generally legal (public information)\n**Active recon**: Requires authorization (may be illegal without permission)\n\n**Authorization should specify**:\n- Scope (which IP ranges, domains)\n- Allowed techniques\n- Time windows\n- Prohibited actions\n- Emergency contacts\n\n**Never scan without authorization** - even port scanning can be illegal in some jurisdictions!"
      }
    },
    {
      "block_id": "f9bedaa6-36e3-485f-a860-75820e5147a4",
      "type": "explanation",
      "title": "Passive Reconnaissance: OSINT Techniques",
      "content": {
        "text": "**OSINT** = Open Source Intelligence (publicly available information)\n\n## 1. Google Dorking\n\n**Google dorking** = Using advanced search operators to find sensitive information\n\n**Powerful operators**:\n\n```\nsite:         Search specific domain\nfiletype:     Search specific file types\nintitle:      Search page titles\ninurl:        Search URLs\nintext:       Search page content\ncache:        View cached version\nlink:         Find pages linking to URL\n-             Exclude term\n\"\"            Exact phrase\n*             Wildcard\n```\n\n**Examples**:\n\n**Find subdomains**:\n```\nsite:example.com -www\n```\n\n**Find login pages**:\n```\nsite:example.com inurl:login\nsite:example.com intitle:\"admin login\"\n```\n\n**Find exposed files**:\n```\nsite:example.com filetype:pdf\nsite:example.com filetype:xlsx \"confidential\"\nsite:example.com ext:sql | ext:db\n```\n\n**Find exposed directories**:\n```\nsite:example.com intitle:\"index of\"\nsite:example.com intitle:\"index of\" \"parent directory\"\n```\n\n**Find credentials**:\n```\nsite:example.com intext:\"password\" filetype:log\nsite:example.com \"api_key\" | \"apikey\" | \"api-key\"\n```\n\n**Find server information**:\n```\nsite:example.com intext:\"Apache/2.4\"\nsite:example.com intitle:\"test\" | intitle:\"demo\"\n```\n\n**GitHub dorking** (exposed secrets):\n```\nsite:github.com \"example.com\" \"password\"\nsite:github.com \"example.com\" \"api_key\"\nsite:github.com \"example.com\" extension:env\n```\n\n## 2. WHOIS Lookup\n\n**WHOIS** = Domain registration information\n\n**Command**:\n```bash\nwhois example.com\n```\n\n**Information revealed**:\n- Registrant name, organization\n- Admin contact (email, phone)\n- Technical contact\n- Registration date\n- Expiration date\n- Name servers\n- Registrar\n\n**Example output**:\n```\nDomain Name: EXAMPLE.COM\nRegistrant Organization: Example Corp\nAdmin Email: admin@example.com\nName Server: ns1.example.com\nName Server: ns2.example.com\nCreation Date: 2020-01-15\n```\n\n**What to do with this**:\n- Admin email → Social engineering target\n- Name servers → DNS enumeration targets\n- Organization → Search for related domains\n- Creation date → Identify new vs established domains\n\n**Privacy protection**: Many domains use WHOIS privacy to hide details\n\n## 3. DNS Reconnaissance\n\n**DNS records reveal infrastructure**\n\n**Record types**:\n\n**A records** (IPv4 addresses):\n```bash\ndig example.com A\nhost example.com\n```\n\n**AAAA records** (IPv6 addresses):\n```bash\ndig example.com AAAA\n```\n\n**MX records** (mail servers):\n```bash\ndig example.com MX\n# Output: example.com.  3600  IN  MX  10 mail.example.com.\n```\n\n**TXT records** (SPF, DKIM, verification):\n```bash\ndig example.com TXT\n# May reveal:\n# - SPF records (authorized mail servers)\n# - Domain verification tokens\n# - Configuration information\n```\n\n**NS records** (name servers):\n```bash\ndig example.com NS\n```\n\n**Reverse DNS** (IP to domain):\n```bash\ndig -x 192.168.1.100\n```\n\n## 4. Subdomain Enumeration (Passive)\n\n**Why subdomains matter**: Often less secured than main domain\n\n**Certificate Transparency Logs**:\n\nSSL certificates are publicly logged. Search them for subdomains:\n\n**crt.sh**:\n```\nhttps://crt.sh/?q=%25.example.com\n```\n\n**Output**:\n```\nwww.example.com\nmail.example.com\ndev.example.com\nadmin.example.com\nstaging.example.com\n```\n\n**Sublist3r** (automated tool):\n```bash\npython sublist3r.py -d example.com\n```\n\n**Amass** (comprehensive subdomain enumeration):\n```bash\namass enum -passive -d example.com\n```\n\n**Sources used**:\n- Certificate transparency\n- DNS databases\n- Search engines\n- Web scraping\n- APIs (VirusTotal, SecurityTrails)\n\n## 5. Social Media Intelligence\n\n**Employees reveal sensitive information**\n\n**LinkedIn**:\n- Search: `site:linkedin.com \"Example Corp\"`\n- Find employees by title\n- Identify technologies (\"skilled in: Python, AWS, Docker\")\n- Discover organizational structure\n- Find recently joined (onboarding = weaker security awareness)\n\n**Twitter/X**:\n- Employees discussing work\n- Conference presentations\n- Technology complaints/praise\n- Office photos (badge designs, security controls visible)\n\n**GitHub**:\n- Employee accounts\n- Company repositories\n- Commits revealing internal tools\n- Accidentally committed secrets\n\n**Example findings**:\n```\nLinkedIn: \"DevOps Engineer at Example Corp\"\n- Skills: Jenkins, Kubernetes, AWS\n- Insight: They use AWS, likely have Jenkins server\n\nGitHub: Employee commits to internal projects\n- Commit message: \"Fixed production database connection\"\n- File: config.py with DB hostname \"prod-db.internal.example.com\"\n- Insight: Internal subdomain discovered!\n```\n\n## 6. Wayback Machine\n\n**Archive.org Wayback Machine** = Historical snapshots of websites\n\n**Usage**:\n```\nhttps://web.archive.org/web/*/example.com\n```\n\n**What to find**:\n- Old pages (removed but still valuable)\n- Exposed directories\n- Previous vulnerabilities\n- Employee names in old pages\n- Old API endpoints\n- Forgotten admin panels\n\n**Example**:\n```\n2019 snapshot shows:\nhttps://example.com/admin/dashboard\n\nCurrent site: /admin/dashboard removed\n\nTry accessing: Maybe still exists but unlinked!\n```\n\n## 7. Shodan (IoT Search Engine)\n\n**Shodan** = Search engine for Internet-connected devices\n\n**Search examples**:\n\n**Find company assets**:\n```\norg:\"Example Corp\"\nssl:\"example.com\"\n```\n\n**Find specific services**:\n```\nport:3389 country:US org:\"Example Corp\"  (RDP servers)\nport:22 org:\"Example Corp\"                (SSH servers)\nport:27017 org:\"Example Corp\"             (MongoDB)\n```\n\n**Find webcams, IoT devices**:\n```\nwebcam country:US\ntitle:\"Dashboard\" port:80\n```\n\n**Output reveals**:\n- IP addresses\n- Open ports\n- Service banners\n- Geolocation\n- OS/software versions\n\n## 8. Email Harvesting\n\n**Finding email addresses** for social engineering\n\n**Tools**:\n\n**Hunter.io**:\n```\nhttps://hunter.io/search/example.com\n# Finds: john.doe@example.com, jane.smith@example.com\n```\n\n**theHarvester**:\n```bash\ntheharvester -d example.com -b all\n# Sources: Google, Bing, LinkedIn, Twitter\n```\n\n**Email format detection**:\n```\nfirst.last@example.com\nfirstlast@example.com\nf.last@example.com\n```\n\n**Verification** (check if email exists):\n```bash\n# SMTP verification\ntelnet mail.example.com 25\nVRFY john.doe@example.com\n```\n\n## OSINT Frameworks and Tools\n\n**Maltego** (visual OSINT):\n- Graphical link analysis\n- Connects domains, IPs, emails, people\n- Transform Hub with 100+ data sources\n\n**Recon-ng** (modular framework):\n```bash\nrecon-ng\n[recon-ng] > workspaces create example_corp\n[recon-ng] > modules load recon/domains-hosts/google_site_web\n[recon-ng] > options set SOURCE example.com\n[recon-ng] > run\n```\n\n**SpiderFoot** (automated OSINT):\n```bash\nspiderfoot -s example.com\n# Runs 200+ modules automatically\n```\n\n## Memory Aid: OSINT Sources\n\n**\"GWDS SHEW\"** (Google, WHOIS, DNS, Subdomains, Shodan, Hunter, Email, Wayback):\n\n- **G**oogle dorking\n- **W**HOIS\n- **D**NS records\n- **S**ubdomains (crt.sh)\n- **S**hodan\n- **H**unter.io\n- **E**mail harvesting\n- **W**ayback Machine"
      }
    },
    {
      "block_id": "b11ae2c8-69e9-4c64-9d85-fa6d4f1ab60c",
      "type": "explanation",
      "title": "Active Reconnaissance: Scanning and Enumeration",
      "content": {
        "text": "**Active recon directly interacts with target systems**\n\n**REMINDER**: Only perform active recon with written authorization!\n\n## 1. Port Scanning with Nmap\n\n**Nmap** = Network Mapper (industry-standard port scanner)\n\n### Basic Scans\n\n**Default scan** (1000 most common ports):\n```bash\nnmap 192.168.1.100\n```\n\n**All ports** (1-65535):\n```bash\nnmap -p- 192.168.1.100\n```\n\n**Specific ports**:\n```bash\nnmap -p 80,443,8080 192.168.1.100\nnmap -p 1-100 192.168.1.100\n```\n\n**Fast scan** (top 100 ports):\n```bash\nnmap -F 192.168.1.100\n```\n\n### Scan Types\n\n**TCP Connect scan** (full three-way handshake):\n```bash\nnmap -sT 192.168.1.100\n# Noisiest, easiest to detect\n# But works without root privileges\n```\n\n**SYN scan** (stealth scan, half-open):\n```bash\nsudo nmap -sS 192.168.1.100\n# Stealthier, requires root\n# Sends SYN, receives SYN-ACK, sends RST (doesn't complete handshake)\n```\n\n**UDP scan**:\n```bash\nsudo nmap -sU 192.168.1.100\n# Slow but important (DNS, SNMP, DHCP use UDP)\n```\n\n**Version detection** (-sV):\n```bash\nnmap -sV 192.168.1.100\n```\n\n**Output**:\n```\nPORT    STATE SERVICE  VERSION\n22/tcp  open  ssh      OpenSSH 7.9p1 Ubuntu\n80/tcp  open  http     Apache httpd 2.4.41\n3306/tcp open mysql    MySQL 5.7.33\n```\n\n**OS detection** (-O):\n```bash\nsudo nmap -O 192.168.1.100\n```\n\n**Aggressive scan** (-A = version + OS + scripts + traceroute):\n```bash\nsudo nmap -A 192.168.1.100\n```\n\n### Nmap Scripts (NSE)\n\n**Nmap Scripting Engine** = 600+ scripts for enumeration\n\n**Default scripts**:\n```bash\nnmap -sC 192.168.1.100\n# Runs default safe scripts\n```\n\n**Specific script**:\n```bash\nnmap --script http-title 192.168.1.100\nnmap --script smb-os-discovery 192.168.1.100\n```\n\n**Vulnerability scan**:\n```bash\nnmap --script vuln 192.168.1.100\n```\n\n**SMB enumeration**:\n```bash\nnmap --script smb-enum-shares,smb-enum-users 192.168.1.100\n```\n\n### Timing and Stealth\n\n**Timing templates** (-T0 to -T5):\n```bash\nnmap -T0 192.168.1.100  # Paranoid (slowest, stealthiest)\nnmap -T1 192.168.1.100  # Sneaky\nnmap -T2 192.168.1.100  # Polite\nnmap -T3 192.168.1.100  # Normal (default)\nnmap -T4 192.168.1.100  # Aggressive (faster)\nnmap -T5 192.168.1.100  # Insane (fastest, noisiest)\n```\n\n**Decoy scanning** (hide among fake IPs):\n```bash\nnmap -D RND:10 192.168.1.100\n# Sends scans from 10 random decoy IPs + your real IP\n```\n\n### Output Options\n\n**Save results**:\n```bash\nnmap -oN output.txt 192.168.1.100    # Normal\nnmap -oX output.xml 192.168.1.100    # XML\nnmap -oG output.gnmap 192.168.1.100  # Greppable\nnmap -oA output 192.168.1.100        # All formats\n```\n\n### Common Nmap Commands\n\n**Quick scan**:\n```bash\nnmap -sV -sC -O -T4 192.168.1.100\n```\n\n**Comprehensive scan**:\n```bash\nsudo nmap -sS -sV -sC -O -p- -T4 -oA full_scan 192.168.1.100\n```\n\n**Network sweep** (find live hosts):\n```bash\nnmap -sn 192.168.1.0/24\n# Ping scan, no port scan\n```\n\n## 2. Subdomain Brute-Forcing (Active)\n\n**Passive recon found some subdomains. Active recon finds more.**\n\n**DNS brute-forcing**:\n\n**dnsrecon**:\n```bash\ndnsrecon -d example.com -t brt -D /usr/share/wordlists/subdomains.txt\n```\n\n**gobuster** (DNS mode):\n```bash\ngobuster dns -d example.com -w /usr/share/wordlists/subdomains.txt\n```\n\n**ffuf**:\n```bash\nffuf -u https://FUZZ.example.com -w subdomains.txt -mc 200\n```\n\n**Common subdomain wordlist**:\n```\nwww\nmail\nftp\nadmin\ndev\nstaging\ntest\napi\napp\nportal\nvpn\nremote\n```\n\n## 3. Service Enumeration\n\n**Once ports are found, enumerate services**\n\n### HTTP/HTTPS Enumeration\n\n**Whatweb** (identify technologies):\n```bash\nwhatweb https://example.com\n```\n\n**Output**:\n```\nApache[2.4.41], PHP[7.4.3], jQuery[3.5.1], Bootstrap[4.5.0]\n```\n\n**Directory brute-forcing** (gobuster):\n```bash\ngobuster dir -u https://example.com -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n```\n\n**Output**:\n```\n/admin     (Status: 200)\n/login     (Status: 200)\n/api       (Status: 403)\n/backup    (Status: 301)\n```\n\n**Nikto** (web vulnerability scanner):\n```bash\nnikto -h https://example.com\n```\n\n### SMB Enumeration (Windows)\n\n**enum4linux**:\n```bash\nenum4linux -a 192.168.1.100\n# Enumerates:\n# - Users\n# - Shares\n# - Groups\n# - Password policy\n```\n\n**smbclient** (list shares):\n```bash\nsmbclient -L //192.168.1.100 -N\n```\n\n**smbmap**:\n```bash\nsmbmap -H 192.168.1.100\n```\n\n### SNMP Enumeration\n\n**snmpwalk** (enumerate SNMP):\n```bash\nsnmpwalk -v 2c -c public 192.168.1.100\n# -c public = community string (default)\n```\n\n**onesixtyone** (brute-force community strings):\n```bash\nonesixtyone -c community_strings.txt 192.168.1.100\n```\n\n### DNS Zone Transfer (Attack)\n\n**If misconfigured, DNS server reveals all records**:\n\n```bash\ndig axfr @ns1.example.com example.com\nhost -l example.com ns1.example.com\n```\n\n**If successful**:\n```\nexample.com.    86400   IN  A       192.168.1.1\nwww.example.com. 86400  IN  A       192.168.1.10\nmail.example.com. 86400 IN  A       192.168.1.20\nadmin.example.com. 86400 IN A       192.168.1.30\n^ Full DNS zone revealed!\n```\n\n## 4. Banner Grabbing\n\n**Banners reveal service versions**\n\n**Netcat**:\n```bash\nnc 192.168.1.100 80\nGET / HTTP/1.1\nHost: example.com\n\n# Response:\nHTTP/1.1 200 OK\nServer: Apache/2.4.41 (Ubuntu)\n```\n\n**Telnet**:\n```bash\ntelnet 192.168.1.100 25\n# Response:\n220 mail.example.com ESMTP Postfix (Ubuntu)\n```\n\n**cURL** (HTTP):\n```bash\ncurl -I https://example.com\n# Shows headers including server version\n```\n\n## 5. Web Application Mapping\n\n**Spider/crawl the website**\n\n**Burp Suite Spider**:\n1. Configure browser proxy (127.0.0.1:8080)\n2. Browse target site\n3. Burp captures all requests\n4. Spider discovers all pages/endpoints\n\n**gospider**:\n```bash\ngospider -s https://example.com -c 10 -d 3\n```\n\n**hakrawler**:\n```bash\necho \"https://example.com\" | hakrawler\n```\n\n## Active Recon Workflow\n\n**Complete workflow**:\n\n```bash\n# 1. Find live hosts\nnmap -sn 192.168.1.0/24 -oG live_hosts.txt\n\n# 2. Port scan live hosts\nnmap -sS -sV -p- -T4 -iL live_hosts.txt -oA port_scan\n\n# 3. Enumerate services\n## Web servers found on port 80/443\ngobuster dir -u http://192.168.1.10 -w wordlist.txt\n\n## SMB found on port 445\nenum4linux -a 192.168.1.20\n\n## SSH found on port 22 (version reveals Ubuntu)\nssh 192.168.1.30 -V\n\n# 4. Subdomain enumeration\ngobuster dns -d example.com -w subdomains.txt\n\n# 5. Compile findings\ncat findings.txt\n192.168.1.10:80  - Apache 2.4.41, /admin accessible\n192.168.1.20:445 - Windows Server 2019, SMB guest access enabled\n192.168.1.30:22  - OpenSSH 7.9, weak ciphers enabled\n```"
      }
    },
    {
      "block_id": "b19d293a-91ad-4bbf-8481-e31314c69967",
      "type": "memory_aid",
      "title": "Reconnaissance Memory Aids",
      "content": {
        "text": "## Passive vs Active\n\n**\"PASSED FAST\"**:\n\n**PASSIVE** = **P**ublic, **A**nonymous, **S**tealthy, **S**afe, **E**xternal, **D**iscovery\n**ACTIVE** = **F**ast, **A**ccurate, **S**cannable, **T**raceable\n\n## OSINT Sources\n\n**\"GWDS SHEW\"**:\n- **G**oogle\n- **W**HOIS\n- **D**NS\n- **S**ubdomains (crt.sh)\n- **S**hodan\n- **H**unter.io\n- **E**mail\n- **W**ayback Machine\n\n## Nmap Scan Types\n\n**\"TCP SYN UDP Version OS Scripts\"**:\n```bash\n-sT  # TCP connect\n-sS  # SYN (stealth)\n-sU  # UDP\n-sV  # Version detection\n-O   # OS detection\n-sC  # Scripts (default)\n```\n\n## Google Dork Operators\n\n**\"SIFT LIC\"** (Site, Inurl, Filetype, intitle, Link, Intext, Cache):\n- **S**ite: domain\n- **I**nurl: path\n- **F**iletype: extension\n- **T**itle: page title\n- **L**ink: backlinks\n- **I**ntext: content\n- **C**ache: archived\n\n## Enumeration Tools\n\n**\"NEWS GE\"** (Nmap, Enum4linux, Whatweb, Sublist3r, Gobuster, Eyewitness):\n- **N**map (ports)\n- **E**num4linux (SMB)\n- **W**hatweb (web tech)\n- **S**ublist3r (subdomains)\n- **G**obuster (directories)\n- **E**yewitness (screenshots)\n\n## Reconnaissance Workflow\n\n**\"PFSE\"** (Passive, Find hosts, Scan, Enumerate):\n\n1. **P**assive (OSINT, Google, WHOIS, DNS, subdomains)\n2. **F**ind hosts (ping sweep, Nmap -sn)\n3. **S**can (port scan, Nmap -sV)\n4. **E**numerate (service-specific tools)\n\n## Port Numbers to Remember\n\n**Common services**:\n```\n20/21   - FTP\n22      - SSH\n23      - Telnet\n25      - SMTP (mail)\n53      - DNS\n80      - HTTP\n110     - POP3\n143     - IMAP\n443     - HTTPS\n445     - SMB\n3306    - MySQL\n3389    - RDP\n5432    - PostgreSQL\n8080    - HTTP alternate\n```\n\n**Memory aid**: \"**FTP SSH** at 20-22, **Telnet SMTP** at 23-25, **HTTP HTTPS** at 80-443, **SMB RDP** at 445-3389\"\n\n## Stealth Levels\n\n**Nmap timing** (-T0 to -T5):\n\n**\"People Should Politely Navigate Arriving Immediately\"**:\n- -T0: **P**aranoid\n- -T1: **S**neaky\n- -T2: **P**olite\n- -T3: **N**ormal\n- -T4: **A**ggressive\n- -T5: **I**nsane"
      }
    },
    {
      "block_id": "8b181d4b-84f5-4ac5-b743-254a0730df28",
      "type": "explanation",
      "title": "Key Takeaways and Next Steps",
      "content": {
        "text": "## What You've Learned\n\n✅ **Passive reconnaissance uses public information** without touching the target (Google, WHOIS, DNS, Shodan)\n\n✅ **Active reconnaissance directly interacts** with target systems (Nmap, subdomain brute-force, service enumeration)\n\n✅ **Always start passive, then move to active** - maximize information, minimize detection\n\n✅ **Google dorking is surprisingly powerful** - find login pages, exposed files, credentials, infrastructure\n\n✅ **Nmap is the essential tool** for port scanning, version detection, OS fingerprinting\n\n✅ **Subdomains are gold** - often weaker security than main domain, use crt.sh and brute-forcing\n\n✅ **Authorization is mandatory for active recon** - never scan without written permission\n\n## Practical Next Steps\n\n**1. Set up your recon toolkit**\n\n```bash\n# Install essential tools\nsudo apt-get install nmap gobuster enum4linux nikto\n\n# Install Python tools\npip install theHarvester sublist3r\n\n# Download wordlists\nsudo apt-get install seclists\n# Location: /usr/share/seclists/\n```\n\n**2. Practice on authorized targets**\n\n**Legal practice targets**:\n- **HackTheBox**: https://www.hackthebox.com/\n- **TryHackMe**: https://tryhackme.com/\n- **VulnHub**: https://www.vulnhub.com/\n- **OWASP Juice Shop**: https://owasp.org/www-project-juice-shop/\n\n**Your own lab**:\n- Set up VMs in VirtualBox\n- Create test network\n- Practice scanning your own systems\n\n**3. Complete reconnaissance on a target**\n\n**Exercise: Recon HackTheBox machine**\n\n**Passive phase**:\n```bash\n# Google dorking\nsite:hackthebox.com\n\n# WHOIS\nwhois hackthebox.com\n\n# DNS\ndig hackthebox.com ANY\n\n# Subdomains\ncurl -s \"https://crt.sh/?q=%25.hackthebox.com&output=json\" | jq\n```\n\n**Active phase** (with authorization):\n```bash\n# Ping sweep\nnmap -sn 10.10.10.0/24\n\n# Port scan\nsudo nmap -sS -sV -sC -p- -T4 10.10.10.10 -oA recon_results\n\n# Web enumeration\ngobuster dir -u http://10.10.10.10 -w /usr/share/seclists/Discovery/Web-Content/common.txt\n\n# If SMB found\nenum4linux -a 10.10.10.10\n```\n\n**Document findings**:\n```\nHost: 10.10.10.10\nOpen Ports:\n- 22/tcp  SSH (OpenSSH 7.9)\n- 80/tcp  HTTP (Apache 2.4.41)\n- 445/tcp SMB (Samba 4.10.2)\n\nWeb Directories:\n- /admin (403 Forbidden)\n- /backup (200 OK)\n- /api (200 OK)\n\nSMB Shares:\n- IPC$ (accessible)\n- backups (accessible, contains files)\n\nNext Steps:\n- Enumerate /backup directory\n- Download files from SMB share\n- Test /api endpoints\n```\n\n**4. Build your OSINT workflow**\n\n**Template checklist**:\n```\n☐ Google: site:target.com\n☐ Google: site:target.com filetype:pdf\n☐ Google: site:github.com \"target.com\"\n☐ WHOIS: whois target.com\n☐ DNS: dig target.com ANY\n☐ Subdomains: crt.sh query\n☐ Shodan: org:\"Target Corp\"\n☐ Email: theHarvester -d target.com\n☐ LinkedIn: Search employees\n☐ Wayback: web.archive.org/web/*/target.com\n```\n\n**5. Learn advanced Nmap techniques**\n\n**Evasion techniques**:\n```bash\n# Fragment packets\nnmap -f 192.168.1.100\n\n# Use decoys\nnmap -D RND:10 192.168.1.100\n\n# Spoof source\nsudo nmap -S 192.168.1.200 192.168.1.100\n\n# Randomize hosts\nnmap --randomize-hosts 192.168.1.0/24\n```\n\n**Script scanning**:\n```bash\n# List available scripts\nls /usr/share/nmap/scripts/ | grep http\n\n# Run specific script\nnmap --script http-vuln-cve2017-5638 192.168.1.100\n\n# Run multiple scripts\nnmap --script \"http-*\" 192.168.1.100\n```\n\n**6. Automate reconnaissance**\n\n**Create recon script**:\n```bash\n#!/bin/bash\n# recon.sh - Automated reconnaissance\n\nTARGET=$1\nOUTPUT=\"recon_${TARGET}\"\n\necho \"[+] Starting reconnaissance on $TARGET\"\n\n# Passive\necho \"[+] WHOIS lookup\"\nwhois $TARGET > ${OUTPUT}_whois.txt\n\necho \"[+] DNS enumeration\"\ndig $TARGET ANY > ${OUTPUT}_dns.txt\n\necho \"[+] Subdomain enumeration\"\nsublist3r -d $TARGET -o ${OUTPUT}_subdomains.txt\n\n# Active (if authorized)\necho \"[+] Port scanning\"\nnmap -sS -sV -p- $TARGET -oA ${OUTPUT}_nmap\n\necho \"[+] Web enumeration\"\ngobuster dir -u https://$TARGET -w /usr/share/seclists/Discovery/Web-Content/common.txt -o ${OUTPUT}_gobuster.txt\n\necho \"[+] Reconnaissance complete. Results in ${OUTPUT}_*\"\n```\n\n**Usage**:\n```bash\nchmod +x recon.sh\n./recon.sh example.com\n```\n\n## Real-World Application\n\n**Scenario: Pentesting engagement begins**\n\n**Client**: \"We want you to pentest our web application at app.example.com\"\n\n**Your reconnaissance**:\n\n```bash\n# Day 1: Passive\n## Google dorking\nsite:example.com inurl:admin\nsite:github.com \"example.com\" \"password\"\n\n## Found:\n- GitHub repo with old credentials\n- dev.example.com subdomain mentioned\n- PDF with network diagram\n\n## Subdomains\ncurl -s \"https://crt.sh/?q=%25.example.com&output=json\" | jq -r '.[].name_value' | sort -u\n\n## Found:\n- app.example.com (in scope)\n- dev.example.com (not in scope, ask client)\n- admin.example.com (interesting!)\n- api.example.com (API endpoint)\n\n# Day 2: Active (with authorization)\n## Port scan\nsudo nmap -sS -sV -sC -p- app.example.com -oA app_scan\n\n## Found:\n- 22: SSH (OpenSSH 8.2)\n- 80: HTTP → Redirects to 443\n- 443: HTTPS (Nginx 1.18, Node.js backend)\n- 3000: Node.js (development server - shouldn't be exposed!)\n\n## Web enumeration\ngobuster dir -u https://app.example.com -w wordlist.txt\n\n## Found:\n- /api/v1 (API documentation)\n- /admin (redirects to login)\n- /.git (EXPOSED! Can download entire repo)\n\n# Findings report\n1. Port 3000 exposed (development server)\n2. .git directory exposed (source code leak)\n3. dev.example.com subdomain (out of scope but exists)\n4. admin.example.com (potential additional attack surface)\n\n# Next steps:\n- Download .git directory\n- Enumerate API endpoints\n- Test authentication on /admin\n- Request dev.example.com be added to scope\n```\n\n**Impact**: Reconnaissance revealed exposed development server and source code leak before any exploitation attempts.\n\n## Words of Encouragement\n\nReconnaissance feels like detective work - because IT IS.\n\nEvery Google search, every subdomain discovered, every port scan reveals a piece of the puzzle. The pentester who reconnoiters thoroughly finds vulnerabilities others miss.\n\n**Start simple**:\n- Google dork a target\n- Run one Nmap scan\n- Enumerate one service\n\n**Each discovery leads to the next**. A subdomain leads to a login page. A version number leads to an exploit. An email address leads to a successful phish.\n\n**Professional pentesters spend MOST of their time on reconnaissance** - not because they're slow, but because they're thorough.\n\n**Master reconnaissance, and exploitation becomes easy.**\n\n**Welcome to reconnaissance. Now go map some attack surfaces.**"
      }
    },
    {
      "type": "video",
      "title": "Video Tutorial: Reconnaissance in Pentesting",
      "content": {
        "resources": "Watch this comprehensive video tutorial to reinforce your learning with visual demonstrations and practical examples.\n\n**Video**: [Reconnaissance Techniques by IppSec](https://www.youtube.com/watch?v=q9_qmHlGCNo)\n\n**What you'll see:**\nPassive and active reconnaissance, OSINT, subdomain enumeration, port scanning, and service enumeration.\n\n**Duration**: ~25 minutes\n\n**Recommended viewing**: After completing the lesson to solidify understanding.\n\n**Additional Resources:**\n- [OSINT Framework](https://osintframework.com/)\n- [Nmap Official Guide](https://nmap.org/book/toc.html)\n- [Amass Subdomain Enumeration](https://github.com/OWASP/Amass)"
      }
    }
  ],
  "post_assessment": [
    {
      "question_id": "q1",
      "type": "multiple_choice",
      "question": "What is the key difference between passive and active reconnaissance?",
      "options": [
        "Passive is slower, active is faster",
        "Passive uses publicly available information without touching the target, active directly interacts with target systems",
        "Passive is legal, active is illegal",
        "Passive finds more information than active"
      ],
      "correct_answer": 1,
      "explanation": "Passive reconnaissance gathers information from public sources (Google, WHOIS, DNS databases) without directly interacting with the target, making it undetectable. Active reconnaissance directly interacts with target systems (port scanning, brute-forcing) making it detectable but faster and more complete.",
      "difficulty": 2
    },
    {
      "question_id": "q2",
      "type": "multiple_choice",
      "question": "Which Google dork would find login pages on example.com?",
      "options": [
        "site:example.com login",
        "site:example.com inurl:login",
        "site:example.com filetype:login",
        "site:example.com -www login"
      ],
      "correct_answer": 1,
      "explanation": "site:example.com inurl:login searches for pages where 'login' appears in the URL on example.com. This is more specific than just searching for the word 'login' anywhere on the site.",
      "difficulty": 2
    },
    {
      "question_id": "q3",
      "type": "multiple_choice",
      "question": "What Nmap command performs a SYN stealth scan with version detection on all ports?",
      "options": [
        "nmap -sT -sV -p- target.com",
        "nmap -sS -sV -p- target.com",
        "nmap -sU -sV -p- target.com",
        "nmap -sA -sV -p- target.com"
      ],
      "correct_answer": 1,
      "explanation": "-sS performs SYN stealth scan (half-open, stealthier than full TCP connect), -sV enables version detection, and -p- scans all 65,535 ports. This requires root/sudo privileges.",
      "difficulty": 2
    },
    {
      "question_id": "q4",
      "type": "multiple_choice",
      "question": "Where can you passively find subdomains using SSL certificate transparency logs?",
      "options": [
        "shodan.io",
        "crt.sh",
        "virustotal.com",
        "whois.com"
      ],
      "correct_answer": 1,
      "explanation": "crt.sh searches Certificate Transparency logs, which publicly record all SSL certificates issued. Since certificates list domains/subdomains, you can query crt.sh with %.example.com to find all subdomains passively without touching the target.",
      "difficulty": 2
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "minimum_effective_dose",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ]
}