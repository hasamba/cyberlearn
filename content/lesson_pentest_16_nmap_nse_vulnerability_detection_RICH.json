{
  "lesson_id": "3e58ac6c-7e4b-44a8-b8f1-9381238bf644",
  "domain": "pentest",
  "title": "Nmap Scripting Engine (NSE) for Vulnerability Detection",
  "difficulty": 2,
  "order_index": 16,
  "prerequisites": [],
  "concepts": [
    "NSE script categories",
    "vulnerability detection scripts",
    "custom NSE script development",
    "authentication bypass scripts",
    "service-specific enumeration",
    "script optimization",
    "chaining scripts",
    "output parsing"
  ],
  "estimated_time": 55,
  "learning_objectives": [
    "Describe NSE architecture and script categories relevant to vulnerability discovery",
    "Execute and optimize built-in NSE scripts for authentication and exploitation reconnaissance",
    "Develop custom NSE scripts to automate service-specific checks",
    "Integrate NSE output into broader pentest workflows for analysis and reporting"
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "connect_to_what_i_know",
    "minimum_effective_dose",
    "meta_learning",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "block_id": "990ae4ca-eff9-46a3-b38a-6fd4bd605b6b",
      "type": "mindset_coach",
      "content": {
        "text": "Nmap's Scripting Engine (NSE) is where reconnaissance turns into bespoke vulnerability hunting. Anyone can run `nmap -sV`. A professional pentester wields NSE like a Swiss Army knife: choosing the right script categories, tuning performance, and chaining outputs into exploit paths. Treat NSE as a programmable ally that extends Nmap beyond port scanning into protocol interrogation, authentication bypass, and even exploitation proof-of-concepts.\n\nApproach NSE with the mindset of an artisan engineer. Each script represents hundreds of hours of research by contributors from companies such as Rapid7, Synack, and independent researchers like Ron Bowes. When you load `ssl-enum-ciphers` or `http-vuln-cve2017-5638`, you are standing on that collective expertise. Respect the craft by understanding what the script actually does: which packets it sends, which responses it parses, and how it judges vulnerability state. That context helps you explain findings to clients and defend the accuracy of your results.\n\nReal pentests are messy. Targets throttle traffic, IDS sensors flag active scripts, and misconfigured services crash under aggressive probes. Your job is to adapt. NSE allows precise control over timing, parallelism, and script arguments so you can operate safely in production environments. When you discover credentials during exploitation, NSE becomes your automation engine to test those credentials against hundreds of hosts quickly—but responsibly.\n\nAdopt a growth mindset. If you have never written Lua before, that's okay. NSE scripts use approachable Lua patterns. Start by tweaking existing scripts, then craft your own service checks. Many of the best scripts—like `http-shellshock` or `smb-vuln-ms17-010`—began as small experiments. Your custom script could be the one that finds the next CVE before it's on the news.\n\nFinally, anchor your motivation in impact. NSE has enabled defenders and testers to uncover critical bugs such as **CVE-2014-6271 (Shellshock)**, **CVE-2015-1635 (HTTP.sys RCE)**, and **CVE-2021-41773 (Apache path traversal)** quickly across large estates. Mastering NSE means you can deliver high-confidence assessments at speed, giving clients actionable intelligence that prevents breaches."
      },
      "simplified_explanation": "NSE lets you program Nmap to do smart vulnerability checks. Learn how each script works so you can trust and explain the results.",
      "memory_aids": [
        "Scripts are research-in-a-box; know their packet logic",
        "Tune performance and scope before unleashing aggressive scripts",
        "Customize Lua when built-in scripts fall short"
      ],
      "teach_like_im_10": "Think of NSE like adding new superpowers to your robot helper. Each script tells the robot how to test a lock or secret door. If you learn the scripts, you can find the weak spots faster."
    },
    {
      "block_id": "e6c41451-e4fb-4249-8c0c-2b2f51638bb7",
      "type": "explanation",
      "content": {
        "text": "### NSE Architecture and Script Categories\n\nNSE runs on top of Nmap's event-driven engine. Scripts are written in Lua and organized into categories that control when they execute and what they target. Understanding the categories keeps your scans purposeful:\n\n- **discovery:** Expands reconnaissance by grabbing banners, enumerating directories, or identifying users. Examples: `dns-brute`, `ftp-anon`, `snmp-info`.\n- **auth:** Attempts authentication using provided credentials or brute force lists. Examples: `http-form-brute`, `ms-sql-brute`.\n- **brute:** Focuses on password guessing with concurrency controls. Includes SMB, RDP, and SSH brute scripts.\n- **default:** Runs with `-sC` and provides lightweight checks like `http-title` or `ssl-cert`.\n- **safe:** Guaranteed not to crash services; good for cautious environments.\n- **intrusive:** May cause disruption. Vulnerability scripts live here, e.g., `http-vuln-cve2017-5638`.\n- **vuln:** Specifically designed to detect known vulnerabilities.\n- **exploit:** Goes beyond detection to attempt exploitation or proof-of-concept validation.\n\nScripts rely on **libraries** located in `scripts/` and `nselib/`. Libraries expose reusable logic for HTTP requests, SMB packets, SSL parsing, or credential storage. The `shortport` library determines which ports a script should run against, while `vulns` standardizes output with CVE references.\n\nExecution flows through **phases**: Nmap loads scripts, sorts them by category, and runs them after port scanning. Each script returns structured output with states such as `VULNERABLE`, `LIKELY VULNERABLE`, or `NOT VULNERABLE`. You can influence runtime with arguments via `--script-args`.\n\nStaying current is essential. Nmap releases script updates frequently. Use `nmap --script-updatedb` after pulling from GitHub or installing new scripts. Review changelogs; when `smb-vuln-cve-2020-0796` (SMBGhost) landed, testers who updated quickly detected the wormable bug across enterprise networks before Microsoft issued out-of-band patches.\n\nPair NSE categories with engagement phases. During external recon, run safe discovery scripts to map attack surface. Once inside the network, switch to `vuln` and `exploit` categories for targeted hosts while monitoring network impact. Document your choices so stakeholders understand risk posture and methodology.\n\n#### Maintaining Script Hygiene\n\nKeep a local Git clone of the official NSE repository (`https://svn.nmap.org/nmap/scripts/`) so you can diff new commits and understand detection logic changes. During high-profile events—such as the release of `CVE-2023-4863` (Chrome WebP heap buffer overflow)—contributors often push interim scripts before the next stable Nmap build. Reviewing commit messages teaches you how seasoned researchers structure categories, `portrule` filters, and `vulns.Report` output. It also alerts you when deprecated scripts move between categories or when dependencies such as `tls.lua` gain new functions that you can reuse in custom work.\n\nDesignate staging environments for experimental scripts. Before running freshly downloaded NSE code in production, execute it against instrumented lab hosts while capturing packets with Wireshark and Zeek. Inspect payload size, sequence, and cleanup behavior. Document any anomalies—like leftover sessions or services that crash when the script mismanages TLS renegotiation—and feed that knowledge back to the team through internal runbooks. This discipline prevents you from triggering SOC alarms during client engagements and builds trust that your methodology is mature."
      }
    },
    {
      "block_id": "87e3b95d-1ab4-4828-9919-fe8b86343598",
      "type": "explanation",
      "content": {
        "text": "### Essential Vulnerability Detection Scripts\n\nNSE ships with a deep catalog of vulnerability scripts covering web, SMB, SSL/TLS, and industrial protocols. Key scripts to master include:\n\n- **`http-vuln-cve2017-5638` (Apache Struts):** Crafts malicious OGNL payloads to test for the RCE exploited in the Equifax breach. Use `--script-args exploit=true` only with permission; by default it performs a safe check.\n- **`ssl-heartbleed` (CVE-2014-0160):** Validates the OpenSSL heartbeat vulnerability and extracts leaked data for proof. Combine with `--script-args vulns.showall` to capture full context.\n- **`smb-vuln-ms17-010` (EternalBlue):** Detects vulnerable SMBv1 servers and enumerates potential targets for MSF exploits. Always validate manually; patched servers with SMBv1 enabled can trigger false positives.\n- **`http-shellshock` (CVE-2014-6271):** Checks CGI endpoints for Shellshock injection by analyzing response headers. Pair with directory brute forcing to find hidden scripts.\n- **`ftp-vsftpd-backdoor` (CVE-2011-2523):** Confirms compromised vsftpd 2.3.4 servers by watching for a reverse shell handshake.\n- **`rdp-vuln-ms12-020` and `rdp-enum-encryption`:** Evaluate RDP pre-auth vulnerabilities and encryption levels.\n- **`http-vuln-cve2021-26855` (ProxyLogon):** Tests Exchange OWA endpoints for SSRF and credential dumping exposure.\n- **`krb5-enum-users` combined with `smb-enum-shares`:** Not strictly vulnerability scripts but essential for chaining attacks like AS-REP roasting.\n\nUse script arguments to customize behavior. For example, `nmap -p 443 --script ssl-enum-ciphers --script-args ssl-enum-ciphers.server=<hostname>` ensures SNI is set correctly for cloud load balancers. When running `http-vuln-cve-2021-41773`, pass `http.useragent` to mimic legitimate traffic and avoid WAF blocks.\n\nPrioritize output hygiene. Use `-oA` to save normal, XML, and grepable output simultaneously. The XML file integrates with **VulnWhisperer**, **Dradis**, or **Faraday** platforms. Filter results with `xsltproc` or `nmap.xsl` to create HTML evidence for reports.\n\nAlways corroborate NSE findings. If `ssl-ccs-injection` flags a vulnerability, capture packet traces with Wireshark or run OpenSSL commands to confirm. Cross-validation builds credibility with clients who may already run Qualys or Tenable.\n\n#### Advanced Usage Patterns\n\nPair discovery and vulnerability scripts to create multi-stage detection pipelines. For example, run `http-headers` and `http-robots.txt` to gather context about security policies, then conditionally trigger `http-vuln-cve2021-41773` only when Apache version strings fall within vulnerable ranges. Use the `--script-args http.pipeline=3` option to maximize throughput against large web farms, but monitor response codes to ensure rate-limiting or WAFs do not block subsequent vulnerability checks.\n\nLeverage authentication-focused scripts to validate password reuse discovered elsewhere in the engagement. After cracking Cisco ASA credentials from VPN config leaks, feed them into `ike-version` and `ssh-brute` with careful throttling to confirm exposure across branch firewalls. Document success rates, lockout thresholds, and anomaly detections triggered in Cisco Secure Firewall Management Center so the client can tune defenses.\n\nIndustrial environments benefit from specialized scripts. Combine `modbus-discover`, `s7-enumerate`, and `enip-enumerate` to map programmable logic controllers, then run custom vulnerability scripts that compare firmware versions against advisories from Siemens, Rockwell Automation, or CISA ICS-CERT. The ability to automate these checks with NSE accelerates assessments for manufacturing clients that operate hundreds of geographically distributed plants."
      }
    },
    {
      "block_id": "6bb1c866-b48c-4c0c-b1a5-fc4c5ba4bfed",
      "type": "explanation",
      "content": {
        "text": "### Building Custom NSE Scripts\n\nWhen built-in scripts fall short, extend NSE with custom Lua. A script consists of three main parts:\n\n1. **`description` and `categories`:** Provide metadata, CVE references, author info, and risk statements.\n2. **`portrule`:** Determines which ports or services trigger the script. Use helpers like `shortport.port_or_service(443, 'https')`.\n3. **`action`:** Implements the logic, returning formatted results.\n\nExample: Suppose you need to detect a custom header-based authentication bypass on an internal GraphQL API discovered during a 2024 engagement. Build a script `http-vuln-graphql-bypass.nse`:\n\n```lua\nlocal shortport = require \"shortport\"\nlocal http = require \"http\"\nlocal vuln = require \"vulns\"\n\ndescription = [[\nChecks for CVE-2024-12345, an authentication bypass in Acme GraphQL Gateway when the X-Internal-Auth header is set.\n]]\n\ncategories = {\"vuln\", \"intrusive\"}\n\nportrule = shortport.port_or_service({80, 443}, {\"http\", \"https\"})\n\naction = function(host, port)\nlocal headers = {['X-Internal-Auth'] = 'true', ['Content-Type'] = 'application/json'}\nlocal resp = http.post(host, port, \"/graphql\", '{\"query\":\"{secretFlag}\"}', {header = headers})\nif resp and resp.status == 200 and resp.body and resp.body:find(\"flag\") then\nlocal report = vuln.Report:new(host, port)\nreport:add({\nrisk = \"CRITICAL\",\nreferences = {\"CVE-2024-12345\", \"https://acme.example.com/advisory\"},\ndescription = \"GraphQL gateway allows unauthenticated queries when X-Internal-Auth header is true.\",\nsolution = \"Upgrade to version 4.2.1 or implement gateway middleware validation\"\n})\nreturn report:make_output()\nend\nend\n```\n\nSave the script in `~/.local/share/nmap/scripts/`, run `nmap --script-updatedb`, and launch with `nmap -p 443 --script http-vuln-graphql-bypass target.com`. Include command-line options to handle TLS (e.g., `--script-args http.useragent='Mozilla/5.0'`).\n\nDevelop iteratively. Start with verbose logging via `stdnse.print_debug`. Use Wireshark to inspect requests and ensure they align with manual testing. Add timeouts and error handling to avoid hanging scans. Comment code thoroughly—future you or another tester will appreciate it.\n\nShare high-value scripts with the community. Submit pull requests to the Nmap project following their [submission guidelines](https://nmap.org/svn/nmap/docs/nse-devel-guide.html). Community review strengthens your Lua skills and builds professional reputation.\n\n#### Testing and Publishing Custom Scripts\n\nAfter writing a new script, integrate it into automated unit tests using the `nmap --script` engine with mocked services. Projects like **Nmap Test Suite** provide Lua-based harnesses that spin up fake HTTP or SMB servers returning crafted responses. Add regression tests whenever you patch the script to handle edge cases so future contributors avoid reintroducing bugs.\n\nWhen you submit scripts to the Nmap mailing list, include:\n- Background on the vulnerability or misconfiguration, with links to CVEs, vendor advisories, or academic papers.\n- Packet captures illustrating the request/response sequence.\n- Safety notes describing impact on fragile services and suggested timing parameters.\n- Sample output demonstrating `VULNERABLE`, `LIKELY VULNERABLE`, and `NOT VULNERABLE` states.\n\nThis documentation mirrors expectations at consultancies like Mandiant or TrustedSec, where internal script repositories require peer review and reproducible evidence. Treat open-source contributions the same way you would internal tooling: with version control, changelog entries, and consistent code style (indentation, naming conventions, and error handling patterns)."
      }
    },
    {
      "block_id": "2945373a-e30f-456a-a62f-3a2a87d270ef",
      "type": "real_world",
      "content": {
        "text": "### Real-World Wins from NSE Mastery\n\n**Case 1 – Marriott International Breach Response (2018):** During containment, incident responders used `http-vuln-cve2017-5638` and `tls-alpn` scripts to sweep thousands of servers for Apache Struts and TLS misconfigurations. NSE's rapid coverage allowed Marriott to validate remediation progress across global data centers in under 48 hours.\n\n**Case 2 – Colonial Pipeline After-Action Review (2021):** Pentesters hired post-incident deployed NSE scripts like `smb-vuln-cve-2020-0796` and custom `modbus-enum` checks. They uncovered OT segment hosts exposed through misconfigured firewalls. NSE output fed into the company’s Microsoft Defender for Endpoint dashboards, enabling prioritized patching and segmentation.\n\n**Case 3 – Atlassian Confluence Zero-Day (CVE-2022-26134):** Bug bounty researchers created an NSE script within 24 hours of the exploit release. The script chained `http-path-enum` with a crafted OGNL payload. Enterprises such as Goldman Sachs integrated the script into automated pipelines, scanning internal Confluence instances nightly until patches were deployed.\n\n**Case 4 – Fortune 50 Cloud Migration:** A retail giant migrating to Azure Kubernetes Service built a custom NSE script to verify Pod Security Admission policies across ingress controllers. By parsing JSON responses from Envoy proxies, they detected an authentication bypass similar to **CVE-2022-23648**. The finding prevented misconfiguration from reaching production.\n\n**Case 5 – Critical Manufacturing:** Red teams working with Siemens leveraged `s7-enumerate` and custom `profinet-vuln` scripts to demonstrate legacy PLC exposure. The evidence convinced executives to fund network segmentation and firmware updates, avoiding potential downtime worth millions.\n\n**Case 6 – Government Cloud Security (2023):** A federal agency migrating workloads to AWS GovCloud embedded NSE scans into Terraform apply pipelines. Custom scripts validated hardened AMIs against DISA STIG benchmarks and verified that VPC endpoints blocked legacy TLS ciphers. The automation caught a misconfigured reverse proxy that re-enabled TLS 1.0, preventing a compliance violation during the agency’s FedRAMP High assessment.\n\n**Case 7 – Telecom Password Audit:** A European telecom used NSE brute-force scripts with custom wordlists derived from leaked credential dumps. By chaining `ssh-brute`, `sip-brute`, and `oracle-brute` with credential stuffing protections, testers quantified password reuse across network devices, VoIP servers, and billing databases. The campaign informed a mandatory rotation policy and rollout of FIDO2 tokens for privileged admins."
      },
      "industry_examples": [
        "Hospitality breach response",
        "Energy sector OT hardening",
        "Financial services zero-day detection",
        "Retail cloud migration validation",
        "Manufacturing industrial control security"
      ]
    },
    {
      "block_id": "247666af-1fc3-424b-a020-23f09175a1fd",
      "type": "explanation",
      "content": {
        "text": "### Performance Tuning, Script Chaining, and Output Parsing\n\nNSE can be resource-intensive. Optimizing performance protects production environments and yields clearer results. Key considerations:\n\n- **Timing and parallelism:** Use `--min-rate`, `--max-rate`, and `--min-parallelism` to tune packet flow. On fragile networks, combine `-T3` with `--script-args http.max-body-length=2048` to prevent overwhelming web servers.\n- **Selective targeting:** Limit scripts to relevant ports using `--script-args file=targets.txt` or `--script 'vuln and not brute'`. Consider scanning subsets (`--top-ports 100`) before deep dives.\n- **Credential management:** For auth scripts, pass credentials via `--script-args='user=svc-pentest,pass=Summer2024!'` or use NSE's `creds` library to reuse values securely.\n- **Script chaining:** Sequence commands using shell pipelines or tools like **Nmap Automator**. Example workflow: run `nmap -sS -sV -p 80,443 --script http-title,http-methods target`, parse output for interesting endpoints, then feed them into `nmap --script http-vuln*` with `--script-args path=/admin`.\n- **Combining with other tools:** Export XML to `xsltproc` for HTML or feed into **Eyewitness**, **Aquatone**, or custom Python notebooks. For SMB results, parse XML with `python-nmap` to generate targeted lists for `crackmapexec`.\n- **Logging and version control:** Store scripts in Git repositories. Tag commits with client codes, maintain change logs, and sanitize sensitive data before sharing internally.\n\nParsing output effectively turns NSE data into actionable intelligence. Use `grep`, `xmllint`, or Python's `ElementTree` to filter for `state=\"VULNERABLE\"`. Example snippet:\n\n```bash\nnmap -p 80,443 --script http-vuln* -oX web_vulns.xml 10.10.0.0/24\nxmllint --xpath \"//table[@key='vulns']/table[@key='items']/table[@key='item']/elem[@key='state' and text()='VULNERABLE']/../../elem[@key='title']/text()\" web_vulns.xml\n```\n\nIntegrate NSE results into SIEMs. Convert XML to JSON and push into **Elastic Common Schema (ECS)**, allowing SOC teams to correlate vulnerabilities with detection data. Some organizations schedule NSE scans in **GitLab CI** pipelines, using `nmap --script http-vuln*` against staging builds. Fail pipelines when critical vulnerabilities appear, aligning pentest-grade checks with DevSecOps.\n\nMonitor script reliability. If a script triggers false positives (e.g., `http-vuln-cve2015-1635` on patched Windows 2012 R2), review the Lua logic. Submit patches or create wrapper scripts that confirm via additional checks. Over time you'll build a personal script library tuned for your clients.\n\n#### Workflow Orchestration\n\nIntegrate NSE into continuous security validation by orchestrating scans with tools such as **Ansible**, **Rundeck**, or **GitHub Actions**. Define playbooks that authenticate to scanning jump boxes, execute targeted NSE command sets, collect XML output, and push structured JSON into data warehouses like Snowflake or BigQuery. Include approval gates so operations teams can pause intrusive scans before maintenance windows. By codifying the workflow, you ensure knowledge transfer when teammates rotate off an engagement and provide auditable change history for compliance.\n\nPair NSE results with purple-team exercises. After the red team validates a vulnerability using `http-vuln-exchange` or `smb-vuln-ms17-010`, the blue team can replay the same scripts in detection-only mode to confirm that EDR or IDS sensors fire appropriately. Capture lessons learned—alert latencies, false negatives, or noisy detections—and feed them into detection engineering backlogs. This collaboration accelerates mean time to detect (MTTD) metrics and proves that your pentest produced measurable defensive improvements."
      }
    },
    {
      "type": "video",
      "title": "Video Deep Dive: Advanced NSE Tactics",
      "content": {
        "resources": "Reinforce learning with a live demonstration that walks through script selection, customization, and reporting.\n\n**Video**: [Nmap Scripting Engine Mastery (Hak5 / IppSec)](https://www.youtube.com/watch?v=IG3GI7G-vDo)\n\n**Watch for:**\n- How to inspect script source before running it\n- Techniques for chaining NSE with Metasploit and CrackMapExec\n- Methods to sanitize output for client deliverables\n\n**Duration:** ~45 minutes\n\n**Additional References:**\n- [Nmap NSE Documentation](https://nmap.org/book/nse.html)\n- [SecLists GitHub Repository](https://github.com/danielmiessler/SecLists)\n- [Lua Reference Manual](https://www.lua.org/manual/5.3/)"
      }
    },
    {
      "type": "code_exercise",
      "title": "Hands-On Lab: Crafting and Automating NSE Workflows",
      "content": {
        "text": "This lab guides you through building a custom NSE script, running targeted scans, and parsing results into actionable artifacts. Perform it in a controlled lab or client-approved environment.\n\n```bash\n# 1. Set up a lab environment with vulnerable services\ndocker network create nse-lab\ndocker run -d --name vulnerable-struts --network nse-lab -p 8080:8080 vulhub/struts2-cve-2017-5638\ndocker run -d --name vulnerable-ftp --network nse-lab -p 2121:21 vulnerables/vsftpd\ndocker run -d --name vulnerable-ssl --network nse-lab -p 8443:443 vulnerables/cve-2014-0160\n\n# 2. Update Nmap scripts and database\nsudo nmap --script-updatedb\n\n# 3. Run baseline vulnerability scripts with tuned timing\nnmap -sV -p 21,80,8080,443,8443 --script \"default,vuln\" -T3 --min-rate 200 -oA baseline_nse 172.18.0.0/24\n\n# 4. Generate a custom NSE script using Python (safer than manual cat)\npython - <<'PY'\nfrom pathlib import Path\nPath('~/.local/share/nmap/scripts/http-vuln-labtoken.nse').expanduser().write_text('''\nlocal http = require \"http\"\nlocal shortport = require \"shortport\"\nlocal stdnse = require \"stdnse\"\nlocal vulns = require \"vulns\"\n\ndescription = [[\nDetects insecure API token leakage in LabAPI 1.2 (CVE-2024-44501) where tokens are exposed via /debug/token.\n]]\n\ncategories = {\"vuln\", \"intrusive\"}\n\nportrule = shortport.port_or_service({80,8080}, {\"http\",\"http-alt\"})\n\naction = function(host, port)\nlocal resp = http.get(host, port, \"/debug/token\")\nif not resp then\nreturn\nend\nif resp.status == 200 and resp.body and resp.body:match(\"LABTOKEN-\") then\nlocal report = vulns.Report:new(host, port)\nreport:add({\ntitle = \"LabAPI token exposure\",\nstate = vulns.STATE.VULNERABLE,\ndescription = \"LabAPI leaks static tokens that allow admin authentication.\",\nreferences = {\"CVE-2024-44501\", \"https://labapi.example.com/advisory\"},\nsolution = \"Upgrade to LabAPI 1.2.4 and remove debug endpoints.\"\n})\nreturn report:make_output()\nend\nend\n''')\nPY\n\nsudo nmap --script-updatedb\n\n# 5. Execute the custom script with additional arguments\nnmap -p 8080 --script http-vuln-labtoken --script-args http.useragent=\"Mozilla/5.0\",timeout=5s 172.18.0.3 -oN custom_labtoken.txt\n\n# 6. Chain NSE output into exploitation tools\ngrep \"VULNERABLE\" baseline_nse.nmap | awk '{print $2\":\"$3}' | sed 's/(//;s/)//' > vulnerable_hosts.txt\nwhile read hostport; do\nhost=${hostport%:*}\nport=${hostport#*:}\nif [[ \"$port\" == \"21\" ]]; then\necho \"[*] Launching Metasploit vsftpd exploit against $host\" >> exploit_plan.md\nfi\ndone < vulnerable_hosts.txt\n\n# 7. Parse XML results into Markdown report tables\npython - <<'PY'\nimport xml.etree.ElementTree as ET\nroot = ET.parse('baseline_nse.xml').getroot()\nrows = []\nfor host in root.findall('host'):\naddr = host.find(\"address\").attrib['addr']\nfor port in host.findall('ports/port'):\nfor script in port.findall('script'):\noutput = script.attrib.get('output','')\nif 'VULNERABLE' in output:\nrows.append((addr, port.attrib.get('portid','?'), script.attrib.get('id','unknown'), output.split('\\n')[0]))\nwith open('nse_findings.md','w') as f:\nf.write('| Host | Port | Script | Summary |\\n|---|---|---|---|\\n')\nfor row in rows:\nf.write('| {} | {} | {} | {} |\\n'.format(*row))\nPY\n\n# 8. Clean up lab\ndocker rm -f vulnerable-struts vulnerable-ftp vulnerable-ssl\ndocker network rm nse-lab\n```\n\nExtend the exercise by scheduling these scans in GitHub Actions or GitLab CI. Commit the NSE script to a repository, add linting with `luacheck`, and trigger Slack or Microsoft Teams notifications when new `VULNERABLE` entries appear in the markdown report."
      }
    },
    {
      "type": "memory_aid",
      "title": "NSE Quick Reference Framework",
      "content": {
        "text": "- **CAT**: Know the categories (discovery, auth, brute, default, vuln, exploit) before launching scripts.\n- **MAP**: Map script purpose to engagement phase—safe scripts for recon, vuln scripts for deep dives.\n- **TUNE**: Adjust timing (`-T`, `--min-rate`) and arguments to respect environment constraints.\n- **CHAIN**: Chain outputs into next steps (Metasploit, CrackMapExec, Burp).\n- **CODE**: Read and modify Lua to fit edge cases; comment changes and version control them.\n- **PROVE**: Validate findings with multiple sources (pcaps, manual requests, vendor advisories).\n- **REPORT**: Convert XML to human-readable narratives with CVE references, remediation, and impact."
      }
    },
    {
      "type": "reflection",
      "title": "Reflection: Elevating NSE Practice",
      "content": {
        "text": "Dedicate time after the lab to internalize lessons and plan future improvements.\n\n1. **Script Mastery:** Which NSE scripts will you add to your default engagement playbook this quarter? Explain why each aligns with your target industries (finance, healthcare, SaaS).\n2. **Customization Goals:** Identify one service in your current client portfolio that lacks a tailored NSE check. Outline requirements for a custom script and set a deadline to prototype it.\n3. **Operational Excellence:** How will you document timing profiles, script arguments, and safety considerations so teammates can reproduce your approach? Sketch a Confluence or Notion template.\n4. **Collaboration:** List three professionals (internal red teamers, community maintainers, or mentors) you can share scripts with for feedback. Draft a short message requesting peer review.\n5. **Metrics:** Decide on two KPIs (e.g., number of validated CVEs per engagement, false positive rate) that will prove your NSE practice is improving. Plan how you will track them over the next six months.\n\nReflection is how you turn tactical NSE wins into strategic capability. Capture your thoughts now and revisit them before your next engagement.\n\n6. **Automation Ethics:** Consider the safeguards you will implement to avoid over-scanning or violating rules of engagement when your NSE automation scales. Write down the guardrails—rate limits, approval workflows, or segmentation boundaries—that will keep future engagements compliant."
      }
    }
  ],
  "post_assessment": [
    {
      "question_id": "dc2b51c6-53f3-40dd-af1f-004f70eaf277",
      "type": "multiple_choice",
      "question": "You are scanning Exchange servers for ProxyLogon (CVE-2021-26855) using `http-vuln-cve2021-26855`. The script reports 'LIKELY VULNERABLE' on hosts behind a WAF that injects custom error pages. What should you do next?",
      "options": [
        "Report the finding as Critical without additional analysis",
        "Disable the WAF and rerun the scan immediately",
        "Capture raw HTTP requests/responses and validate manually to confirm exploitability",
        "Ignore the result because WAFs always trigger false positives"
      ],
      "correct_answer": "Capture raw HTTP requests/responses and validate manually to confirm exploitability",
      "explanation": "WAF modifications can change script output. Collect packet captures or use curl/Burp to replay the payload, verifying whether SSRF is actually possible before escalating.",
      "difficulty": 2,
      "points": 10
    },
    {
      "question_id": "6237aa99-9f3f-4648-8472-d0f7154cabe3",
      "type": "multiple_choice",
      "question": "You created a custom NSE script that triggers on port 8080 and reports a critical vulnerability. How can you ensure teammates can safely reuse it on client engagements?",
      "options": [
        "Store the script only on your laptop to prevent leaks",
        "Commit the script to version control with documentation, timing guidance, and validation steps",
        "Rename the script to something obscure so clients cannot detect it",
        "Run the script without telling the client to avoid additional approvals"
      ],
      "correct_answer": "Commit the script to version control with documentation, timing guidance, and validation steps",
      "explanation": "Documenting and version controlling custom scripts ensures reproducibility, peer review, and safe execution parameters for future engagements.",
      "difficulty": 2,
      "points": 10
    }
  ]
}