{
  "lesson_id": "2ecc2d07-3829-4cee-83c9-eae1605a284b",
  "domain": "pentest",
  "title": "Windows Stack Exploit Workflow",
  "subtitle": "From control to reliable shell on 32-bit targets",
  "difficulty": 4,
  "estimated_time": 80,
  "order_index": 21,
  "prerequisites": [
    "Stack Buffer Overflow Strategy",
    "PowerShell Foundations for Cyber Practitioners"
  ],
  "concepts": [
    "Return address selection and module auditing",
    "Structured use of mona / rp++",
    "Bad character elimination and payload staging",
    "NOP sled vs. direct jumps trade-offs",
    "Encoder selection and payload size management",
    "FASTER state management during debugging",
    "Evidence capture for client reporting"
  ],
  "learning_objectives": [
    "Select safe return addresses using module inspection tools",
    "Eliminate bad characters while preserving payload integrity",
    "Stage shellcode with appropriate NOP sleds or short jumps",
    "Automate exploit retries and document success criteria",
    "Maintain composure with FASTER cues during long debug cycles"
  ],
  "content_blocks": [
    {
      "block_id": "fe7ff525-142a-4267-b729-b4c71cd6c955",
      "type": "mindset_coach",
      "title": "FASTER Focus",
      "content": {
        "text": "FASTER your windows stack exploitation practice. Forget stale habits, activate by grounding yourself, visualise a debugger screenshot with clean registers, teach forward with a one-line insight, enter by attach the debugger and load the crafted exploit, and review when a daily reminder titled 'Exploit diary' fires."
      },
      "simplified_explanation": "Reset, energise, and script your next move before diving in.",
      "memory_aids": [
        "Forget \u2192 Active \u2192 State \u2192 Teach \u2192 Enter \u2192 Review"
      ],
      "real_world_connection": "Expert operators craft mindset rituals that keep exploits on track.",
      "reflection_prompt": "Which FASTER element will have the biggest impact on today's session?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "72fcbd41-1742-42e4-bc34-23e5487be353",
      "type": "explanation",
      "title": "Key Moves",
      "content": {
        "text": "## Execution Checklist\n- **Audit loaded modules before choosing return addresses**\n- **Confirm bad character lists before final payload insertion**\n- **Document every debugger milestone for reproducibility**\n\nKeep this checklist visible as you work."
      },
      "simplified_explanation": "Glance at this before every major step.",
      "memory_aids": [
        "Checklist before command line"
      ],
      "real_world_connection": "Consultancies insist on written playbooks for exploit work.",
      "reflection_prompt": "Which checklist item needs sharpening?",
      "is_interactive": false,
      "xp_reward": 10
    },
    {
      "block_id": "5e37c170-5d4e-4508-acb5-c7437e19ce22",
      "type": "video",
      "title": "Windows Stack Exploit Walkthrough",
      "content": {
        "resources": "Watch the walkthrough to anchor the workflow.\n\n**Video**: [Windows Stack Exploit Walkthrough](https://videos.cyberlearn.local/pentest/windows_stack_exploit_workflow.mp4) \u2014 15 minutes\n\nPause at 07:40 and predict the next move before resuming."
      },
      "simplified_explanation": "Use the video to visualise success before you execute.",
      "memory_aids": [
        "Pause \u2192 Predict \u2192 Play"
      ],
      "real_world_connection": "Teams capture video briefings so every operator copies proven flows.",
      "reflection_prompt": "What insight did you record while pausing the video?",
      "is_interactive": false,
      "xp_reward": 10
    },
    {
      "block_id": "0428fad0-e7b9-456b-9fc6-92b636098dad",
      "type": "simulation",
      "title": "Scenario Lab",
      "content": {
        "text": "### Lab Goal: Achieve a stable shell on a 32-bit Windows lab target\n1. Use mona or rp++ to locate a safe JMP ESP and note the module properties\n2. Validate bad characters and rebuild shellcode with msfvenom\n3. Add staged shellcode and confirm execution with calc or reverse shell\n4. Record screenshots, debugger output, and timing for the final exploit write-up\n\nCapture artefacts as you go so the reporting section writes itself."
      },
      "simplified_explanation": "Execute the plan and gather proof.",
      "memory_aids": [
        "Plan \u2192 Execute \u2192 Capture"
      ],
      "real_world_connection": "Clients expect reproducible artefacts for every exploit run.",
      "reflection_prompt": "Which step revealed a blocker you must research?",
      "is_interactive": true,
      "xp_reward": 25
    },
    {
      "block_id": "9191a426-f991-4cbb-9b64-1edc375e4fe4",
      "type": "reflection",
      "title": "Teach-Back Debrief",
      "content": {
        "text": "Teach it back: record a two-minute voice note explaining how you approached windows stack exploitation.\nAnswer the prompts:\n- What signal told you the approach was working?\n- How will you elevate your state faster next time?\n- Who will you debrief using the air traffic control analogy?"
      },
      "simplified_explanation": "Explaining it forward locks in the learning.",
      "memory_aids": [
        "Signal \u2192 State \u2192 Story"
      ],
      "real_world_connection": "Teams close exploit sprints with teach-backs to capture tacit knowledge.",
      "reflection_prompt": "Who needs this debrief in their inbox?",
      "is_interactive": false,
      "xp_reward": 5
    }
  ],
  "pre_assessment": null,
  "post_assessment": [
    {
      "question_id": "q1",
      "type": "multiple_choice",
      "question": "Which FASTER element keeps you from carrying stale habits into windows stack exploitation?",
      "options": [
        "Active",
        "Teach",
        "Forget",
        "Review"
      ],
      "correct_answer": 2,
      "explanation": "Starting with Forget clears assumptions so you approach the problem fresh.",
      "difficulty": 4,
      "memory_aid": "Reset before you rush.",
      "points": 10
    },
    {
      "question_id": "q2",
      "type": "multiple_choice",
      "question": "What is the primary outcome of this lesson's lab?",
      "options": [
        "Pick the first return address without module checks",
        "Achieve a stable shell on a 32-bit Windows lab target",
        "Ignore bad characters if the payload works once",
        "Documenting unrelated vulnerabilities"
      ],
      "correct_answer": 1,
      "explanation": "Every step in the lab guides you toward: Achieve a stable shell on a 32-bit Windows lab target.",
      "difficulty": 4,
      "memory_aid": "Know the win condition before you start.",
      "points": 10
    },
    {
      "question_id": "q3",
      "type": "multiple_choice",
      "question": "Which approach best supports selecting reliable return addresses?",
      "options": [
        "Choose any address that contains JMP ESP regardless of protections",
        "Use module auditing (mona modules) to find reliable JMP ESP gadgets",
        "Hardcode stack addresses observed during the first crash",
        "Skip return addresses by relying on overwriting SEH"
      ],
      "correct_answer": 1,
      "explanation": "Module auditing confirms the gadget resides in a predictable, safe memory region.",
      "difficulty": 4,
      "memory_aid": "Map each phase to a go-to tool and a backup.",
      "points": 10
    }
  ],
  "mastery_threshold": 80,
  "jim_kwik_principles": [
    "active_learning",
    "minimum_effective_dose",
    "teach_like_im_10",
    "memory_hooks",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "base_xp_reward": 170,
  "badge_unlock": null,
  "is_core_concept": false,
  "created_at": "2025-10-28T17:55:44",
  "updated_at": "2025-10-28T17:55:44",
  "author": "CyberLearn Offensive Curriculum Team",
  "version": "1.0"
}
