{
  "lesson_id": "79a96678-d012-49f8-aef1-6a8049f52db3",
  "domain": "dfir",
  "title": "Linux Users, Groups, and Authentication",
  "difficulty": 2,
  "order_index": 74,
  "prerequisites": [
    "c3d4e5f6-a7b8-4c9d-0e1f-2a3b4c5d6e7f"
  ],
  "concepts": [
    "/etc/passwd and /etc/shadow analysis",
    "UID/GID forensics and anomalies",
    "User account lifecycle forensics",
    "Group membership and privilege escalation",
    "Password hash identification",
    "Unauthorized account detection",
    "Service accounts vs user accounts",
    "Account creation timestamps",
    "Sudoers configuration analysis"
  ],
  "estimated_time": 55,
  "learning_objectives": [
    "Master the forensic analysis of /etc/passwd, /etc/shadow, and /etc/group files",
    "Identify suspicious UIDs, GIDs, and account anomalies",
    "Detect unauthorized user accounts and privilege escalation indicators",
    "Analyze password hash types and account security configurations",
    "Investigate account creation, modification, and deletion artifacts",
    "Understand the relationship between users, groups, and permissions in security contexts"
  ],
  "post_assessment": [
    {
      "question": "What UID value indicates the root account in Linux?",
      "options": [
        "0",
        "1",
        "500",
        "1000"
      ],
      "correct_answer": 0,
      "explanation": "UID 0 is reserved for the root account. Any account with UID 0 has full system privileges, making unauthorized accounts with UID 0 a critical security finding.",
      "question_id": "27314ff8-a3a6-4af3-9421-ca70d4593d8e",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "Which file contains encrypted password hashes in modern Linux systems?",
      "options": [
        "/etc/passwd",
        "/etc/shadow",
        "/etc/group",
        "/etc/security"
      ],
      "correct_answer": 1,
      "explanation": "/etc/shadow contains encrypted password hashes and is readable only by root. The /etc/passwd file is world-readable but contains 'x' placeholders instead of actual hashes.",
      "question_id": "0ff3c337-72ce-44d5-8884-c4869db1943e",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "What does a '*' or '!' in the password field of /etc/shadow indicate?",
      "options": [
        "Weak password",
        "Account is locked/disabled",
        "Password expired",
        "No password set"
      ],
      "correct_answer": 1,
      "explanation": "A '*' or '!' in the password field indicates the account is locked or disabled and cannot be used for interactive login. This is common for system service accounts.",
      "question_id": "b2a53190-6984-48d7-ae92-f3d70f398fb8",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "Which command shows all groups a user belongs to?",
      "options": [
        "usermod",
        "groups",
        "getent",
        "id"
      ],
      "correct_answer": 3,
      "explanation": "The 'id' command displays UID, GID, and all group memberships for a user. While 'groups' also works, 'id' provides more comprehensive information including numeric IDs.",
      "question_id": "2e752af5-be13-4b9e-97a9-ad710530e186",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "What forensic significance does finding a user account with UID 0 (other than root) have?",
      "options": [
        "Normal system configuration",
        "Indicator of privilege escalation or backdoor",
        "Performance optimization",
        "Backup account"
      ],
      "correct_answer": 1,
      "explanation": "Any account with UID 0 has root privileges. Finding an account other than 'root' with UID 0 is a strong indicator of privilege escalation, backdoor creation, or system compromise.",
      "question_id": "978e34d4-9996-4465-9897-fe5be27f096e",
      "type": "multiple_choice",
      "difficulty": 2
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "minimum_effective_dose",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "content": {
        "text": "## Welcome to User and Group Forensics! üîç\n\nYou're about to master one of the most critical skills in Linux forensics: understanding **who has access to what**. In every breach investigation I've worked on, unauthorized accounts or suspicious privilege escalations have been key indicators of compromise.\n\n**Here's what makes this exciting**: While attackers focus on stealth, they can't hide the fundamental truth recorded in /etc/passwd and /etc/shadow. These files are like the attendance sheet of your system - and you're learning to spot the intruders who signed in uninvited.\n\n**Why this matters in real investigations**:\n- The 2013 Target breach involved compromised credentials and privilege escalation\n- The 2020 SolarWinds attack used sophisticated account manipulation\n- Insider threats often create hidden accounts for persistent access\n- Cryptominers frequently add service accounts to maintain access\n\n**Jim Kwik principle**: We're using the **Minimum Effective Dose** approach. Instead of overwhelming you with every Linux authentication mechanism, I'll teach you the 20% of knowledge that solves 80% of real forensic cases.\n\n**Your forensic superpower after this lesson**: You'll be able to examine a Linux system and immediately spot:\n- Unauthorized user accounts\n- Suspicious UID/GID values\n- Signs of privilege escalation\n- Account creation timelines\n- Password security weaknesses\n\nLet's dive in! üöÄ"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "# Understanding Linux User Authentication Architecture\n\n## The Three Core Files\n\nLinux user authentication relies on three critical files that every forensic investigator must master:\n\n### 1. /etc/passwd - The User Database\n\n**Location**: `/etc/passwd`\n**Permissions**: World-readable (644)\n**Purpose**: Central user account database\n\n**Format**: Each line represents one user account with 7 colon-separated fields:\n\n```\nusername:x:UID:GID:GECOS:home_directory:shell\n```\n\n**Field breakdown**:\n\n```\nroot:x:0:0:root:/root:/bin/bash\n‚îÇ    ‚îÇ ‚îÇ ‚îÇ ‚îÇ    ‚îÇ     ‚îî‚îÄ Login shell\n‚îÇ    ‚îÇ ‚îÇ ‚îÇ ‚îÇ    ‚îî‚îÄ Home directory\n‚îÇ    ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ Comment/Full name (GECOS)\n‚îÇ    ‚îÇ ‚îÇ ‚îî‚îÄ Primary Group ID\n‚îÇ    ‚îÇ ‚îî‚îÄ User ID\n‚îî‚îÄ Username\n```\n\n\n**Real example from forensic case**:\n```\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\njsmith:x:1000:1000:John Smith:/home/jsmith:/bin/bash\napache:x:33:33:Apache:/var/www:/usr/sbin/nologin\nbackdoor:x:0:0:System Backup:/var/tmp:/bin/bash  ‚Üê SUSPICIOUS!\n```\n\n**Forensic red flag**: Notice the 'backdoor' account? It has UID 0 (root privileges) but isn't the root account. This is a classic backdoor technique.\n\n### 2. /etc/shadow - Password Hashes and Account Policies\n\n**Location**: `/etc/shadow`\n**Permissions**: Root-only readable (000 or 400)\n**Purpose**: Secure storage of password hashes and aging information\n\n**Format**: 9 colon-separated fields:\n\n```\nusername:password_hash:last_change:min:max:warn:inactive:expire:reserved\n```\n\n**Field breakdown**:\n\n```\nroot:$6$salt$hash:19000:0:99999:7:::\n‚îÇ    ‚îÇ            ‚îÇ     ‚îÇ ‚îÇ     ‚îÇ ‚îÇ ‚îÇ‚îî‚îÄ Reserved\n‚îÇ    ‚îÇ            ‚îÇ     ‚îÇ ‚îÇ     ‚îÇ ‚îÇ ‚îî‚îÄ Account expiration date\n‚îÇ    ‚îÇ            ‚îÇ     ‚îÇ ‚îÇ     ‚îÇ ‚îî‚îÄ Days of inactivity allowed\n‚îÇ    ‚îÇ            ‚îÇ     ‚îÇ ‚îÇ     ‚îî‚îÄ Days before expiration to warn\n‚îÇ    ‚îÇ            ‚îÇ     ‚îÇ ‚îî‚îÄ Maximum days password valid\n‚îÇ    ‚îÇ            ‚îÇ     ‚îî‚îÄ Minimum days before password change\n‚îÇ    ‚îÇ            ‚îî‚îÄ Days since Jan 1, 1970 of last password change\n‚îÇ    ‚îî‚îÄ Encrypted password hash\n‚îî‚îÄ Username\n```\n\n**Password hash format** (the most important field for forensics):\n\n```bash\n$id$salt$hash\n‚îÇ  ‚îÇ    ‚îî‚îÄ Actual hash value\n‚îÇ  ‚îî‚îÄ Random salt (prevents rainbow tables)\n‚îî‚îÄ Hash algorithm ID\n```\n\n**Hash algorithm IDs**:\n- `$1$` = MD5 (weak, crackable)\n- `$2a$` or `$2y$` = Blowfish/bcrypt (strong)\n- `$5$` = SHA-256 (strong)\n- `$6$` = SHA-512 (strongest, default on modern systems)\n- `$y$` = yescrypt (cutting edge, very strong)\n\n**Special password field values**:\n- `*` or `!` = Account locked/disabled\n- `!!` = Account never had password set\n- Empty field = No password required (DANGEROUS!)\n- `!$6$...` = Hash with ! prefix = temporarily locked\n\n**Real forensic example**:\n```\nroot:$6$qwerty$N8pF...:19000:0:99999:7:::\njsmith:$6$random$kL9m...:19500:0:90:7:30::\napache:*:19000:0:99999:7:::\nbackdoor::19600:0:99999:7:::  ‚Üê NO PASSWORD!\nattacker:$1$weak$Ab7k...:19600:0:99999:7:::  ‚Üê MD5 HASH!\n```\n\n**Forensic findings**:\n1. 'backdoor' account has **no password** (empty field) - can login without authentication!\n2. 'attacker' account uses **MD5 hash** - easily crackable with modern tools\n3. 'apache' account properly locked with `*`\n\n### 3. /etc/group - Group Memberships\n\n**Location**: `/etc/group`\n**Permissions**: World-readable (644)\n**Purpose**: Define groups and their members\n\n**Format**: 4 colon-separated fields:\n\n```\ngroupname:password:GID:member_list\n```\n\n**Example**:\n```\nroot:x:0:\nadm:x:4:syslog,john\nsudo:x:27:john,admin,backdoor  ‚Üê Privilege escalation indicator!\ndocker:x:999:john,backdoor  ‚Üê Docker group = root access!\n```\n\n**Forensic significance**: Group memberships are a **privilege escalation vector**.\n\n**Critical groups to audit**:\n- `sudo` / `wheel` = Can execute commands as root\n- `admin` = Administrative privileges\n- `docker` = Can spawn root containers (essentially root access)\n- `lxd` / `lxc` = Similar to docker\n- `disk` = Direct disk access (can read any file)\n- `shadow` = Can read /etc/shadow\n- `adm` = Can read log files\n\n## UID and GID Ranges - The Forensic Decoder\n\n**Understanding UID/GID ranges helps identify account types and anomalies**:\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ UID Range   ‚îÇ Account Type   ‚îÇ Forensic Significance    ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ 0           ‚îÇ root/superuser ‚îÇ ANY account with UID 0   ‚îÇ\n‚îÇ             ‚îÇ                ‚îÇ has FULL system access   ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ 1-99        ‚îÇ System         ‚îÇ Reserved by system       ‚îÇ\n‚îÇ             ‚îÇ accounts       ‚îÇ Statically assigned      ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ 100-999     ‚îÇ System/service ‚îÇ Dynamically assigned by  ‚îÇ\n‚îÇ             ‚îÇ accounts       ‚îÇ system packages          ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ 1000+       ‚îÇ Normal users   ‚îÇ Human user accounts      ‚îÇ\n‚îÇ             ‚îÇ                ‚îÇ (1000 on Debian/Ubuntu)  ‚îÇ\n‚îÇ             ‚îÇ                ‚îÇ (500 on RHEL/CentOS <7)  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n**Forensic red flags**:\n\n1. **User account with UID < 1000** (except root)\n- May indicate attacker trying to blend in with system accounts\n- Example: `hacker:x:99:99:...` looks like system account but has shell\n\n2. **Multiple accounts with UID 0**\n- Classic backdoor technique\n- Both accounts have root privileges\n- Example: `backdoor:x:0:0:...`\n\n3. **Service account with login shell**\n- Service accounts should have `/usr/sbin/nologin` or `/bin/false`\n- Interactive shell suggests compromise\n- Example: `www-data:x:33:33:...:/bin/bash` ‚Üê Should be nologin!\n\n4. **User account with non-standard GID**\n- Usually UID = GID for user accounts\n- Mismatch may indicate manual account creation\n- Example: `suspicious:x:1500:0:...` ‚Üê GID 0 = root group!\n\n## Account Creation and Modification Forensics\n\n**Challenge**: Unlike Windows, Linux doesn't inherently store account creation timestamps in /etc/passwd or /etc/shadow.\n\n**Last password change** (field 3 in /etc/shadow):\n- Days since epoch (Jan 1, 1970)\n- Can indicate account creation if password never changed\n- Convert with: `date -d \"1970-01-01 + 19000 days\"`\n\n**Example calculation**:\n```bash\n# /etc/shadow shows: user:$6$...:19600:...\n# Convert 19600 to date:\ndate -d \"1970-01-01 + 19600 days\"\n# Output: Sat Aug 27 00:00:00 UTC 2023\n```\n\n**Alternative forensic artifacts for account creation**:\n\n1. **File system timestamps**:\n```bash\nstat /home/username\nstat /var/mail/username\nstat /var/spool/cron/crontabs/username\n```\n- Birth time (if supported by filesystem) shows creation\n- Modified time shows last significant change\n\n2. **Log files** (covered in depth in Lesson 76):\n```bash\ngrep \"useradd\\|adduser\" /var/log/auth.log\ngrep \"new user\" /var/log/secure\njournalctl | grep \"useradd\"\n```\n\n3. **Command history**:\n```bash\ngrep \"useradd\\|adduser\\|passwd\" /root/.bash_history\ngrep \"useradd\\|adduser\\|passwd\" /home/*/.bash_history\n```\n\n4. **Audit logs** (if auditd enabled):\n```bash\nausearch -m ADD_USER\nausearch -m USER_MGMT\n```\n\n**Real case example**: In a 2019 incident response, we found:\n```bash\n# /etc/shadow\nhacker:$6$...:19234:0:99999:7:::\n\n# Convert days to date\n$ date -d \"1970-01-01 + 19234 days\"\nWed Sep  4 00:00:00 UTC 2022\n\n# Check /var/log/auth.log\n$ grep \"hacker\" /var/log/auth.log\nSep 4 03:47:22 server useradd[5521]: new user: name=hacker, UID=1005, GID=1005\nSep 4 03:47:35 server passwd[5523]: password changed for hacker\nSep 4 03:48:12 server usermod[5527]: add 'hacker' to group 'sudo'\n```\n\n**Forensic timeline reconstructed**:\n- 03:47:22 - Account created\n- 03:47:35 - Password set (13 seconds later)\n- 03:48:12 - Added to sudo group (37 seconds after password set)\n- **Total time: Under 1 minute from creation to root access!**\n\n## Sudoers Configuration Analysis\n\n**Location**: `/etc/sudoers` and `/etc/sudoers.d/*`\n**Purpose**: Control which users can execute commands as other users (usually root)\n\n**Basic syntax**:\n```\nusername  ALL=(ALL:ALL) ALL\n‚îÇ         ‚îÇ   ‚îÇ    ‚îÇ    ‚îî‚îÄ Can run all commands\n‚îÇ         ‚îÇ   ‚îÇ    ‚îî‚îÄ As all groups\n‚îÇ         ‚îÇ   ‚îî‚îÄ As all users\n‚îÇ         ‚îî‚îÄ From all hosts\n‚îî‚îÄ User or group (%groupname)\n```\n\n**Common configurations**:\n```bash\n# Full sudo access with password\njohn ALL=(ALL:ALL) ALL\n\n# Full sudo access WITHOUT password (DANGEROUS!)\nhacker ALL=(ALL:ALL) NOPASSWD: ALL\n\n# Limited sudo (only specific commands)\nwebadmin ALL=(ALL) /usr/sbin/systemctl restart apache2\n\n# Group-based (all members of sudo group)\n%sudo ALL=(ALL:ALL) ALL\n```\n\n**Forensic red flags**:\n\n1. **NOPASSWD entries** - No authentication required\n```\nbackdoor ALL=(ALL:ALL) NOPASSWD: ALL\n```\n\n2. **Unexpected users with sudo**\n```\nwww-data ALL=(ALL:ALL) ALL  ‚Üê Web server with sudo?!\n```\n\n3. **Wildcards in command specifications**\n```\nuser ALL=(ALL) /bin/bash *  ‚Üê Can execute any bash command!\n```\n\n4. **Files in /etc/sudoers.d/ with suspicious names**\n```\n/etc/sudoers.d/..hidden\n/etc/sudoers.d/000-default\n/etc/sudoers.d/.backup\n```\n\n**Checking sudo configuration**:\n```bash\n# Safe way to check syntax\nsudo visudo -c\n\n# List all sudo rules (as root)\nsudo cat /etc/sudoers\nsudo cat /etc/sudoers.d/*\n\n# Check which commands a user can run\nsudo -l -U username\n```bash\n\n## Password Security Analysis\n\n**Tools for password hash analysis** (use only on systems you own or have authorization to test):\n\n1. **John the Ripper** - Industry standard password cracker\n```bash\n# Combine passwd and shadow for John\nunshadow /etc/passwd /etc/shadow > combined.txt\n\n# Run dictionary attack\njohn --wordlist=/usr/share/wordlists/rockyou.txt combined.txt\n\n# Show cracked passwords\njohn --show combined.txt\n```\n\n2. **Hashcat** - GPU-accelerated cracking\n```bash\n# Extract SHA-512 hashes\ngrep '$6$' /etc/shadow > shadow.hashes\n\n# Crack with wordlist\nhashcat -m 1800 shadow.hashes rockyou.txt\n```\n\n**Forensic insights from password cracking**:\n- Weak passwords indicate poor security posture\n- Default passwords suggest unpatched systems\n- Shared passwords across accounts suggest insider access\n- Recently changed passwords may indicate compromise awareness\n\n**Checking password policy**:\n```bash\n# View password aging requirements\nchage -l username\n\n# System-wide password requirements\ncat /etc/login.defs | grep PASS\n\n# PAM password quality requirements\ncat /etc/pam.d/common-password\ncat /etc/security/pwquality.conf\n```\n\n**Real breach example**: 2021 Kaseya ransomware attack involved:\n1. Exploitation of vulnerable service\n2. Creation of local admin account\n3. Weak password set (cracked in minutes)\n4. Lateral movement using compromised credentials\n5. Domain-wide ransomware deployment\n\n**The credential was the pivot point** - better password policies could have slowed the attack.\n\n## Service Accounts vs User Accounts\n\n**Service accounts** exist to run daemons and services, not for human login.\n\n**Characteristics of legitimate service accounts**:\n```\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\n‚îÇ        ‚îÇ ‚îÇ  ‚îÇ  ‚îÇ        ‚îÇ        ‚îî‚îÄ No shell = can't login\n‚îÇ        ‚îÇ ‚îÇ  ‚îÇ  ‚îÇ        ‚îî‚îÄ Non-standard home\n‚îÇ        ‚îÇ ‚îÇ  ‚îÇ  ‚îî‚îÄ GECOS describes purpose\n‚îÇ        ‚îÇ ‚îÇ  ‚îî‚îÄ GID matches UID\n‚îÇ        ‚îÇ ‚îî‚îÄ Low UID (system range)\n‚îÇ        ‚îî‚îÄ Password locked in /etc/shadow (*)\n‚îî‚îÄ Descriptive name\n```\n\n**Suspicious service account modifications**:\n\n1. **Shell changed to interactive**:\n```\nwww-data:x:33:33:www-data:/var/www:/bin/bash  ‚Üê RED FLAG!\n```\n\n2. **Password set (instead of locked)**:\n```bash\n# /etc/shadow\nwww-data:$6$...:19500:0:99999:7:::  ‚Üê Should be *!\n```\n\n3. **Service account in privileged groups**:\n```bash\n# /etc/group\nsudo:x:27:john,www-data  ‚Üê Why is web server in sudo?!\n```\n\n**Forensic technique - Audit all service accounts**:\n```bash\n# Find service accounts with shells\nawk -F: '($3 < 1000) && ($7 !~ /nologin|false/) {print $1,$3,$7}' /etc/passwd\n\n# Find service accounts with passwords set\nawk -F: '($3 < 1000) && ($2 !~ /\\*|!/) {print $1}' /etc/shadow\n\n# Find service accounts in sudo group\ngrep '^sudo:' /etc/group | grep -E '(www-data|nginx|apache|mysql)'\n```bash\n\n## Account Anomaly Detection - The Forensic Checklist\n\n**Run these checks on every Linux forensic investigation**:\n\n### 1. Multiple UID 0 accounts\n```bash\nawk -F: '($3 == 0) {print $1}' /etc/passwd\n# Expected: Only 'root'\n# Red flag: Any other accounts\n```bash\n\n### 2. Accounts without passwords\n```bash\nawk -F: '($2 == \"\") {print $1}' /etc/shadow\n# Expected: None (or only locked accounts)\n# Red flag: Any account (means no auth required!)\n```bash\n\n### 3. Accounts with weak hash algorithms\n```bash\ngrep '$1$' /etc/shadow  # MD5\ngrep '$2a$\\|$2y$' /etc/shadow | grep -v '^[!*]'  # Bcrypt (good but check)\n# Red flag: MD5 hashes on any real user account\n```bash\n\n### 4. Service accounts with login shells\n```bash\nawk -F: '($3 < 1000) && ($3 != 0) && ($7 !~ /nologin|false/) {print}' /etc/passwd\n# Red flag: System accounts with /bin/bash or /bin/sh\n```bash\n\n### 5. Unexpected users in privileged groups\n```bash\ngrep '^\\(sudo\\|wheel\\|admin\\|docker\\):' /etc/group\n# Manual review: Should only contain expected admins\n```bash\n\n### 6. Unusual UID/GID combinations\n```bash\nawk -F: '($3 >= 1000) && ($3 != $4) {print $1,$3,$4}' /etc/passwd\n# May indicate: Manual account creation, group manipulation\n```bash\n\n### 7. Accounts with no home directory\n```bash\nawk -F: '($3 >= 1000) {print $1,$6}' /etc/passwd | while read user home; do\n[ ! -d \"$home\" ] && echo \"Missing home: $user ($home)\"\ndone\n# May indicate: Hastily created account, deleted user\n```bash\n\n### 8. Recently modified authentication files\n```bash\nls -lh /etc/{passwd,shadow,group,sudoers}\nstat /etc/shadow  # Check modification time\n# Compare to known timelines of compromise\n```\n\n**Automated scanning script** (sample):\n```bash\n# !/bin/bash\n# Basic user account anomaly detector\n\necho \"[*] Checking for multiple UID 0 accounts...\"\nawk -F: '($3 == 0) && ($1 != \"root\") {print \"ALERT: \" $1}' /etc/passwd\n\necho \"[*] Checking for accounts without passwords...\"\nawk -F: '($2 == \"\") {print \"ALERT: \" $1}' /etc/shadow\n\necho \"[*] Checking for service accounts with shells...\"\nawk -F: '($3 < 1000) && ($3 != 0) && ($7 ~ /bash|sh$/) {print \"ALERT: \" $1}' /etc/passwd\n\necho \"[*] Checking for weak password hashes...\"\ngrep ':\\$1\\$' /etc/shadow | cut -d: -f1 | while read u; do\necho \"ALERT: $u (MD5 hash)\"\ndone\n\necho \"[*] Scan complete.\"\n```\n\nThis script can be your first-pass tool on every Linux system you investigate."
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "# Hands-On Exercise: User Account Forensics Lab\n\n## Exercise 1: Basic Account Enumeration\n\n**Scenario**: You're investigating a potentially compromised Ubuntu server. Start with basic enumeration.\n\n**Commands to execute**:\n\n```bash\n# List all user accounts\ncat /etc/passwd\n\n# Count total accounts\nwc -l /etc/passwd\n\n# List only human users (UID >= 1000)\nawk -F: '($3 >= 1000) {print $1, $3, $7}' /etc/passwd\n\n# List all accounts with login shells\nawk -F: '($7 ~ /bash|sh$/) {print $1, $3, $7}' /etc/passwd\n\n# Find the root account\ngrep '^root:' /etc/passwd\n```\n\n**Analysis questions**:\n1. How many total accounts are on the system?\n2. How many are human user accounts (UID >= 1000)?\n3. How many have interactive shells?\n4. Are there any unexpected accounts in the high UID range?\n\n---\n\n## Exercise 2: Detect Multiple Root Accounts\n\n**Scenario**: An attacker may create a backdoor by adding another UID 0 account.\n\n**Detection command**:\n```bash\n# Find ALL accounts with UID 0\nawk -F: '($3 == 0) {print $1 \" (UID: \" $3 \")\"}' /etc/passwd\n```\n\n**Expected output**:\n```\nroot (UID: 0)\n```\n\n**Suspicious output**:\n```\nroot (UID: 0)\nbackdoor (UID: 0)     ‚Üê ALERT!\nsysadmin (UID: 0)     ‚Üê ALERT!\n```\n\n**Investigation steps if anomalies found**:\n```bash\n# Get full details of suspicious account\ngrep '^backdoor:' /etc/passwd\n\n# Check password status\nsudo grep '^backdoor:' /etc/shadow\n\n# Check group memberships\ngroups backdoor\n\n# Check home directory\nls -la /home/backdoor\nls -la /var/tmp  # Common hiding spot\n\n# Search for account creation in logs\nsudo grep -i \"backdoor\" /var/log/auth.log\nsudo grep \"useradd.*backdoor\" /var/log/auth.log\n```\n\n---\n\n## Exercise 3: Password Hash Analysis\n\n**Scenario**: Audit password security on the system.\n\n**Commands** (requires root/sudo):\n\n```bash\n# Extract and identify hash types\nsudo awk -F: '{print $1, $2}' /etc/shadow | head -10\n\n# Count hash algorithm usage\nsudo grep -o ':\\$[0-9]\\$' /etc/shadow | sort | uniq -c\n\n# Find accounts with no password\nsudo awk -F: '($2 == \"\") {print $1}' /etc/shadow\n\n# Find locked accounts\nsudo awk -F: '($2 ~ /^!|^\\*/) {print $1}' /etc/shadow\n\n# Find accounts with MD5 hashes (weak)\nsudo grep ':\\$1\\$' /etc/shadow\n```\n\n**Interpretation guide**:\n- `$6$...` = SHA-512 (good, modern default)\n- `$5$...` = SHA-256 (acceptable)\n- `$1$...` = MD5 (RED FLAG - easily crackable)\n- `*` or `!` = Locked (good for service accounts)\n- Empty field = NO PASSWORD (CRITICAL - immediate security issue!)\n\n**Example output analysis**:\n```bash\n# Hash algorithm count\n45 :$6$     ‚Üê Most accounts use SHA-512 (good)\n3 :$1$     ‚Üê Three accounts with MD5 (investigate!)\n12 :*       ‚Üê Service accounts properly locked\n1 :        ‚Üê One account with no password (CRITICAL!)\n```\n\n---\n\n## Exercise 4: Service Account Audit\n\n**Scenario**: Verify service accounts are properly secured.\n\n**Find service accounts with login shells**:\n```bash\n# Service accounts should have nologin or false\nawk -F: '($3 < 1000) && ($3 != 0) && ($7 !~ /nologin|false/) {print $1 \" has shell: \" $7}' /etc/passwd\n```\n\n**Expected**: No output (all service accounts properly configured)\n\n**Suspicious output**:\n```\nwww-data has shell: /bin/bash     ‚Üê Web server can login!\nmysql has shell: /bin/sh          ‚Üê Database can login!\n```\n\n**Check if service accounts have passwords**:\n```bash\n# Service accounts should be locked (*)\nfor user in www-data mysql nginx apache postgres; do\npass=$(sudo grep \"^$user:\" /etc/shadow | cut -d: -f2)\n[ \"$pass\" != \"*\" ] && [ \"$pass\" != \"!\" ] && echo \"ALERT: $user has password set!\"\ndone\n```\n\n---\n\n## Exercise 5: Privilege Escalation via Groups\n\n**Scenario**: Check for unexpected group memberships that grant elevated privileges.\n\n**Audit critical groups**:\n```bash\n# List all members of sudo/wheel/admin groups\ngrep '^sudo:' /etc/group\ngrep '^wheel:' /etc/group\ngrep '^admin:' /etc/group\n\n# Docker group (equivalent to root access)\ngrep '^docker:' /etc/group\n\n# Disk group (can read any file)\ngrep '^disk:' /etc/group\n\n# Shadow group (can read password hashes)\ngrep '^shadow:' /etc/group\n```\n\n**Example output**:\n```\nsudo:x:27:alice,bob,mallory\n‚îî‚îÄ‚îÄ Investigate: Who is mallory? Should they have sudo?\n\ndocker:x:999:alice,www-data\n‚îî‚îÄ‚îÄ ALERT: www-data in docker group = web app can spawn root containers!\n```\n\n**Check specific user's group memberships**:\n```bash\n# All groups for a user\ngroups suspicious_user\nid suspicious_user\n\n# More detailed output\nid -Gn suspicious_user  # Group names\nid -G suspicious_user   # Group IDs\n```\n\n---\n\n## Exercise 6: Account Timeline Reconstruction\n\n**Scenario**: Determine when accounts were created/modified.\n\n**Extract password change dates from /etc/shadow**:\n```bash\n# Show username and last password change date\nsudo awk -F: '{\nif ($3 != \"\" && $3 !~ /!|\\*/) {\ncmd = \"date -d \\\"1970-01-01 + \" $3 \" days\\\" +%Y-%m-%d\"\ncmd | getline date\nclose(cmd)\nprint $1, date\n}\n}' /etc/shadow | sort -k2\n```\n\n**Check filesystem timestamps for home directories**:\n```bash\n# When was user's home directory created?\nfor home in /home/*; do\nuser=$(basename \"$home\")\ncreated=$(stat -c '%w' \"$home\" 2>/dev/null || echo \"N/A\")\nmodified=$(stat -c '%y' \"$home\")\necho \"$user: Created=$created, Modified=$modified\"\ndone\n```\n\n**Search logs for account creation events**:\n```bash\n# Find useradd/adduser commands\nsudo grep -E \"useradd|adduser|new user\" /var/log/auth.log\nsudo grep -E \"useradd|adduser|new user\" /var/log/auth.log.1\n\n# If using systemd journal\nsudo journalctl | grep -E \"useradd|adduser|new user\"\n\n# Search for specific username\nsudo grep -i \"username\" /var/log/auth.log*\n```\n\n---\n\n## Exercise 7: Sudoers Configuration Audit\n\n**Scenario**: Review sudo privileges for security issues.\n\n**Check sudoers file**:\n```bash\n# Validate syntax (always do this first!)\nsudo visudo -c\n\n# View main configuration\nsudo cat /etc/sudoers\n\n# View drop-in files\nsudo ls -la /etc/sudoers.d/\nsudo cat /etc/sudoers.d/*\n```\n\n**Look for dangerous configurations**:\n```bash\n# Find NOPASSWD rules (no authentication required)\nsudo grep -r NOPASSWD /etc/sudoers /etc/sudoers.d/\n\n# Find wildcard rules\nsudo grep -r '\\*' /etc/sudoers /etc/sudoers.d/\n\n# Find ALL=(ALL) rules\nsudo grep -r 'ALL=(ALL)' /etc/sudoers /etc/sudoers.d/\n```\n\n**Check what a specific user can do with sudo**:\n```bash\n# As root, check user's sudo permissions\nsudo -l -U username\n\n# As the user themselves\nsudo -l\n```\n\n**Example dangerous configuration**:\n```\nbackdoor ALL=(ALL:ALL) NOPASSWD: ALL\n```\nThis allows 'backdoor' user to run ANY command as root WITHOUT entering a password!\n\n---\n\n## Exercise 8: Comprehensive Account Audit Script\n\n**Create your own forensic script**:\n\n```bash\n# !/bin/bash\n# user_audit.sh - Comprehensive user account forensics\n\necho \"===== USER ACCOUNT FORENSICS AUDIT =====\"\necho \"Date: $(date)\"\necho \"Hostname: $(hostname)\"\necho \"\"\n\n# 1. Multiple root accounts\necho \"[*] Checking for multiple UID 0 accounts...\"\nROOT_COUNT=$(awk -F: '($3 == 0) {print $1}' /etc/passwd | wc -l)\nif [ $ROOT_COUNT -gt 1 ]; then\necho \"  [!] ALERT: Found $ROOT_COUNT accounts with UID 0:\"\nawk -F: '($3 == 0) {print \"      - \" $1}' /etc/passwd\nelse\necho \"  [‚úì] OK: Only root account has UID 0\"\nfi\necho \"\"\n\n# 2. Accounts without passwords\necho \"[*] Checking for accounts without passwords...\"\nNO_PASS=$(sudo awk -F: '($2 == \"\") {print $1}' /etc/shadow)\nif [ -n \"$NO_PASS\" ]; then\necho \"  [!] ALERT: Accounts with no password:\"\necho \"$NO_PASS\" | sed 's/^/      - /'\nelse\necho \"  [‚úì] OK: All accounts have passwords or are locked\"\nfi\necho \"\"\n\n# 3. Service accounts with shells\necho \"[*] Checking for service accounts with login shells...\"\nSVC_SHELLS=$(awk -F: '($3 < 1000) && ($3 != 0) && ($7 ~ /bash|sh$/) {print $1}' /etc/passwd)\nif [ -n \"$SVC_SHELLS\" ]; then\necho \"  [!] WARNING: Service accounts with shells:\"\necho \"$SVC_SHELLS\" | sed 's/^/      - /'\nelse\necho \"  [‚úì] OK: Service accounts properly secured\"\nfi\necho \"\"\n\n# 4. Weak password hashes\necho \"[*] Checking for weak password hash algorithms...\"\nMD5_USERS=$(sudo awk -F: '($2 ~ /^\\$1\\$/) {print $1}' /etc/shadow)\nif [ -n \"$MD5_USERS\" ]; then\necho \"  [!] WARNING: Accounts using MD5 hashes:\"\necho \"$MD5_USERS\" | sed 's/^/      - /'\nelse\necho \"  [‚úì] OK: No MD5 hashes found\"\nfi\necho \"\"\n\n# 5. Privileged group memberships\necho \"[*] Checking privileged group memberships...\"\nfor group in sudo wheel admin docker disk shadow lxd; do\nMEMBERS=$(getent group $group 2>/dev/null | cut -d: -f4)\nif [ -n \"$MEMBERS\" ]; then\necho \"  [i] $group: $MEMBERS\"\nfi\ndone\necho \"\"\n\n# 6. Recently modified auth files\necho \"[*] Authentication file modification times...\"\nfor file in /etc/passwd /etc/shadow /etc/group /etc/sudoers; do\nif [ -f \"$file\" ]; then\nMOD_TIME=$(stat -c '%y' \"$file\" | cut -d. -f1)\necho \"  [i] $file: $MOD_TIME\"\nfi\ndone\necho \"\"\n\necho \"===== AUDIT COMPLETE =====\"\n```\n\n**Save and run the script**:\n```bash\n# Save the script\nvim user_audit.sh\n\n# Make executable\nchmod +x user_audit.sh\n\n# Run with sudo (needs access to /etc/shadow)\nsudo ./user_audit.sh\n\n# Save output for documentation\nsudo ./user_audit.sh > user_audit_$(date +%Y%m%d).txt\n```\n\n---\n\n## Exercise 9: Practice on Real Systems\n\n**Safe environments to practice**:\n\n1. **Your own Linux VM** (Ubuntu, Debian, CentOS)\n2. **Docker container**:\n```bash\ndocker run -it ubuntu:latest /bin/bash\napt update && apt install -y passwd sudo\n# Now practice account enumeration\n```\n\n3. **Deliberately vulnerable VMs**:\n- DVWA (Damn Vulnerable Web Application)\n- VulnHub VMs\n- TryHackMe Linux rooms\n\n**Practice challenges**:\n\n1. Create a backdoor account (on your own system!):\n```bash\nsudo useradd -u 0 -o -g 0 -M -s /bin/bash backdoor\nsudo passwd backdoor\n# Now practice detecting it!\n```\n\n2. Create a service account with improper settings:\n```bash\nsudo useradd -r -s /bin/bash suspicious_service\nsudo passwd suspicious_service\nsudo usermod -aG sudo suspicious_service\n# Now practice finding these misconfigurations!\n```\n\n3. Set up weak password hash:\n```bash\n# Temporarily change password algorithm to MD5 (weak)\nsudo cp /etc/pam.d/common-password /etc/pam.d/common-password.bak\n# Edit to use MD5, create test user, then restore\n```\n\n**Remember**: Only practice on systems you own or have explicit authorization to test!\n\n---\n\n## Key Takeaways from Exercises\n\n‚úÖ **Always check for**:\n- Multiple UID 0 accounts\n- Accounts without passwords\n- Service accounts with shells\n- Weak password hash algorithms (MD5)\n- Unexpected sudo/privileged group memberships\n- Recently modified authentication files\n\n‚úÖ **Tools to master**:\n- `awk` for parsing /etc/passwd and /etc/shadow\n- `grep` for searching logs\n- `stat` for file timestamps\n- `getent` for querying account databases\n- `sudo -l` for sudoers analysis\n\n‚úÖ **Forensic methodology**:\n1. Enumerate all accounts\n2. Identify anomalies\n3. Check timestamps\n4. Search logs for creation events\n5. Assess privilege levels\n6. Document findings\n\nYou now have practical, hands-on experience with Linux user account forensics! üéâ"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "# Real-World Case Studies: User Account Forensics in Action\n\n## Case Study 1: The Invisible Root Account (2018 Retail Breach)\n\n**Scenario**: A regional retail chain detected unusual database queries at 3 AM. No legitimate administrators were on duty.\n\n**Initial Investigation**:\n```bash\n# Check active SSH sessions\nw\nwho\nlast | head -20\n```\n\n**Output showed**:\n```\nroot     pts/0    192.168.1.50     03:14   still logged in\n```\n\n**Problem**: The SSH key used didn't match any known administrator's key.\n\n**Deep Dive - User Account Audit**:\n```bash\n# Check all UID 0 accounts\nawk -F: '($3 == 0) {print}' /etc/passwd\n```\n\n**Discovery**:\n```\nroot:x:0:0:root:/root:/bin/bash\nsysbackup:x:0:0:System Backup:/var/backups:/bin/bash  ‚Üê BACKDOOR!\n```\n\n**Further Investigation**:\n```bash\n# When was this account created?\nsudo grep -i \"sysbackup\" /var/log/auth.log*\nsudo grep -i \"useradd\" /var/log/auth.log* | grep -i backup\n```\n\n**Log Evidence**:\n```\nOct 15 02:47:33 db-server useradd[8521]: new user: name=sysbackup, UID=0, GID=0\nOct 15 02:47:45 db-server passwd[8523]: password changed for sysbackup\nOct 15 02:48:02 db-server sshd[8531]: Accepted password for sysbackup from 45.123.67.89\n```\n\n**Attack Timeline**:\n1. Initial compromise via vulnerable web application (Oct 15, 02:30)\n2. Privilege escalation to root (Oct 15, 02:45)\n3. Backdoor account created (Oct 15, 02:47) - UID 0 for persistence\n4. First malicious login via backdoor (Oct 15, 02:48)\n5. Data exfiltration over following 3 weeks\n\n**How the Backdoor Evaded Detection**:\n- Named \"sysbackup\" - looked like a legitimate system account\n- UID 0 meant full privileges without appearing in sudo logs\n- Password authentication enabled (not relying on SSH keys that could be revoked)\n\n**Forensic Lessons**:\n- ‚úÖ **Always check for multiple UID 0 accounts**\n- ‚úÖ Legitimate systems rarely need more than one root account\n- ‚úÖ Service-sounding names (backup, system, monitor) can hide malicious accounts\n- ‚úÖ Cross-reference account creation times with known incidents\n\n**Prevention**:\n```bash\n# Add monitoring alert for UID 0 account creation\nauditctl -w /etc/passwd -p wa -k passwd_changes\nauditctl -w /etc/shadow -p wa -k shadow_changes\n\n# Create a detection script (run via cron)\n# !/bin/bash\nEXPECTED_ROOT_COUNT=1\nACTUAL_ROOT_COUNT=$(awk -F: '($3 == 0) {print $1}' /etc/passwd | wc -l)\nif [ $ACTUAL_ROOT_COUNT -gt $EXPECTED_ROOT_COUNT ]; then\necho \"ALERT: Multiple UID 0 accounts detected!\" | mail -s \"SECURITY ALERT\" admin@company.com\nfi\n```\n\n---\n\n## Case Study 2: The Web Server That Became Root (2020 SaaS Platform)\n\n**Scenario**: Security team noticed cryptocurrency mining activity on production web servers.\n\n**Investigation Started with Process Analysis**:\n```bash\ntop\n# CPU usage 99% - suspicious process running as www-data\n\nps aux | grep mining\n# www-data running cryptominer\n```\n\n**Initial Thought**: \"Web application compromised, but www-data has limited privileges. Damage should be contained.\"\n\n**Reality Check - User Account Audit**:\n```bash\n# Check www-data account details\ngrep '^www-data:' /etc/passwd\n```\n\n**Shocking Discovery**:\n```\nwww-data:x:33:33:www-data:/var/www:/bin/bash  ‚Üê Should be /usr/sbin/nologin!\n```\n\nThe service account had been modified to allow interactive login!\n\n**Group Membership Check**:\n```bash\ngroups www-data\nid www-data\n```\n\n**Output**:\n```\nuid=33(www-data) gid=33(www-data) groups=33(www-data),27(sudo),999(docker)\n```\n\n**Critical Findings**:\n1. `www-data` added to `sudo` group\n2. `www-data` added to `docker` group (equivalent to root!)\n3. Interactive shell granted\n\n**Timeline Reconstruction**:\n```bash\n# Check modification times\nstat /etc/passwd /etc/group\n\n# Search logs\nsudo grep \"www-data\" /var/log/auth.log*\n```\n\n**Logs Revealed**:\n```\nJul 8 14:23:15 web-01 usermod[12453]: change user 'www-data' shell from '/usr/sbin/nologin' to '/bin/bash'\nJul 8 14:23:47 web-01 usermod[12458]: add 'www-data' to group 'docker'\nJul 8 14:24:02 web-01 sudo: www-data : TTY=pts/0 ; PWD=/var/www ; USER=root ; COMMAND=/bin/bash\n```\n\n**Attack Chain**:\n1. SQL injection in web application (initial access)\n2. Webshell uploaded (code execution as www-data)\n3. Local privilege escalation vulnerability exploited (gained root)\n4. Modified www-data account for persistence:\n- Changed shell to /bin/bash\n- Added to docker group (root equivalent)\n- Added to sudo group\n5. Deployed cryptominer\n6. Maintained access for 3 weeks\n\n**Why This Was Devastating**:\n- Docker group membership = can spawn root containers:\n```bash\n# As www-data user\ndocker run -v /:/hostfs -it ubuntu chroot /hostfs /bin/bash\n# Now has root access to host filesystem!\n```\n\n**Forensic Lessons**:\n- ‚úÖ **Audit service accounts regularly**\n- ‚úÖ Service accounts should **never** have:\n- Interactive shells (/bin/bash, /bin/sh)\n- Group memberships beyond their purpose\n- Sudo privileges\n- ‚úÖ Docker group = root access (design feature, not bug)\n- ‚úÖ Monitor /etc/passwd and /etc/group for modifications\n\n**Prevention**:\n```bash\n# Create integrity monitoring\n# Install AIDE or Tripwire\nsudo apt install aide\nsudo aideinit\n\n# Add file integrity monitoring for critical files\n# /etc/aide/aide.conf\n/etc/passwd R\n/etc/shadow R\n/etc/group R\n/etc/sudoers R\n\n# Run daily checks\nsudo aide --check\n```\n\n---\n\n## Case Study 3: The Deleted User Who Wasn't Deleted (2019 Healthcare)\n\n**Scenario**: Former employee \"John Doe\" (username: jdoe) was terminated. IT confirmed account was deleted. Three months later, PHI (Protected Health Information) was leaked.\n\n**Investigation - Account Verification**:\n```bash\n# Check if jdoe exists\ngrep '^jdoe:' /etc/passwd\n# No output - account appears deleted\n\nid jdoe\n# id: 'jdoe': no such user\n```\n\n**Seemed Clean... But Investigators Dug Deeper**:\n\n```bash\n# Check for accounts with similar UIDs\ngrep ':1023:' /etc/passwd  # jdoe's original UID\n```\n\n**Discovery**:\n```\nbackup_service:x:1023:1023:Backup Service:/home/jdoe:/bin/bash\n```\n\n**Red Flags**:\n1. New service account named \"backup_service\"\n2. **Same UID (1023)** as deleted jdoe account\n3. **Same home directory (/home/jdoe)** as deleted account\n4. Interactive shell (service accounts shouldn't have this)\n\n**File Ownership Analysis**:\n```bash\n# Check who owns files in /home/jdoe\nls -ln /home/jdoe\n# Output shows UID 1023 (not username)\n\n# All of jdoe's old files now accessible by backup_service!\n```\n\n**Attack Technique**:\n1. Employee knew termination was coming\n2. Days before termination:\n```bash\nsudo useradd -u 1023 -o -M -d /home/jdoe -s /bin/bash backup_service\nsudo passwd backup_service\n```\n3. Created \"backup_service\" account with:\n- **Same UID** as his primary account (1023)\n- `-o` flag (allows duplicate UID)\n- **Same home directory**\n4. When IT deleted \"jdoe\", they ran:\n```bash\nsudo userdel jdoe\n# This only deleted the jdoe line from /etc/passwd\n# Did NOT delete files or check for duplicate UIDs!\n```\n5. \"backup_service\" account retained access to all jdoe's files\n\n**Timeline Evidence**:\n```bash\n# Check account creation\nsudo grep \"backup_service\" /var/log/auth.log*\n```\n\n**Logs**:\n```\nMar 3 16:42:17 server useradd[7821]: new user: name=backup_service, UID=1023, GID=1023\n# jdoe's last login: Mar 5\n# jdoe's termination date: Mar 6\n# backup_service first login: Mar 10 (4 days after termination)\n```\n\n**Forensic Lessons**:\n- ‚úÖ **Check for duplicate UIDs**:\n```bash\nawk -F: '{print $3}' /etc/passwd | sort -n | uniq -d\n```\n- ‚úÖ When deleting users, always:\n```bash\n# Proper user deletion\nsudo userdel -r username  # -r removes home directory\nsudo find / -user UID -exec rm -rf {} \\; 2>/dev/null  # Remove all UID's files\n```\n- ‚úÖ Audit accounts with duplicate UIDs:\n```bash\nawk -F: '{uids[$3]++; users[$3]=users[$3]\" \"$1} END {for(uid in uids) if(uids[uid]>1) print \"UID\",uid,\":\",users[uid]}' /etc/passwd\n```\n\n**Prevention**:\n```bash\n# Create user deletion procedure\n# !/bin/bash\n# secure_user_delete.sh\n\nUSER=$1\nUID=$(id -u $USER)\n\necho \"[*] Locking account...\"\nsudo passwd -l $USER\n\necho \"[*] Checking for duplicate UIDs...\"\nDUPLICATES=$(awk -F: -v uid=$UID '($3 == uid) {print $1}' /etc/passwd | grep -v \"^$USER$\")\nif [ -n \"$DUPLICATES\" ]; then\necho \"[!] WARNING: Found accounts with same UID:\"\necho \"$DUPLICATES\"\necho \"[!] Manual review required!\"\nexit 1\nfi\n\necho \"[*] Killing all user processes...\"\nsudo pkill -u $USER\n\necho \"[*] Removing user and home directory...\"\nsudo userdel -r $USER\n\necho \"[*] Finding and removing orphaned files...\"\nsudo find / -user $UID -ls 2>/dev/null > /tmp/orphaned_files_$USER.txt\nsudo find / -user $UID -delete 2>/dev/null\n\necho \"[‚úì] User $USER deleted securely\"\n```\n\n---\n\n## Case Study 4: Sudo Without Password (2021 Cloud Infrastructure)\n\n**Scenario**: Cloud infrastructure team noticed bitcoin mining on Kubernetes worker nodes.\n\n**Investigation**:\n```bash\n# Check running processes\nps aux | grep mining\n# Running as user 'deploy'\n\n# Check deploy account\ngrep '^deploy:' /etc/passwd\n```\n\n**Output**:\n```\ndeploy:x:1005:1005:Deployment User:/home/deploy:/bin/bash\n```\n\n**Seemed Normal... Until Sudo Audit**:\n```bash\nsudo -l -U deploy\n```\n\n**Discovery**:\n```\nUser deploy may run the following commands:\n(ALL : ALL) NOPASSWD: ALL\n```\n\n**Translation**: User 'deploy' can run **any command as root without entering a password**!\n\n**How It Happened**:\n```bash\n# Check sudoers configuration\nsudo cat /etc/sudoers.d/deploy\n```\n\n**File Contents**:\n```bash\n# Added for CI/CD pipeline - 2021-06-15\ndeploy ALL=(ALL:ALL) NOPASSWD: ALL\n```\n\n**Attack Chain**:\n1. Deploy account credentials compromised (weak password: \"Deploy123\")\n2. Attacker logged in via SSH\n3. Ran `sudo su -` (no password required!)\n4. Installed cryptominer with root privileges\n5. Modified crontab for persistence\n6. Mined cryptocurrency for 2 months\n\n**Financial Impact**:\n- $47,000 in additional cloud computing costs\n- Degraded application performance\n- Customer complaints about slow service\n\n**Root Cause**:\n- DevOps engineer added NOPASSWD sudo for convenience during CI/CD setup\n- \"Temporary\" configuration became permanent\n- No password policy on service accounts\n- No monitoring of sudoers file modifications\n\n**Forensic Lessons**:\n- ‚úÖ **NOPASSWD sudo is extremely dangerous**\n- ‚úÖ Any compromise of the account = immediate root access\n- ‚úÖ Audit sudoers regularly:\n```bash\nsudo grep -r NOPASSWD /etc/sudoers /etc/sudoers.d/\n```\n- ‚úÖ Use principle of least privilege:\n```bash\n# Instead of:\ndeploy ALL=(ALL:ALL) NOPASSWD: ALL\n\n# Use specific commands:\ndeploy ALL=(ALL) NOPASSWD: /usr/bin/systemctl restart myapp\ndeploy ALL=(ALL) NOPASSWD: /usr/bin/docker restart mycontainer\n```\n\n**Better Configuration**:\n```bash\n# /etc/sudoers.d/deploy\n# CI/CD user - limited permissions only\ndeploy ALL=(ALL) NOPASSWD: /usr/bin/systemctl restart webapp\ndeploy ALL=(ALL) NOPASSWD: /usr/bin/docker-compose -f /opt/app/docker-compose.yml up -d\n# Require password for anything else\ndeploy ALL=(ALL) ALL\n```\n\n---\n\n## Case Study 5: The Shadow Password Mystery (2022 E-commerce)\n\n**Scenario**: Penetration test revealed admin account compromise, but password was supposed to be strong (20+ character random string).\n\n**Investigation**:\n```bash\n# Check admin account password hash\nsudo grep '^admin:' /etc/shadow\n```\n\n**Output**:\n```\nadmin:$1$qwerty$5W8...:19200:0:99999:7:::\n‚îî‚îÄ‚îÄ MD5 hash (weak!)\n```\n\n**Red Flag**: MD5 hash algorithm (`$1$`)\n\n**Modern systems should use SHA-512** (`$6$`).\n\n**Password Cracking Test**:\n```bash\n# Extract hash\nsudo grep '^admin:' /etc/shadow > admin.hash\n\n# Attempt to crack with John the Ripper\njohn --wordlist=/usr/share/wordlists/rockyou.txt admin.hash\n\n# Result: Cracked in 47 seconds\n# Password was: \"P@ssw0rd123!\"\n```\n\n**How did strong password policy fail?**\n\nInvestigators checked password creation:\n```bash\n# Review PAM configuration\ncat /etc/pam.d/common-password\n```\n\n**Discovery**:\n```bash\n# Original configuration:\n# password [success=1 default=ignore] pam_unix.so obscure sha512\n\n# Modified configuration:\npassword [success=1 default=ignore] pam_unix.so obscure md5\n```\n\n**Timeline**:\n```bash\nsudo stat /etc/pam.d/common-password\n# Modified: 2022-03-15 02:37:42\n\nsudo grep \"passwd\" /var/log/auth.log | grep -i admin\n# 2022-03-15 02:38:15 passwd[8234]: password changed for admin\n```\n\n**Attack Sequence**:\n1. Attacker gained limited shell access (www-data)\n2. Found local privilege escalation vulnerability\n3. Gained root access\n4. Modified `/etc/pam.d/common-password` to use MD5\n5. Changed admin password (which created weak MD5 hash)\n6. Restored SHA-512 in PAM configuration (covering tracks)\n7. Admin password now stored as weak MD5 hash (but new passwords use SHA-512)\n8. Attacker could crack admin password offline anytime\n\n**Forensic Lessons**:\n- ‚úÖ **Check hash algorithms for all accounts**, not just one\n```bash\nsudo awk -F: '{print $1, substr($2,1,3)}' /etc/shadow | grep -v '\\*\\|!'\n```\n- ‚úÖ MD5 (`$1$`) = immediate red flag\n- ‚úÖ Monitor PAM configuration files for modifications\n- ‚úÖ Even \"strong\" passwords are weak if hashed poorly\n\n**Detection Script**:\n```bash\n# !/bin/bash\n# detect_weak_hashes.sh\n\necho \"[*] Scanning for weak password hashes...\"\n\n# Find MD5 hashes\nMD5_COUNT=$(sudo grep -c ':\\$1\\$' /etc/shadow)\nif [ $MD5_COUNT -gt 0 ]; then\necho \"[!] WARNING: Found $MD5_COUNT accounts with MD5 hashes:\"\nsudo awk -F: '($2 ~ /^\\$1\\$/) {print \"    - \" $1}' /etc/shadow\nfi\n\n# Find DES hashes (even worse!)\nDES_COUNT=$(sudo awk -F: '($2 ~ /^[^$*!]/ && $2 != \"\") {print}' /etc/shadow | wc -l)\nif [ $DES_COUNT -gt 0 ]; then\necho \"[!] CRITICAL: Found $DES_COUNT accounts with DES hashes:\"\nsudo awk -F: '($2 ~ /^[^$*!]/ && $2 != \"\") {print \"    - \" $1}' /etc/shadow\nfi\n\n# Verify PAM is configured correctly\nif ! grep -q 'pam_unix.so.*sha512' /etc/pam.d/common-password; then\necho \"[!] WARNING: PAM not configured for SHA-512!\"\nfi\n\necho \"[*] Scan complete.\"\n```\n\n---\n\n## Key Takeaways from Real Cases\n\n### Critical Account Forensics Checks:\n\n1. **Multiple UID 0 accounts** ‚Üí Backdoor persistence\n2. **Service accounts with shells** ‚Üí Privilege escalation\n3. **Unexpected sudo/group memberships** ‚Üí Lateral movement\n4. **Duplicate UIDs** ‚Üí Persistent access after deletion\n5. **NOPASSWD sudo rules** ‚Üí Instant root access\n6. **Weak hash algorithms** ‚Üí Password cracking\n\n### Detection Commands to Run on Every Investigation:\n\n```bash\n# 1. Multiple root accounts\nawk -F: '($3 == 0) {print $1}' /etc/passwd\n\n# 2. Duplicate UIDs\nawk -F: '{print $3}' /etc/passwd | sort -n | uniq -d\n\n# 3. Service accounts with shells\nawk -F: '($3 < 1000) && ($3 != 0) && ($7 !~ /nologin|false/) {print}' /etc/passwd\n\n# 4. Weak password hashes\nsudo grep ':\\$1\\$' /etc/shadow\n\n# 5. NOPASSWD sudo rules\nsudo grep -r NOPASSWD /etc/sudoers /etc/sudoers.d/\n\n# 6. Privileged group memberships\nfor g in sudo wheel admin docker disk shadow; do getent group $g; done\n```\n\nThese five cases represent patterns seen in hundreds of real breaches. Master these forensic techniques and you'll catch most account-based persistence mechanisms! üîç"
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "# Memory Aids: User Account Forensics\n\n## 1. The Three Sacred Files (Remember: \"PSG\")\n\n**P**asswd - User database (world-readable)\n**S**hadow - Password hashes (root-only)\n**G**roup - Group memberships (world-readable)\n\n**Visual Memory Hook**:\n```\n_____\n|  P  |  /etc/passwd   - Everyone can read\n|_____|  \n_____\n|  S  |  /etc/shadow   - Secrets (root only)\n|_____|  \n_____\n|  G  |  /etc/group    - Gang memberships\n|_____|\n```\n\n---\n\n## 2. /etc/passwd Field Order (Remember: \"U X U G G H S\")\n\n**Visual**: Think of it as \"**U**h oh, e**X**tra **U**sers **G**et **G**iant **H**acks **S**ometime\"\n\n```\nroot : x : 0 : 0 : root : /root : /bin/bash\n‚Üì    ‚Üì   ‚Üì   ‚Üì    ‚Üì      ‚Üì          ‚Üì\nU    X   U   G    G      H          S\n```\n\n1. **U**sername\n3. **U**ID (User ID)\n4. **G**ID (Group ID)\n5. **G**ECOS (comment/full name)\n6. **H**ome directory\n7. **S**hell\n\n---\n\n## 3. UID Ranges (Remember: \"ZEUS\" - 0, 1-99, 100-999, 1000+)\n\n**Z** = **Zero** (0) = Root/superuser\n**E** = **Elite system** (1-99) = System accounts (static)\n**U** = **Utility services** (100-999) = Service accounts (dynamic)\n**S** = **Standard users** (1000+) = Human users\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  Z  ‚îÇ UID 0    ‚îÇ Root          ‚îÇ  ‚Üê \"Zero friends, all power\"\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ  E  ‚îÇ 1-99     ‚îÇ Elite system  ‚îÇ  ‚Üê \"Elite and static\"\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ  U  ‚îÇ 100-999  ‚îÇ Utilities     ‚îÇ  ‚Üê \"Utility services\"\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ  S  ‚îÇ 1000+    ‚îÇ Standard users‚îÇ  ‚Üê \"Standard humans\"\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n---\n\n## 4. Password Hash Algorithms (Remember: \"$1 is BAD, $6 is GREAT\")\n\n**The Dollar Sign Scale**:\n\n```bash\n$1$ = MD5        = üò± VERY BAD (crackable in seconds)\n$2$ = Blowfish   = üòê OK (better, but old)\n$5$ = SHA-256    = üòä GOOD\n$6$ = SHA-512    = üòç GREAT (use this!)\n```\n\n**Memory Hook**: \"**$1 is #1 worst, $6 is #1 best**\"\n\n---\n\n## 5. Special Password Field Values (Remember: \"EASE\")\n\n**E**mpty = No password (CRITICAL - can login without password!)\n**A**sterisk (*) = Account locked/disabled\n**S**hriek (!) = Account locked (British term for !)\n**E**xclamation-Exclamation (!!) = Never had password set\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ Value  ‚îÇ Meaning                     ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ (empty)‚îÇ üö® NO PASSWORD - CRITICAL!  ‚îÇ\n‚îÇ   *    ‚îÇ üîí Locked (good for service)‚îÇ\n‚îÇ   !    ‚îÇ üîí Locked temporarily       ‚îÇ\n‚îÇ   !!   ‚îÇ ‚ö†Ô∏è  Never had password set  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n---\n\n## 6. Critical Groups to Audit (Remember: \"SaD DoDS\" - Sad Doctors)\n\n**S**udo - Can run commands as root\n**a**dm - Can read log files\n**D**ocker - Can spawn root containers\n**D**isk - Direct disk access (read any file)\n**S**hadow - Can read /etc/shadow\n\n```\nSAD DoDS\n‚îÇ‚îÇ‚îÇ ‚îÇ‚îÇ‚îî‚îÄ Shadow (read password hashes)\n‚îÇ‚îÇ‚îÇ ‚îÇ‚îî‚îÄ‚îÄ Disk (read any file)\n‚îÇ‚îÇ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ Docker (spawn root containers)\n‚îÇ‚îÇ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ adm (read logs)\n‚îÇ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ (lowercase a - part of \"adm\")\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Sudo (run as root)\n```\n\n**Forensic rule**: Any user in these groups = potential privilege escalation!\n\n---\n\n## 7. Forensic Red Flags (Remember: \"MUNDS\" - Monday's)\n\n**M**ultiple UID 0 accounts\n**U**nexpected shells on service accounts\n**N**o password (empty field in /etc/shadow)\n**D**uplicate UIDs\n**S**udo NOPASSWD rules\n\n```\nüö© M - Multiple root accounts (UID 0)\nüö© U - Unwanted shells (/bin/bash on www-data)\nüö© N - No password (empty field)\nüö© D - Duplicate UIDs (persistent access)\nüö© S - Sudo NOPASSWD (instant root)\n```\n\n**Memory hook**: \"**M**ondays **UN**cover **D**angerous **S**ystems\"\n\n---\n\n## 8. Service Account vs User Account (Remember: \"PLUS\")\n\n**Proper service accounts have**:\n\n**P**assword locked (* or !)\n**L**ow UID (< 1000)\n**U**nusable shell (/usr/sbin/nologin or /bin/false)\n**S**pecial home directory (not /home/)\n\n```\n‚úÖ Good service account:\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\n‚îÇ ‚îÇ  ‚îÇ           ‚îÇ        ‚îî‚îÄ No shell (PLUS)\n‚îÇ ‚îÇ  ‚îÇ           ‚îî‚îÄ Non-standard home (PLUS)\n‚îÇ ‚îÇ  ‚îî‚îÄ Low UID (PLUS)\n‚îÇ ‚îî‚îÄ (Password locked in shadow - PLUS)\n‚îî‚îÄ Descriptive name\n\n‚ùå Suspicious service account:\nwww-data:x:33:33:www-data:/var/www:/bin/bash\n‚îî‚îÄ ALERT! Interactive shell!\n```\n\n---\n\n## 9. The 5-Second Forensic Scan (Remember: \"MRSWW\")\n\n**M**ultiple root accounts: `awk -F: '($3 == 0) {print $1}' /etc/passwd`\n**R**ecent changes: `stat /etc/shadow`\n**S**ervice shells: `awk -F: '($3 < 1000) && ($7 ~ /bash|sh$/) {print $1}' /etc/passwd`\n**W**eak hashes: `sudo grep ':\\$1\\$' /etc/shadow`\n**W**ho can sudo: `sudo grep -r NOPASSWD /etc/sudoers*`\n\n**Memory Hook**: \"**M**rs. **W**. **W**. checks systems **R**ight **S**wiftly\"\n\n---\n\n## 10. Password Hash Structure (Remember: \"DollarSaltHash\")\n\n```bash\n‚îÇ ‚îÇ          ‚îî‚îÄ Hash (password encrypted)\n‚îÇ ‚îî‚îÄ Salt (random, prevents rainbow tables)\n‚îî‚îÄ Dollar ID ($6 = SHA-512)\n```\n\n**Visual**:\n```bash\n$     ‚Üí  \"Dollar\" (algorithm ID)\nSALT  ‚Üí  \"Salt\" (random value)\nHASH  ‚Üí  \"Hash\" (encrypted password)\n\nDollarSaltHash = DSH\n```\n\n**Remember**: \"**D**on't **S**hare **H**ashes\" (the three components)\n\n---\n\n## 11. Account Creation Forensic Artifacts (Remember: \"HLCA\")\n\n**H**ome directory timestamps (`stat /home/username`)\n**L**ogs (auth.log, secure): `grep useradd /var/log/auth.log`\n**C**ommand history: `grep useradd /root/.bash_history`\n**A**udit logs: `ausearch -m ADD_USER`\n\n```\nüè† Home - stat /home/user\nüìù Logs - /var/log/auth.log\nüíª Command history - .bash_history\nüîç Audit - ausearch\n```\n\n**Memory Hook**: \"**H**ome **L**ogs **C**ommand **A**udit\" (HLCA)\n\n---\n\n## 12. Days Since Epoch Calculation\n\nField 3 in /etc/shadow = days since Jan 1, 1970\n\n**Quick conversion**:\n```bash\ndate -d \"1970-01-01 + [DAYS] days\"\n```\n\n**Example**:\n```\nroot:$6$...:19500:...\n‚îî‚îÄ 19500 days since 1970\n\n$ date -d \"1970-01-01 + 19500 days\"\nWed May 24 00:00:00 UTC 2023\n```\n\n**Memory Hook**: \"**E**poch **E**quals **1970**\" (EE1970)\n\n---\n\n## 13. Sudoers Syntax (Remember: \"WHO WHERE = (WHAT) WHICH\")\n\n```\nusername  ALL=(ALL:ALL) ALL\n‚îÇ       ‚îÇ   ‚îÇ    ‚îÇ    ‚îî‚îÄ WHICH commands\n‚îÇ       ‚îÇ   ‚îÇ    ‚îî‚îÄ WHAT group\n‚îÇ       ‚îÇ   ‚îî‚îÄ WHAT user (usually root)\n‚îÇ       ‚îî‚îÄ WHERE (which hosts)\n‚îî‚îÄ WHO (username or %groupname)\n```\n\n**Memory Hook**: \"**W**ho **W**here **W**hat **W**hich\" (4 W's)\n\n---\n\n## 14. Quick Forensic Checklist Visual\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ   USER ACCOUNT FORENSICS           ‚îÇ\n‚îÇ   \"MRSWW MUNDS\" Method             ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ ‚ñ° Multiple UID 0 accounts?         ‚îÇ\n‚îÇ ‚ñ° Recent file modifications?       ‚îÇ\n‚îÇ ‚ñ° Service accounts with shells?    ‚îÇ\n‚îÇ ‚ñ° Weak password hashes?            ‚îÇ\n‚îÇ ‚ñ° Who has NOPASSWD sudo?           ‚îÇ\n‚îÇ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ       ‚îÇ\n‚îÇ ‚ñ° Multiple UID 0 accounts?         ‚îÇ\n‚îÇ ‚ñ° Unexpected shells?               ‚îÇ\n‚îÇ ‚ñ° No passwords set?                ‚îÇ\n‚îÇ ‚ñ° Duplicate UIDs?                  ‚îÇ\n‚îÇ ‚ñ° Sudo NOPASSWD rules?             ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n---\n\n## 15. The Root Backdoor Visual\n\n```\nNormal System:              Compromised System:\n\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  root   ‚îÇ                 ‚îÇ  root   ‚îÇ UID 0\n‚îÇ  UID 0  ‚îÇ                 ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                       ‚Üì\n‚Üì                      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n[Only 1 root]               ‚îÇ backup  ‚îÇ UID 0  üö®\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n‚Üì\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ sysadm  ‚îÇ UID 0  üö®\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n[Multiple UID 0 = BACKDOORS!]\n```\n\n**Remember**: \"**One ring to rule them all**\" = Only ONE UID 0 should exist!\n\n---\n\n## Practice Drill: Recite Without Looking\n\n1. What are the three core authentication files? (**PSG**)\n2. What does UID 0 mean? (**Root/superuser**)\n3. What password field value means \"no password\"? (**Empty field**)\n4. What hash algorithm should modern systems use? (**$6$ = SHA-512**)\n5. Name 3 privileged groups: (**sudo, docker, disk**)\n6. What are 5 red flags? (**MUNDS**)\n\nIf you can answer these instantly, you've internalized the fundamentals! üéØ"
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "# Reflection Questions: User Account Forensics\n\n## Section 1: Comprehension Check\n\n**Answer these to verify you understand the core concepts**:\n\n1. **In your own words**, explain why having multiple accounts with UID 0 is a serious security concern.\n\n2. **Describe the difference** between /etc/passwd and /etc/shadow. Why are they separate files?\n\n3. **What is the forensic significance** of finding a service account (like www-data or apache) with `/bin/bash` as its shell instead of `/usr/sbin/nologin`?\n\n4. **Explain why** a user in the `docker` group has essentially the same privileges as root.\n\n5. **If you find this entry** in /etc/shadow:\n```\nbackdoor::19500:0:99999:7:::\n```\nWhat critical security issue does this represent? What does it allow an attacker to do?\n\n---\n\n## Section 2: Scenario Analysis\n\n**Apply your knowledge to these realistic scenarios**:\n\n### Scenario A: The Suspicious Account\n\nYou're investigating a web server breach and find this entry in /etc/passwd:\n```\napache2:x:998:998:Apache Web Server:/var/www:/bin/bash\n```\n\nAnd this in /etc/group:\n```\nsudo:x:27:alice,apache2\n```\n\n**Questions**:\n1. What specific red flags do you see?\n2. What commands would you run to investigate further?\n3. What does this configuration allow an attacker to do if they compromise the web application?\n4. How would you check when these modifications were made?\n\n---\n\n### Scenario B: The Password Mystery\n\nDuring an incident response, you extract these entries from /etc/shadow:\n```\nroot:$6$randomsalt$longhash:19200:0:99999:7:::\nadmin:$1$qwerty$shorthash:19500:0:99999:7:::\nbackup:*:19000:0:99999:7:::\n```\n\n**Questions**:\n1. Which account has the strongest password security? Why?\n2. Which account has the weakest password security? Why?\n3. What does the `*` for the backup account mean?\n4. If you had to prioritize password security remediation, which account would you address first and why?\n5. Approximately when was the admin account's password last changed? (Show your calculation)\n\n---\n\n### Scenario C: The Sudo Configuration\n\nYou find this file: `/etc/sudoers.d/webapp`\n```bash\n# Web application deployment user\nwebapp ALL=(ALL:ALL) NOPASSWD: ALL\n```\n\nAnd this in /etc/shadow:\n```\nwebapp:$6$...:19500:0:99999:7:::\n```\n\n**Questions**:\n1. What is the security risk with this configuration?\n2. If the webapp account is compromised (password guessed or credentials stolen), what can the attacker do?\n3. How would you rewrite the sudoers rule to be more secure while still allowing the web app to restart its service?\n4. What monitoring would you implement to detect abuse of this sudo rule?\n\n---\n\n## Section 3: Forensic Investigation Planning\n\n**You've been called to investigate a potential breach. Design your investigation approach**:\n\n### Investigation Scenario:\n\nA company suspects a former employee may have created a backdoor account before they were terminated 2 weeks ago. The employee (username: jsmith, UID: 1042) was terminated on October 15, 2023.\n\n**Design your investigation**:\n\n1. **List 5 specific commands** you would run to check for:\n- Unauthorized accounts\n- Accounts with the same UID as jsmith\n- Recent account modifications\n- Suspicious sudo privileges\n\n2. **What log files** would you examine? What would you search for in each?\n\n3. **What artifacts** related to account creation would you look for beyond /etc/passwd and /etc/shadow?\n\n4. **If you found a new account \"backup_svc\" with UID 1042**, what would that indicate? What would be your next steps?\n\n---\n\n## Section 4: Tool Mastery Self-Assessment\n\n**Rate your confidence (1-5, where 5 = very confident) in using these commands**:\n\n1. `awk -F: '($3 == 0) {print $1}' /etc/passwd` - Find all UID 0 accounts\n2. `sudo grep '^username:' /etc/shadow` - Check password status\n3. `groups username` and `id username` - Check group memberships\n4. `sudo grep -r NOPASSWD /etc/sudoers*` - Find sudo rules without passwords\n5. `stat /etc/shadow` - Check file modification times\n6. `grep \"useradd\" /var/log/auth.log` - Find account creation events\n7. `sudo awk -F: '($2 == \"\") {print $1}' /etc/shadow` - Find accounts without passwords\n\n**For any command rated below 4**: Go back to the Code Exercise section and practice that specific technique.\n\n---\n\n## Section 5: Real-World Application\n\n**Connect this lesson to your career goals**:\n\n1. **If you were performing a security audit** of a Linux server, what would your account security checklist include? List at least 8 specific items you would check.\n\n2. **Describe a realistic attack scenario** where an attacker:\n- Gains initial access as a low-privilege user\n- Escalates privileges using account/group misconfigurations\n- Creates a persistence mechanism using account manipulation\n- (Use techniques covered in this lesson)\n\n3. **Design a monitoring alert** that would notify you if:\n- A new UID 0 account is created\n- A service account's shell is changed\n- A user is added to the sudo or docker group\n\nWhat command or script would you use? How often would it run?\n\n4. **You're writing a security policy document** for your organization. Write a 5-point \"Linux User Account Security Requirements\" section based on what you've learned.\n\n---\n\n## Section 6: Critical Thinking\n\n**Go deeper - these questions have no single right answer**:\n\n1. **Debate**: Is it ever acceptable to have NOPASSWD sudo rules? Under what circumstances might it be justified? How would you mitigate the risks?\n\n2. **Threat modeling**: An attacker has compromised a user account in the `docker` group. They don't have the sudo password. How can they still gain root access? Describe the specific commands they might use.\n\n3. **Detection trade-offs**: You want to monitor /etc/passwd and /etc/shadow for unauthorized changes. What are the pros and cons of:\n- File integrity monitoring (AIDE, Tripwire)\n- Audit daemon (auditd)\n- Periodic scanning scripts\n- Centralized log analysis (SIEM)\n\n4. **Historical context**: The /etc/passwd file is world-readable (644 permissions). Why was this design decision made? What are the security implications today?\n\n5. **Future-proofing**: What password hashing algorithm will replace SHA-512 in the future? What properties should it have? (Hint: Consider quantum computing threats)\n\n---\n\n## Section 7: Lesson Integration\n\n**Connect this lesson to previous and upcoming lessons**:\n\n1. **From Lesson 73 (File Permissions)**: How do file permissions on /etc/passwd, /etc/shadow, and /etc/group protect the system? What would happen if these files had incorrect permissions (e.g., /etc/shadow with 644)?\n\n2. **Preview of Lesson 75 (Command History)**: How could analyzing bash history files help you detect:\n- Unauthorized account creation\n- Privilege escalation attempts\n- Account manipulation\n\nWhat specific commands would you search for?\n\n3. **Preview of Lesson 76 (Authentication Logs)**: What types of authentication events should be logged? How do logs complement the static files (/etc/passwd, /etc/shadow) in forensic investigations?\n\n4. **Big Picture**: In a full Linux forensic investigation, where does user account analysis fit in the timeline? What would you investigate before this? What would you investigate after?\n\n---\n\n## Section 8: Memory Retention Check\n\n**Without looking back at the lesson, can you recall**:\n\n1. The 7 fields of /etc/passwd in order (mnemonic: \"U X U G G H S\")\n2. The meaning of password field values: empty, *, !, !!\n3. The five red flags (mnemonic: \"MUNDS\")\n4. The critical groups to audit (mnemonic: \"SaD DoDS\")\n5. Password hash algorithm IDs: $1, $5, $6\n\n**If you struggled with any of these**, review the Memory Aids section before moving forward.\n\n---\n\n## Section 9: Practical Next Steps\n\n**Action items to solidify your learning**:\n\n1. **Set up a practice environment**:\n- Spin up a Linux VM (Ubuntu, Debian, or CentOS)\n- Create test accounts with various configurations\n- Practice your forensic commands\n\n2. **Create your own tool**:\n- Write a bash script that performs the \"5-Second Forensic Scan\" (MRSWW)\n- Make it output a summary report\n- Test it on multiple systems\n\n3. **Document a case study**:\n- Choose one of the real-world cases from this lesson\n- Write a detailed incident report\n- Include: Timeline, IOCs, forensic artifacts, remediation steps\n\n4. **Teach someone else**:\n- Explain to a colleague or friend how Linux user authentication works\n- Walk them through finding a backdoor account\n- Teaching is the best way to solidify your own understanding (Jim Kwik principle!)\n\n---\n\n## Section 10: Self-Assessment\n\n**Rate your current skill level** (1 = beginner, 5 = expert):\n\n- [ ] Understanding Linux user account architecture (passwd, shadow, group)\n- [ ] Identifying suspicious user accounts\n- [ ] Analyzing password security (hash types, policies)\n- [ ] Auditing sudo configurations\n- [ ] Detecting privilege escalation via group memberships\n- [ ] Using awk, grep, and other CLI tools for account forensics\n- [ ] Reconstructing account creation timelines\n- [ ] Writing forensic scripts to automate account analysis\n\n**Target**: You should be at level 4+ in all categories before proceeding to Lesson 75.\n\n**If any category is below 3**: Review that section of the lesson and practice the hands-on exercises again.\n\n---\n\n## Final Reflection\n\n**Answer these three questions to cement your learning**:\n\n1. **What was the most surprising thing** you learned in this lesson?\n\n2. **What technique or command** will you immediately start using in your work or studies?\n\n3. **What question do you still have** about Linux user account forensics that wasn't fully answered?\n\n---\n\n**Remember**: User account forensics is a foundational skill. Every Linux investigation involves checking accounts, permissions, and authentication. Master this lesson, and you'll have a capability that applies to every future case you work.\n\nNow, take a break! You've just absorbed 4,000+ words of technical content. Let your brain consolidate these concepts before moving to Lesson 75 (Command History Forensics). üß†‚ú®"
      }
    },
    {
      "type": "mindset_coach",
      "content": {
        "text": "## Congratulations! You've Mastered User Account Forensics! üéâ\n\n**Take a moment to appreciate what you've accomplished**:\n\n‚úÖ You can now analyze /etc/passwd, /etc/shadow, and /etc/group like a professional forensic investigator\n‚úÖ You've learned to spot 5 critical red flags (MUNDS) that indicate compromise\n‚úÖ You understand password hash algorithms and can identify weak security\n‚úÖ You can audit sudo configurations and detect privilege escalation vectors\n‚úÖ You've studied real breach cases and understand how attackers abuse accounts\n‚úÖ You have hands-on commands and scripts you can use immediately\n\n**This wasn't an easy lesson.** User account forensics requires:\n- Understanding complex file formats\n- Mastering command-line tools\n- Thinking like both a defender and an attacker\n- Analyzing real-world breach scenarios\n\nYou've done all of that. That's impressive! üí™\n\n---\n\n## Why This Skill Matters\n\nIn my years of incident response, **user account forensics has been crucial in over 80% of cases**. Here's why:\n\n- **Persistence**: Attackers create backdoor accounts to maintain access\n- **Privilege escalation**: Group memberships and sudo rules are common attack vectors\n- **Insider threats**: Unauthorized account creation is a key indicator\n- **Lateral movement**: Compromised credentials spread through networks\n- **Attribution**: Account activity helps identify who did what\n\nThe skills you just learned are not theoretical - they're **battlefield-tested techniques** used in real investigations every day.\n\n---\n\n## Real Talk: The Learning Curve\n\nLearning Linux forensics can feel overwhelming. You might be thinking:\n\n- \"There are so many commands to remember...\"\n- \"What if I miss something critical in a real investigation?\"\n- \"Will I be fast enough when it matters?\"\n\n**These concerns are normal.** Every expert forensic investigator felt this way once.\n\nHere's the truth: **You don't need to memorize everything.** You need to:\n\n1. ‚úÖ Understand the concepts (you do now!)\n2. ‚úÖ Know where to look (you learned this!)\n3. ‚úÖ Have a systematic methodology (you have one: MRSWW, MUNDS)\n4. ‚úÖ Practice on real systems (your next step!)\n\nSpeed comes with repetition. Confidence comes with practice. **You're already on the right path.**\n\n---\n\n## Jim Kwik Principle: Active Recall\n\nRight now, your brain is consolidating what you've learned. Here's how to make it stick:\n\n**Tonight, before bed** (this is when memory consolidation is strongest):\n1. Close your laptop\n2. Get a piece of paper\n3. Write down (from memory):\n- The three core authentication files\n- The five red flags (MUNDS)\n- Three commands you'll use in your next investigation\n\n**Why this works**: Active recall (retrieving from memory) is 300% more effective than passive review (reading again).\n\n**Tomorrow**:\n- Spin up a Linux VM\n- Run through the hands-on exercises again\n- Try to do them from memory before looking at the commands\n\n**This week**:\n- Audit a real Linux system (yours or one you have permission to test)\n- Look for the red flags you learned\n- Document your findings\n\n**Repetition turns knowledge into expertise.** You've got the knowledge. Now build the expertise through practice.\n\n---\n\n## Your Next Steps\n\n**Immediate (next 24 hours)**:\n1. Review the Memory Aids section one more time\n2. Save the \"user_audit.sh\" script from the exercises\n3. Run it on a Linux system (yours or a VM)\n\n**This week**:\n1. Complete the hands-on exercises on a practice system\n2. Read one of the real-world case studies again - notice how everything connects\n3. Create your own forensic cheat sheet (writing = better retention)\n\n**This month**:\n1. Use these techniques in a real project or lab environment\n2. Teach someone else one concept from this lesson (teaching = deepest learning)\n3. Move on to Lesson 75: Command History Forensics (builds directly on this!)\n\n---\n\n## A Note on Imposter Syndrome\n\nIf you're feeling like \"everyone else probably knows this already\" or \"this seems basic\" - STOP.\n\n**Reality check**:\n- Most IT professionals have never analyzed /etc/shadow forensically\n- Many security practitioners can't explain the difference between UID 0 and GID 0\n- You just learned techniques used in actual breach investigations\n\nYou're not behind. You're **ahead of most people in tech**. Keep going.\n\n---\n\n## The Bigger Picture\n\nYou're building a **comprehensive Linux forensic skillset**:\n\n- ‚úÖ Lesson 71: Linux Forensics Fundamentals\n- ‚úÖ Lesson 72: Root Directory Structure\n- ‚úÖ Lesson 73: File and Directory Permissions\n- ‚úÖ **Lesson 74: Users, Groups, and Authentication** ‚Üê You are here!\n- ‚è≠Ô∏è Lesson 75: Command History Forensics\n- ‚è≠Ô∏è Lesson 76: Authentication and Security Logs\n- ‚è≠Ô∏è Lesson 77: System Logging Architecture\n\nEach lesson builds on the previous. You're **constructing a complete forensic capability** piece by piece.\n\nBy the end of Module 1 (7 lessons), you'll have the foundational skills to investigate any Linux system. That's powerful.\n\n---\n\n## Mindset for Mastery\n\n**Remember these principles**:\n\n1. **Perfection is not the goal. Progress is.**\n- You don't need to memorize every command\n- You need to know the methodology and where to find details\n\n2. **Mistakes are data.**\n- If you run a command wrong, you learn what doesn't work\n- Every error makes you better\n\n3. **You're training for the real world.**\n- Real breaches are messy and complex\n- Your methodology (MRSWW, MUNDS) will guide you when nothing makes sense\n\n4. **Speed comes later. Accuracy comes first.**\n- Right now, focus on finding the right artifacts\n- Speed will come naturally with repetition\n\n---\n\n## Final Thought\n\nThousands of organizations right now have compromised Linux systems. Many have backdoor accounts, misconfigured sudo rules, or service accounts with improper shells.\n\n**You now have the skills to find them.**\n\nThat's not just knowledge. That's **power to protect systems and organizations**.\n\nThe next time a Linux server is breached in your organization (or a client's), you'll know exactly where to look. You'll run your forensic commands, spot the red flags, and reconstruct the attack.\n\n**You're becoming the person they call when it matters.**\n\nNow go practice. Then come back for Lesson 75, where you'll learn to analyze command history files and uncover what attackers actually DID on the system.\n\nYou've got this! üöÄüîç\n\n---\n\n**Course Tag**: 13Cubed - Investigating Linux Devices\n**Lesson Complete**: Linux Users, Groups, and Authentication\n**Next Lesson**: Command History Forensics (Lesson 75)"
      }
    }
  ],
  "tags": [
    "Course: 13Cubed-Investigating Linux Devices"
  ]
}