{
  "lesson_id": "0f402fa2-4c57-4fb4-a93a-530a4b1ec4db",
  "domain": "osint",
  "title": "Google Dorking & Search Mastery",
  "difficulty": 1,
  "order_index": 2,
  "prerequisites": [
    "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
  ],
  "concepts": [
    "Advanced Search Operators",
    "Google Dorks for Security Research",
    "File Type and Site-Specific Searches",
    "Cached and Historical Content",
    "Exposed Sensitive Information",
    "Search Engine Optimization for OSINT",
    "Boolean Search Logic",
    "Query Construction Techniques"
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Master advanced Google search operators for targeted information gathering",
    "Construct complex search queries to find exposed sensitive data",
    "Identify and exploit common security misconfigurations through search",
    "Use cached and historical search results for intelligence gathering",
    "Apply Boolean logic to refine and optimize OSINT searches",
    "Recognize legal and ethical boundaries of search-based reconnaissance"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "content": {
        "text": "Welcome to one of the most powerful and accessible tools in your OSINT arsenal: the humble search engine. Most people use Google to find cat videos and restaurant reviews. You're about to learn how to use it to find exposed databases, leaked credentials, vulnerable systems, and hidden intelligence that organizations never intended to make public.\n\nGoogle processes over 8.5 billion searches per day, indexing hundreds of billions of web pages. Within that massive index lies an incredible amount of sensitive information: configuration files with passwords, employee directories, financial documents, internal memos, database dumps, and more. The question isn't whether this information exists—it's whether you know how to find it.\n\nThis is where Google Dorking comes in. The term sounds playful, but the technique is serious: using advanced search operators to pinpoint specific content types, file formats, and vulnerabilities that standard searches would miss. It's like having X-ray vision for the internet.\n\nHere's what makes this lesson exciting: you don't need expensive tools or special access. You need only a browser, creativity, and the knowledge you're about to gain. By the end of this lesson, you'll construct search queries that most people don't know exist, finding information that's hiding in plain sight.\n\nAs Jim Kwik teaches: 'The key to better answers is asking better questions.' Google Dorking is the art of asking the internet exactly the right questions in exactly the right language. Every operator you learn is a new superpower, every query you construct is a key unlocking hidden rooms.\n\nBut with this power comes responsibility. Google Dorking can reveal sensitive information—passwords, personal data, vulnerable systems. You must use these techniques ethically, within legal boundaries, and only for authorized security research or legitimate OSINT investigations.\n\nLet's transform you from someone who searches into someone who discovers. Your OSINT search mastery starts now."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Understanding Google Search Operators\n\nGoogle search operators are special commands that modify how Google interprets your search query. While basic searches use simple keywords, operators give you surgical precision to find exactly what you need.\n\n### Basic Search Operators\n\n**1. site:** - Search within a specific domain or website\n```\nsite:example.com password\n```\nFinds pages on example.com containing the word \"password\"\n\n**Use Cases**:\n- Audit what information your organization has publicly indexed\n- Find all pages from a competitor's site mentioning a specific product\n- Discover subdomains: `site:*.example.com`\n- Limit searches to government sites: `site:.gov climate change`\n- Target specific TLDs: `site:.edu cybersecurity research`\n\n**2. filetype:** (or ext:) - Search for specific file types\n```\nfiletype:pdf site:example.com confidential\n```\nFinds PDF files on example.com containing \"confidential\"\n\n**Common File Types for OSINT**:\n- `filetype:pdf` - Documents, reports, research papers\n- `filetype:xlsx` or `filetype:xls` - Excel spreadsheets (often contain data exports)\n- `filetype:docx` or `filetype:doc` - Word documents\n- `filetype:pptx` - PowerPoint presentations (often from conferences)\n- `filetype:sql` - Database dumps (MAJOR security finding)\n- `filetype:env` - Environment configuration files (often contain credentials)\n- `filetype:log` - Log files (may contain IP addresses, usernames, system info)\n- `filetype:bak` - Backup files (can contain old passwords or configurations)\n- `filetype:conf` or `filetype:config` - Configuration files\n\n**3. intitle:** - Search for words in page titles\n```\nintitle:\"index of\" password\n```\nFinds pages with \"index of\" in the title and \"password\" in content (open directories)\n\n**Why This Matters**: Page titles often reveal the page's purpose. \"index of\" typically indicates an open directory listing—exposed file servers.\n\n**4. inurl:** - Search for words in URLs\n```\ninurl:admin\n```\nFinds pages with \"admin\" in the URL path\n\n**Security Application**: Admin panels, login pages, and sensitive areas often have predictable URL patterns:\n- `inurl:admin`\n- `inurl:login`\n- `inurl:dashboard`\n- `inurl:config`\n- `inurl:backup`\n\n**5. intext:** - Search for words in page body content\n```\nintext:\"password is\" site:pastebin.com\n```\nFinds pages with exact phrase \"password is\" in the text\n\n**6. cache:** - View Google's cached version of a page\n```\ncache:example.com\n```\nShows Google's stored snapshot of the page (useful if current page is modified or taken down)\n\n**Intelligence Value**: Cached pages can reveal:\n- Content that was removed after being discovered\n- Previous versions before security hardening\n- Data that's no longer publicly accessible\n- Proof of exposure even after remediation\n\n**7. \"exact phrase\"** - Search for exact phrase matches\n```\n\"error: database connection failed\"\n```\nFinds pages containing this exact error message (indicating misconfigured sites)\n\n**8. - (minus)** - Exclude terms from search\n```\nsite:example.com -www\n```\nFinds pages on example.com but excludes the www subdomain (useful for finding other subdomains)\n\n**9. * (wildcard)** - Represents any word or phrase\n```\n\"admin * password\"\n```\nFinds phrases like \"admin panel password\", \"admin default password\", etc.\n\n**10. .. (range)** - Search within numerical ranges\n```\niphone price $500..$800\n```\nFinds iPhone listings priced between $500 and $800\n\n**OSINT Application**: Finding documents from specific year ranges:\n```\nsite:example.com filetype:pdf 2020..2025\n```\n\n### Advanced Search Operators\n\n**allintitle:** - All keywords must appear in title\n```\nallintitle:index of backup sql\n```\nEvery word (index, of, backup, sql) must be in the title.\n\n**allinurl:** - All keywords must appear in URL\n```\nallinurl:admin login php\n```\n\n**allintext:** - All keywords must appear in page text\n```\nallintext:username password email\n```\n\n**related:** - Find sites similar to a specified domain\n```\nrelated:shodan.io\n```\nFinds websites similar to Shodan (discovers alternative OSINT search engines)\n\n**info:** - Get information about a URL\n```\ninfo:example.com\n```\nShows Google's information about the site, including cached version and similar pages.\n\n**define:** - Get definitions\n```\ndefine:osint\n```\nUseful for quick reference during investigations.\n\n### Boolean Logic and Combination\n\nCombine operators with Boolean logic for powerful queries:\n\n**OR** - Either term (use uppercase)\n```\nsite:example.com (filetype:xls OR filetype:xlsx) employee\n```\nFinds Excel files (.xls or .xlsx) containing \"employee\"\n\n**AND** - Both terms (implied by default, but can be explicit)\n```\nsite:example.com password AND username\n```\n\n**Parentheses** - Group terms for complex logic\n```\nsite:example.com (inurl:admin OR inurl:login) (password OR credentials)\n```\n\n**Example Complex Query**:\n```\nsite:*.example.com (filetype:pdf OR filetype:docx) (confidential OR internal) -site:www.example.com\n```\n\nThis query:\n1. Searches all subdomains of example.com (`site:*.example.com`)\n2. For PDF or Word documents (`filetype:pdf OR filetype:docx`)\n3. Containing \"confidential\" or \"internal\" (`confidential OR internal`)\n4. But excludes the main www subdomain (`-site:www.example.com`)\n\nResult: Finds potentially sensitive documents on forgotten subdomains."
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "## Google Dorks for Security Research\n\n\"Google Dorks\" are specific search queries designed to find security vulnerabilities, exposed sensitive data, or misconfigured systems. They're called \"dorks\" because they exploit the \"dorkiness\" of poor security practices—leaving sensitive information where Google can index it.\n\n### Finding Exposed Sensitive Files\n\n**Database Files**:\n```\nfiletype:sql \"MySQL dump\" (password OR passwd OR pwd)\nfiletype:sql \"phpMyAdmin SQL Dump\" (password OR username)\nfiletype:mdb (password OR username)\nfiletype:db (password OR credential)\n```\n\n**What This Finds**: Database backups that were accidentally uploaded to web servers. These often contain usernames, password hashes, email addresses, and complete database schemas.\n\n**Configuration Files**:\n```\nfiletype:env DB_PASSWORD\nfiletype:env MAIL_PASSWORD\nfiletype:config \"password\" OR \"passwd\"\nintext:\"ConnectionString\" (password OR pwd)\nfiletype:properties \"password\"\n```\n\n**What This Finds**: Environment configuration files (.env), application configs, and property files that developers accidentally committed to public repositories or uploaded to servers.\n\n**Real-World Example**: In 2019, researchers found thousands of .env files on public servers containing:\n- AWS access keys and secret keys\n- Database credentials\n- API keys for payment processors\n- SMTP email server credentials\n- Social media app tokens\n\n**Backup Files**:\n```\nintitle:\"index of\" (backup OR bak OR old OR backup.zip)\nfiletype:bak site:example.com\nfiletype:old intext:password\ninurl:backup filetype:sql\n```\n\n**What This Finds**: Backup files that contain old versions of databases, configurations, or complete site backups.\n\n**Log Files**:\n```\nfiletype:log intext:password\nfiletype:log \"username\" \"password\" \"login\"\nintitle:\"index of\" \"error.log\"\nallintext:username filetype:log\n```\n\n**What This Finds**: Application logs, error logs, or debug logs containing credentials, session tokens, or API keys.\n\n### Finding Vulnerable Web Applications\n\n**Admin/Login Panels**:\n```\nintitle:\"Admin Login\" OR intitle:\"Administrator Login\"\nintitle:\"Login - Powered by cPanel\"\ninurl:/admin/login.php\nintitle:\"phpMyAdmin\" \"Welcome to phpMyAdmin\"\nintitle:\"Dashboard [Jenkins]\"\n```\n\n**What This Finds**: Exposed administrative interfaces that should be behind VPNs or IP restrictions. Attackers can then attempt default credentials or brute force attacks.\n\n**Open Directories**:\n```\nintitle:\"index of\" \"parent directory\"\nintitle:\"index of\" name size\nintitle:\"index of\" \"backup\"\nintitle:\"index of\" inurl:admin\nintitle:\"index of\" \"password.txt\"\n```\n\n**What This Finds**: Web servers with directory listing enabled, allowing anyone to browse and download files. This often exposes:\n- Source code\n- Database backups\n- Configuration files\n- User uploads\n- Internal documents\n\n**Error Messages** (Information Disclosure):\n```\nintext:\"Warning: mysql_connect()\"\nintext:\"Fatal error: Call to undefined function\"\n\"A syntax error has occurred\" filetype:php\n\"Warning: include(\" OR \"Warning: require(\"\nintext:\"ODBC Error Code\"\n```\n\n**What This Finds**: Pages with detailed error messages that reveal:\n- Database connection strings\n- File paths on the server\n- Software versions\n- Database table names\n- Programming language details\n\n**Default Pages** (Indicating Unpatched Systems):\n```\nintitle:\"Apache2 Ubuntu Default Page\"\nintitle:\"Welcome to nginx!\"\nintitle:\"Test Page for the Apache HTTP Server\"\nintitle:\"IIS7 Welcome Page\"\n```\n\n**What This Finds**: Default installation pages that indicate a fresh, potentially unpatched server installation.\n\n### Finding Exposed Credentials\n\n**Paste Sites**:\n```\nsite:pastebin.com \"example.com\" password\nsite:pastebin.com \"@example.com\" (password OR passwd)\nsite:paste2.org \"example.com\" credentials\nsite:justpaste.it \"example.com\" login\n```\n\n**What This Finds**: Leaked credentials posted to public paste sites by:\n- Disgruntled employees\n- Hackers sharing breach data\n- Developers accidentally pasting config files\n- Security researchers publishing findings\n\n**GitHub/GitLab Leaks**:\n```\nsite:github.com \"example.com\" password\nsite:github.com \"example.com\" API_KEY\nsite:gitlab.com \"DB_PASSWORD\" \"example.com\"\nsite:github.com \"aws_access_key_id\"\n```\n\n**What This Finds**: Developers who accidentally committed secrets to public repositories. Even if later deleted, the commit history retains the sensitive data.\n\n**Cloud Storage Exposure**:\n```\nsite:s3.amazonaws.com \"example.com\"\nsite:blob.core.windows.net \"example.com\"\ninurl:.s3.amazonaws.com filetype:xls\n```\n\n**What This Finds**: Publicly accessible cloud storage buckets (AWS S3, Azure Blob) containing sensitive files.\n\n### Finding Business Intelligence\n\n**Employee Information**:\n```\nsite:linkedin.com \"@example.com\"\nsite:example.com filetype:pdf (resume OR CV)\nsite:example.com \"organizational chart\"\n```\n\n**What This Finds**: Employee names, job titles, email formats, organizational structure—all valuable for social engineering attacks.\n\n**Technology Stack**:\n```\nsite:example.com \"Powered by WordPress\"\nsite:example.com \"Built with React\"\nsite:example.com intext:\"PHP Version\"\nsite:example.com \"Server: Apache\" OR \"Server: nginx\"\n```\n\n**What This Finds**: Technologies and versions in use, allowing attackers to research known vulnerabilities.\n\n**Job Postings** (Tech Stack Intelligence):\n```\nsite:example.com inurl:careers OR inurl:jobs (\"Java\" OR \"Python\" OR \"AWS\" OR \"Azure\")\n```\n\n**What This Finds**: Job descriptions often list the entire technology stack, providing a roadmap of internal systems.\n\n**Financial Information**:\n```\nsite:example.com filetype:pdf (\"financial report\" OR \"annual report\")\nsite:example.com (\"Q1 results\" OR \"quarterly earnings\")\n```\n\n**What This Finds**: Public financial data useful for competitive intelligence or investment research.\n\n### Important: Legal and Ethical Considerations\n\n**Legal Boundaries**:\n\n✅ **Generally Legal**:\n- Searching Google with any query (searching itself is passive)\n- Viewing search results and cached pages\n- Downloading publicly indexed files\n- Using for authorized security assessments\n\n⚠️ **Legally Gray or Risky**:\n- Accessing admin panels you don't own (even if found via search)\n- Downloading large amounts of data from exposed directories\n- Using found credentials to log into systems\n- Publishing detailed lists of vulnerabilities without responsible disclosure\n\n❌ **Illegal**:\n- Using found credentials for unauthorized access (CFAA violation)\n- Exploiting vulnerabilities you discover\n- Accessing systems beyond what's publicly indexed\n- Using information for fraud, harassment, or other crimes\n\n**Ethical Guidelines**:\n\n1. **Purpose Matters**: Are you doing security research, threat intelligence, or malicious reconnaissance?\n\n2. **Responsible Disclosure**: If you find vulnerabilities:\n   - Document the finding with minimal interaction\n   - Report to the organization (security contact or abuse@domain)\n   - Give reasonable time to fix (typically 90 days)\n   - Don't download sensitive data unnecessarily\n\n3. **Scope of Authorization**: Ensure you have permission for:\n   - Your employer's assets: Get written authorization\n   - Client engagements: Scope must explicitly cover OSINT\n   - Personal research: Limit to passive observation\n\n4. **Data Handling**: If you find sensitive data:\n   - Don't share publicly without redaction\n   - Store securely and delete after investigation\n   - Consider impact on individuals whose data was exposed\n\n**Remember**: Just because Google indexed something doesn't mean the owner intended it to be public. Finding exposed data is legal; accessing systems or downloading sensitive data may not be."
      }
    },
    {
      "type": "video",
      "content": {
        "text": "Watch this comprehensive tutorial on Google Dorking for OSINT and cybersecurity:\n\nhttps://www.youtube.com/watch?v=u_gOnwWEXiA\n\n**Video: \"Google Dorking (Google Hacking) Tutorial - How to Use Google Dorks for Penetration Testing\" by The Cyber Mentor**\n\nThis video demonstrates real-world Google Dorking techniques, including:\n- Live examples of finding exposed sensitive files\n- How to combine search operators for maximum effectiveness\n- Responsible disclosure practices when finding vulnerabilities\n- Using Google Dorks Database (GHDB) as a resource\n\n**Key Concepts to Watch For**:\n1. The difference between passive reconnaissance (safe) and active exploitation (risky)\n2. How to construct increasingly specific queries to narrow results\n3. Real examples of exposed admin panels and configuration files\n4. Ethical considerations when conducting security research\n\n**After Watching**: Try modifying the demonstrated queries for different targets (with authorization) or test them against your own organization's public exposure.\n\n**Additional Resource**: Visit the Google Hacking Database (GHDB) at exploit-db.com/google-hacking-database for thousands of pre-made dorks categorized by vulnerability type."
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "## Hands-On Exercise 1: Progressive Google Dorking\n\nLet's build your Google Dorking skills progressively, from basic to advanced queries. We'll use a hypothetical target: **example.edu** (or substitute your own organization's domain with proper authorization).\n\n### Level 1: Basic Reconnaissance\n\n**Exercise 1.1: Site Inventory**\n\nFirst, understand what's indexed:\n\n```\nQuery 1: site:example.edu\nPurpose: See total number of indexed pages\nLook for: Google's result count (e.g., \"About 47,000 results\")\n```\n\n```\nQuery 2: site:*.example.edu\nPurpose: Find all subdomains\nLook for: Different subdomains in results (mail.example.edu, portal.example.edu, etc.)\n```\n\n```\nQuery 3: site:example.edu -site:www.example.edu\nPurpose: Find non-www subdomains\nLook for: Potentially forgotten or development subdomains\n```\n\n**Document Your Findings**:\n```\nSite Inventory:\n- Total indexed pages: ~47,000\n- Subdomains discovered:\n  1. www.example.edu (main site)\n  2. mail.example.edu (webmail)\n  3. portal.example.edu (student portal)\n  4. dev.example.edu (INTERESTING - development server)\n  5. old.example.edu (INTERESTING - legacy site)\n```\n\n**Exercise 1.2: Technology Fingerprinting**\n\nDiscover what technologies are in use:\n\n```\nQuery 1: site:example.edu \"Powered by WordPress\"\nPurpose: Identify WordPress installations\n```\n\n```\nQuery 2: site:example.edu intext:\"PHP Version\"\nPurpose: Find pages leaking PHP version info\n```\n\n```\nQuery 3: site:example.edu (\"Apache\" OR \"nginx\" OR \"IIS\")\nPurpose: Identify web servers\n```\n\n```\nQuery 4: site:example.edu filetype:js\nPurpose: Find JavaScript files (may contain API endpoints, comments with sensitive info)\n```\n\n### Level 2: Finding Documents and Files\n\n**Exercise 2.1: Document Discovery**\n\n```\nQuery 1: site:example.edu filetype:pdf\nPurpose: Find all PDFs\nAction: Browse results, look for document types\n```\n\n```\nQuery 2: site:example.edu (filetype:doc OR filetype:docx OR filetype:xls OR filetype:xlsx)\nPurpose: Find Office documents\nLook for: Internal memos, spreadsheets, reports\n```\n\n```\nQuery 3: site:example.edu filetype:pdf (\"internal\" OR \"confidential\" OR \"not for distribution\")\nPurpose: Find potentially sensitive documents\nWarning: May contain legitimately confidential info—handle responsibly\n```\n\n**Exercise 2.2: Backup and Config Files** (Higher Risk - Handle Carefully)\n\n```\nQuery 1: site:example.edu (filetype:sql OR filetype:db)\nPurpose: Find database files (CRITICAL FINDING if any exist)\nAction: If found, immediately report to organization's security team\n```\n\n```\nQuery 2: site:example.edu (filetype:bak OR filetype:backup OR filetype:old)\nPurpose: Find backup files\nLook for: Database backups, config backups, site backups\n```\n\n```\nQuery 3: site:example.edu filetype:env\nPurpose: Find environment configuration files\nExpected: Should find ZERO results (these should never be public)\nIf found: CRITICAL security issue - contains credentials\n```\n\n### Level 3: Advanced Attack Surface Discovery\n\n**Exercise 3.1: Admin Interfaces**\n\n```\nQuery 1: site:example.edu (inurl:admin OR inurl:login OR inurl:dashboard)\nPurpose: Find administrative interfaces\nLook for: Admin panels that should be behind VPN/IP restrictions\n```\n\n```\nQuery 2: site:example.edu intitle:\"Admin\" OR intitle:\"Dashboard\" OR intitle:\"Control Panel\"\nPurpose: Alternative method to find admin pages\n```\n\n```\nQuery 3: site:example.edu \"phpMyAdmin\" OR \"cPanel\" OR \"Plesk\"\nPurpose: Find hosting control panels\nNote: These should typically NOT be publicly accessible\n```\n\n**Exercise 3.2: Error Messages and Info Disclosure**\n\n```\nQuery 1: site:example.edu intext:\"Warning: mysql_connect()\"\nPurpose: Find database connection errors (reveals server paths)\n```\n\n```\nQuery 2: site:example.edu \"Fatal error\" OR \"Warning: include\" OR \"syntax error\"\nPurpose: Find PHP error messages\nValue: Reveals application structure and file paths\n```\n\n```\nQuery 3: site:example.edu intext:\"stack trace\" OR \"exception\"\nPurpose: Find detailed error pages\nValue: Can reveal internal application logic\n```\n\n**Exercise 3.3: Directory Listings**\n\n```\nQuery 1: site:example.edu intitle:\"index of\"\nPurpose: Find open directories\nLook for: Folders with directory listing enabled\n```\n\n```\nQuery 2: site:example.edu intitle:\"index of\" \"backup\"\nPurpose: Find backup directories\nRisk Level: HIGH - may contain sensitive backups\n```\n\n```\nQuery 3: site:example.edu intitle:\"index of\" \"password.txt\"\nPurpose: Find exposed password files\nRisk Level: CRITICAL - immediate report required\n```\n\n### Level 4: Intelligence Gathering\n\n**Exercise 4.1: People and Email Addresses**\n\n```\nQuery 1: site:example.edu \"@example.edu\"\nPurpose: Find email addresses\nUse: Build email list, determine email format\n```\n\n```\nQuery 2: site:linkedin.com \"example.edu\" OR \"@example.edu\"\nPurpose: Find employees on LinkedIn\nUse: Organizational structure, job roles, potential social engineering targets\n```\n\n```\nQuery 3: site:example.edu filetype:pdf (resume OR CV OR vitae)\nPurpose: Find posted resumes\nValue: Email addresses, phone numbers, background information\n```\n\n**Exercise 4.2: Third-Party Exposure**\n\n```\nQuery 1: site:pastebin.com \"example.edu\"\nPurpose: Check if domain appears in paste sites\nLook for: Leaked credentials, data dumps, disgruntled employees\n```\n\n```\nQuery 2: site:github.com \"example.edu\" (password OR API_KEY OR secret)\nPurpose: Find accidental commits of credentials\n```\n\n```\nQuery 3: site:s3.amazonaws.com \"example.edu\"\nPurpose: Find AWS S3 buckets\nValue: May contain backups, logs, or sensitive files\n```\n\n### Documentation Template\n\nCreate a comprehensive report:\n\n```\nGOOGLE DORKING ASSESSMENT REPORT\nTarget: example.edu\nDate: 2025-10-28\nAnalyst: [Your Name]\nAuthorization: [Authorization details or \"Self-assessment for educational purposes\"]\n\n========================================\nEXECUTIVE SUMMARY\n========================================\nConducted Google Dorking assessment of example.edu public exposure.\nIdentified [X] high-risk findings, [Y] medium-risk findings.\nRecommend immediate remediation of exposed configuration files and admin interfaces.\n\n========================================\nFINDINGS BY SEVERITY\n========================================\n\nCRITICAL (Immediate Action Required):\n[X] Exposed .env file containing database credentials\n    Location: dev.example.edu/backup/.env\n    Query: site:example.edu filetype:env\n    Risk: Full database access possible\n    Recommendation: Remove immediately, rotate all credentials\n\nHIGH (Urgent):\n[X] Open directory listing on backup subdomain\n    Location: backup.example.edu/archives/\n    Query: site:example.edu intitle:\"index of\" backup\n    Risk: Access to backup files, potential data exposure\n    Recommendation: Disable directory listing, review backup location\n\n[X] Publicly accessible phpMyAdmin panel\n    Location: admin.example.edu/phpmyadmin/\n    Query: site:example.edu \"phpMyAdmin\"\n    Risk: Database management interface should be behind VPN\n    Recommendation: Implement IP restrictions or VPN requirement\n\nMEDIUM:\n[X] Multiple error messages revealing file paths\n    Query: site:example.edu \"Fatal error\"\n    Risk: Information disclosure, aids attackers in mapping application\n    Recommendation: Implement custom error pages, disable detailed errors in production\n\n[X] Development server publicly accessible\n    Location: dev.example.edu\n    Query: site:*.example.edu -site:www.example.edu\n    Risk: Development environment may have weaker security\n    Recommendation: Restrict access to internal network only\n\nLOW:\n[X] Large number of PDFs containing internal information\n    Query: site:example.edu filetype:pdf \"internal use\"\n    Risk: Information leakage, competitive intelligence exposure\n    Recommendation: Review document publication policies\n\n========================================\nTECHNOLOGY STACK IDENTIFIED\n========================================\nWeb Server: Apache 2.4.x (found in error messages)\nLanguage: PHP 7.4 (found in info disclosure)\nCMS: WordPress 5.8 (found on main site)\nDatabase: MySQL (inferred from error messages)\nHosting: AWS (found via S3 bucket discovery)\n\n========================================\nOSINT INTELLIGENCE\n========================================\nEmail Format: firstname.lastname@example.edu\nEmployee Count: ~250 (estimated from LinkedIn)\nKey Technologies: WordPress, PHP, MySQL, AWS\nPublic Services: Webmail (mail.example.edu), Student Portal (portal.example.edu)\n\n========================================\nRECOMMENDATIONS\n========================================\n1. [IMMEDIATE] Remove or restrict access to exposed configuration files\n2. [URGENT] Implement IP restrictions on admin interfaces\n3. [HIGH] Disable directory listing on all web servers\n4. [HIGH] Implement custom error pages to prevent information disclosure\n5. [MEDIUM] Conduct comprehensive review of public-facing attack surface\n6. [MEDIUM] Implement robots.txt to prevent indexing of sensitive areas\n7. [ONGOING] Regular Google Dorking audits (monthly recommended)\n\n========================================\nMETHODOLOGY\n========================================\nAll queries conducted using Google.com search interface.\nNo exploitation or unauthorized access attempted.\nFindings limited to publicly indexed content.\nAll search queries documented for reproducibility.\n\nConfidence Level: HIGH\nAll findings verified by direct observation of search results.\n```\n\n### Important Reminders\n\n1. **Authorization**: Only conduct these searches against your own organization or with explicit permission\n\n2. **Passive Only**: These searches are passive observation—don't click on admin panels, download sensitive files, or attempt to exploit findings\n\n3. **Responsible Disclosure**: If you find vulnerabilities, report them responsibly to the organization\n\n4. **Documentation**: Always document your queries and findings for reproducibility\n\n5. **Legal Compliance**: Searching is legal; accessing or exploiting findings may not be"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "## Hands-On Exercise 2: Building Custom Google Dorks\n\nNow that you understand the operators, let's practice building custom dorks for specific scenarios.\n\n### Scenario 1: Pre-Engagement Reconnaissance for Penetration Test\n\nYour team has been hired to conduct a penetration test for \"TechCorp Inc.\" (domain: techcorp.com). Before active testing, you need to map the attack surface using passive OSINT.\n\n**Step 1: Subdomain Enumeration**\n\n```\nBuild a query to find all subdomains:\n\nYour Query: site:*.techcorp.com -site:www.techcorp.com\n\nRationale:\n- site:*.techcorp.com searches all subdomains\n- -site:www.techcorp.com excludes main site to focus on others\n\nExpected Results:\n- mail.techcorp.com\n- vpn.techcorp.com\n- portal.techcorp.com\n- dev.techcorp.com ← Interesting target\n- staging.techcorp.com ← Interesting target\n```\n\n**Step 2: Technology Stack Discovery**\n\n```\nBuild queries to identify technologies:\n\nQuery 1: site:techcorp.com (\"Powered by\" OR \"Built with\" OR \"Runs on\")\nFinds: Technology declarations in footers/headers\n\nQuery 2: site:techcorp.com filetype:js (\"api\" OR \"endpoint\" OR \"baseURL\")\nFinds: JavaScript files revealing API structure\n\nQuery 3: site:techcorp.com intext:\"Server: \" (Apache OR nginx OR IIS OR \"Microsoft\")\nFinds: Server type from headers visible in error pages\n\nQuery 4: site:techcorp.com (\"WordPress\" OR \"Drupal\" OR \"Joomla\" OR \"Django\" OR \"Laravel\")\nFinds: Content management systems or frameworks\n```\n\n**Step 3: Finding Potential Entry Points**\n\n```\nQuery 1: Admin Panels\nsite:techcorp.com (inurl:admin OR inurl:administrator OR inurl:login OR inurl:dashboard OR inurl:panel)\n\nQuery 2: Upload Functionality (potential for file upload vulnerabilities)\nsite:techcorp.com (inurl:upload OR inurl:uploader OR \"choose file\" OR \"select file\")\n\nQuery 3: API Endpoints\nsite:techcorp.com (inurl:api OR inurl:rest OR inurl:graphql OR inurl:v1 OR inurl:v2)\n\nQuery 4: Parameter-Based Pages (potential injection points)\nsite:techcorp.com inurl:? (inurl:id OR inurl:user OR inurl:page OR inurl:category)\n```\n\n**Step 4: Sensitive Information Exposure**\n\n```\nQuery 1: Configuration Files (CRITICAL IF FOUND)\nsite:techcorp.com (filetype:env OR filetype:config OR filetype:ini OR filetype:conf) (password OR passwd OR secret OR key)\n\nQuery 2: Backup Files\nsite:techcorp.com (filetype:bak OR filetype:backup OR filetype:old OR filetype:orig) \n\nQuery 3: Source Code Exposure\nsite:techcorp.com (filetype:py OR filetype:php OR filetype:asp OR filetype:java) (password OR database OR connection)\n\nQuery 4: Database Dumps\nsite:techcorp.com (filetype:sql OR filetype:db) (dump OR backup OR export)\n```\n\n**Step 5: Employee Intelligence for Social Engineering Testing**\n\n```\nQuery 1: Email Addresses\nsite:techcorp.com \"@techcorp.com\"\n\nQuery 2: LinkedIn Employees\nsite:linkedin.com \"techcorp\" OR \"@techcorp.com\" (\"engineer\" OR \"developer\" OR \"admin\")\n\nQuery 3: Conference Presentations (reveals expertise and org structure)\nsite:techcorp.com OR site:slideshare.net \"techcorp\" filetype:pdf OR filetype:pptx\n\nQuery 4: GitHub Profiles (reveals developer identities)\nsite:github.com \"techcorp.com\" OR \"@techcorp.com\"\n```\n\n### Scenario 2: Threat Intelligence - Monitoring for Data Leaks\n\nYour organization wants to monitor if any credentials or sensitive data have been leaked to public sites.\n\n**Build Monitoring Queries**:\n\n```\nQuery 1: Paste Site Monitoring (Daily Check)\nsite:pastebin.com \"techcorp.com\" (password OR credentials OR \"database dump\")\nsite:paste2.org \"techcorp.com\" (password OR login)\nsite:justpaste.it \"@techcorp.com\"\nsite:dpaste.com \"techcorp\"\n\nQuery 2: GitHub Credential Leaks (Weekly Check)\nsite:github.com \"techcorp.com\" (password OR \"api_key\" OR \"secret_key\" OR \"private_key\")\nsite:github.com \"@techcorp.com\" (\"API\" OR \"token\" OR \"credential\")\nsite:gitlab.com \"techcorp.com\" (\"DB_PASSWORD\" OR \"DATABASE_URL\")\n\nQuery 3: Cloud Storage Exposure (Weekly Check)\nsite:s3.amazonaws.com \"techcorp\"\nsite:blob.core.windows.net \"techcorp\"\nsite:storage.googleapis.com \"techcorp\"\n\nQuery 4: Forum Discussions (Monthly Check)\nsite:reddit.com \"techcorp.com\" (breach OR leaked OR hacked OR vulnerability)\nsite:hackforums.net \"techcorp\"\nsite:raidforums.com \"techcorp\" (Note: This site is seized, but similar forums exist)\n```\n\n**Automation Approach**:\n\nWhile Google limits automated queries, you can manually run these searches on a schedule:\n\n```bash\n# Create a monitoring checklist (manual process)\n# Monday:\n- Run paste site queries\n- Document any new results\n- Investigate and report findings\n\n# Friday:\n- Run GitHub/GitLab queries\n- Run cloud storage queries\n- Document findings\n\n# First of Month:\n- Run comprehensive review\n- Update query list based on new intelligence\n```\n\n### Scenario 3: Competitive Intelligence (Legal Business Research)\n\nYou work in business intelligence and need to research a competitor's recent activities.\n\n**Build Intelligence Queries**:\n\n```\nQuery 1: Recent News and Press Releases\nsite:techcorp.com (\"press release\" OR \"news\" OR \"announcement\") 2024..2025\n\nQuery 2: Job Postings (reveals expansion plans and technology stack)\nsite:techcorp.com (inurl:careers OR inurl:jobs) (\"engineer\" OR \"developer\" OR \"architect\")\nOR\nsite:linkedin.com/jobs \"techcorp\" (\"cloud\" OR \"AI\" OR \"machine learning\")\n\nQuery 3: Patent Filings (requires USPTO or Google Patents search)\nsite:patents.google.com \"techcorp\"\n\nQuery 4: Conference Presentations and Research\nsite:techcorp.com filetype:pdf (whitepaper OR research OR \"case study\")\nsite:slideshare.net \"techcorp\"\n\nQuery 5: Customer Lists and Partners\nsite:techcorp.com (\"customer\" OR \"client\" OR \"partner\" OR \"case study\")\n\nQuery 6: Financial Information (for public companies)\nsite:techcorp.com filetype:pdf (\"annual report\" OR \"10-K\" OR \"quarterly\")\nOR\nsite:sec.gov \"techcorp\"\n```\n\n### Scenario 4: Brand Protection Monitoring\n\nYour organization needs to monitor for unauthorized use of your brand, trademarks, or domain name.\n\n```\nQuery 1: Domain Squatting and Typosquatting\n\"techcorp\" -site:techcorp.com -site:*.techcorp.com\nLook for: Similar domain names, misspellings, different TLDs\n\nQuery 2: Trademark Infringement\n\"TechCorp\" (\"logo\" OR \"trademark\" OR \"brand\") -site:techcorp.com\nLook for: Unauthorized use of company name or logo\n\nQuery 3: Counterfeit Products or Services\n\"TechCorp\" (\"cheap\" OR \"discount\" OR \"wholesale\" OR \"replica\") -site:techcorp.com\nLook for: Fake products using your brand\n\nQuery 4: Phishing Sites\n(\"techcorp\" OR \"tech-corp\" OR \"techcorpinc\") (login OR \"sign in\" OR password) -site:techcorp.com\nLook for: Fake login pages impersonating your organization\n\nQuery 5: Social Media Impersonation\nsite:facebook.com \"techcorp\" -\"official\"\nsite:twitter.com \"techcorp\" -\"@techcorp\" (official handle)\nsite:instagram.com \"techcorp\"\nLook for: Fake accounts impersonating your brand\n```\n\n### Building Your Custom Dork Library\n\nCreate a personal library of useful dorks:\n\n```\n=== MY CUSTOM GOOGLE DORKS LIBRARY ===\n\nCategory: Configuration Files\n[ ] filetype:env DB_PASSWORD\n[ ] filetype:config (username OR password)\n[ ] ext:properties password=\n[ ] ext:xml (connection OR password)\n\nCategory: Backup Files\n[ ] filetype:bak site:TARGET\n[ ] intitle:\"index of\" backup site:TARGET\n[ ] filetype:sql (dump OR backup)\n\nCategory: Admin Interfaces\n[ ] intitle:\"Admin Login\" site:TARGET\n[ ] inurl:/admin/index.php\n[ ] inurl:administrator site:TARGET\n[ ] intitle:\"Dashboard\" (login OR admin)\n\nCategory: Error Messages\n[ ] intext:\"Warning: mysql_connect()\" site:TARGET\n[ ] \"Fatal error\" site:TARGET\n[ ] \"ODBC Error Code\" site:TARGET\n\nCategory: Directory Listings\n[ ] intitle:\"index of\" site:TARGET\n[ ] intitle:\"index of\" \"parent directory\"\n[ ] intitle:\"index of\" \"password.txt\"\n\nCategory: Cloud Storage\n[ ] site:s3.amazonaws.com TARGET\n[ ] site:blob.core.windows.net TARGET\n[ ] site:storage.googleapis.com TARGET\n\nCategory: People & Email Intel\n[ ] site:linkedin.com \"@TARGET.com\"\n[ ] site:TARGET.com \"@TARGET.com\"\n[ ] site:github.com \"TARGET.com\"\n\nCategory: Data Leaks\n[ ] site:pastebin.com \"TARGET.com\" password\n[ ] site:github.com \"TARGET.com\" API_KEY\n[ ] site:reddit.com \"TARGET.com\" breach\n\n=== USAGE NOTES ===\n- Replace TARGET with actual domain\n- Combine multiple operators for precision\n- Run searches periodically (daily/weekly/monthly)\n- Document all findings with timestamps\n- Always operate within legal and ethical boundaries\n```\n\n### Tips for Effective Dork Construction\n\n1. **Start Broad, Then Narrow**: Begin with basic queries, then add operators to filter\n\n2. **Use Parentheses for Logic**: \n   - `(term1 OR term2) AND term3`\n   - Groups operators properly\n\n3. **Combine Multiple Operators**:\n   - `site:target.com filetype:pdf (confidential OR internal) -site:www.target.com`\n   - Each operator adds a filter layer\n\n4. **Test and Iterate**: \n   - Run query, review results\n   - Adjust operators based on what you find\n   - Refine until results are highly relevant\n\n5. **Save Successful Queries**: \n   - Document queries that produce useful results\n   - Build a personal dork library\n   - Share (responsibly) with your team\n\n6. **Consider Timing**:\n   - Add date ranges for recent content: `2024..2025`\n   - Use `cache:` for historical versions\n   - Check Wayback Machine for deleted content\n\n### Practice Challenge\n\nBuild dorks for these scenarios:\n\n1. Find all PDF documents published by government agencies (.gov) in 2024 containing the word \"cybersecurity\"\n\n2. Locate exposed Jenkins CI/CD dashboards (they typically have \"Dashboard [Jenkins]\" in the title)\n\n3. Find AWS S3 buckets that might contain backup files\n\n4. Discover GitHub repositories containing AWS access keys\n\n5. Identify WordPress sites running an outdated version (hint: WordPress includes version in meta tags)\n\n**Answers** (Try before looking!):\n\n```\n1. site:.gov filetype:pdf \"cybersecurity\" 2024..2025\n\n2. intitle:\"Dashboard [Jenkins]\" \n\n3. site:s3.amazonaws.com (backup OR bak OR archive)\n\n4. site:github.com \"aws_access_key_id\" OR \"AKIA\"\n\n5. site:wordpress.com intext:\"WordPress 5.\" (or check meta generator tags)\n   OR\n   inurl:wp-content \"WordPress\" intext:\"Version\"\n```\n\nRemember: Practice these techniques only on your own assets or with proper authorization!"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "## Real-World Case Study: Discovering AWS S3 Bucket Exposures via Google Dorking\n\n### The Widespread Problem\n\nBetween 2017-2020, security researchers discovered thousands of misconfigured Amazon S3 buckets exposing sensitive data through simple Google searches. These weren't sophisticated hacks—they were publicly accessible storage buckets that Google had indexed, waiting to be found by anyone who knew the right search query.\n\n### Notable Incidents\n\n**Case 1: Verizon (2017)**\n- **Exposure**: 14 million Verizon customer records\n- **Data**: Names, addresses, phone numbers, account PINs\n- **Discovery Method**: Simple Google Dork: `site:s3.amazonaws.com verizon`\n- **Root Cause**: S3 bucket configured with public read permissions\n- **Impact**: Major privacy breach, regulatory scrutiny, reputation damage\n\n**How It Was Found**:\n\n```\nResearcher's Process:\n1. Searched: site:s3.amazonaws.com verizon\n2. Found: s3.amazonaws.com/verizon-customers/\n3. Accessed: Publicly readable bucket with no authentication\n4. Discovered: Multiple files containing customer data\n5. Reported: Responsible disclosure to Verizon\n6. Remediation: Verizon secured the bucket within 24 hours\n```\n\n**Case 2: Accenture (2017)**\n- **Exposure**: Four AWS S3 buckets totaling over 137GB of data\n- **Data**: Private API keys, secret access keys, client data, internal documents\n- **Discovery Method**: Scanning for open S3 buckets and Google dorking\n- **Root Cause**: Buckets set to \"public\" instead of private\n- **Impact**: Potential access to client infrastructure, competitive intelligence exposure\n\n**Discovery Query Used**:\n```\nsite:s3.amazonaws.com accenture\nsite:s3.amazonaws.com \"accenture\" (confidential OR internal)\n```\n\n**What Was Found**:\n- Master keys for internal systems\n- Passwords for Accenture's cloud platforms  \n- Digital certificates\n- Customer database backups\n- Internal emails and presentations\n\n**Case 3: Pentagon/U.S. Intelligence (2017)**\n- **Exposure**: 1.8 billion social media posts from U.S. intelligence surveillance\n- **Data**: Social media monitoring data, analytics, user profiles\n- **Discovery Method**: Google Dorking + Shodan search\n- **Root Cause**: S3 bucket owned by defense contractor left public\n- **Impact**: Exposed intelligence gathering methods and targets\n\n**Discovery Process**:\n\n```\nStep 1: Researcher found mentions of the contractor's project in public documents\nStep 2: Constructed dork: site:s3.amazonaws.com \"[contractor-name]\"\nStep 3: Found: Publicly accessible bucket with surveillance data\nStep 4: Analysis revealed: 1.8 billion social media records\nStep 5: Responsible disclosure to contractor and DoD\n```\n\n### The Technical Vulnerability\n\n**How S3 Buckets Get Exposed**:\n\n1. **Misconfiguration During Creation**:\n```json\n// Insecure configuration:\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:GetObject\",\n      \"Resource\": \"arn:aws:s3:::my-company-backup/*\"\n    }\n  ]\n}\n\n// This policy allows ANYONE (*) to read files in the bucket\n```\n\n2. **Google Indexing**:\n- Google's crawlers discover the public bucket URLs\n- URLs get indexed in search results  \n- Anyone can then search: `site:s3.amazonaws.com company-name`\n- Results show all indexed files in public buckets\n\n3. **Predictable Naming Conventions**:\n- Companies often use predictable bucket names:\n  - `company-name-backups`\n  - `company-name-data`\n  - `company-name-prod`\n  - `company-name-logs`\n- Attackers can guess and verify these names\n\n### The OSINT Investigation Methodology\n\nHere's how security researchers systematically discovered these exposures:\n\n**Phase 1: Target Identification**\n```\nQuery: site:s3.amazonaws.com [target-company]\nAlternative: site:s3.amazonaws.com [target-company] (backup OR data OR prod)\n```\n\n**Phase 2: Subdomain and Variation Discovery**\n```\nQuery: site:s3.amazonaws.com \"[target]\" OR \"[target-abbreviation]\"\nExample: site:s3.amazonaws.com \"accenture\" OR \"acn\"\n```\n\n**Phase 3: Content Analysis**\n```\n# Once a bucket is found, analyze file structure\nChecked for:\n- .env files (credentials)\n- .sql files (database dumps)  \n- .xlsx/.csv files (data exports)\n- .pdf documents (sensitive docs)\n- .pem/.key files (encryption keys)\n```\n\n**Phase 4: Verification and Impact Assessment**\n```\n# Before reporting, researchers:\n1. Verified exposure (confirmed public read access)\n2. Sampled minimal data to confirm sensitivity\n3. Documented finding with screenshots\n4. Assessed potential impact\n5. Identified responsible party for disclosure\n```\n\n**Phase 5: Responsible Disclosure**\n```\n# Standard disclosure process:\n1. Contact organization's security team (security@company.com)\n2. Provide detailed but limited information\n3. Allow 24-48 hours for initial response\n4. Allow 90 days for full remediation\n5. Coordinate on public disclosure timing\n```\n\n### Impact Metrics\n\n**Across All S3 Exposure Incidents (2017-2020)**:\n- **Organizations Affected**: 10,000+ companies and agencies\n- **Records Exposed**: Billions of individual records\n- **Data Types**: Customer data, credentials, source code, backups, financial records\n- **Average Exposure Time**: 6+ months before discovery\n- **Average Remediation Time**: 24-48 hours after notification\n- **Cost per Incident**: $50,000 - $5+ million (including investigation, notification, legal, reputation)\n\n**Why This Matters for Cybersecurity Professionals**:\n\n1. **Defenders**: You must proactively search for your own exposures\n2. **Red Teams**: This is realistic reconnaissance that attackers perform\n3. **Blue Teams**: Implement monitoring for public data exposure\n4. **Cloud Engineers**: Understand default configurations can be insecure\n\n### Lessons Learned\n\n**For Organizations**:\n\n1. **Default Deny**: All cloud storage should default to private\n2. **Regular Audits**: Monthly audits of cloud storage permissions\n3. **Automated Scanning**: Use tools to detect public buckets\n4. **Google Your Own Assets**: `site:s3.amazonaws.com your-company-name`\n5. **Least Privilege**: Only grant public access when absolutely necessary\n6. **Monitoring**: Alert on permission changes to cloud storage\n7. **Training**: Educate developers on secure cloud configuration\n\n**For OSINT Practitioners**:\n\n1. **Simple Dorks Are Powerful**: Basic queries find major vulnerabilities\n2. **Systematic Approach**: Use methodology, not random searching\n3. **Responsible Disclosure**: Always report findings responsibly\n4. **Minimal Interaction**: Don't download entire datasets—sample only\n5. **Documentation**: Screenshot and document everything\n6. **Legal Awareness**: Accessing data may be legal, but downloading in bulk may not be\n\n### Defensive Measures\n\n**How to Protect Your Organization**:\n\n**1. Proactive OSINT Audit**:\n```bash\n# Monthly checks:\nsite:s3.amazonaws.com \"yourcompany\"\nsite:s3.amazonaws.com \"yourcompany\" (backup OR data OR prod OR logs)\nsite:blob.core.windows.net \"yourcompany\"  # Azure equivalent\nsite:storage.googleapis.com \"yourcompany\" # Google Cloud equivalent\n```\n\n**2. AWS S3 Security Best Practices**:\n```bash\n# Enable S3 Block Public Access (account-level setting)\naws s3control put-public-access-block \\\n  --public-access-block-configuration \\\n  BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true \\\n  --account-id YOUR-ACCOUNT-ID\n\n# Audit existing buckets\naws s3api list-buckets | jq -r '.Buckets[].Name' | while read bucket; do\n  echo \"Checking bucket: $bucket\"\n  aws s3api get-bucket-acl --bucket $bucket\n  aws s3api get-bucket-policy --bucket $bucket 2>/dev/null || echo \"No policy\"\ndone\n```\n\n**3. Automated Monitoring**:\n```python\n# Example Python script to monitor for public S3 buckets\nimport boto3\n\ns3 = boto3.client('s3')\n\ndef check_bucket_public_access():\n    buckets = s3.list_buckets()['Buckets']\n    for bucket in buckets:\n        bucket_name = bucket['Name']\n        try:\n            acl = s3.get_bucket_acl(Bucket=bucket_name)\n            for grant in acl['Grants']:\n                grantee = grant['Grantee']\n                if grantee.get('Type') == 'Group' and 'AllUsers' in grantee.get('URI', ''):\n                    print(f\"WARNING: {bucket_name} is publicly accessible!\")\n        except Exception as e:\n            print(f\"Error checking {bucket_name}: {e}\")\n\ncheck_bucket_public_access()\n```\n\n**4. Google Search Console**:\n- Register your domains with Google Search Console\n- Monitor what Google has indexed\n- Use URL removal tool for sensitive pages\n- Set up robots.txt to prevent indexing of cloud storage URLs\n\n### The Continuing Threat\n\nDespite widespread publicity, S3 exposures continue:\n- **2021**: Capital One breach (100 million records, via misconfigured S3)\n- **2022**: Multiple healthcare providers exposed patient data\n- **2023**: Educational institutions exposed student records\n- **2024**: Ongoing discoveries of exposed backup buckets\n\n**Why It Persists**:\n1. Ease of misconfiguration (one checkbox can expose everything)\n2. Lack of awareness among developers\n3. Complex permission models\n4. Legacy buckets forgotten by organizations\n5. Third-party vendors with poor security practices\n\n### Your Action Items\n\n**This Week**:\n1. Google your organization: `site:s3.amazonaws.com your-org-name`\n2. Check Azure and GCP: `site:blob.core.windows.net your-org` and `site:storage.googleapis.com your-org`\n3. Review any findings with your security team\n\n**This Month**:\n1. Audit all cloud storage configurations\n2. Enable account-level block public access settings\n3. Implement automated monitoring\n4. Train developers on secure cloud storage\n\n**Ongoing**:\n1. Monthly OSINT audits of your public exposure\n2. Quarterly cloud permission reviews  \n3. Continuous monitoring for configuration changes\n4. Regular security awareness training\n\nRemember: If you can find your organization's data via Google, so can attackers. Better you find it first."
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "## Google Dorking Quick Reference\n\n### Essential Operators (The Core Six)\n\nMnemonic: **\"SIFI Can Find Secrets\"**\n\n1. **S**ite: `site:example.com` - Search within specific domain\n2. **I**ntitle: `intitle:\"admin\"` - Words in page title  \n3. **F**iletype: `filetype:pdf` - Specific file types\n4. **I**nurl: `inurl:admin` - Words in URL\n5. **C**ache: `cache:example.com` - Cached version\n6. **(Find)** intext: `intext:\"password\"` - Words in page content\n\n---\n\n### Boolean Logic Quick Guide\n\n**OR** - Either term (must be UPPERCASE)\n```\nsite:example.com (filetype:doc OR filetype:pdf)\n```\n\n**AND** - Both terms (implied by space, explicit with AND)\n```\nsite:example.com password AND username\n```\n\n**- (minus)** - Exclude term\n```\nsite:example.com -www\n```\n\n**\"quotes\"** - Exact phrase\n```\n\"index of\" password.txt\n```\n\n**( )** - Group terms\n```\nsite:example.com (inurl:admin OR inurl:login)\n```\n\n***** - Wildcard (any word)\n```\n\"admin * password\"\n```\n\n**..** - Numerical range\n```\nfiletype:pdf 2020..2025\n```\n\n---\n\n### Top 20 Security-Focused Dorks\n\n**Exposed Credentials & Configs**:\n```\n1. filetype:env DB_PASSWORD\n2. filetype:sql \"MySQL dump\" password\n3. filetype:config password\n4. intext:\"ConnectionString\" password\n5. filetype:properties password=\n```\n\n**Admin Interfaces**:\n```\n6. intitle:\"Admin Login\"\n7. inurl:/admin/login.php\n8. intitle:\"Dashboard [Jenkins]\"\n9. intitle:\"phpMyAdmin\" \"Welcome to phpMyAdmin\"\n10. inurl:wp-admin\n```\n\n**Directory Listings**:\n```\n11. intitle:\"index of\" password\n12. intitle:\"index of\" backup\n13. intitle:\"index of\" \"parent directory\"\n14. intitle:\"index of\" .env\n```\n\n**Error Messages**:\n```\n15. intext:\"Warning: mysql_connect()\"\n16. \"Fatal error\" site:example.com\n17. intext:\"stack trace\" site:example.com\n```\n\n**Cloud Storage**:\n```\n18. site:s3.amazonaws.com company-name\n19. site:blob.core.windows.net company-name\n20. site:storage.googleapis.com company-name\n```\n\n---\n\n### Dork Construction Formula\n\n**Basic Structure**:\n```\n[SCOPE] + [TARGET] + [FILTER] + [EXCLUSIONS]\n\nExample:\nsite:example.com + filetype:pdf + \"confidential\" + -www\n```\n\n**Progressive Refinement**:\n```\nStep 1 (Broad): site:example.com\n  → Returns: Everything on domain\n\nStep 2 (Add Target): site:example.com password\n  → Returns: Pages containing \"password\"\n\nStep 3 (Add Filter): site:example.com filetype:pdf password\n  → Returns: Only PDFs containing \"password\"\n\nStep 4 (Refine): site:example.com filetype:pdf (password OR credentials) -public\n  → Returns: PDFs with password/credentials, excluding pages with \"public\"\n\nStep 5 (Final): site:*.example.com filetype:pdf (password OR credentials) -public -www\n  → Returns: PDFs from all subdomains except www, with password/credentials, excluding \"public\"\n```\n\n---\n\n### File Type Cheat Sheet\n\n**Document Formats**:\n- `filetype:pdf` - PDF documents\n- `filetype:doc` or `filetype:docx` - Word documents\n- `filetype:xls` or `filetype:xlsx` - Excel spreadsheets  \n- `filetype:ppt` or `filetype:pptx` - PowerPoint presentations\n- `filetype:txt` - Text files\n- `filetype:csv` - CSV data files\n\n**High-Risk File Types** (should rarely be public):\n- `filetype:sql` - Database dumps\n- `filetype:env` - Environment configs\n- `filetype:config` - Configuration files\n- `filetype:conf` - Config files\n- `filetype:bak` - Backup files\n- `filetype:backup` - Backup files\n- `filetype:old` - Old file versions\n- `filetype:log` - Log files\n- `filetype:db` - Database files\n- `filetype:mdb` - Access databases\n\n**Code and Development**:\n- `filetype:php` - PHP source code\n- `filetype:asp` - ASP source code\n- `filetype:py` - Python scripts\n- `filetype:js` - JavaScript files\n- `filetype:json` - JSON data\n- `filetype:xml` - XML data\n\n---\n\n### Common Patterns to Search For\n\n**Admin Panels**:\n```\ninurl:admin\ninurl:administrator  \ninurl:dashboard\ninurl:login\ninurl:cpanel\ninurl:webadmin\nintitle:\"Admin Panel\"\nintitle:\"Control Panel\"\n```\n\n**Default Pages** (indicates fresh install):\n```\nintitle:\"Apache2 Ubuntu Default Page\"\nintitle:\"Welcome to nginx!\"\nintitle:\"IIS7 Welcome Page\"\nintitle:\"Test Page for the Apache HTTP Server\"\n```\n\n**Database Errors**:\n```\nintext:\"Warning: mysql_connect()\"\nintext:\"Error: database\"\nintext:\"ODBC Error Code\"\nintext:\"Microsoft OLE DB Provider for SQL Server\"\n```\n\n**Version Disclosure**:\n```\nintext:\"Powered by\"\nintext:\"Running on\"\nintext:\"Version\"\nintext:\"PHP Version\"\n```\n\n---\n\n### Investigation Workflow\n\n**Phase 1: Initial Reconnaissance** (5 minutes)\n```\n1. site:target.com → Get baseline count\n2. site:*.target.com → Find subdomains  \n3. site:target.com -www → Non-main subdomains\n```\n\n**Phase 2: Technology Mapping** (10 minutes)\n```\n4. site:target.com \"Powered by\" OR \"Built with\"\n5. site:target.com filetype:js\n6. site:target.com (inurl:wp- OR inurl:drupal OR inurl:joomla)\n```\n\n**Phase 3: Sensitive Data Search** (15 minutes)\n```\n7. site:target.com (filetype:env OR filetype:config)\n8. site:target.com filetype:sql\n9. site:target.com intitle:\"index of\" (backup OR bak)\n```\n\n**Phase 4: Attack Surface Mapping** (15 minutes)\n```\n10. site:target.com (inurl:admin OR inurl:login)\n11. site:target.com intext:\"error\" OR \"warning\" OR \"fatal\"\n12. site:target.com (inurl:api OR inurl:v1 OR inurl:rest)\n```\n\n**Phase 5: Third-Party Exposure** (15 minutes)\n```\n13. site:pastebin.com \"target.com\" password\n14. site:github.com \"target.com\" (password OR API_KEY)\n15. site:s3.amazonaws.com \"target\"\n```\n\n**Total Time**: ~60 minutes for comprehensive initial assessment\n\n---\n\n### Legal & Ethical Checklist\n\nBefore executing any dork, verify:\n\n- [ ] I have authorization to investigate this target (own organization or client permission)\n- [ ] I am only SEARCHING, not accessing or exploiting findings\n- [ ] I will report any vulnerabilities responsibly  \n- [ ] I will document my methodology for reproducibility\n- [ ] I understand my local laws regarding computer access\n- [ ] I have a legitimate security research or business purpose\n- [ ] I will not download sensitive data unnecessarily\n- [ ] I will handle findings securely and confidentially\n\nIf ANY checkbox is unchecked → STOP and reconsider\n\n---\n\n### Pro Tips\n\n**Tip 1: Use Google Search Console**\n- Shows what Google has indexed for your domains\n- Allows removal of sensitive pages\n- Monitor indexing trends\n\n**Tip 2: Cached Pages Are Gold**\n- `cache:example.com` shows Google's stored version\n- Reveals content that was removed\n- Proof of past exposure even after remediation\n\n**Tip 3: Combine with Other Tools**\n- Google Dorks → Find target  \n- Shodan → Verify service details\n- Wayback Machine → See historical versions\n- Certificate Transparency → Confirm subdomains\n\n**Tip 4: Build Your Library**\n- Save successful queries\n- Categorize by purpose (recon, credentials, admin panels)\n- Share with your team (securely)\n- Update based on new techniques\n\n**Tip 5: Automate Monitoring**\n- Run key queries weekly/monthly\n- Alert on new results (indicates new exposure)\n- Track trends over time  \n- Document all findings\n\n---\n\n### Top 5 Mistakes to Avoid\n\n❌ **Mistake 1**: Accessing admin panels or downloading files (crosses from passive to active)\n✅ **Instead**: Screenshot the search result, report immediately\n\n❌ **Mistake 2**: Using broad queries that return millions of results\n✅ **Instead**: Narrow with multiple operators: `site: + filetype: + specific keywords`\n\n❌ **Mistake 3**: Forgetting to exclude common false positives\n✅ **Instead**: Use `-` to exclude: `password -reset -recovery -forgot`\n\n❌ **Mistake 4**: Not documenting query methodology\n✅ **Instead**: Log every query with timestamp for reproducibility\n\n❌ **Mistake 5**: Testing dorks on targets without authorization\n✅ **Instead**: Always get written permission first\n\n---\n\n### Quick Response to Findings\n\nIf you find something sensitive:\n\n**Immediate Actions** (Within 5 minutes):\n1. Screenshot the finding (proof of exposure)\n2. Note the exact URL and search query used\n3. Do NOT download files or access systems\n4. Document timestamp of discovery\n\n**Reporting** (Within 1 hour):\n1. Identify security contact (security@company.com or abuse@company.com)\n2. Send brief email: \"I discovered [X] via Google search. Details attached.\"\n3. Include screenshot, query used, potential impact\n4. Offer to provide more details if needed\n\n**Follow-up** (Within 24-48 hours):\n1. Confirm organization received report\n2. Verify remediation (re-run query)\n3. Document timeline in your notes\n\nRemember: Finding vulnerabilities is legal. Exploiting them is not. Always stay on the legal side of the line."
      }
    },
    {
      "type": "quiz",
      "content": {
        "text": "## Knowledge Check: Google Dorking Mastery\n\n**Question 1: Query Construction**\n\nYou're conducting OSINT for a penetration test on \"targetcorp.com\". You want to find all PDF files from any subdomain of targetcorp.com (but NOT from www.targetcorp.com) that contain either the word \"confidential\" or \"internal\". Which query is correctly constructed?\n\nA) `site:targetcorp.com filetype:pdf confidential OR internal -www`\nB) `site:*.targetcorp.com filetype:pdf (confidential OR internal) -site:www.targetcorp.com`\nC) `site:targetcorp.com -www filetype:pdf \"confidential\" \"internal\"`\nD) `site:*.targetcorp.com AND filetype:pdf AND (confidential OR internal) NOT www`\n\n**Correct Answer: B) `site:*.targetcorp.com filetype:pdf (confidential OR internal) -site:www.targetcorp.com`**\n\n**Explanation**: This tests your understanding of operator precedence and proper syntax.\n\n**Why B is correct**:\n- `site:*.targetcorp.com` searches ALL subdomains (wildcard *)\n- `filetype:pdf` limits to PDF files\n- `(confidential OR internal)` uses parentheses for proper Boolean logic (OR must be uppercase)\n- `-site:www.targetcorp.com` explicitly excludes the www subdomain\n\n**Why other answers are wrong**:\n\n**A is wrong**: \n- `site:targetcorp.com` doesn't include the wildcard, so it won't catch subdomains reliably\n- `-www` only excludes pages with \"www\" in the content, not the www subdomain specifically\n- `confidential OR internal` without parentheses may not be interpreted correctly\n\n**C is wrong**:\n- Using quotes around both terms (`\"confidential\" \"internal\"`) means BOTH must appear as separate exact phrases, not OR logic\n- `-www` excludes content containing \"www\", not the www subdomain\n\n**D is wrong**:\n- Google doesn't use `AND` and `NOT` keywords (spaces imply AND, use - for NOT)\n- `NOT www` is incorrect syntax\n- Overly complex syntax that doesn't follow Google's operator rules\n\n**Key Learning**: Parentheses are critical for complex Boolean logic, and you must use proper site exclusion syntax (`-site:subdomain.domain.com`) to exclude specific subdomains.\n\n---\n\n**Question 2: Ethical Boundaries and Legal Compliance**\n\nWhile conducting authorized OSINT for your organization, you discover this Google search result:\n\n```\ntitle: \"Index of /backups\"\nURL: backups.yourcompany.com/2024/\nSnippet: \"Parent Directory    database_backup.sql    2024-10-15  45MB\"\n```\n\nWhat is the most appropriate response?\n\nA) Click the link to verify the exposure, download the database backup to confirm it contains sensitive data, analyze the contents thoroughly, then report your findings with detailed analysis\n\nB) Click the link only to verify the directory is truly accessible, take a screenshot of the directory listing without downloading any files, immediately report to your security team with the screenshot and search query used\n\nC) Note the finding, do not click the link at all, report the search result URL and query to your security team, let them verify the exposure\n\nD) This is your company's data and you have authorization to investigate, so you should download everything in the directory to analyze the full scope of the exposure before reporting\n\n**Correct Answer: B) Click the link only to verify the directory is truly accessible, take a screenshot of the directory listing without downloading any files, immediately report to your security team with the screenshot and search query used**\n\n**Explanation**: This tests your understanding of proportionate response and ethical investigation practices.\n\n**Why B is correct**:\n- **Proportionate verification**: Viewing the directory listing confirms the exposure without unnecessary data access\n- **Evidence collection**: Screenshot provides proof for the security team\n- **Minimal interaction**: You're not downloading files, which could trigger additional legal/policy concerns\n- **Immediate reporting**: Security team can decide on further investigation and remediation\n- **Reproducibility**: Documenting the query allows verification by others\n- **Within authorization**: Viewing what's already indexed by Google is generally within OSINT scope\n\n**Why other answers are problematic**:\n\n**A is wrong**:\n- **Excessive interaction**: Downloading and analyzing database contents goes beyond OSINT verification\n- **Data handling risk**: Now you have sensitive data that must be secured, potentially violating data handling policies\n- **Legal exposure**: Downloading database dumps (even from your own company) may violate policies if you don't have explicit authorization for that level of access\n- **Time delay**: Analyzing before reporting delays remediation\n- **Principle**: You only need PROOF of exposure, not a complete analysis\n\n**C is too conservative**:\n- While erring on the side of caution is good, verifying the exposure is important\n- Search results can be outdated or incorrect—confirmation is valuable\n- A single click to verify is minimal interaction and typically acceptable in authorized OSINT\n- You're missing an opportunity to provide clear, verified evidence\n\n**D is wrong**:\n- **Authorization scope**: Your OSINT authorization likely doesn't extend to downloading entire backup directories\n- **Data protection**: Downloading everything creates data handling obligations and risks\n- **Excessive access**: This crosses from reconnaissance into active data collection\n- **Legal risk**: Bulk downloading may violate Computer Fraud and Abuse Act (CFAA) even with general authorization\n- **Better approach**: Report immediately, let security team with proper authorization handle bulk review\n\n**Key Principle**: \"Minimum necessary interaction\"—collect only the evidence needed to confirm and report the finding. Verification ≠ Exploitation. Even during authorized OSINT, operate with restraint and report quickly to enable remediation.\n\n**Additional Considerations**:\n- If this were during a penetration test, your rules of engagement (ROE) would specify acceptable actions\n- Internal policies may vary—some organizations may want you to stop at search results, others may want verification\n- When in doubt, report immediately and let security leadership decide on further investigation\n- Document EVERYTHING: timestamps, queries, actions taken, screenshots"
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "## Reflection: Your Google Dorking Journey\n\nCongratulations! You've just unlocked one of the most powerful and accessible OSINT techniques. Before moving on, take time to solidify your learning and plan your practice.\n\n### Reflection Questions\n\n**1. Your Organization's Exposure**\n\nIf you work for an organization (or have permission to investigate one), spend 30 minutes conducting a Google Dorking audit:\n\n**Run these queries** (replace \"yourcompany.com\" with actual domain):\n```\nsite:yourcompany.com filetype:env\nsite:yourcompany.com filetype:sql  \nsite:yourcompany.com intitle:\"index of\" backup\nsite:*.yourcompany.com -site:www.yourcompany.com\nsite:pastebin.com \"yourcompany.com\" password\nsite:github.com \"yourcompany.com\" (password OR API_KEY)\nsite:s3.amazonaws.com \"yourcompany\"\n```\n\n**Reflect**:\n- What did you find that surprised you?\n- What findings require immediate attention?\n- Did you discover subdomains or services you didn't know existed?\n- How will you report your findings to your security team?\n\n**Action**: Document findings and create a brief report for your security team.\n\n**2. Legal and Ethical Boundaries**\n\nGoogle Dorking exists in a unique space: searching is passive and legal, but what you do with findings can cross legal lines.\n\n**Reflect on these scenarios**:\n\n**Scenario A**: You find a publicly accessible admin panel for a site you don't own. It has no authentication. Do you:\n- Try default credentials to verify it's truly vulnerable?\n- Just note the URL and move on?\n- Report it to the organization?\n\nWhat's your answer, and why?\n\n**Scenario B**: You discover an exposed database backup file (.sql) during authorized research. It's 500MB. Do you:\n- Download it to analyze the full scope of exposure?\n- Download just the first few KB to confirm it contains data?\n- Don't download it at all—screenshot the URL and report?\n\nWhat's your answer, and why?\n\n**Scenario C**: You find your own organization's data in a paste site from a breach 2 years ago. The paste includes passwords. Do you:\n- Test if those passwords still work on company systems?\n- Report to security team without testing?\n- Notify affected individuals directly?\n\nWhat's your answer, and why?\n\n**Reflection**: These scenarios have no universal \"right\" answer—it depends on your role, authorization, and local laws. The key is to THINK through consequences before acting.\n\n**3. Building Your Dork Library**\n\nBased on this lesson, create your personal Google Dorks library for your specific role:\n\n**If you're in Red Team/Penetration Testing**:\n- What dorks would you run during pre-engagement reconnaissance?\n- Which queries help you identify entry points quickly?\n- How would you automate and document recurring queries?\n\n**If you're in Blue Team/Security Operations**:\n- What dorks would you run to monitor your organization's exposure?\n- How frequently should each query be run (daily/weekly/monthly)?\n- What findings would trigger an incident response?\n\n**If you're in Threat Intelligence**:\n- What dorks help you monitor for threat actor activity?\n- Which queries identify compromised credentials or data leaks?\n- How do you correlate Google Dork findings with other intelligence sources?\n\n**Action**: Create a document titled \"My OSINT Dork Library\" with categorized queries specific to your role and responsibilities.\n\n**4. Skill Development Plan**\n\nGoogle Dorking is a skill that improves with practice. Plan your development:\n\n**This Week**:\n- Run at least 20 different dorks against authorized targets\n- Document which queries produced useful results\n- Practice combining operators in increasingly complex ways\n- Join OSINT communities (r/OSINT, OSINT Curious) to learn new techniques\n\n**This Month**:\n- Conduct a full OSINT audit of your organization (with authorization)\n- Build an automated monitoring system for key queries\n- Share findings (redacted and responsibly) with your team\n- Learn complementary tools: Shodan, Certificate Transparency, Wayback Machine\n\n**This Quarter**:\n- Develop expertise in your domain-specific OSINT (cloud exposure, credential leaks, etc.)\n- Contribute to OSINT community (share new dorks, write blog posts)\n- Train colleagues on Google Dorking for security awareness\n- Integrate Google Dorking into your organization's security processes\n\n**5. Responsible Disclosure Readiness**\n\nYou WILL find vulnerabilities. Are you prepared to handle them responsibly?\n\n**Prepare now**:\n- Research your organization's vulnerability disclosure policy\n- Draft a template for responsible disclosure emails\n- Identify how to find security contacts for organizations (security.txt, HackerOne, Bugcrowd)\n- Understand typical disclosure timelines (24hr acknowledgment, 90-day remediation)\n- Know when NOT to disclose publicly (critical infrastructure, immediate danger, etc.)\n\n**Template for Responsible Disclosure**:\n```\nSubject: Security Disclosure: [Brief Description]\n\nTo: security@example.com\n\nHello,\n\nI'm a security researcher and have identified a potential security issue \naffecting your organization:\n\n**Issue**: [Brief description, e.g., \"Publicly accessible database backup\"]\n**Severity**: [High/Medium/Low with justification]\n**Discovery Method**: [e.g., \"Found via Google search\"]\n**Evidence**: [Screenshot URL or minimal details to verify]\n**Impact**: [What an attacker could do with this exposure]\n\nI have not accessed systems beyond confirming the exposure exists.\nI'm happy to provide additional details to help remediation.\n\nI request acknowledgment within 24 hours and will follow a 90-day \ndisclosure timeline unless we agree otherwise.\n\nPlease let me know how you'd like to proceed.\n\nBest regards,\n[Your Name]\n[Contact Information]\n```\n\n**6. Integration with Other OSINT Techniques**\n\nGoogle Dorking doesn't exist in isolation. Reflect on how it connects to other OSINT:\n\n- **Social Media OSINT** (Lesson 3): Dork LinkedIn for employees, GitHub for developers\n- **DNS/Infrastructure OSINT** (Lesson 4): Use dorks to find subdomains, then investigate with DNS tools\n- **Shodan** (Lesson 5): Dork to find targets, Shodan to enumerate services\n- **Maltego** (Lesson 6): Import Google Dork findings into Maltego for relationship mapping\n\n**Reflection**: How will you integrate Google Dorking into your broader OSINT workflow?\n\n---\n\n### Key Takeaways to Remember\n\n1. **Google is a database**: Treat it like one—structured queries yield structured results\n\n2. **Simple is powerful**: Basic dorks find major vulnerabilities\n\n3. **Combine operators**: Each operator is a filter—stack them for precision\n\n4. **Document everything**: Reproducibility is critical for professional OSINT\n\n5. **Search ≠ Access**: Searching is passive and legal; accessing systems may not be\n\n6. **Report responsibly**: Findings have real security impact—handle with care\n\n7. **Continuous learning**: New dorks are developed constantly—stay current\n\n8. **Defensive mindset**: If you can find it, attackers can too—audit your own exposure\n\n---\n\n### Your Next Steps\n\n**Before Lesson 3**:\n\n1. **Practice**: Run 50+ Google dorks against authorized targets\n2. **Document**: Create your personal dork library\n3. **Audit**: Check your organization's exposure (with permission)\n4. **Report**: If you find issues, report them immediately\n5. **Learn**: Explore Google Hacking Database (GHDB) at exploit-db.com\n6. **Connect**: Join OSINT communities and share (responsibly) what you learn\n\n**Resources to Explore**:\n- Google Hacking Database (GHDB): exploit-db.com/google-hacking-database\n- OSINT Framework: osintframework.com (comprehensive tool directory)\n- r/OSINT: reddit.com/r/osint (active community)\n- OSINT Curious: osintcurio.us (podcast and resources)\n- Pentest Tools: Google Dork Generator tools for creating complex queries\n\n**Remember**: You now possess a skill that most people don't know exists. Use it to defend, to investigate, to research—but always ethically, always legally, always with purpose.\n\nEvery search is a question. Every finding is an answer. Every vulnerability you discover and report makes the internet a little more secure.\n\nWelcome to the world of advanced search. You're no longer just Googling—you're dorking with purpose."
      }
    }
  ],
  "post_assessment": [
    {
      "question": "You're conducting an OSINT investigation and construct this Google Dork: `site:targetcorp.com filetype:xls OR filetype:xlsx (salary OR compensation OR payroll)`. However, the results include many irrelevant pages about \"salary guides\" and \"compensation benchmarking\" that are public-facing HR resources. How should you refine this query to focus specifically on internal compensation spreadsheets while excluding public HR resources?",
      "options": [
        "site:targetcorp.com (filetype:xls OR filetype:xlsx) (salary OR compensation OR payroll) -(guide OR benchmark OR public)",
        "site:targetcorp.com (filetype:xls OR filetype:xlsx) (\"employee salary\" OR \"internal compensation\") -site:hr.targetcorp.com",
        "site:*.targetcorp.com (filetype:xls OR filetype:xlsx) (salary OR compensation) -www -hr intitle:\"index of\"",
        "All of the above approaches could work depending on the specific target's structure and content"
      ],
      "correct_answer": 3,
      "explanation": "This question tests advanced query refinement and understanding that OSINT often requires iterative, context-dependent approaches. Option D is correct because each approach has merit depending on the target's specific characteristics. Option A uses negative keywords to exclude common false positives (guides, benchmarks, public resources)—effective if these terms consistently appear in unwanted results. Option B uses more specific phrases (\"employee salary\", \"internal compensation\") and excludes the HR subdomain—effective if internal docs use these exact terms and the HR site contains most public resources. Option C combines subdomain searching (*.targetcorp.com), excludes common public-facing subdomains (-www -hr), and looks for directory listings (intitle:\"index of\")—effective if internal spreadsheets are on non-public subdomains with directory listing enabled. The key insight: There's rarely one \"correct\" Google Dork. Professional OSINT requires experimentation, refinement based on initial results, and adapting queries to the target's specific structure. You should run all three queries, compare results, and refine based on what you find. This iterative approach is how real OSINT investigations work.",
      "difficulty": 3,
      "question_id": "ba90c770-8221-4c88-8a37-00267456e5cb",
      "type": "multiple_choice"
    },
    {
      "question": "During a Google Dorking exercise, you discover an exposed S3 bucket (site:s3.amazonaws.com \"company-backups\") that contains a file named \"customer_database_2024.sql\" (5.2GB). You have authorization to investigate this company's external exposure as part of a security audit. What is the most professionally appropriate action?",
      "options": [
        "Download the entire SQL file to analyze exactly what data is exposed, document your findings in detail, then report with a comprehensive analysis of the data breach",
        "Do not access the S3 bucket at all—the URL in Google's search results is sufficient evidence to report the exposure",
        "Access the S3 bucket to verify it's truly public, view the file listing, download only the first 1-5MB of the SQL file to confirm it contains customer data, document with screenshots, report immediately",
        "Access the bucket, view the file listing, take a screenshot showing the file name and size, do not download any files, report immediately with the screenshot and query used"
      ],
      "correct_answer": 3,
      "explanation": "This question tests understanding of proportionate response and professional OSINT practices in a nuanced scenario. Option D is correct because it balances verification, evidence collection, and ethical restraint. Here's why: (1) VERIFICATION: You need to confirm the exposure is real (not a stale Google cache or false positive), so accessing the bucket is justified. (2) EVIDENCE: Screenshot of the file listing provides clear evidence of what's exposed (file name \"customer_database_2024.sql\" and size 5.2GB clearly indicate sensitive data). (3) MINIMAL INTERACTION: You're not downloading data, thus avoiding data handling risks, potential legal issues with bulk downloads, and delays from analyzing large datasets. (4) RAPID REPORTING: Immediate reporting enables quick remediation—every minute the bucket stays public increases risk. Why other options are problematic: Option A (download entire file) creates unnecessary risks—you're now handling 5.2GB of potentially sensitive customer data, which creates data protection obligations, potential legal liability even with authorization (GDPR, CCPA compliance), time delay while you analyze instead of reporting, and excessive interaction beyond what's needed to confirm exposure. The file name alone makes the content obvious. Option B (don't access at all) is overly cautious—Google's cache could be outdated, you can't confirm current exposure, and you're missing an opportunity to provide clear, current evidence. A screenshot showing current accessibility is much stronger evidence than a Google search result. Option C (download 1-5MB sample) is closer to correct but still unnecessary—you already have sufficient evidence from the filename and file size. Downloading even a sample involves data handling, potential policy violations, and time delay. The filename 'customer_database_2024.sql' at 5.2GB is definitive evidence without downloading. KEY PRINCIPLE: 'Evidence sufficiency'—collect only what's needed to prove the exposure and enable remediation. In this case, the file listing screenshot is sufficient. Don't let curiosity or thoroughness lead you to excessive data access. Professional OSINT requires restraint.",
      "difficulty": 3,
      "question_id": "5a04e8c4-4dc2-4570-ba50-676a2eaa19c9",
      "type": "multiple_choice"
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "learning_sprint",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "minimum_effective_dose"
  ],
  "mitre_attack_tags": [
    "T1593.002 - Search Engines",
    "T1594 - Search Victim-Owned Websites",
    "T1597 - Search Closed Sources"
  ]
}