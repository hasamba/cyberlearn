{
  "lesson_id": "df2af226-8189-47f9-985e-7e0fccdad5fd",
  "domain": "pentest",
  "title": "Windows Privilege Escalation Field Guide",
  "subtitle": "Modern escalation chains for OSCP-grade networks",
  "difficulty": 3,
  "estimated_time": 75,
  "order_index": 25,
  "author": "CyberLearn Offensive Curriculum Team",
  "base_xp_reward": 200,
  "mastery_threshold": 82,
  "is_core_concept": true,
  "created_at": "2025-01-20T12:00:00",
  "updated_at": "2025-01-20T12:00:00",
  "version": "1.0",
  "prerequisites": [
    "Service Enumeration Playbooks",
    "Windows Stack Exploit Workflow"
  ],
  "concepts": [
    "Privilege escalation mindset",
    "Windows access tokens",
    "User Account Control bypasses",
    "Service misconfigurations",
    "Credential harvesting pipelines",
    "Kerberos and AD privilege abuse",
    "Registry autostart extensibility points",
    "OpSec and detection avoidance"
  ],
  "learning_objectives": [
    "Diagnose privilege boundaries using native Windows telemetry",
    "Chain service, registry, and scheduled task weaknesses into reliable escalations",
    "Exploit token duplication, UAC bypasses, and Kerberos abuse to reach SYSTEM",
    "Instrument repeatable privilege escalation checklists and automation scripts",
    "Capture forensic artefacts while maintaining operational security"
  ],
  "jim_kwik_principles": [
    "Active recall",
    "Visualization"
  ],
  "content_blocks": [
    {
      "block_id": "adb02f58-e393-4a36-b094-a35d0f630ac0",
      "type": "explanation",
      "title": "Why Privilege Escalation Matters",
      "content": {
        "text": "# Welcome to the Escalation Battlefield\n\nA low-privilege shell rarely grants exam points or red-team impact. Your mission is to convert footholds into total control without destabilising production systems. Privilege escalation unlocks:\n\n- File system access to loot credentials and sensitive documents.\n- Registry hives and LSA secrets for lateral movement.\n- Token duplication opportunities to impersonate service accounts.\n- Access to system-level logging for stealth and cleanup.\n\n## PWK Expectations\n\nOffensive Security expects you to escalate on most Windows targets. You are graded on methodology: enumerate, hypothesise, validate, and execute while documenting evidence.\n\n## Lesson Overview\n\nIn this session you will:\n\n1. Establish repeatable reconnaissance baselines.\n2. Exploit token handling, UAC quirks, and service misconfigurations.\n3. Execute hands-on labs that reinforce muscle memory.\n4. Review a real breach story to internalise defender reactions.\n5. Anchor the knowledge with mnemonic aids and reflective prompts.\n\nKeep your lab journal open. Capture command output, context, and cleanup notes as you progress."
      },
      "simplified_explanation": "Privilege escalation transforms a foothold into impactful access and is mandatory for OSCP success.",
      "memory_aids": [
        "Foothold \u2260 finish line."
      ],
      "real_world_connection": "OSCP graders routinely award points only after SYSTEM or proof.txt is collected.",
      "reflection_prompt": "How do you currently organise your privilege escalation notes during lab sessions?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "dc17541a-5429-4537-a7aa-eebf767434c3",
      "type": "explanation",
      "title": "Privilege Baselines and Recon",
      "content": {
        "text": "# Establishing a Privilege Baseline\n\nBefore reaching for exploits you gather evidence. Start by confirming the current security context using whoami /groups and whoami /priv equivalents in PowerShell. Document:\n- Token type (primary vs impersonation)\n- Integrity level (medium, high, system)\n- Local and domain group membership\n\n## Inventorying Attack Surface\n\nPivot immediately to data sources that reveal privileged operations:\n- Service Control Manager: `sc query state= all` and `Get-WmiObject win32_service` highlight unquoted paths, writable binaries, or hijackable accounts.\n- Scheduled Tasks: `schtasks /query /fo LIST /v` exposes SYSTEM-context commands triggered by predictable events.\n- Registry Autoruns: `Get-CimInstance Win32_StartupCommand` and Autoruns64 enumerate HKLM and HKCU persistence keys.\n- Installed Drivers: enumerate with `driverquery` to spot vulnerable third-party components.\n\nBuild a worksheet capturing what executes with SYSTEM, which binaries live in writable folders, and where ACLs invite tampering.\n\n## Automating Recon\n\nLeverage trusted tooling to accelerate coverage while staying exam-compliant:\n- WinPEAS or Seatbelt for curated privilege checklists.\n- PowerView for domain privilege exposures.\n- Custom PowerShell: focus on parsing ACLs (Get-Acl), filtering for WriteData or FullControl.\n\nTreat outputs as hypotheses. Each finding must be validated manually before weaponisation."
      },
      "simplified_explanation": "Start by enumerating who you are, what runs as SYSTEM, and where you can write.",
      "memory_aids": [
        "Context \u2192 Services \u2192 Tasks \u2192 Registry"
      ],
      "real_world_connection": "The 2023 OSCP syllabus emphasises checklists that separate enumeration from exploitation.",
      "reflection_prompt": "Which recon commands do you run within the first five minutes on a new Windows foothold?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "71d6f756-07ce-4963-b683-aa41f5a7b84e",
      "type": "explanation",
      "title": "Token Manipulation and UAC Weaknesses",
      "content": {
        "text": "# Understanding Windows Tokens\n\nTokens encapsulate identity. Local privilege escalation frequently hinges on upgrading or reusing access tokens:\n- DuplicateToken: clone an impersonation token to create a primary token that launches a new process.\n- ImpersonateNamedPipeClient: entice a privileged service into connecting to a named pipe, then impersonate its token.\n- SeImpersonatePrivilege: mandatory for many token theft primitives; check membership in NT AUTHORITY\\SERVICE groups.\n\n## UAC Bypass Categories\n\nUser Account Control stands between administrators and full SYSTEM contexts. Recognise these bypass styles:\n1. Auto-elevated binaries: Signed Microsoft binaries flagged as high integrity (e.g., fodhelper.exe, computerdefaults.exe).\n2. DLL side-loading: Abuse search path order to load malicious DLLs when auto-elevated apps execute.\n3. Mock Trusted Directories: Create directories that Windows trusts implicitly (e.g., C:\\Windows\\System32\\...) when path canonicalisation is weak.\n4. Token switching: If the current user is a local admin in Approve mode, disable UAC or spawn elevated shell via eventvwr.msc.\n\nEach bypass must be tailored to the Windows build; track Microsoft patch levels and Defender detections.\n\n## Practical Workflow\n\n1. Query privileges with whoami /priv.\n2. If SeImpersonatePrivilege is present, test Juicy Potato variants (Rotten Potato, PrintSpoofer, RoguePotato) while monitoring EDR.\n3. For local admin contexts with high integrity tokens, pivot to auto-elevated binary hijacks.\n4. Validate success by re-running whoami /groups and logging event IDs 4672 (special privileges assigned)."
      },
      "simplified_explanation": "Tokens and UAC gaps define how you impersonate SYSTEM and bypass consent prompts.",
      "memory_aids": [
        "Token rights unlock UAC bypass families."
      ],
      "real_world_connection": "Penetration testers blend PrintSpoofer and DLL sideloading when antivirus blocks potato exploits.",
      "reflection_prompt": "Which token privileges have you memorised as prerequisites for impersonation attacks?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "a743d66c-fe2a-4003-b168-b464f05f78c0",
      "type": "explanation",
      "title": "Services, Registry, and Scheduled Tasks",
      "content": {
        "text": "# Service Misconfigurations\n\nServices running as LocalSystem with writable binaries or configurations remain the OSCP classic. Focus on:\n- Unquoted Service Paths: Paths with spaces missing quotes allow binary injection. Create a malicious executable in the earliest writable path segment.\n- Weak Service ACLs: Use sc sdshow or Get-ServiceAcl to reveal WD or AU permissions that grant SERVICE_CHANGE_CONFIG. Replace the binary or change startup parameters.\n- DLL Search Order Hijacking: Services that load DLLs without full paths can be coerced into loading malicious libraries from writable directories.\n\n## Registry Abuse\n\nRegistry keys under HKLM require administrative rights but often inherit permissive ACLs:\n- HKLM\\SYSTEM\\CurrentControlSet\\Services: Modify ImagePath or FailureActions.\n- HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options: Debugger key hijacking for privileged executables.\n- HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run: Persistence that executes as SYSTEM on boot (if machine-wide).\n\n## Scheduled Tasks\n\nTasks configured to run as SYSTEM present deterministic execution windows:\n- Query with schtasks /query /fo LIST /v.\n- Check Task to Run paths for writable locations or script arguments you can edit.\n- Register mirror tasks that launch your payload while preserving original functionality.\n\nDocument every change, especially on exam labs, to revert later."
      },
      "simplified_explanation": "Services, registry keys, and scheduled tasks can often be rewritten to launch your payload as SYSTEM.",
      "memory_aids": [
        "Service path \u2192 Registry autoruns \u2192 Scheduled tasks"
      ],
      "real_world_connection": "Real ransomware incidents frequently start from service binary replacements planted by pentesters weeks earlier.",
      "reflection_prompt": "Which registry hives do you inspect when service misconfigurations fail?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "6a5c08cb-b3a3-47ba-a9f9-b085a9d2242a",
      "type": "code_exercise",
      "title": "PowerShell PrivEsc Recon Script",
      "content": {
        "text": "Create a minimal reconnaissance function that lists exploitable services and scheduled tasks.\n\n```powershell\nfunction Get-PrivEscSurface {\n    $services = Get-CimInstance Win32_Service | Where-Object {$_.StartName -eq 'LocalSystem'}\n    foreach ($svc in $services) {\n        $path = $svc.PathName.Trim('\"')\n        if (Test-Path $path) {\n            $acl = Get-Acl $path\n            foreach ($ace in $acl.Access) {\n                if ($ace.FileSystemRights.ToString().Contains('Write') -and $ace.IdentityReference -match $env:USERNAME) {\n                    Write-Output \"[ServiceBinaryWritable] $($svc.Name) -> $path\"\n                }\n            }\n        }\n        $svcAcl = Get-Acl \"HKLM:\\System\\CurrentControlSet\\Services\\$($svc.Name)\"\n        foreach ($ace in $svcAcl.Access) {\n            if ($ace.RegistryRights.ToString().Contains('Write') -and $ace.IdentityReference -match $env:USERNAME) {\n                Write-Output \"[ServiceRegWritable] $($svc.Name)\"\n            }\n        }\n    }\n    $tasks = schtasks /query /fo csv /v | ConvertFrom-Csv\n    foreach ($task in $tasks) {\n        if ($task.\"Run As User\" -eq 'SYSTEM' -and (Test-Path $task.\"Task To Run\")) {\n            $taskPath = $task.\"Task To Run\".Split(' ')[0]\n            $taskAcl = Get-Acl $taskPath\n            foreach ($ace in $taskAcl.Access) {\n                if ($ace.FileSystemRights.ToString().Contains('Write') -and $ace.IdentityReference -match $env:USERNAME) {\n                    Write-Output \"[TaskHijack] $($task.TaskName) -> $taskPath\"\n                }\n            }\n        }\n    }\n}\nGet-PrivEscSurface\n```\n\nExecute on an exam-safe lab machine, review output, and prioritise findings. Modify the script to export results as JSON for rapid note-taking."
      },
      "simplified_explanation": "Use PowerShell to flag writable SYSTEM services and tasks quickly.",
      "memory_aids": [],
      "real_world_connection": "Custom scripts help you respect the OSCP rule against fully automated exploitation while still accelerating recon.",
      "reflection_prompt": "How would you harden this script to avoid false positives from Program Files ACL inheritance?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "a6c904b6-b0a5-4d6b-8d60-a3806d3ce4e7",
      "type": "code_exercise",
      "title": "Service Binary Replacement Lab",
      "content": {
        "text": "Practice escalating via a service binary hijack on a disposable Windows VM:\n\n1. Identify a vulnerable service: `sc qc VulnService`.\n2. Confirm binary path and permissions with icacls or Get-Acl.\n3. Compile or copy a payload that opens a reverse shell to your Kali host.\n4. Stop the service: `sc stop VulnService`.\n5. Replace the binary while preserving original ACLs.\n6. Start service: `sc start VulnService`.\n7. Validate SYSTEM shell, then restore original binary to remain stealthy.\n\n```cmd\nsc stop VulnService\ncopy C:\\Temp\\shell.exe \"C:\\Program Files\\Vuln App\\vuln.exe\"\nsc start VulnService\n```\n\nFocus on producing meticulous notes: affected service, original binary location, replacement path, cleanup steps, and log entries generated."
      },
      "simplified_explanation": "Swap a writable service binary with your payload, restart, catch a SYSTEM shell, revert.",
      "memory_aids": [],
      "real_world_connection": "This mirrors several OSCP lab machines where business apps run with lax ACLs.",
      "reflection_prompt": "What logging artifacts (event IDs, file hashes) would defenders inspect after this escalation?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "a54b299b-23ad-44ed-a780-8e8b8eeba608",
      "type": "code_exercise",
      "title": "PrintSpoofer Token Theft",
      "content": {
        "text": "Exploit SeImpersonatePrivilege using PrintSpoofer to impersonate SYSTEM safely:\n\n1. Upload PrintSpoofer64.exe to a writable directory.\n2. Execute with named pipe target `\\\\.\\pipe\\spoolss`.\n3. Launch a new high-integrity command prompt or direct payload.\n\n```cmd\nPrintSpoofer64.exe -i -c \"cmd.exe /c C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\"\n```\n\nMonitor Defender and EDR reactions. Document fallback options (RoguePotato, JuicyPotatoNG) if PrintSpoofer fails. Always clean up artifacts, delete binaries, and clear prefetch entries where exam rules allow."
      },
      "simplified_explanation": "Use PrintSpoofer to duplicate a SYSTEM token when SeImpersonatePrivilege is present.",
      "memory_aids": [],
      "real_world_connection": "Many managed service providers still whitelist PrintSpoofer variants, so pentesters rely on it during assessments.",
      "reflection_prompt": "How do you adapt when PrintSpoofer gets blocked but SeImpersonatePrivilege remains available?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "5c1ce868-47db-4bb2-b55c-91154ec39b3a",
      "type": "real_world",
      "title": "Case Study: Managed Services Breach",
      "content": {
        "text": "A 2024 red team on a managed services provider uncovered a forgotten backup agent running as SYSTEM with world-writable binaries. By monitoring Windows Defender logs they noticed repeated alerts whenever generic reverse shells launched. Instead of brute forcing, they compiled a payload that proxied commands through cmd.exe to blend with existing telemetry. The escalation enabled domain admin compromise within 45 minutes. Post-engagement, the client hardened service ACLs, enforced AppLocker rules, and deployed Sysmon filters to detect unexpected child processes from backup agents.\n\n**Lesson:** Privilege escalation is not optional; it is the hinge that converts initial access into domain compromise."
      },
      "simplified_explanation": "Replace insecure service binaries quietly and monitor defender response.",
      "memory_aids": [
        "Blend payloads with legitimate parent processes."
      ],
      "real_world_connection": "",
      "reflection_prompt": "What parent-child process relationships would you baseline on your own servers to catch this attack?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "9258a283-1248-45bf-b1fe-24bfef39fa26",
      "type": "memory_aid",
      "title": "Mnemonic: TOKENS",
      "content": {
        "text": "Remember the TOKENS mnemonic to sequence Windows priv esc validation:\n\n- **T**rust graph sketch\n- **O**verview of privileges (whoami /priv)\n- **K**eys in registry autoruns\n- **E**numerate services and tasks\n- **N**amed pipes for impersonation\n- **S**cheduled persistence review\n\nWrite TOKENS on your whiteboard before exam sessions to stay disciplined."
      },
      "simplified_explanation": "TOKENS keeps your checks structured.",
      "memory_aids": [
        "T-Trust, O-Overview, K-Keys, E-Enumerate, N-Named pipes, S-Schedule"
      ],
      "real_world_connection": "",
      "reflection_prompt": "Which letter of TOKENS do you skip most often and why?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "977fab02-9879-46e6-8ada-859ad1b546a8",
      "type": "diagram",
      "title": "Privilege Escalation Decision Map",
      "content": {
        "text": "```\nFoothold (Medium IL)\n   |\n   +--> SeImpersonatePrivilege? -- yes --> Named Pipe Exploits --> SYSTEM\n   |                                         |                                   --> Token duplication\n   |\n   +--> Writable Service? -- yes --> Replace Binary --> SYSTEM\n   |\n   +--> Auto-elevated Binary? -- yes --> DLL Hijack --> High IL --> SYSTEM\n   |\n   +--> Credential Leakage --> RunAs / Scheduled Task --> SYSTEM\n```"
      },
      "simplified_explanation": "Visual map of decision branches toward SYSTEM.",
      "memory_aids": [
        "Follow branches from privilege checks to exploitation."
      ],
      "real_world_connection": "",
      "reflection_prompt": "Where would you inject detection controls on this map to frustrate attackers?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "770c3e25-45d6-4ed2-b3bb-81bf15de8749",
      "type": "mindset_coach",
      "title": "Own the Boundary",
      "content": {
        "text": "Privilege escalation is a map-reading exercise. Every boundary on a Windows system broadcasts clues about who owns files, services, and credentials. Approach each host with curiosity rather than frustration: catalogue what already trusts you, visualise the graph of reachable identities, and remind yourself that SYSTEM is simply another node on that graph."
      },
      "simplified_explanation": "Treat privilege escalation like navigating a network of trust relationships.",
      "memory_aids": [
        "Map the trust graph, do not brute-force blindly."
      ],
      "real_world_connection": "OSCP exam reviewers consistently pass candidates who explain the why behind each escalation step.",
      "reflection_prompt": "How quickly can you sketch the trust relationships on your current target?",
      "is_interactive": false,
      "xp_reward": 0
    },
    {
      "block_id": "980a1f05-1c30-413b-95dd-644158d31a1d",
      "type": "reflection",
      "title": "Self-Assessment Checklist",
      "content": {
        "text": "Evaluate your readiness:\n\n- Can you explain how Windows tokens enable impersonation without notes?\n- Have you practised at least three SeImpersonatePrivilege exploits recently?\n- Do you maintain a personal checklist covering services, registry, tasks, and credentials?\n- When escalating, how do you capture evidence that proves SYSTEM access for your report?\n- What cleanup routine do you execute before closing your RDP or WinRM session?\n\nDocument gaps and schedule lab reps this week."
      },
      "simplified_explanation": "Assess your token knowledge, exploit practice, checklists, evidence, and cleanup.",
      "memory_aids": [],
      "real_world_connection": "",
      "reflection_prompt": "Which question exposed your biggest skill gap?",
      "is_interactive": false,
      "xp_reward": 0
    }
  ],
  "post_assessment": [
    {
      "question": "Which Windows feature primarily determines whether you can duplicate an impersonation token into a primary token for privilege escalation?",
      "options": [
        "Integrity levels assigned by UAC",
        "Presence of SeImpersonatePrivilege on your token",
        "Membership in the local Administrators group",
        "Availability of unquoted service paths"
      ],
      "correct_answer": 1,
      "explanation": "SeImpersonatePrivilege allows impersonation tokens to be converted into primary tokens that launch SYSTEM-context processes.",
      "question_id": "bf0aeb97-402f-4825-8d18-ef87be7b9aec",
      "type": "multiple_choice",
      "difficulty": 3
    },
    {
      "question": "During enumeration you discover a LocalSystem service whose binary resides in C:\\Program Files\\Legacy App\\service.exe. The directory grants Modify permissions to Authenticated Users. What is the most reliable escalation approach?",
      "options": [
        "Create a new scheduled task that runs as SYSTEM",
        "Replace service.exe with a payload and restart the service",
        "Exploit PrintNightmare against the spooler service",
        "Attempt to disable User Account Control via registry edits"
      ],
      "correct_answer": 1,
      "explanation": "Writable service binaries running as LocalSystem can be replaced safely, yielding SYSTEM when the service restarts.",
      "question_id": "c739fe6b-19bd-4e2f-a73a-b255ae3260c1",
      "type": "multiple_choice",
      "difficulty": 3
    },
    {
      "question": "What is the primary advantage of using WinPEAS or Seatbelt during OSCP-style privilege escalation?",
      "options": [
        "They automatically exploit every vulnerability they discover",
        "They provide curated reconnaissance outputs that accelerate manual validation",
        "They submit results directly to the exam proctor",
        "They guarantee antivirus evasion by default"
      ],
      "correct_answer": 1,
      "explanation": "Tools like WinPEAS and Seatbelt consolidate privilege escalation indicators so you can validate them manually without violating exam rules.",
      "question_id": "b8049350-df1b-4a70-9f6e-9628e8e50a77",
      "type": "multiple_choice",
      "difficulty": 3
    }
  ]
}