{
  "lesson_id": "d38b1a5d-d799-45f9-8897-4e25c64d32ef",
  "domain": "pentest",
  "title": "Active Information Gathering: Protocol Enumeration",
  "difficulty": 2,
  "order_index": 28,
  "prerequisites": [],
  "concepts": [
    "Service-specific enumeration (SMB, SNMP, SMTP, DNS, LDAP)",
    "banner grabbing techniques",
    "version detection and vulnerability correlation",
    "protocol-specific exploitation",
    "automated enumeration scripts (enum4linux, snmpwalk, ldapsearch)",
    "NetBIOS and LDAP enumeration",
    "manual vs automated approaches",
    "enumeration opsec"
  ],
  "estimated_time": 55,
  "learning_objectives": [
    "Conduct targeted SMB, SNMP, SMTP, DNS, and LDAP enumeration",
    "Interpret service responses to identify misconfigurations and risks",
    "Organize enumeration data into actionable inventories",
    "Balance manual probing with automated tools for efficiency",
    "Assess detection footprints associated with each protocol probe",
    "Communicate enumeration findings to technical and business audiences",
    "Develop repeatable workflows for protocol-specific reconnaissance"
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "connect_to_what_i_know",
    "minimum_effective_dose",
    "meta_learning",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "block_id": "2af46a3a-0c67-404a-8437-ccf74e1926b5",
      "type": "mindset_coach",
      "content": {
        "text": "Protocol enumeration is about curiosity with precision. Every service banner, SNMP string, or LDAP attribute is a clue that reveals how a network breathes. Instead of blindly scanning thousands of ports, you will study each protocol's etiquette, send respectful probes, and interpret the responses like a linguist translating dialects. This mindset keeps you efficient, stealthy, and impactful.\n\nApproach today's lesson with three commitments: **listen deeply**, **map methodically**, and **document for defenders**. Listening deeply means observing default behaviors before sending aggressive requests. For SMB, you capture the initial negotiation; for SNMP, you request harmless OIDs; for SMTP, you read the greeting banner and understand its capabilities. Mapping methodically means you build matrices connecting hosts, ports, service versions, and potential vulnerabilities. Documenting for defenders ensures your findings translate into remediation steps, not just raw data.\n\nVisualize your engagement: you have VPN access to a corporate network with minimal prior knowledge. You must enumerate SMB shares, SNMP communities, SMTP relay settings, DNS zone transfers, and LDAP directories without triggering alarms. You will use `nmap`, `smbclient`, `enum4linux-ng`, `snmpwalk`, `smtp-user-enum`, `dnsrecon`, and `ldapsearch`. Each command will be deliberate, annotated, and validated.\n\nPrepare your workspace: set up `~/engagements/clientY/enumeration` with subfolders for `smb`, `snmp`, `smtp`, `dns`, `ldap`, and `reports`. Create an `inventory.csv` with columns Host, Protocol, Tool, Credentials, Findings, Remediation. Configure `tmux` panes dedicated to each protocol. Start a transcript with `script -q enumeration.log`. Launch Wireshark to capture baseline traffic, ensuring you can differentiate normal network chatter from your probes.\n\nWarm-up reflections:\n\n1. **Patience beats speed**: Slow, targeted enumeration yields higher signal-to-noise and less noise for defenders to detect.\n2. **Reproducibility matters**: Every command should be repeatable. If you cannot write it down and rerun it, refine it.\n3. **Ethics first**: Limit enumeration intensity to the rules of engagement. Avoid destructive operations (e.g., SNMP SET) unless explicitly authorized.\n4. **Cross-reference knowledge**: Use vulnerability databases, vendor documentation, and previous engagements to inform what each response might imply.\n5. **Celebrate clarity**: When a protocol reveals version info or misconfiguration, pause to appreciate the insight. Clarity fuels momentum.\n\nBy the end of this lesson, you will view network protocols as narratives rather than noise. Each enumeration step will have intent, context, and actionable outcomes.\n\nBefore launching tools, take two minutes to map the business context. Which departments own the services? What would downtime mean? This empathetic lens keeps your enumeration aligned with stakeholder priorities and informs the remediation narrative."
      }
    },
    {
      "block_id": "5e8fcdac-880f-4037-ad59-42573190c9cd",
      "type": "explanation",
      "content": {
        "text": "### SMB Enumeration\n\nSMB (Server Message Block) provides file sharing, printer access, and remote management. Enumerating SMB reveals open shares, user accounts, and domain metadata.\n\n**Initial Scan**\n- `nmap -p 445 --script smb-os-discovery,smb-enum-shares,smb-enum-users <target>`\n- `nmap --script smb-security-mode,smb2-security-mode <target>`\n\nInterpretation: `smb-os-discovery` returns OS version, NetBIOS name, domain. `smb-security-mode` indicates whether signing is required and if guest access is allowed. Use results to assess downgrade risks or man-in-the-middle opportunities.\n\n**Manual Tools**\n- `smbclient -L //<target>/ -U '' -N` lists shares anonymously. Document share names, comments, access level.\n- `smbclient //<target>/share -U user%pass` allows exploring share contents. Use `recurse on`, `ls`, `get`, but stay within ROE.\n- `enum4linux-ng -A <target>` combines share enumeration, RID cycling, and user/group extraction.\n\n**SMB Signing and Encryption**\nCheck if SMB signing is disabled (`Signing: NOT required`). Lack of signing enables relay attacks. Document hostnames for later pivoting.\n\n### SNMP Enumeration\n\nSNMP exposes system information via OIDs. Version 2c uses community strings for authentication; default strings like `public` and `private` are common.\n\n**Community String Discovery**\n- `onesixtyone -c wordlist.txt <target>` quickly tests community strings.\n\n**Walk the Tree**\n- `snmpwalk -v2c -c public <target>`\n- Focus on OIDs like `1.3.6.1.2.1.1` (system info), `1.3.6.1.2.1.25.1` (host resources), `1.3.6.1.4.1` (enterprise-specific info).\n- Use `snmpwalk -v2c -c public <target> hrSWRunName` to list running processes; `hrSWInstalledName` for installed software; `ifDescr` for network interfaces.\n\n**SNMPv3**\n- Enumerate users: `snmpwalk -v3 -l authPriv -u user -a MD5 -A pass -x DES -X pass <target> 1.3.6.1.6.3.15.1.2.2.1.3`\n- If you lack credentials, look for info leaks via `snmpwalk -v3 -l authNoPriv` with guessed usernames.\n\nDocument each community string, host, and accessible OIDs. Assess the risk: SNMP often reveals config files, VLAN layouts, or even cleartext credentials stored in device-specific MIBs.\n\n### SMTP Enumeration\n\nSMTP servers reveal authentication methods, relay permissions, and user lists.\n\n**Banner Grabbing**\n- `nc <target> 25` to read the greeting. Note hostname, software version.\n- `EHLO tester` to list capabilities (STARTTLS, AUTH, SIZE).\n\n**User Enumeration**\n- `smtp-user-enum -M VRFY -U users.txt -t <target>`\n- `smtp-user-enum -M RCPT -U users.txt -t <target>`\n- Use caution; some servers log and alert on enumeration attempts.\n\n**Relay Testing**\n- Attempt to send mail from external domain to external recipient. Document whether the server acts as an open relay. Use `swaks --server <target> --from attacker@example.net --to victim@gmail.com --data data.txt`.\n\n**STARTTLS**\n- If STARTTLS is offered, test `openssl s_client -starttls smtp -connect <target>:25` to examine certificate details and cipher suites.\n\n### DNS Enumeration\n\nDNS reveals network structure, internal hostnames, and trust relationships.\n\n**Zone Transfers**\n- `dig axfr @<ns> <domain>`\n- `dnsrecon -d <domain> -t axfr`\n\n**Brute Force**\n- `dnsrecon -d <domain> -t brt -D subdomains.txt`\n- `fierce --domain <domain>`\n\n**Reverse Lookups**\n- `dnsrecon -d <domain> -t rvl` to enumerate PTR records.\n\nDocument interesting records (SRV, TXT, MX). SRV records reveal services (Kerberos, SIP). TXT records may store SPF, DKIM, or misconfigured data. Investigate wildcard records and split-horizon DNS.\n\n### LDAP Enumeration\n\nLDAP underpins Active Directory. Without authentication, you may still retrieve directory information.\n\n**Anonymous Bind**\n- `ldapsearch -x -H ldap://<dc> -b \"\" -s base \"(objectclass=*)\"` retrieves naming contexts.\n- `ldapsearch -x -H ldap://<dc> -b \"DC=example,DC=com\" \"(objectClass=person)\" cn` enumerates users.\n\n**Authenticated Bind**\n- `ldapsearch -H ldap://<dc> -D 'user@example.com' -W -b \"DC=example,DC=com\"` with filters: `(objectClass=computer)`, `(servicePrincipalName=*)`, `(description=*)`.\n\n**Attributes of Interest**\n- `memberOf`, `adminCount`, `lastLogonTimestamp`, `userAccountControl`.\n- Extract group memberships, privileged accounts, and stale entries.\n\n### Banner Grabbing and Version Detection\n\nUse `nmap -sV --version-light` to fingerprint services. For HTTP, `whatweb` and `wappalyzer` reveal frameworks. For SSH, `ssh -v <host>` shows server version. Always cross-reference with CVE databases.\n\n### Automation and Scripting\n\nBuild custom scripts (Python + `impacket`, Go + `gldap`) to automate repetitive tasks. For example, a script that reads `inventory.csv`, runs targeted enumerations, and updates the sheet. Keep automation modular to switch between protocols seamlessly.\n\n### OpSec Considerations\n\n- Space out requests to avoid detection. Use `--scan-delay` in Nmap, throttle `snmpwalk` with `-t`.\n- Respect authentication boundaries. Do not attempt brute force unless authorized.\n- Capture only necessary data; minimize sensitive information exposure.\n\nEnumeration is an art of patience and interpretation. Each protocol has nuancesâ€”learn them to extract maximum value without raising alarms.\n\n### NetBIOS and Kerberos Nuances\n\nNetBIOS name service (UDP 137) leaks hostnames and workgroups. Use `nbtscan -r 10.10.5.0/24` to collect NetBIOS tables. Cross-reference with SMB findings to spot legacy systems. For Kerberos, perform `nmap --script krb5-enum-users -p88 <dc>` to identify valid usernames without authentication. Combine with LDAP results to assess password spray risk.\n\n### Version Correlation and Vulnerability Research\n\nOnce you enumerate service versions, use `searchsploit` or `vulners.nse` to identify CVEs. Example workflow: `nmap -sV --script vulners -p445 <host>` returns CVEs for SMB services. Document CVE IDs, severity, and exploit availability. Prioritize misconfigurations that enable lateral movement (e.g., SMB signing disabled + known EternalBlue vulnerability).\n\n### Detection Footprints\n\nFor each protocol, list likely detection points:\n- SMB: Windows Event ID 5140 (network share object accessed), 4624 (logon).\n- SNMP: Device syslogs showing community string access failures.\n- SMTP: Mail server logs tracking VRFY/RCPT commands.\n- DNS: Query logs showing AXFR attempts.\n- LDAP: Security Event ID 2889 (LDAP signing not required), Directory Service logs for anonymous binds.\nHighlight these in your report so defenders can validate whether your activity was observed.\n\n### HTTP and HTTPS Enumeration\n\nBeyond running `whatweb`, perform manual HTTP enumeration:\n- `curl -I http://<host>` for headers (Server, X-Powered-By).\n- `curl -k https://<host>` to inspect certificate CNs and SANs.\n- `nmap --script http-methods,http-headers,http-enum -p80,443 <host>` for allowed methods and directories.\n- `ffuf -w wordlists/common.txt -u http://<host>/FUZZ` to brute-force directories (respect scope!).\nUse responses to identify outdated frameworks, debug interfaces, or leaked configuration files.\n\n### Telnet, FTP, and Legacy Protocols\n\nLegacy services often linger. For Telnet (23) and FTP (21), capture banners (`telnet <host> 23`, `ftp <host>`). Test anonymous FTP with `ftp <host>` and logging in as `anonymous`. Document any accessible files. For Telnet, note if it exposes router CLI or legacy app consoles. Recommend migrating to secure alternatives (SSH, SFTP).\n\n### Structured Logging for Enumeration\n\nAdopt a consistent log format: timestamp, host, protocol, command, response summary, sensitivity rating. Use tools like `gron` or `jq` to parse JSON outputs. Store logs in version control (private repo) to track changes over time.\n\n### Correlating Findings Across Protocols\n\nCombine data sets to reveal deeper insights. Example workflow:\n1. Use DNS enumeration to map hostnames.\n2. Query LDAP for corresponding computer objects and operating systems.\n3. Cross-check SMB share data to see which systems host sensitive files.\n4. Map SNMP interface data to identify which network segments hosts belong to.\nThis holistic view informs lateral movement paths and demonstrates to defenders how misconfigurations compound risk.\n\n### Automation Framework Idea\n\nDesign a modular Python framework with modules for SMB, SNMP, SMTP, DNS, LDAP. Each module accepts a target host list, performs enumeration, and returns structured JSON. Use a central orchestrator to run modules sequentially, merge results, and export to CSV/Markdown dashboards. This approach speeds engagements and enforces consistent logging.\n\n### Enumeration OPSEC Checklist\n\nBefore probing each protocol, answer:\n- Do I have authorization for this protocol on this subnet?\n- What is the lowest-impact command to confirm presence?\n- How will I revert any temporary changes?\n- Who needs to be informed if I uncover critical data?\nInclude this checklist in your pre-engagement briefing to align expectations with stakeholders."
      }
    },
    {
      "block_id": "c2b6697f-dd45-4e03-a42d-1070a5e76044",
      "type": "video",
      "content": {
        "title": "Video Tutorial: Protocol Enumeration Essentials",
        "url": "https://www.youtube.com/watch?v=Z1mW1Q0l0rU",
        "description": "The NetworkChuck walkthrough on enumerating SMB, SNMP, and LDAP provides visual demonstrations of the tools covered in this lesson. Watch alongside your lab environment and pause to replicate each command."
      }
    },
    {
      "block_id": "6c19093c-d0f7-4a6e-b656-a8f9ff92fcb3",
      "type": "code_exercise",
      "content": {
        "title": "Hands-On Lab: Multi-Protocol Enumeration",
        "description": "Scenario: You have access to a lab network with hosts `10.10.5.0/24`. Your objective is to enumerate SMB shares, SNMP information, SMTP settings, DNS records, and LDAP entries, then produce a consolidated report.\n\n### Phase 1: Scoping and Initial Scan\n1. Run `nmap -sS -sV -p 21,22,25,53,80,110,135,139,389,445,636,3389 10.10.5.0/24 -oA scans/initial`.\n2. Parse results to identify hosts running SMB (445), SNMP (161), SMTP (25), DNS (53), LDAP (389/636).\n\n### Phase 2: SMB Deep Dive\n1. For each SMB host, run `nmap --script smb-os-discovery,smb-enum-shares,smb-enum-users -p445 <host>`.\n2. Use `smbclient -L //<host>/ -U '' -N`. Document accessible shares.\n3. If credentials provided, mount a share: `sudo mount -t cifs //<host>/Finance /mnt/smb -o username=analyst,password=Passw0rd!` and inventory files.\n4. Capture outputs to `smb/<host>_shares.txt`.\n\n### Phase 3: SNMP Exploration\n1. Test community strings with `onesixtyone -c wordlist.txt <host>`.\n2. For valid strings, run `snmpwalk -v2c -c <string> <host> 1.3.6.1.2.1.1` and `1.3.6.1.2.1.25.6.3.1` (installed software).\n3. Summarize critical findings (OS version, running services, interesting software) in `snmp/<host>_summary.md`.\n\n### Phase 4: SMTP Inspection\n1. Connect via `nc <host> 25`, capture banner.\n2. Run `smtp-user-enum -M VRFY -U wordlists/users.txt -t <host>`.\n3. Test relay using `swaks`. Document success/failure and any STARTTLS capabilities.\n4. Save transcripts to `smtp/<host>_session.txt`.\n\n### Phase 5: DNS Recon\n1. Identify name servers from initial scan.\n2. Attempt zone transfer: `dig axfr @<ns> example.lab`.\n3. Brute force subdomains: `dnsrecon -d example.lab -t brt -D wordlists/subdomains-top1k.txt`.\n4. Reverse lookup: `dnsrecon -d example.lab -t rvl`.\n5. Document unique findings (internal hostnames, SRV records) in `dns/findings.csv`.\n\n### Phase 6: LDAP Enumeration\n1. Retrieve naming contexts: `ldapsearch -x -H ldap://dc01.example.lab -b \"\" -s base \"(objectclass=*)\"`.\n2. Enumerate users: `ldapsearch -x -H ldap://dc01.example.lab -b \"DC=example,DC=lab\" \"(objectClass=user)\" cn memberOf`.\n3. Identify high-privilege groups (Domain Admins, Enterprise Admins). Record membership.\n4. Save LDIF results to `ldap/users.ldif` and `ldap/groups.ldif`.\n\n### Phase 7: Consolidation\n1. Populate `inventory.csv` with each host-protocol combination, including authentication status and key findings.\n2. Create a Markdown report summarizing critical misconfigurations (anonymous SMB shares, default SNMP strings, open SMTP relay, DNS zone transfer success, LDAP anonymous bind).\n3. Include screenshots or logs demonstrating each enumeration step.\n\n### Stretch Goals\n- Write a Python script that reads `inventory.csv` and generates prioritized remediation recommendations.\n- Use `BloodHound` ingestion scripts to convert LDAP data into graph format.\n- Correlate SMB share contents with business impact (e.g., sensitive files, scripts).\n\nDeliverables: `inventory.csv`, per-protocol logs, consolidated report, optional automation script.\n\n### Phase 8: Detection Mapping\nCreate a table mapping each enumeration step to potential log sources and event IDs. Verify by reviewing lab logs (e.g., Windows Event Viewer, mail server logs).\n\n### Phase 9: Remediation Brainstorm\nFor each misconfiguration discovered, write at least one remediation recommendation and one detective control. Include references to vendor documentation or CIS benchmarks.\n\n### Phase 10: Legacy Service Check\nIdentify any hosts running FTP/Telnet from the scan. Capture banners, test anonymous login, and document findings.\n\n### Phase 11: Automation Prototype\nDevelop a small Python script that reads hosts from `targets.txt`, runs `smbclient -L` and `snmpwalk` (where applicable), and writes JSON outputs. Even a basic prototype builds automation muscles.\n\n### Phase 12: Detection Validation\nCoordinate with the blue team (or simulate) to review logs generated by your enumeration. Capture screenshots of relevant events (e.g., Windows Event 5140) and include them in your report."
      }
    },
    {
      "block_id": "fee45822-4234-4c72-a6f4-cca11b4b1e39",
      "type": "real_world",
      "content": {
        "text": "### Case Study 1: Anonymous SMB Shares Expose Finance Data\n\nDuring an internal assessment, anonymous SMB enumeration revealed a share named `\\FINANCE\\Archive` accessible without credentials. Inside were monthly financial statements and payroll spreadsheets. The share existed for a legacy application and was forgotten. We recommended implementing share-level permissions, enforcing SMB signing, and migrating data to a controlled document management system. Post-engagement, the client audited all SMB shares using PowerShell scripts to prevent recurrence.\n\n### Case Study 2: SNMP Reveals Network Topology\n\nA manufacturing company left SNMP v2c enabled with the default `public` community string on core routers. `snmpwalk` exposed interface descriptions detailing VLAN assignments, remote site IPs, and even cleartext VoIP credentials stored in private MIBs. Attackers could pivot through remote sites or intercept calls. We advised upgrading to SNMPv3 with authPriv, limiting SNMP access to management networks, and scrubbing sensitive descriptions. The network team implemented ACLs restricting SNMP access to NMS servers.\n\n### Case Study 3: SMTP Open Relay Allows Phishing\n\nAn enterprise SMTP gateway inadvertently allowed relaying from internal subnets to external addresses without authentication. We demonstrated by sending a spoofed email to executives. The security team responded by tightening relay rules, enabling SMTP authentication, and monitoring for anomalous outbound mail patterns. The incident highlighted the importance of periodic SMTP configuration reviews.\n\n### Case Study 4: DNS Zone Transfer Exposes Staging Environment\n\nA DNS server permitted zone transfers of `staging.example.com`. The transfer revealed internal hostnames, including staging web apps with weak authentication. Attackers could easily target these hosts for lateral movement. Recommendations included restricting zone transfers to authorized secondary servers, enabling TSIG keys, and auditing DNS logs for unauthorized AXFR requests.\n\n### Case Study 5: LDAP Anonymous Bind Discloses User Data\n\nAn Active Directory domain allowed anonymous LDAP binds, exposing a list of users, groups, and organizational units. Attackers could harvest email addresses and target spear-phishing campaigns. We advised disabling anonymous bind (`dSHeuristics`), enforcing LDAP signing, and implementing Access Control Lists restricting directory reads. The client also rolled out Azure AD Identity Protection to monitor unusual directory queries.\n\n### Lessons Learned\n\n1. **Small misconfigurations snowball**: Anonymous access or default strings cascade into large exposure.\n2. **Documentation empowers fixes**: Detailed enumeration logs helped system owners reproduce issues and apply targeted fixes.\n3. **Cross-team collaboration**: We engaged network, server, and security teams, turning findings into training opportunities. Several teams created automated scripts to monitor protocol configurations.\n4. **Continuous validation**: Misconfigurations reappear. Implement scheduled scans and integrate enumeration into change management.\n\nProtocol enumeration remains one of the highest ROI activities in penetration testing. It uncovers systemic weaknesses with minimal disruption when executed carefully.\n\n### Case Study 6: NetBIOS Leakage Aids Phishing\nA professional services firm left NetBIOS name service exposed to contractors. `nbtstat` enumeration revealed naming conventions (e.g., `HR-LAPTOP-###`). Attackers crafted phishing emails mimicking IT support, referencing hostnames to appear credible. We recommended disabling NetBIOS over TCP/IP where possible and segregating contractor networks.\n\n### Case Study 7: Kerberos User Enumeration Leads to Password Sprays\nIn a healthcare environment, attackers used `kerbrute` to enumerate 5,000 valid usernames through Kerberos. Coupled with weak password policies, this led to successful password sprays. Our engagement involved implementing Smart Lockout policies, monitoring Kerberos pre-authentication failures, and enforcing MFA.\n\n### Case Study 8: Automated Reporting Accelerates Fixes\nA technology company adopted our enumeration inventory template. By linking each protocol finding to system owner, severity, and remediation status, they reduced fix time by 40%. The template fed into their ticketing system, ensuring accountability and tracking over time.\n\n### Case Study 9: Legacy FTP Leads to Source Code Exposure\nA software vendor maintained an FTP server for customer updates. Anonymous login allowed downloading proprietary source archives. Enumeration uncovered credentials stored in plain text README files. The vendor replaced FTP with authenticated SFTP and implemented code repository controls.\n\n### Case Study 10: Cross-Protocol Correlation Stops Data Theft\nDuring a financial institution engagement, we correlated DNS, LDAP, and SMB results to identify a forgotten file server storing merger documents. The server allowed anonymous SMB access and used a legacy OS exposed via SNMP. By presenting the combined findings, executives prioritized patching and access controls, preventing potential data leakage during a sensitive acquisition.\n\n### Case Study 11: DNS Logs Reveal Insider Threat\nDuring a follow-on investigation, enumeration of DNS logs uncovered AXFR attempts originating from an employee workstation outside of testing windows. The organization correlated the logs with our report to identify an insider attempting data theft. This highlighted the dual value of enumeration findings for defensive monitoring.\n\n### Case Study 12: SNMP Hardening Program\nA global manufacturer used our SNMP enumeration checklist to audit 2,000 devices. Within two weeks they transitioned 80% to SNMPv3 and restricted access to dedicated management networks. Their security operations center integrated SNMP access logs into SIEM dashboards to spot unauthorized queries.\n\n### Case Study 13: Continuous Monitoring via Enumeration Baselines\nA logistics company used our enumeration results to create baseline dashboards. Quarterly, they reran the same commands and compared outputs. Deviations (new shares, open relays, anonymous binds) triggered investigation. This proactive approach caught misconfigurations introduced during software upgrades.\n\n### Case Study 14: Training the Helpdesk\nOne client used our enumeration findings to design helpdesk training. Staff learned to recognize signs of enumeration (sudden VRFY commands, anonymous SMB logons) and escalate to security. This human sensor network complemented automated detection."
      }
    },
    {
      "block_id": "0d7d482f-19f4-42df-a5c7-7eb8124eaed1",
      "type": "memory_aid",
      "content": {
        "text": "### Protocol Enumeration Cheat Sheet\n\n**SMB**\n- `nmap --script smb-os-discovery,smb-enum-shares -p445`\n- `smbclient -L //<host>/ -U '' -N`\n- `enum4linux-ng -A <host>`\n- Check signing: `nmap --script smb2-security-mode`\n\n**SNMP**\n- `onesixtyone -c community.txt <host>`\n- `snmpwalk -v2c -c public <host> 1.3.6.1.2.1.1`\n- `snmpwalk -v2c -c public <host> hrSWInstalledName`\n- `snmp-check <host> -c public`\n\n**SMTP**\n- `nc <host> 25` then `EHLO tester`\n- `smtp-user-enum -M VRFY -U users.txt -t <host>`\n- `swaks --server <host> --from test@example.com --to user@example.com`\n- `openssl s_client -starttls smtp -connect <host>:25`\n\n**DNS**\n- `dig axfr @ns <domain>`\n- `dnsrecon -d <domain> -t brt -D subdomains.txt`\n- `fierce --domain <domain>`\n- `massdns -r resolvers.txt -t A -w results.txt domains.txt`\n\n**LDAP**\n- `ldapsearch -x -H ldap://<dc> -b \"\" -s base \"(objectClass=*)\"`\n- `ldapsearch -x -H ldap://<dc> -b \"DC=example,DC=com\" \"(objectClass=user)\" cn mail`\n- `GetADUsers.py domain/user:pass -all`\n\n**General Tips**\n- Record timestamps and commands in a log file.\n- Sanitize sensitive data before sharing outputs.\n- Prioritize findings by impact (e.g., open relay > missing banner).\n- Always confirm whether the behavior is expected with system owners.\n\nKeep this cheat sheet near your terminal during engagements.\n\n**LDAP Search Filters**\n- `(|(objectClass=user)(objectClass=group))` retrieves both users and groups.\n- `(userAccountControl:1.2.840.113556.1.4.803:=2)` finds disabled accounts.\n- `(pwdLastSet<=132537600000000000)` identifies accounts with passwords older than 2012.\n\n**Reporting Template Outline**\n1. Executive Summary\n2. Methodology\n3. Findings by Protocol (with screenshots/logs)\n4. Detection Observations\n5. Remediation Recommendations\n6. Next Steps\nFill this template during engagements to streamline final deliverables.\n\n**HTTP Enumeration Tips**\n- Use `httpx -l hosts.txt -title -tech-detect` for fast reconnaissance.\n- Combine `aquatone` to capture screenshots of web interfaces for reporting.\n\n**Automation Resources**\n- `https://github.com/SecureAuthCorp/impacket` for Python SMB/LDAP modules.\n- `https://github.com/cddmp/enum4linux-ng` for automated SMB enumeration.\n- `https://github.com/dirkjanm/ldapdomaindump` for Active Directory dumps.\n\n**Detection Matrix**\n| Protocol | Key Logs | Recommended Alert |\n| --- | --- | --- |\n| SMB | Windows Security 4624/5140 | Anonymous share access, administrative logons |\n| SNMP | Device syslogs, SNMP auth logs | Failed community string attempts |\n| SMTP | Mail server logs | Excessive VRFY/RCPT commands from single host |\n| DNS | Query logs | AXFR requests, high NXDOMAIN rates |\n| LDAP | Directory Service logs | Anonymous bind success, high query volume |\n\n**OpSec Reminders**\n- Rate-limit `ffuf` and other brute-force tools to avoid denial of service.\n- Use dedicated service accounts for authenticated enumeration and rotate credentials afterward.\n- Store sensitive outputs (e.g., LDAP dumps) in encrypted containers.\n\nAlways double-check scope documents before probing new ports to avoid accidental policy violations."
      }
    },
    {
      "block_id": "6009a801-7010-4e73-8cc5-4f22579a3f5e",
      "type": "reflection",
      "content": {
        "text": "Reflect on your enumeration process:\n\n1. **Intentionality**: Did you understand the purpose of each command before running it? If not, research and refine.\n2. **Data organization**: How did you store results? Could a teammate replicate your steps from your notes alone?\n3. **Detection awareness**: Which of your actions would appear in logs (e.g., Event ID 4624 for SMB logins, SNMP access logs)? How can you present this to defenders constructively?\n4. **Communication**: Draft an executive summary for one critical finding, translating technical details into business risk.\n5. **Skill growth**: Identify a protocol you found challenging (LDAP filters, SNMP MIBs). Plan a study session to deepen your knowledge.\n6. **Automation ideas**: What repetitive tasks could you script next time? Outline the inputs, outputs, and error handling.\n7. **Ethical reflection**: Did you encounter sensitive data? Describe how you handled it responsibly.\n8. **Next steps**: Set a practice objective (e.g., build a PowerShell script to inventory SMB shares) and schedule time to complete it.\n\nClose with the affirmation: *\"I explore network services with curiosity, respect, and clarity.\"*\n9. **Stakeholder mapping**: Identify which teams need to hear about each finding (network, identity, messaging). Plan how you will tailor communication for each audience.\n10. **Practice commitment**: Schedule a lab session to intentionally trigger protocol-specific logs, then analyze them from a defender's perspective.\n11. **Tool evaluation**: Rate each tool you used (accuracy, speed, noise). Decide which deserve a place in your standard toolkit and which need replacement.\n12. **Reporting rehearsal**: Record a five-minute video summarizing your top three findings and how you uncovered them. Practicing spoken reports improves clarity when briefing stakeholders.\n13. **Feedback loop**: Draft a set of questions to ask defenders after sharing findings (e.g., \"Did you see this in your logs?\", \"What automation would help?\"). Use the responses to refine your future enumeration playbooks.\n14. **Personal inventory**: List which protocols you feel confident with and which need more practice. Set SMART goals (specific, measurable, achievable, relevant, time-bound) to strengthen weak areas.\n15. **Action plan**: Write a one-sentence action item you will complete within 48 hours to reinforce this lesson (e.g., build an SNMP enumeration cheat sheet).\n16. **Gratitude note**: Thank a teammate or mentor who helped you grow in enumeration skills."
      }
    }
  ],
  "post_assessment": [
    {
      "question_id": "b922860c-e506-4842-95df-e5486a0c138b",
      "question": "You run `snmpwalk -v2c -c public 10.10.5.12 hrSWInstalledName` and receive dozens of software entries, including firewall and antivirus versions. What is the primary security risk?",
      "options": [
        "Attackers can modify SNMP OIDs to disable services",
        "Enumerated software versions allow attackers to match known vulnerabilities and plan exploits",
        "SNMP data is encrypted and useless to attackers",
        "The output reveals nothing actionable"
      ],
      "answer": "Enumerated software versions allow attackers to match known vulnerabilities and plan exploits",
      "explanation": "SNMP disclosures of installed software help adversaries identify vulnerable versions and prioritize attack paths.",
      "type": "multiple_choice",
      "correct_answer": 0,
      "difficulty": 2
    },
    {
      "question_id": "dd024683-9170-4a06-8184-1ca4456674c9",
      "question": "During DNS enumeration, `dig axfr @ns1.example.com example.com` succeeds. Which remediation should you recommend first?",
      "options": [
        "Disable DNSSEC",
        "Restrict zone transfers to authorized secondary servers and use TSIG keys",
        "Change the DNS TTL values",
        "Switch from BIND to Microsoft DNS"
      ],
      "answer": "Restrict zone transfers to authorized secondary servers and use TSIG keys",
      "explanation": "Zone transfers should only occur between trusted servers. Limiting AXFR and securing with TSIG keys prevents unauthorized data exposure.",
      "type": "multiple_choice",
      "correct_answer": 0,
      "difficulty": 2
    }
  ]
}