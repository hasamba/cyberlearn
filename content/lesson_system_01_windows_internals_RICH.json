{
  "lesson_id": "3ad9d1e7-f1b9-49fc-b0e6-2df0d8614aff",
  "domain": "system",
  "title": "Windows System Internals Fundamentals",
  "difficulty": 1,
  "order_index": 1,
  "prerequisites": [],
  "concepts": [
    "Processes",
    "Services",
    "Registry",
    "File System",
    "Privileges",
    "User Accounts"
  ],
  "content_blocks": [
    {
      "block_id": "e14ea334-68f5-4857-903d-80fd7bb7e74f",
      "type": "mindset_coach",
      "content": {
        "text": "Understanding Windows internals is the foundation of both attacking and defending Windows systems. Every exploit, every privilege escalation, every persistence mechanism relies on deep knowledge of how Windows actually works under the hood.\n\nHere's the critical truth: Most people use Windows daily but understand almost nothing about what's happening inside. They click icons, run programs, save files - but have no idea about processes, services, the registry, or privilege levels. This knowledge gap is what attackers exploit. Your job is eliminating that gap.\n\nMany people find Windows internals intimidating - services, registry hives, SIDs, tokens, ACLs. Here's the secret: Windows is complex but logical. Once you understand the core concepts and how they connect, everything else falls into place.\n\nThink of Windows like a city. Processes are buildings where work happens. Services are utilities (water, electricity) running constantly. The registry is the city's record system. User accounts are citizens with different access levels. File system is the property ownership system. Understanding the city infrastructure means understanding how to protect it (or exploit it).\n\nThe beautiful part: Windows internals knowledge is universally valuable. Red teamers need it for privilege escalation and persistence. Blue teamers need it for hardening and forensics. Incident responders need it for investigating compromises. System administrators need it for proper configuration.\n\nLet's dive into the internals that make Windows tick."
      },
      "simplified_explanation": "Windows internals = understanding how Windows works underneath the surface. Processes run programs. Services run in background. Registry stores settings. File system controls who can access files. Privileges control what actions users can perform. Master these and you understand Windows security.",
      "memory_aids": [
        "PRSFP = Processes, Registry, Services, File system, Privileges",
        "Everything in Windows has an owner and permissions",
        "Services = background programs that auto-start"
      ],
      "teach_like_im_10": "Windows is like a big building with many rooms (processes). Some rooms have workers who are always there (services). There's a giant filing cabinet with all the rules (registry). Every file has an owner and a lock (permissions). Some people can open more doors than others (privileges)."
    },
    {
      "block_id": "ab3b90a1-9288-4655-a2f5-4bbeae6637d9",
      "type": "explanation",
      "content": {
        "text": "## Windows Processes\n\n**What is a Process?**\nA process is a running instance of a program. When you double-click an executable, Windows creates a process to run that program.\n\n**Process Components**:\n- **Executable Code**: The program's instructions\n- **Memory Space**: Dedicated RAM for the process (virtual memory)\n- **Process ID (PID)**: Unique identifier (e.g., 1234)\n- **Threads**: Execution units within the process\n- **Handles**: References to system resources (files, registry keys)\n- **Security Context**: User account the process runs as\n\n**Viewing Processes**:\n```\nTask Manager → Details tab (shows all processes)\nPowerShell: Get-Process\nCommand line: tasklist\n```\n\n**Critical Windows Processes** (Always running on healthy systems):\n- **System (PID 4)**: Kernel and drivers\n- **smss.exe**: Session Manager Subsystem (starts user sessions)\n- **csrss.exe**: Client/Server Runtime (critical system process)\n- **wininit.exe**: Windows Initialization\n- **services.exe**: Service Control Manager (starts services)\n- **lsass.exe**: Local Security Authority (handles authentication)\n- **svchost.exe**: Generic host for services (many instances normal)\n- **explorer.exe**: Windows Explorer (desktop, taskbar, file explorer)\n\n**Security Note**: Attackers often name malware similar to legitimate processes:\n- Legitimate: **lsass.exe** in C:\\Windows\\System32\n- Malware: **Isass.exe** (capital I not lowercase L) in C:\\Temp\n\n**Parent-Child Relationships**:\nProcesses spawn other processes. Understanding normal parent-child relationships helps detect anomalies.\n\nNormal:\n```\nexplorer.exe → chrome.exe (user clicked Chrome icon)\nservices.exe → svchost.exe (SCM started a service)\ncmd.exe → powershell.exe (user ran PowerShell from cmd)\n```\n\nSuspicious:\n```\nwinword.exe → cmd.exe → powershell.exe\n  (Word document spawning command prompt = likely macro malware)\n\nchrome.exe → wscript.exe → powershell.exe\n  (Browser spawning scripting host = suspicious download execution)\n```\n\n## Windows Services\n\n**What is a Service?**\nA service is a program that runs in the background without user interaction, typically starting at boot.\n\n**Why Services Matter**:\n- Run with high privileges (often SYSTEM)\n- Start automatically (persistence mechanism)\n- Run continuously (always available for attacks)\n- Attackers create malicious services for persistence\n\n**Service Control Manager (SCM)**:\nThe SCM (services.exe) manages all services. It starts, stops, and monitors services.\n\n**Viewing Services**:\n```\nGUI: services.msc\nPowerShell: Get-Service\nCommand line: sc query\n```\n\n**Service Types**:\n- **Automatic**: Start at boot (e.g., Windows Update)\n- **Manual**: Start when needed (e.g., Print Spooler)\n- **Disabled**: Cannot start (security hardening)\n\n**Service Accounts**:\nServices run under specific accounts:\n- **LocalSystem**: Highest privilege, can do almost anything\n- **LocalService**: Lower privilege, minimal network access\n- **NetworkService**: Can access network resources\n- **Custom Account**: Specific user account (often domain accounts)\n\n**Security Implications**:\nVulnerable services are major attack vectors:\n- Unquoted service paths: Service path with spaces, no quotes → DLL hijacking possible\n- Weak permissions: User can modify service → escalate privileges\n- Insecure service configurations: Exposed credentials, excessive privileges\n\n## Windows Registry\n\n**What is the Registry?**\nThe registry is a hierarchical database storing Windows configuration, settings, and metadata. Think of it as Windows' central nervous system.\n\n**Registry Structure**:\n```\nHKEY_LOCAL_MACHINE (HKLM) → System-wide settings\nHKEY_CURRENT_USER (HKCU) → Current user settings\nHKEY_CLASSES_ROOT (HKCR) → File associations\nHKEY_USERS (HKU) → All user profiles\nHKEY_CURRENT_CONFIG (HKCC) → Current hardware profile\n```\n\n**Registry Components**:\n- **Keys**: Like folders (e.g., HKLM\\SOFTWARE\\Microsoft)\n- **Values**: Like files with data (e.g., Version = \"10.0\")\n- **Hives**: Physical files storing registry data\n\n**Critical Registry Locations**:\n\n**Startup Programs**:\n```\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nHKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n  (Programs listed here start at login)\n```\n\n**Services**:\n```\nHKLM\\SYSTEM\\CurrentControlSet\\Services\n  (All services defined here)\n```\n\n**User Accounts**:\n```\nHKLM\\SAM\\SAM\\Domains\\Account\\Users\n  (Password hashes stored here - encrypted)\n```\n\n**Security Tools**:\n```\nHKLM\\SOFTWARE\\Microsoft\\Windows Defender\n  (Antivirus configuration)\n```\n\n**Accessing Registry**:\n```\nGUI: regedit\nPowerShell: Get-ItemProperty, Set-ItemProperty\nCommand line: reg query, reg add\n```\n\n**Registry for Attackers**:\n- **Persistence**: Add malware to Run keys → executes every login\n- **Privilege Escalation**: Modify service configurations\n- **Credential Theft**: Extract password hashes from SAM\n- **Defense Evasion**: Disable security tools via registry\n\n**Registry for Defenders**:\n- **Hardening**: Disable risky features (macros, AutoRun)\n- **Monitoring**: Detect unauthorized registry changes\n- **Forensics**: Analyze registry for IOCs\n\n## Windows File System\n\n**NTFS (New Technology File System)**:\nDefault Windows file system with advanced security features.\n\n**Key Concepts**:\n\n**1. Permissions (ACLs - Access Control Lists)**:\nEvery file/folder has ACL defining who can do what:\n- **Read**: View file contents\n- **Write**: Modify file\n- **Execute**: Run file as program\n- **Modify**: Read + Write + Delete\n- **Full Control**: All permissions + change permissions\n\n**2. Inheritance**:\nPermissions flow from parent folders to child files/folders.\nExample: C:\\Folder (Full Control) → C:\\Folder\\File.txt inherits Full Control\n\n**3. Explicit vs Inherited**:\n- **Explicit**: Directly assigned to object\n- **Inherited**: Received from parent\n\n**4. Ownership**:\nEvery file has an owner (usually creator). Owners can:\n- Change permissions\n- Delete file (even without Delete permission!)\n\n**Critical Folders**:\n```\nC:\\Windows\\System32 → System files (should require admin to modify)\nC:\\Program Files → Installed programs (should require admin)\nC:\\Users\\[Username] → User data (user has Full Control)\nC:\\ProgramData → Application data (varies by app)\nC:\\Temp → Temporary files (often world-writable = risky)\n```\n\n**Viewing Permissions**:\n```\nGUI: Right-click → Properties → Security tab\nCommand line: icacls C:\\path\\to\\file\nPowerShell: Get-Acl C:\\path\\to\\file\n```\n\n**Alternate Data Streams (ADS)**:\nNTFS feature allowing multiple data streams in one file:\n```\nfile.txt → normal content\nfile.txt:hidden → alternate stream (hidden content)\n```\n\nAttackers use ADS to hide malware:\n```\ncmd.exe > notepad.exe:malware.exe\n  (Hides malware in notepad.exe alternate stream)\n```\n\n## Windows Privileges and User Accounts\n\n**User Account Types**:\n- **Standard User**: Limited privileges, can't install software or change system settings\n- **Administrator**: Full system control\n- **SYSTEM**: Highest privilege, even above Administrator (services run as SYSTEM)\n\n**User Account Control (UAC)**:\nSecurity feature requiring confirmation for administrative actions.\n\nWithout UAC:\n```\nAdmin user → All actions execute with admin rights (risky!)\n```\n\nWith UAC:\n```\nAdmin user → Normal actions = standard rights\n           → Admin actions = prompt for elevation\n```\n\n**Security Identifiers (SIDs)**:\nUnique IDs for accounts:\n```\nS-1-5-21-xxxxxxxxxx-xxxxxxxxxx-xxxxxxxxxx-500\n  (500 = Built-in Administrator)\nS-1-5-18 = SYSTEM\nS-1-5-19 = LOCAL SERVICE\nS-1-5-20 = NETWORK SERVICE\n```\n\n**Access Tokens**:\nWhen a user logs in, Windows creates an access token containing:\n- User SID\n- Group memberships\n- Privileges\n\nEvery process runs with a token. This token determines what the process can access.\n\n**Privileges (vs Permissions)**:\n- **Permissions**: Control access to objects (files, registry)\n- **Privileges**: System-wide capabilities\n\nKey Privileges:\n- **SeDebugPrivilege**: Debug programs (extract passwords from memory)\n- **SeBackupPrivilege**: Backup files (bypass file permissions)\n- **SeRestorePrivilege**: Restore files\n- **SeLoadDriverPrivilege**: Load kernel drivers\n- **SeTakeOwnershipPrivilege**: Take ownership of any object\n\nAttackers abuse privileges for:\n- Dumping credentials (SeDebugPrivilege)\n- Reading any file (SeBackupPrivilege)\n- Installing rootkits (SeLoadDriverPrivilege)\n\n## Common Attack Vectors\n\n**Weak Service Permissions**:\n```\nsc query → Find services\nsc qc [ServiceName] → Check configuration\nIf user can modify service → Change service binary path to malware\n  → Service restarts as SYSTEM → Privilege escalation\n```\n\n**Unquoted Service Paths**:\n```\nService path: C:\\Program Files\\My App\\service.exe\nNo quotes, spaces in path\nWindows tries to execute:\n  C:\\Program.exe (attacker places malware here)\n  C:\\Program Files\\My.exe\n  C:\\Program Files\\My App\\service.exe (intended)\n```\n\n**Registry Persistence**:\n```\nAdd malware to:\n  HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nMalware executes every login\n```\n\n**DLL Hijacking**:\n```\nProgram loads library.dll\nWindows searches for library.dll in specific order\nAttacker places malicious library.dll in earlier search location\nProgram loads attacker's DLL instead of legitimate one\n```"
      },
      "ascii_art": "WINDOWS ARCHITECTURE\n\n[USER MODE]\n  Applications\n  Services\n       |\n-------+------- (System calls)\n       |\n[KERNEL MODE]\n  Windows Kernel\n  Drivers\n  Hardware Abstraction Layer\n       |\n  [HARDWARE]",
      "examples": [
        {
          "scenario": "Detecting Malicious Process",
          "explanation": "Process 'svch0st.exe' running from C:\\Temp (note the zero instead of 'o'). Legitimate svchost.exe runs from C:\\Windows\\System32. Parent process is Word (suspicious - documents shouldn't spawn system processes). Network connection to unknown IP. All signs of malware disguised as legitimate process."
        },
        {
          "scenario": "Service-Based Persistence",
          "explanation": "Attacker gains foothold via phishing. Creates Windows service named 'WindowsUpdateHelper' set to Automatic, runs malware.exe as SYSTEM. Service starts at every boot. Even if user deletes malware file, service recreates it. Persistence established through legitimate Windows feature."
        }
      ]
    },
    {
      "block_id": "f3a00d02-c723-485a-93c9-4407481b04f0",
      "type": "real_world",
      "content": {
        "text": "**Real Attack: PrintNightmare (CVE-2021-34527)**\n\nVulnerability in Windows Print Spooler service:\n- Print Spooler runs as SYSTEM (highest privilege)\n- Allowed loading drivers from remote locations\n- Attacker could specify malicious driver\n- Driver loads as SYSTEM → instant SYSTEM access\n\nExploitation:\n1. Attacker connects to victim's Print Spooler service (port 445)\n2. Provides path to malicious driver (on attacker's server)\n3. Spooler downloads and loads driver as SYSTEM\n4. Attacker's code now running as SYSTEM\n5. Complete system compromise\n\nDefense:\n- Disable Print Spooler if not needed (services.msc → Print Spooler → Disabled)\n- Apply Microsoft patch\n- Restrict who can load drivers (registry hardening)\n- Monitor for unusual Print Spooler activity\n\nLesson: Services running as SYSTEM are critical attack targets. Minimize attack surface by disabling unnecessary services.\n\n**Real Forensics: Hunting Persistence**\n\nIncident Response investigating compromised system:\n\n1. Check Run keys:\n```powershell\nGet-ItemProperty 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'\n```\nFound: 'WindowsDefender' = 'C:\\Users\\Public\\svchost.exe'\nSuspicious: Real Defender doesn't use Run key, svchost.exe shouldn't be in Public folder\n\n2. Check Services:\n```powershell\nGet-Service | Where-Object {$_.DisplayName -like '*update*'}\n```\nFound: 'ChromeUpdate' service running unknown executable\nSuspicious: Chrome updates don't use Windows services\n\n3. Check Scheduled Tasks:\n```powershell\nGet-ScheduledTask | Where-Object {$_.State -eq 'Ready'}\n```\nFound: Task running PowerShell script from %TEMP% every hour\n\n4. Check File System:\n```powershell\nGet-ChildItem C:\\Windows\\Temp -Force | Where-Object {!$_.PSIsContainer}\n```\nFound: Multiple suspicious executables in Temp folder\n\nResult: Identified 4 persistence mechanisms. Removed all. Rebuilt system from clean image.\n\nLesson: Attackers use multiple persistence methods. Thorough hunting requires checking all common locations."
      },
      "industry_examples": [
        "WannaCry ransomware exploited SMB vulnerability to spread, then created service for persistence - understanding services was critical to eradication",
        "Solarwinds attack used legitimate Windows processes and services to blend in - defenders needed deep process knowledge to detect anomalies",
        "Many ransomware families modify registry Run keys and create services - standard IR procedure checks these locations"
      ]
    },
    {
      "block_id": "0384ef65-66c4-4a86-bde9-18e00e21db45",
      "type": "explanation",
      "content": {
        "text": "**Pitfall 1: Trusting Process Names**\nSeeing 'svchost.exe' and assuming it's legitimate. Attackers name malware to look legitimate. Solution: Check process path, parent process, digital signature.\n\n**Pitfall 2: Running as Admin by Default**\nDaily use with administrative account. Any malware you run has admin rights too. Solution: Use standard user account for daily work, elevate only when needed.\n\n**Pitfall 3: Not Understanding Service Privileges**\nCreating service without least privilege. Service compromised = SYSTEM access. Solution: Services should run with minimum privileges needed (LocalService, custom account).\n\n**Pitfall 4: Ignoring Registry Changes**\nNot monitoring registry modifications. Attackers add persistence via registry. Solution: Use registry monitoring tools, alert on changes to Run keys and service configurations.\n\n**Pitfall 5: Weak File Permissions**\nProgram Files folder writable by users. Users can replace legitimate programs with malware. Solution: Verify critical folders have proper permissions (admins only).\n\n**Pitfall 6: Too Many Services Running**\nEvery running service is potential attack surface. Disabled services can't be exploited. Solution: Disable unnecessary services (Print Spooler if not printing, Remote Registry, etc.).\n\n**Pitfall 7: Not Checking Parent Processes**\nSeeing cmd.exe running and assuming it's normal. If parent is Word, that's malware. Solution: Always check process tree, understand normal parent-child relationships.\n\n**Pitfall 8: Forgetting About Alternate Data Streams**\nScanning files for malware but missing ADS. Malware hidden in alternate streams goes undetected. Solution: Use tools that detect ADS (dir /r, streams.exe)."
      }
    },
    {
      "block_id": "ab2c7e26-d42b-4fc9-9af8-8d455062305c",
      "type": "explanation",
      "content": {
        "text": "**Immediate Actions**:\n1. Open Task Manager → Details tab, identify the critical Windows processes\n2. Run services.msc, see what services are running on your system\n3. Check registry Run keys: HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n4. Review folder permissions on C:\\Program Files (should require admin)\n5. Verify you're using standard user account for daily work (not administrator)\n\n**This Week - Build Windows Knowledge**:\n1. Learn PowerShell basics: Get-Process, Get-Service, Get-ItemProperty\n2. Practice identifying process parent-child relationships\n3. Study Sysinternals tools: Process Explorer, Autoruns, Process Monitor\n4. Map out critical Windows processes and their normal behavior\n5. Practice checking file permissions with icacls\n\n**This Month - Master Windows Internals**:\n1. Complete TryHackMe Windows Internals rooms\n2. Read Windows Internals book (Part 1 at minimum)\n3. Practice in lab: Create service, modify registry, check permissions\n4. Learn Process Monitor filters for detecting suspicious activity\n5. Study common persistence mechanisms and how to detect them\n6. Complete Windows privilege escalation labs (HackTheBox, TryHackMe)\n\n**Essential Windows Tools**:\n- **Sysinternals Suite** (Process Explorer, Autoruns, Process Monitor, TCPView)\n- **PowerShell** (built-in, essential for scripting)\n- **Event Viewer** (eventvwr.msc - system logs)\n- **Services** (services.msc - service management)\n- **Registry Editor** (regedit - registry access)\n- **icacls** (file permission checking)\n- **tasklist/taskkill** (command-line process management)\n\n**PowerShell Commands to Master**:\n```powershell\n# Processes\nGet-Process\nGet-Process | Where-Object {$_.CPU -gt 100}\nStop-Process -Name notepad\n\n# Services  \nGet-Service\nGet-Service | Where-Object {$_.Status -eq 'Running'}\nStop-Service -Name \"ServiceName\"\n\n# Registry\nGet-ItemProperty 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'\nSet-ItemProperty -Path 'HKCU:\\Path' -Name 'Value' -Value 'Data'\n\n# File Permissions\nGet-Acl C:\\path\\to\\file\nicacls C:\\path\\to\\file\n\n# Searching for files\nGet-ChildItem -Path C:\\ -Recurse -Filter *.exe -ErrorAction SilentlyContinue\n```\n\n**Hardening Checklist**:\n- [ ] Disable unnecessary services (Print Spooler, Remote Registry, etc.)\n- [ ] Enable UAC to highest level\n- [ ] Use standard user account for daily work\n- [ ] Verify Program Files has proper permissions (admin only)\n- [ ] Clean up startup programs (msconfig, Autoruns)\n- [ ] Enable Windows Defender and keep updated\n- [ ] Review scheduled tasks for suspicious entries\n- [ ] Monitor registry Run keys\n- [ ] Enable audit logging for critical events\n- [ ] Keep Windows and applications updated\n\n**Defensive Monitoring**:\nMonitor for:\n- New services created\n- Registry Run key modifications\n- Processes with suspicious parent relationships\n- Unsigned executables in System32\n- Services running from unusual locations\n- Privilege escalation attempts\n- Unusual network connections from system processes\n\n**Offensive Practice** (In Labs Only!):\n- Service privilege escalation (unquoted paths, weak permissions)\n- Registry persistence techniques\n- DLL hijacking\n- Process injection\n- Token impersonation\n- Credential dumping from lsass.exe\n\n**Career Applications**:\n- **System Administrator**: Hardening, service management, troubleshooting\n- **Blue Team**: Detecting malicious processes, hunting persistence, forensics\n- **Red Team**: Privilege escalation, persistence, living-off-the-land\n- **Incident Response**: Analyzing compromised systems, identifying IOCs\n- **Malware Analyst**: Understanding how malware uses Windows features\n\n**Resources**:\n- Windows Internals (Book by Mark Russinovich)\n- Sysinternals Blog (deep technical content)\n- TryHackMe Windows Internals rooms\n- HackTheBox Windows machines\n- SANS Windows Forensics courses\n- Microsoft Documentation (official reference)\n\n**Remember**:\n- Every process has a parent - suspicious parents indicate compromise\n- Services running as SYSTEM are high-value targets\n- Registry is both powerful tool and attack vector\n- File permissions prevent unauthorized modification\n- UAC is your friend, not an annoyance\n- Least privilege principle applies to services AND users\n- Normal process behavior is predictable - anomalies indicate threats\n\nMaster Windows internals and you'll understand 90% of attacks and defenses on the world's most common operating system."
      }
    },
    {
      "type": "video",
      "title": "Video Tutorial: Windows Internals Overview",
      "content": {
        "resources": "Watch this comprehensive video tutorial to reinforce your learning with visual demonstrations and practical examples.\n\n**Video**: [Windows Internals by Pavel Yosifovich](https://www.youtube.com/watch?v=LLQbTF7h9jg)\n\n**What you'll see:**\nWindows architecture, processes, threads, memory management, registry, and system internals for security.\n\n**Duration**: ~45 minutes\n\n**Recommended viewing**: After completing the lesson to solidify understanding.\n\n**Additional Resources:**\n- [Windows Internals Book](https://docs.microsoft.com/en-us/sysinternals/resources/windows-internals)\n- [Sysinternals Tools](https://docs.microsoft.com/en-us/sysinternals/)\n- [Windows Internals Course](https://scorpiosoftware.net/training/)"
      }
    }
  ],
  "estimated_time": 30,
  "learning_objectives": [
    "Understand core concepts",
    "Apply knowledge in real-world scenarios",
    "Identify common security issues",
    "Implement best practices"
  ],
  "post_assessment": [
    {
      "question_id": "q1",
      "type": "multiple_choice",
      "question": "What is the main concept covered in this lesson?",
      "options": [
        "Option A",
        "Option B",
        "Option C",
        "Option D"
      ],
      "correct_answer": 0,
      "explanation": "Review the lesson content for details.",
      "difficulty": 2,
      "points": 10
    },
    {
      "question_id": "q2",
      "type": "multiple_choice",
      "question": "Which best practice should you implement?",
      "options": [
        "Best Practice A",
        "Best Practice B",
        "Best Practice C",
        "Best Practice D"
      ],
      "correct_answer": 0,
      "explanation": "Review the lesson content for details.",
      "difficulty": 2,
      "points": 10
    }
  ],
  "jim_kwik_principles": [
    "active_learning",
    "teach_like_im_10",
    "memory_hooks",
    "connect_to_what_i_know",
    "minimum_effective_dose",
    "meta_learning",
    "reframe_limiting_beliefs",
    "gamify_it",
    "learning_sprint",
    "multiple_memory_pathways"
  ]
}